// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB;
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module['getMemory'] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;
buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 20992;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_iostream_cpp() } });
  

/* memory initializer */ allocate([96,16,0,0,205,45,0,0,0,0,0,0,0,0,0,0,96,16,0,0,99,47,0,0,0,0,0,0,0,0,0,0,96,16,0,0,74,48,0,0,136,3,0,0,0,0,0,0,96,16,0,0,140,48,0,0,152,3,0,0,0,0,0,0,96,16,0,0,210,48,0,0,136,3,0,0,0,0,0,0,96,16,0,0,37,49,0,0,152,3,0,0,0,0,0,0,96,16,0,0,52,51,0,0,152,0,0,0,0,0,0,0,96,16,0,0,163,49,0,0,0,0,0,0,0,0,0,0,96,16,0,0,228,49,0,0,0,0,0,0,0,0,0,0,96,16,0,0,84,51,0,0,168,0,0,0,0,0,0,0,96,16,0,0,162,51,0,0,184,0,0,0,0,0,0,0,96,16,0,0,41,52,0,0,8,0,0,0,0,0,0,0,96,16,0,0,147,55,0,0,0,0,0,0,0,0,0,0,96,16,0,0,222,52,0,0,232,0,0,0,0,0,0,0,56,16,0,0,87,53,0,0,96,16,0,0,171,53,0,0,200,3,0,0,0,0,0,0,136,16,0,0,241,53,0,0,0,0,0,0,1,0,0,0,24,1,0,0,0,0,0,0,136,16,0,0,143,54,0,0,0,0,0,0,1,0,0,0,48,1,0,0,0,0,0,0,56,16,0,0,53,55,0,0,96,16,0,0,229,57,0,0,0,0,0,0,0,0,0,0,96,16,0,0,28,56,0,0,232,0,0,0,0,0,0,0,136,16,0,0,153,56,0,0,0,0,0,0,1,0,0,0,112,1,0,0,0,0,0,0,136,16,0,0,59,57,0,0,0,0,0,0,1,0,0,0,48,1,0,0,0,0,0,0,96,16,0,0,47,60,0,0,0,0,0,0,0,0,0,0,96,16,0,0,114,58,0,0,232,0,0,0,0,0,0,0,136,16,0,0,235,58,0,0,0,0,0,0,1,0,0,0,192,1,0,0,0,0,0,0,136,16,0,0,137,59,0,0,0,0,0,0,1,0,0,0,48,1,0,0,0,0,0,0,96,16,0,0,123,62,0,0,0,0,0,0,0,0,0,0,96,16,0,0,184,60,0,0,232,0,0,0,0,0,0,0,136,16,0,0,51,61,0,0,0,0,0,0,1,0,0,0,16,2,0,0,0,0,0,0,136,16,0,0,211,61,0,0,0,0,0,0,1,0,0,0,48,1,0,0,0,0,0,0,56,16,0,0,6,63,0,0,136,16,0,0,25,63,0,0,0,0,0,0,1,0,0,0,72,2,0,0,0,0,0,0,136,16,0,0,80,63,0,0,0,0,0,0,1,0,0,0,48,1,0,0,0,0,0,0,96,16,0,0,143,63,0,0,112,2,0,0,0,0,0,0,56,16,0,0,156,63,0,0,96,16,0,0,169,63,0,0,112,2,0,0,0,0,0,0,96,16,0,0,185,63,0,0,112,2,0,0,0,0,0,0,56,16,0,0,203,63,0,0,96,16,0,0,216,63,0,0,112,2,0,0,0,0,0,0,96,16,0,0,228,63,0,0,152,2,0,0,0,0,0,0,96,16,0,0,5,64,0,0,176,2,0,0,0,0,0,0,96,16,0,0,75,64,0,0,176,2,0,0,0,0,0,0,96,16,0,0,39,64,0,0,208,2,0,0,0,0,0,0,96,16,0,0,109,64,0,0,192,2,0,0,0,0,0,0,96,16,0,0,146,64,0,0,192,2,0,0,0,0,0,0,96,16,0,0,89,70,0,0,144,3,0,0,0,0,0,0,96,16,0,0,152,70,0,0,144,3,0,0,0,0,0,0,96,16,0,0,176,70,0,0,136,3,0,0,0,0,0,0,96,16,0,0,201,70,0,0,136,3,0,0,0,0,0,0,96,16,0,0,225,70,0,0,8,11,0,0,0,0,0,0,56,16,0,0,251,70,0,0,96,16,0,0,13,71,0,0,96,3,0,0,0,0,0,0,96,16,0,0,55,71,0,0,96,3,0,0,0,0,0,0,56,16,0,0,97,71,0,0,56,16,0,0,146,71,0,0,136,16,0,0,195,71,0,0,0,0,0,0,1,0,0,0,104,3,0,0,3,244,255,255,136,16,0,0,242,71,0,0,0,0,0,0,1,0,0,0,120,3,0,0,3,244,255,255,136,16,0,0,33,72,0,0,0,0,0,0,1,0,0,0,104,3,0,0,3,244,255,255,136,16,0,0,80,72,0,0,0,0,0,0,1,0,0,0,120,3,0,0,3,244,255,255,96,16,0,0,127,72,0,0,32,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,16,0,0,251,72,0,0,0,11,0,0,0,0,0,0,136,16,0,0,17,73,0,0,0,0,0,0,2,0,0,0,16,4,0,0,2,0,0,0,48,10,0,0,2,0,0,0,136,16,0,0,35,73,0,0,0,0,0,0,2,0,0,0,16,4,0,0,2,0,0,0,56,10,0,0,2,0,0,0,136,16,0,0,69,73,0,0,0,0,0,0,2,0,0,0,16,4,0,0,2,0,0,0,56,10,0,0,2,0,0,0,136,16,0,0,104,73,0,0,0,0,0,0,2,0,0,0,16,4,0,0,2,0,0,0,56,10,0,0,2,0,0,0,96,16,0,0,139,73,0,0,128,4,0,0,0,0,0,0,96,16,0,0,173,73,0,0,128,4,0,0,0,0,0,0,136,16,0,0,208,73,0,0,0,0,0,0,2,0,0,0,16,4,0,0,2,0,0,0,56,10,0,0,2,0,0,0,96,16,0,0,242,73,0,0,16,4,0,0,0,0,0,0,96,16,0,0,8,74,0,0,16,4,0,0,0,0,0,0,96,16,0,0,28,74,0,0,16,4,0,0,0,0,0,0,136,16,0,0,48,74,0,0,0,0,0,0,2,0,0,0,16,4,0,0,2,0,0,0,48,10,0,0,2,0,0,0,96,16,0,0,66,74,0,0,16,4,0,0,0,0,0,0,96,16,0,0,87,74,0,0,16,4,0,0,0,0,0,0,136,16,0,0,108,74,0,0,0,0,0,0,2,0,0,0,16,4,0,0,2,0,0,0,64,10,0,0,0,0,0,0,136,16,0,0,176,74,0,0,0,0,0,0,2,0,0,0,16,4,0,0,2,0,0,0,88,10,0,0,0,0,0,0,136,16,0,0,244,74,0,0,0,0,0,0,2,0,0,0,16,4,0,0,2,0,0,0,112,10,0,0,0,0,0,0,136,16,0,0,56,75,0,0,0,0,0,0,2,0,0,0,16,4,0,0,2,0,0,0,136,10,0,0,0,0,0,0,136,16,0,0,124,75,0,0,0,0,0,0,3,0,0,0,16,4,0,0,2,0,0,0,160,10,0,0,2,0,0,0,168,10,0,0,0,8,0,0,136,16,0,0,193,75,0,0,0,0,0,0,3,0,0,0,16,4,0,0,2,0,0,0,160,10,0,0,2,0,0,0,176,10,0,0,0,8,0,0,136,16,0,0,6,76,0,0,0,0,0,0,2,0,0,0,16,4,0,0,2,0,0,0,184,10,0,0,0,8,0,0,136,16,0,0,75,76,0,0,0,0,0,0,2,0,0,0,16,4,0,0,2,0,0,0,184,10,0,0,0,8,0,0,136,16,0,0,144,76,0,0,0,0,0,0,2,0,0,0,16,4,0,0,2,0,0,0,192,10,0,0,2,0,0,0,136,16,0,0,172,76,0,0,0,0,0,0,2,0,0,0,16,4,0,0,2,0,0,0,192,10,0,0,2,0,0,0,136,16,0,0,200,76,0,0,0,0,0,0,2,0,0,0,16,4,0,0,2,0,0,0,192,10,0,0,2,0,0,0,136,16,0,0,228,76,0,0,0,0,0,0,2,0,0,0,16,4,0,0,2,0,0,0,192,10,0,0,2,0,0,0,136,16,0,0,0,77,0,0,0,0,0,0,2,0,0,0,16,4,0,0,2,0,0,0,200,10,0,0,0,0,0,0,136,16,0,0,70,77,0,0,0,0,0,0,2,0,0,0,16,4,0,0,2,0,0,0,208,10,0,0,0,0,0,0,136,16,0,0,140,77,0,0,0,0,0,0,2,0,0,0,16,4,0,0,2,0,0,0,216,10,0,0,0,0,0,0,136,16,0,0,210,77,0,0,0,0,0,0,2,0,0,0,16,4,0,0,2,0,0,0,224,10,0,0,0,0,0,0,136,16,0,0,24,78,0,0,0,0,0,0,2,0,0,0,16,4,0,0,2,0,0,0,232,10,0,0,2,0,0,0,136,16,0,0,45,78,0,0,0,0,0,0,2,0,0,0,16,4,0,0,2,0,0,0,232,10,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,16,0,0,137,81,0,0,56,16,0,0,114,81,0,0,136,16,0,0,92,81,0,0,0,0,0,0,1,0,0,0,248,10,0,0,0,0,0,0,136,16,0,0,45,81,0,0,0,0,0,0,1,0,0,0,248,10,0,0,0,0,0,0,136,16,0,0,23,81,0,0,0,0,0,0,1,0,0,0,240,10,0,0,0,0,0,0,136,16,0,0,232,80,0,0,0,0,0,0,1,0,0,0,240,10,0,0,0,0,0,0,56,16,0,0,213,80,0,0,56,16,0,0,179,80,0,0,56,16,0,0,145,80,0,0,56,16,0,0,124,80,0,0,56,16,0,0,103,80,0,0,56,16,0,0,78,80,0,0,56,16,0,0,53,80,0,0,56,16,0,0,28,80,0,0,56,16,0,0,3,80,0,0,56,16,0,0,235,79,0,0,56,16,0,0,254,80,0,0,56,16,0,0,67,81,0,0,56,16,0,0,158,81,0,0,96,16,0,0,183,81,0,0,136,2,0,0,0,0,0,0,56,16,0,0,206,81,0,0,96,16,0,0,231,81,0,0,24,11,0,0,0,0,0,0,0,0,0,0,8,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,108,0,0,0,0,0,0,0,88,0,0,0,7,0,0,0,8,0,0,0,148,255,255,255,148,255,255,255,88,0,0,0,9,0,0,0,10,0,0,0,92,11,0,0,116,12,0,0,136,12,0,0,112,11,0,0,60,0,0,0,0,0,0,0,56,0,0,0,11,0,0,0,12,0,0,0,196,255,255,255,196,255,255,255,56,0,0,0,13,0,0,0,14,0,0,0,148,11,0,0,12,12,0,0,32,12,0,0,168,11,0,0,0,0,0,0,40,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,60,0,0,0,0,0,0,0,152,3,0,0,29,0,0,0,30,0,0,0,196,255,255,255,196,255,255,255,152,3,0,0,31,0,0,0,32,0,0,0,0,0,0,0,72,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,22,0,0,0,23,0,0,0,40,0,0,0,25,0,0,0,41,0,0,0,27,0,0,0,42,0,0,0,108,0,0,0,0,0,0,0,152,3,0,0,29,0,0,0,30,0,0,0,148,255,255,255,148,255,255,255,152,3,0,0,31,0,0,0,32,0,0,0,0,0,0,0,104,0,0,0,43,0,0,0,44,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,45,0,0,0,46,0,0,0,0,0,0,0,152,0,0,0,47,0,0,0,48,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,45,0,0,0,46,0,0,0,0,0,0,0,168,0,0,0,49,0,0,0,50,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,45,0,0,0,46,0,0,0,0,0,0,0,184,0,0,0,51,0,0,0,52,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,200,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,56,0,0,0,0,0,0,0,240,0,0,0,70,0,0,0,71,0,0,0,200,255,255,255,200,255,255,255,240,0,0,0,72,0,0,0,73,0,0,0,128,13,0,0,184,13,0,0,204,13,0,0,148,13,0,0,56,0,0,0,0,0,0,0,200,3,0,0,74,0,0,0,75,0,0,0,200,255,255,255,200,255,255,255,200,3,0,0,76,0,0,0,77,0,0,0,0,0,0,0,56,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,62,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,0,0,0,0,136,1,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,62,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,0,0,0,0,216,1,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,62,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,0,0,0,0,24,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,129,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,133,0,0,0,134,0,0,0,62,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,139,0,0,0,140,0,0,0,141,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,142,0,0,0,0,0,0,0,96,2,0,0,143,0,0,0,144,0,0,0,145,0,0,0,0,0,0,0,0,0,0,0,120,2,0,0,146,0,0,0,147,0,0,0,148,0,0,0,0,0,0,0,136,2,0,0,149,0,0,0,150,0,0,0,151,0,0,0,0,0,0,0,160,2,0,0,152,0,0,0,153,0,0,0,154,0,0,0,0,0,0,0,192,2,0,0,155,0,0,0,156,0,0,0,157,0,0,0,158,0,0,0,159,0,0,0,160,0,0,0,161,0,0,0,162,0,0,0,0,0,0,0,240,2,0,0,155,0,0,0,163,0,0,0,157,0,0,0,158,0,0,0,159,0,0,0,164,0,0,0,165,0,0,0,166,0,0,0,0,0,0,0,0,3,0,0,155,0,0,0,167,0,0,0,157,0,0,0,158,0,0,0,159,0,0,0,168,0,0,0,169,0,0,0,170,0,0,0,0,0,0,0,0,0,0,0,38,67,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([16,3,0,0,172,0,0,0,173,0,0,0,174,0,0,0,175,0,0,0,176,0,0,0,177,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,182,0,0,0,183,0,0,0,184,0,0,0,185,0,0,0,0,0,0,0,32,3,0,0,172,0,0,0,186,0,0,0,187,0,0,0,175,0,0,0,176,0,0,0,177,0,0,0,188,0,0,0,179,0,0,0,180,0,0,0,189,0,0,0,190,0,0,0,191,0,0,0,192,0,0,0,193,0,0,0,0,0,0,0,48,3,0,0,194,0,0,0,195,0,0,0,196,0,0,0,18,0,0,0,197,0,0,0,198,0,0,0,199,0,0,0,22,0,0,0,23,0,0,0,200,0,0,0,25,0,0,0,201,0,0,0,202,0,0,0,203,0,0,0,0,0,0,0,64,3,0,0,194,0,0,0,204,0,0,0,205,0,0,0,18,0,0,0,197,0,0,0,198,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,206,0,0,0,207,0,0,0,208,0,0,0,27,0,0,0,209,0,0,0,0,0,0,0,104,3,0,0,210,0,0,0,211,0,0,0,0,0,0,0,136,3,0,0,194,0,0,0,212,0,0,0,17,0,0,0,18,0,0,0,197,0,0,0,198,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,200,0,0,0,25,0,0,0,201,0,0,0,27,0,0,0,209,0,0,0,0,0,0,0,144,3,0,0,172,0,0,0,213,0,0,0,214,0,0,0,175,0,0,0,176,0,0,0,177,0,0,0,188,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,182,0,0,0,183,0,0,0,192,0,0,0,193,0,0,0,8,0,0,0,0,0,0,0,152,3,0,0,29,0,0,0,30,0,0,0,248,255,255,255,248,255,255,255,152,3,0,0,31,0,0,0,32,0,0,0,8,0,0,0,0,0,0,0,176,3,0,0,215,0,0,0,216,0,0,0,248,255,255,255,248,255,255,255,176,3,0,0,217,0,0,0,218,0,0,0,4,0,0,0,0,0,0,0,200,3,0,0,74,0,0,0,75,0,0,0,252,255,255,255,252,255,255,255,200,3,0,0,76,0,0,0,77,0,0,0,4,0,0,0,0,0,0,0,224,3,0,0,219,0,0,0,220,0,0,0,252,255,255,255,252,255,255,255,224,3,0,0,221,0,0,0,222,0,0,0,0,0,0,0,80,3,0,0,223,0,0,0,224,0,0,0,151,0,0,0,0,0,0,0,96,3,0,0,225,0,0,0,226,0,0,0,0,0,0,0,248,3,0,0,227,0,0,0,228,0,0,0,229,0,0,0,230,0,0,0,231,0,0,0,232,0,0,0,233,0,0,0,0,0,0,0,0,0,0,0,240,4,0,0,234,0,0,0,235,0,0,0,236,0,0,0,237,0,0,0,238,0,0,0,239,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,240,0,0,0,241,0,0,0,236,0,0,0,242,0,0,0,243,0,0,0,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,5,0,0,245,0,0,0,246,0,0,0,236,0,0,0,247,0,0,0,248,0,0,0,249,0,0,0,250,0,0,0,251,0,0,0,252,0,0,0,253,0,0,0,254,0,0,0,255,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,5,0,0,2,1,0,0,3,1,0,0,236,0,0,0,4,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,8,1,0,0,9,1,0,0,10,1,0,0,11,1,0,0,12,1,0,0,13,1,0,0,14,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,5,0,0,15,1,0,0,16,1,0,0,236,0,0,0,17,1,0,0,18,1,0,0,19,1,0,0,20,1,0,0,21,1,0,0,22,1,0,0,23,1,0,0,24,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,5,0,0,25,1,0,0,26,1,0,0,236,0,0,0,27,1,0,0,28,1,0,0,29,1,0,0,30,1,0,0,31,1,0,0,32,1,0,0,33,1,0,0,34,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,5,0,0,35,1,0,0,36,1,0,0,236,0,0,0,37,1,0,0,38,1,0,0,39,1,0,0,40,1,0,0,41,1,0,0,42,1,0,0,43,1,0,0,248,255,255,255,208,5,0,0,44,1,0,0,45,1,0,0,46,1,0,0,47,1,0,0,48,1,0,0,49,1,0,0,50,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,5,0,0,51,1,0,0,52,1,0,0,236,0,0,0,53,1,0,0,54,1,0,0,55,1,0,0,56,1,0,0,57,1,0,0,58,1,0,0,59,1,0,0,248,255,255,255,248,5,0,0,60,1,0,0,61,1,0,0,62,1,0,0,63,1,0,0,64,1,0,0,65,1,0,0,66,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,6,0,0,67,1,0,0,68,1,0,0,236,0,0,0,69,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,6,0,0,70,1,0,0,71,1,0,0,236,0,0,0,72,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,6,0,0,73,1,0,0,74,1,0,0,236,0,0,0,75,1,0,0,76,1,0,0,77,1,0,0,78,1,0,0,79,1,0,0,80,1,0,0,81,1,0,0,82,1,0,0,83,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,6,0,0,84,1,0,0,85,1,0,0,236,0,0,0,86,1,0,0,87,1,0,0,88,1,0,0,89,1,0,0,90,1,0,0,91,1,0,0,92,1,0,0,93,1,0,0,94,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,6,0,0,95,1,0,0,96,1,0,0,236,0,0,0,97,1,0,0,98,1,0,0,99,1,0,0,100,1,0,0,101,1,0,0,102,1,0,0,103,1,0,0,104,1,0,0,105,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,6,0,0,106,1,0,0,107,1,0,0,236,0,0,0,108,1,0,0,109,1,0,0,110,1,0,0,111,1,0,0,112,1,0,0,113,1,0,0,114,1,0,0,115,1,0,0,116,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,6,0,0,117,1,0,0,118,1,0,0,236,0,0,0,119,1,0,0,120,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,121,1,0,0,122,1,0,0,236,0,0,0,123,1,0,0,124,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,7,0,0,125,1,0,0,126,1,0,0,236,0,0,0,127,1,0,0,128,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,7,0,0,129,1,0,0,130,1,0,0,236,0,0,0,131,1,0,0,132,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,7,0,0,133,1,0,0,134,1,0,0,236,0,0,0,135,1,0,0,136,1,0,0,137,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,7,0,0,138,1,0,0,139,1,0,0,236,0,0,0,140,1,0,0,141,1,0,0,142,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,4,0,0,143,1,0,0,144,1,0,0,236,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,5,0,0,145,1,0,0,146,1,0,0,236,0,0,0,147,1,0,0,148,1,0,0,149,1,0,0,150,1,0,0,151,1,0,0,152,1,0,0,153,1,0,0,154,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,4,0,0,155,1,0,0,156,1,0,0,236,0,0,0,157,1,0,0,158,1,0,0,159,1,0,0,160,1,0,0,161,1,0,0,162,1,0,0,163,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,5,0,0,164,1,0,0,165,1,0,0,236,0,0,0,166,1,0,0,167,1,0,0,168,1,0,0,169,1,0,0,170,1,0,0,0,0,0,0,64,5,0,0,171,1,0,0,172,1,0,0,236,0,0,0,173,1,0,0,174,1,0,0,175,1,0,0,176,1,0,0,177,1,0,0,0,0,0,0,16,4,0,0,178,1,0,0,179,1,0,0,236,0,0,0,0,0,0,0,32,4,0,0,178,1,0,0,180,1,0,0,236,0,0,0,181,1,0,0,182,1,0,0,183,1,0,0,184,1,0,0,185,1,0,0,186,1,0,0,187,1,0,0,188,1,0,0,189,1,0,0,190,1,0,0,191,1,0,0,192,1,0,0,0,0,0,0,64,4,0,0,178,1,0,0,193,1,0,0,236,0,0,0,194,1,0,0,195,1,0,0,196,1,0,0,197,1,0,0,198,1,0,0,199,1,0,0,200,1,0,0,0,0,0,0,96,4,0,0,178,1,0,0,201,1,0,0,236,0,0,0,202,1,0,0,203,1,0,0,204,1,0,0,205,1,0,0,206,1,0,0,207,1,0,0,208,1,0,0,0,0,0,0,128,4,0,0,178,1,0,0,209,1,0,0,236,0,0,0,210,1,0,0,211,1,0,0,212,1,0,0,213,1,0,0,214,1,0,0,215,1,0,0,216,1,0,0,0,0,0,0,160,4,0,0,178,1,0,0,217,1,0,0,236,0,0,0,210,1,0,0,211,1,0,0,212,1,0,0,213,1,0,0,214,1,0,0,215,1,0,0,216,1,0,0,0,0,0,0,176,4,0,0,178,1,0,0,218,1,0,0,236,0,0,0,210,1,0,0,211,1,0,0,212,1,0,0,213,1,0,0,214,1,0,0,215,1,0,0,216,1,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,11,0,0,219,1,0,0,220,1,0,0,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,111,109,112,117,116,101,100,32,100,105,115,116,97,110,99,101,115,32,117,110,116,105,108,32,110,111,100,101,32,0,105,32,32,32,32,32,32,114,32,32,32,32,32,32,116,104,101,116,97,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,32,32,32,32,0,85,115,97,103,101,58,32,0,32,102,105,108,101,110,97,109,101,32,115,111,117,114,99,101,95,105,100,120,32,91,115,116,111,112,100,105,115,116,93,32,91,101,112,115,105,108,111,110,93,0,69,120,97,109,112,108,101,115,58,32,0,32,32,0,67,111,109,112,117,116,101,32,68,71,80,67,32,102,111,114,32,97,110,32,101,110,116,105,114,101,32,109,101,115,104,32,119,105,116,104,32,115,111,117,114,99,101,32,97,116,32,110,111,100,101,32,48,58,0,32,104,97,116,54,46,111,98,106,32,48,0,67,111,109,112,117,116,101,32,68,71,80,67,32,102,111,114,32,102,111,114,32,110,111,100,101,115,32,119,105,116,104,105,110,32,103,101,111,100,101,115,105,99,32,114,97,100,105,117,115,32,49,46,53,32,102,114,111,109,32,116,104,101,32,115,111,117,114,99,101,32,97,116,32,110,111,100,101,32,48,58,0,32,104,97,116,54,46,111,98,106,32,48,32,49,46,53,0,67,111,109,112,117,116,101,32,68,71,80,67,32,102,111,114,32,102,111,114,32,110,111,100,101,115,32,119,105,116,104,105,110,32,103,101,111,100,101,115,105,99,32,114,97,100,105,117,115,32,49,46,53,32,102,114,111,109,32,116,104,101,32,115,111,117,114,99,101,32,97,116,32,110,111,100,101,32,48,44,32,119,105,116,104,32,101,112,115,105,108,111,110,32,49,101,45,56,58,0,32,104,97,116,54,46,111,98,106,32,48,32,49,46,53,32,49,101,45,56,0,78,56,79,112,101,110,77,101,115,104,49,54,80,111,108,121,67,111,110,110,101,99,116,105,118,105,116,121,69,0,101,100,103,101,115,91,49,93,32,61,61,32,99,117,114,114,0,47,85,115,101,114,115,47,114,121,111,115,117,122,117,107,105,47,68,114,111,112,98,111,120,47,80,105,101,100,109,111,110,116,47,67,111,100,101,47,112,105,101,100,109,111,110,116,47,101,110,103,105,110,101,47,100,103,112,99,47,115,114,99,47,71,101,110,101,114,97,116,111,114,46,104,0,114,117,110,0,115,105,122,101,95,116,40,95,105,100,120,41,32,60,32,100,97,116,97,95,46,115,105,122,101,40,41,0,47,117,115,114,47,108,111,99,97,108,47,111,112,116,47,111,112,101,110,45,109,101,115,104,47,105,110,99,108,117,100,101,47,79,112,101,110,77,101,115,104,47,67,111,114,101,47,85,116,105,108,115,47,80,114,111,112,101,114,116,121,46,104,104,0,111,112,101,114,97,116,111,114,91,93,0,95,104,46,105,100,120,40,41,32,62,61,32,48,32,38,38,32,95,104,46,105,100,120,40,41,32,60,32,40,105,110,116,41,112,114,111,112,101,114,116,105,101,115,95,46,115,105,122,101,40,41,0,47,117,115,114,47,108,111,99,97,108,47,111,112,116,47,111,112,101,110,45,109,101,115,104,47,105,110,99,108,117,100,101,47,79,112,101,110,77,101,115,104,47,67,111,114,101,47,85,116,105,108,115,47,80,114,111,112,101,114,116,121,67,111,110,116,97,105,110,101,114,46,104,104,0,112,114,111,112,101,114,116,121,0,112,114,111,112,101,114,116,105,101,115,95,91,95,104,46,105,100,120,40,41,93,32,33,61,32,78,85,76,76,0,112,32,33,61,32,78,85,76,76,0,78,56,79,112,101,110,77,101,115,104,57,80,114,111,112,101,114,116,121,84,73,78,52,68,71,80,67,55,86,101,99,116,111,114,51,73,100,69,69,69,69,0,105,115,95,118,97,108,105,100,95,104,97,110,100,108,101,40,95,104,101,104,41,0,47,117,115,114,47,108,111,99,97,108,47,111,112,116,47,111,112,101,110,45,109,101,115,104,47,105,110,99,108,117,100,101,47,79,112,101,110,77,101,115,104,47,67,111,114,101,47,77,101,115,104,47,65,114,114,97,121,75,101,114,110,101,108,46,104,104,0,104,97,108,102,101,100,103,101,0,105,115,95,118,97,108,105,100,95,104,97,110,100,108,101,40,95,118,104,41,0,118,101,114,116,101,120,0,37,115,58,32,37,100,32,118,101,114,116,105,99,101,115,32,97,110,100,32,37,100,32,102,97,99,101,115,32,40,109,111,115,116,32,99,111,109,112,108,101,120,32,102,97,99,101,32,104,97,115,32,37,100,32,110,111,100,101,115,41,10,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,105,110,103,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,57,98,97,115,105,99,95,105,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,102,105,108,101,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,119,0,97,0,114,0,114,43,0,119,43,0,97,43,0,119,98,0,97,98,0,114,98,0,114,43,98,0,119,43,98,0,97,43,98,0,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,102,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,95,105,60,68,73,77,0,47,117,115,114,47,108,111,99,97,108,47,111,112,116,47,111,112,101,110,45,109,101,115,104,47,105,110,99,108,117,100,101,47,79,112,101,110,77,101,115,104,47,67,111,114,101,47,71,101,111,109,101,116,114,121,47,86,101,99,116,111,114,84,95,105,110,99,46,104,104,0,78,56,79,112,101,110,77,101,115,104,57,80,114,111,112,101,114,116,121,84,73,78,83,95,55,86,101,99,116,111,114,84,73,102,76,105,51,69,69,69,69,69,0,95,105,60,61,49,0,104,97,108,102,101,100,103,101,95,104,97,110,100,108,101,0,78,56,79,112,101,110,77,101,115,104,57,80,114,111,112,101,114,116,121,84,73,78,83,95,49,48,65,116,116,114,105,98,117,116,101,115,49,48,83,116,97,116,117,115,73,110,102,111,69,69,69,0,116,104,105,115,45,62,104,97,108,102,101,100,103,101,95,104,97,110,100,108,101,40,95,102,104,41,46,105,115,95,118,97,108,105,100,40,41,0,47,117,115,114,47,108,111,99,97,108,47,111,112,116,47,111,112,101,110,45,109,101,115,104,47,105,110,99,108,117,100,101,47,79,112,101,110,77,101,115,104,47,67,111,114,101,47,77,101,115,104,47,80,111,108,121,77,101,115,104,84,46,99,99,0,99,97,108,99,95,102,97,99,101,95,110,111,114,109,97,108,0,116,104,105,115,45,62,109,101,115,104,95,0,47,117,115,114,47,108,111,99,97,108,47,111,112,116,47,111,112,101,110,45,109,101,115,104,47,105,110,99,108,117,100,101,47,79,112,101,110,77,101,115,104,47,67,111,114,101,47,77,101,115,104,47,67,105,114,99,117,108,97,116,111,114,115,84,46,104,104,0,111,112,101,114,97,116,111,114,43,43,0,116,104,105,115,45,62,104,101,104,95,46,105,115,95,118,97,108,105,100,40,41,0,111,112,101,114,97,116,111,114,42,0,114,101,115,46,105,115,95,118,97,108,105,100,40,41,0,105,115,95,118,97,108,105,100,95,104,97,110,100,108,101,40,95,102,104,41,0,102,97,99,101,0,78,52,68,71,80,67,54,77,101,115,104,79,77,73,78,83,95,55,86,101,99,116,111,114,51,73,100,69,69,69,69,0,78,56,79,112,101,110,77,101,115,104,50,49,80,111,108,121,77,101,115,104,95,65,114,114,97,121,75,101,114,110,101,108,84,73,78,52,68,71,80,67,49,52,79,112,101,110,77,101,115,104,84,114,97,105,116,115,73,78,83,49,95,55,86,101,99,116,111,114,51,73,100,69,69,69,69,69,69,0,78,56,79,112,101,110,77,101,115,104,57,80,111,108,121,77,101,115,104,84,73,78,83,95,49,51,65,116,116,114,105,98,75,101,114,110,101,108,84,73,78,83,95,49,53,70,105,110,97,108,77,101,115,104,73,116,101,109,115,84,73,78,52,68,71,80,67,49,52,79,112,101,110,77,101,115,104,84,114,97,105,116,115,73,78,83,51,95,55,86,101,99,116,111,114,51,73,100,69,69,69,69,76,98,48,69,69,69,78,83,95,49,54,80,111,108,121,67,111,110,110,101,99,116,105,118,105,116,121,69,69,69,69,69,0,78,56,79,112,101,110,77,101,115,104,49,51,65,116,116,114,105,98,75,101,114,110,101,108,84,73,78,83,95,49,53,70,105,110,97,108,77,101,115,104,73,116,101,109,115,84,73,78,52,68,71,80,67,49,52,79,112,101,110,77,101,115,104,84,114,97,105,116,115,73,78,83,50,95,55,86,101,99,116,111,114,51,73,100,69,69,69,69,76,98,48,69,69,69,78,83,95,49,54,80,111,108,121,67,111,110,110,101,99,116,105,118,105,116,121,69,69,69,0,118,58,112,111,105,110,116,115,0,60,118,112,114,111,112,62,0,60,102,112,114,111,112,62,0,60,104,112,114,111,112,62,0,60,101,112,114,111,112,62,0,84,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,58,32,0,78,56,79,112,101,110,77,101,115,104,49,51,68,101,102,97,117,108,116,84,114,97,105,116,115,53,69,100,103,101,84,73,78,83,95,49,53,70,105,110,97,108,77,101,115,104,73,116,101,109,115,84,73,78,52,68,71,80,67,49,52,79,112,101,110,77,101,115,104,84,114,97,105,116,115,73,78,83,51,95,55,86,101,99,116,111,114,51,73,100,69,69,69,69,76,98,48,69,69,55,73,84,114,97,105,116,115,69,78,83,56,95,52,82,101,102,115,69,69,69,0,78,56,79,112,101,110,77,101,115,104,49,53,70,105,110,97,108,77,101,115,104,73,116,101,109,115,84,73,78,52,68,71,80,67,49,52,79,112,101,110,77,101,115,104,84,114,97,105,116,115,73,78,83,49,95,55,86,101,99,116,111,114,51,73,100,69,69,69,69,76,98,48,69,69,55,73,84,114,97,105,116,115,69,0,78,83,116,51,95,95,49,49,57,98,97,115,105,99,95,111,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,78,56,79,112,101,110,77,101,115,104,49,51,68,101,102,97,117,108,116,84,114,97,105,116,115,53,69,100,103,101,84,73,78,83,49,95,49,53,70,105,110,97,108,77,101,115,104,73,116,101,109,115,84,73,78,52,68,71,80,67,49,52,79,112,101,110,77,101,115,104,84,114,97,105,116,115,73,78,83,53,95,55,86,101,99,116,111,114,51,73,100,69,69,69,69,76,98,48,69,69,55,73,84,114,97,105,116,115,69,78,83,65,95,52,82,101,102,115,69,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,68,95,69,69,69,69,0,78,83,116,51,95,95,49,49,51,95,95,118,101,99,116,111,114,95,98,97,115,101,73,78,56,79,112,101,110,77,101,115,104,49,51,68,101,102,97,117,108,116,84,114,97,105,116,115,53,69,100,103,101,84,73,78,83,49,95,49,53,70,105,110,97,108,77,101,115,104,73,116,101,109,115,84,73,78,52,68,71,80,67,49,52,79,112,101,110,77,101,115,104,84,114,97,105,116,115,73,78,83,53,95,55,86,101,99,116,111,114,51,73,100,69,69,69,69,76,98,48,69,69,55,73,84,114,97,105,116,115,69,78,83,65,95,52,82,101,102,115,69,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,68,95,69,69,69,69,0,78,83,116,51,95,95,49,50,48,95,95,118,101,99,116,111,114,95,98,97,115,101,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,87,97,114,110,105,110,103,33,32,84,121,112,101,32,111,102,32,112,114,111,112,101,114,116,121,32,118,97,108,117,101,32,105,115,32,110,111,116,32,98,105,110,97,114,121,32,115,116,111,114,97,98,108,101,33,10,0,78,56,79,112,101,110,77,101,115,104,57,80,114,111,112,101,114,116,121,84,73,78,83,95,49,51,68,101,102,97,117,108,116,84,114,97,105,116,115,53,69,100,103,101,84,73,78,83,95,49,53,70,105,110,97,108,77,101,115,104,73,116,101,109,115,84,73,78,52,68,71,80,67,49,52,79,112,101,110,77,101,115,104,84,114,97,105,116,115,73,78,83,52,95,55,86,101,99,116,111,114,51,73,100,69,69,69,69,76,98,48,69,69,55,73,84,114,97,105,116,115,69,78,83,57,95,52,82,101,102,115,69,69,69,69,69,0,78,56,79,112,101,110,77,101,115,104,49,51,68,101,102,97,117,108,116,84,114,97,105,116,115,57,72,97,108,102,101,100,103,101,84,73,78,83,95,49,53,70,105,110,97,108,77,101,115,104,73,116,101,109,115,84,73,78,52,68,71,80,67,49,52,79,112,101,110,77,101,115,104,84,114,97,105,116,115,73,78,83,51,95,55,86,101,99,116,111,114,51,73,100,69,69,69,69,76,98,48,69,69,55,73,84,114,97,105,116,115,69,78,83,56,95,52,82,101,102,115,69,69,69,0,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,78,56,79,112,101,110,77,101,115,104,49,51,68,101,102,97,117,108,116,84,114,97,105,116,115,57,72,97,108,102,101,100,103,101,84,73,78,83,49,95,49,53,70,105,110,97,108,77,101,115,104,73,116,101,109,115,84,73,78,52,68,71,80,67,49,52,79,112,101,110,77,101,115,104,84,114,97,105,116,115,73,78,83,53,95,55,86,101,99,116,111,114,51,73,100,69,69,69,69,76,98,48,69,69,55,73,84,114,97,105,116,115,69,78,83,65,95,52,82,101,102,115,69,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,68,95,69,69,69,69,0,78,83,116,51,95,95,49,49,51,95,95,118,101,99,116,111,114,95,98,97,115,101,73,78,56,79,112,101,110,77,101,115,104,49,51,68,101,102,97,117,108,116,84,114,97,105,116,115,57,72,97,108,102,101,100,103,101,84,73,78,83,49,95,49,53,70,105,110,97,108,77,101,115,104,73,116,101,109,115,84,73,78,52,68,71,80,67,49,52,79,112,101,110,77,101,115,104,84,114,97,105,116,115,73,78,83,53,95,55,86,101,99,116,111,114,51,73,100,69,69,69,69,76,98,48,69,69,55,73,84,114,97,105,116,115,69,78,83,65,95,52,82,101,102,115,69,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,68,95,69,69,69,69,0,78,56,79,112,101,110,77,101,115,104,57,80,114,111,112,101,114,116,121,84,73,78,83,95,49,51,68,101,102,97,117,108,116,84,114,97,105,116,115,57,72,97,108,102,101,100,103,101,84,73,78,83,95,49,53,70,105,110,97,108,77,101,115,104,73,116,101,109,115,84,73,78,52,68,71,80,67,49,52,79,112,101,110,77,101,115,104,84,114,97,105,116,115,73,78,83,52,95,55,86,101,99,116,111,114,51,73,100,69,69,69,69,76,98,48,69,69,55,73,84,114,97,105,116,115,69,78,83,57,95,52,82,101,102,115,69,69,69,69,69,0,78,56,79,112,101,110,77,101,115,104,49,51,68,101,102,97,117,108,116,84,114,97,105,116,115,53,70,97,99,101,84,73,78,83,95,49,53,70,105,110,97,108,77,101,115,104,73,116,101,109,115,84,73,78,52,68,71,80,67,49,52,79,112,101,110,77,101,115,104,84,114,97,105,116,115,73,78,83,51,95,55,86,101,99,116,111,114,51,73,100,69,69,69,69,76,98,48,69,69,55,73,84,114,97,105,116,115,69,78,83,56,95,52,82,101,102,115,69,69,69,0,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,78,56,79,112,101,110,77,101,115,104,49,51,68,101,102,97,117,108,116,84,114,97,105,116,115,53,70,97,99,101,84,73,78,83,49,95,49,53,70,105,110,97,108,77,101,115,104,73,116,101,109,115,84,73,78,52,68,71,80,67,49,52,79,112,101,110,77,101,115,104,84,114,97,105,116,115,73,78,83,53,95,55,86,101,99,116,111,114,51,73,100,69,69,69,69,76,98,48,69,69,55,73,84,114,97,105,116,115,69,78,83,65,95,52,82,101,102,115,69,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,68,95,69,69,69,69,0,78,83,116,51,95,95,49,49,51,95,95,118,101,99,116,111,114,95,98,97,115,101,73,78,56,79,112,101,110,77,101,115,104,49,51,68,101,102,97,117,108,116,84,114,97,105,116,115,53,70,97,99,101,84,73,78,83,49,95,49,53,70,105,110,97,108,77,101,115,104,73,116,101,109,115,84,73,78,52,68,71,80,67,49,52,79,112,101,110,77,101,115,104,84,114,97,105,116,115,73,78,83,53,95,55,86,101,99,116,111,114,51,73,100,69,69,69,69,76,98,48,69,69,55,73,84,114,97,105,116,115,69,78,83,65,95,52,82,101,102,115,69,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,68,95,69,69,69,69,0,78,56,79,112,101,110,77,101,115,104,57,80,114,111,112,101,114,116,121,84,73,78,83,95,49,51,68,101,102,97,117,108,116,84,114,97,105,116,115,53,70,97,99,101,84,73,78,83,95,49,53,70,105,110,97,108,77,101,115,104,73,116,101,109,115,84,73,78,52,68,71,80,67,49,52,79,112,101,110,77,101,115,104,84,114,97,105,116,115,73,78,83,52,95,55,86,101,99,116,111,114,51,73,100,69,69,69,69,76,98,48,69,69,55,73,84,114,97,105,116,115,69,78,83,57,95,52,82,101,102,115,69,69,69,69,69,0,78,56,79,112,101,110,77,101,115,104,49,51,68,101,102,97,117,108,116,84,114,97,105,116,115,55,86,101,114,116,101,120,84,73,78,83,95,49,53,70,105,110,97,108,77,101,115,104,73,116,101,109,115,84,73,78,52,68,71,80,67,49,52,79,112,101,110,77,101,115,104,84,114,97,105,116,115,73,78,83,51,95,55,86,101,99,116,111,114,51,73,100,69,69,69,69,76,98,48,69,69,55,73,84,114,97,105,116,115,69,78,83,56,95,52,82,101,102,115,69,69,69,0,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,78,56,79,112,101,110,77,101,115,104,49,51,68,101,102,97,117,108,116,84,114,97,105,116,115,55,86,101,114,116,101,120,84,73,78,83,49,95,49,53,70,105,110,97,108,77,101,115,104,73,116,101,109,115,84,73,78,52,68,71,80,67,49,52,79,112,101,110,77,101,115,104,84,114,97,105,116,115,73,78,83,53,95,55,86,101,99,116,111,114,51,73,100,69,69,69,69,76,98,48,69,69,55,73,84,114,97,105,116,115,69,78,83,65,95,52,82,101,102,115,69,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,68,95,69,69,69,69,0,78,83,116,51,95,95,49,49,51,95,95,118,101,99,116,111,114,95,98,97,115,101,73,78,56,79,112,101,110,77,101,115,104,49,51,68,101,102,97,117,108,116,84,114,97,105,116,115,55,86,101,114,116,101,120,84,73,78,83,49,95,49,53,70,105,110,97,108,77,101,115,104,73,116,101,109,115,84,73,78,52,68,71,80,67,49,52,79,112,101,110,77,101,115,104,84,114,97,105,116,115,73,78,83,53,95,55,86,101,99,116,111,114,51,73,100,69,69,69,69,76,98,48,69,69,55,73,84,114,97,105,116,115,69,78,83,65,95,52,82,101,102,115,69,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,68,95,69,69,69,69,0,78,56,79,112,101,110,77,101,115,104,57,80,114,111,112,101,114,116,121,84,73,78,83,95,49,51,68,101,102,97,117,108,116,84,114,97,105,116,115,55,86,101,114,116,101,120,84,73,78,83,95,49,53,70,105,110,97,108,77,101,115,104,73,116,101,109,115,84,73,78,52,68,71,80,67,49,52,79,112,101,110,77,101,115,104,84,114,97,105,116,115,73,78,83,52,95,55,86,101,99,116,111,114,51,73,100,69,69,69,69,76,98,48,69,69,55,73,84,114,97,105,116,115,69,78,83,57,95,52,82,101,102,115,69,69,69,69,69,0,78,52,68,71,80,67,55,86,101,99,116,111,114,51,73,100,69,69,0,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,78,52,68,71,80,67,55,86,101,99,116,111,114,51,73,100,69,69,78,83,95,57,97,108], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+5944);
/* memory initializer */ allocate([108,111,99,97,116,111,114,73,83,51,95,69,69,69,69,0,78,83,116,51,95,95,49,49,51,95,95,118,101,99,116,111,114,95,98,97,115,101,73,78,52,68,71,80,67,55,86,101,99,116,111,114,51,73,100,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,51,95,69,69,69,69,0,83,116,57,98,97,100,95,97,108,108,111,99,0,83,116,57,101,120,99,101,112,116,105,111,110,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,83,116,57,116,121,112,101,95,105,110,102,111,0,83,116,56,98,97,100,95,99,97,115,116,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,47,85,115,101,114,115,47,114,121,111,115,117,122,117,107,105,47,46,101,109,115,100,107,47,101,109,115,99,114,105,112,116,101,110,47,49,46,51,52,46,49,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,115,116,114,105,110,103,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,47,85,115,101,114,115,47,114,121,111,115,117,122,117,107,105,47,46,101,109,115,100,107,47,101,109,115,99,114,105,112,116,101,110,47,49,46,51,52,46,49,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,118,101,99,116,111,114,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,105,110,102,105,110,105,116,121,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,105,111,115,116,114,101,97,109,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,37,112,0,67,0,37,0,0,0,0,0,108,0,108,108,0,0,76,0,37,112,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,37,72,58,37,77,37,72,58,37,77,58,37,83,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,48,49,50,51,52,53,54,55,56,57,0,37,76,102,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,48,49,50,51,52,53,54,55,56,57,0,37,46,48,76,102,0,116,114,117,101,0,102,97,108,115,101,0,83,117,110,100,97,121,0,77,111,110,100,97,121,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,84,104,117,114,115,100,97,121,0,70,114,105,100,97,121,0,83,97,116,117,114,100,97,121,0,83,117,110,0,77,111,110,0,84,117,101,0,87,101,100,0,84,104,117,0,70,114,105,0,83,97,116,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,77,97,114,99,104,0,65,112,114,105,108,0,77,97,121,0,74,117,110,101,0,74,117,108,121,0,65,117,103,117,115,116,0,83,101,112,116,101,109,98,101,114,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,68,101,99,101,109,98,101,114,0,74,97,110,0,70,101,98,0,77,97,114,0,65,112,114,0,74,117,110,0,74,117,108,0,65,117,103,0,83,101,112,0,79,99,116,0,78,111,118,0,68,101,99,0,65,77,0,80,77,0,37,109,47,37,100,47,37,121,0,37,72,58,37,77,58,37,83,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,37,73,58,37,77,58,37,83,32,37,112,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,58,32,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+16184);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      return _close(fd);
    }

  var _emscripten_resume=true;

  var _emscripten_landingpad=true;

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  
  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      assert((varargs & 3) === 0);
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }


  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _emscripten_postinvoke=true;

  function __ZN8OpenMesh11ArrayKernelC2Ev() {
  Module['printErr']('missing function: _ZN8OpenMesh11ArrayKernelC2Ev'); abort(-1);
  }

  
  var PTHREAD_SPECIFIC={};
  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }


  function ___gxx_personality_v0() {
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }


  var _BDtoILow=true;

  var _BDtoIHigh=true;

  function _pthread_cond_broadcast() {
      return 0;
    }

  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function _pthread_mutex_unlock() {}

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _pthread_mutex_lock() {}

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function ___cxa_guard_abort() {}

  
  var LOCALE={curr:0,check:function (locale) {
        if (locale) locale = Pointer_stringify(locale);
        return locale === 'C' || locale === 'POSIX' || !locale;
      }};
  
  function _calloc(n, s) {
      var ret = _malloc(n*s);
      _memset(ret, 0, n*s);
      return ret;
    }function _newlocale(mask, locale, base) {
      if (!LOCALE.check(locale)) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      if (!base) base = _calloc(1, 4);
      return base;
    }

   
  Module["_memmove"] = _memmove;

  var _emscripten_preinvoke=true;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = EXCEPTIONS.caught.pop();
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

  function ___cxa_guard_release() {}

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  function _uselocale(locale) {
      var old = LOCALE.curr;
      if (locale) LOCALE.curr = locale;
      return old;
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function ___errno_location() {
      return ___errno_state;
    }

   
  Module["_memset"] = _memset;

  
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }function _ftello() {
  return _ftell.apply(null, arguments)
  }

  var _BItoD=true;

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }

  function __ZNK8OpenMesh11ArrayKernel6handleERKNS_10ArrayItems6VertexE() {
  Module['printErr']('missing function: _ZNK8OpenMesh11ArrayKernel6handleERKNS_10ArrayItems6VertexE'); abort(-1);
  }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  function __ZNK8OpenMesh11ArrayKernel15is_valid_handleENS_14HalfedgeHandleE() {
  Module['printErr']('missing function: _ZNK8OpenMesh11ArrayKernel15is_valid_handleENS_14HalfedgeHandleE'); abort(-1);
  }

  function _pthread_cond_wait() {
      return 0;
    }

  function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  var _fabs=Math_abs;


  
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getc() {
  return _fgetc.apply(null, arguments)
  }

  var _sqrt=Math_sqrt;

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _freelocale(locale) {
      _free(locale);
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function __ZNK8OpenMesh11ArrayKernel15is_valid_handleENS_10FaceHandleE() {
  Module['printErr']('missing function: _ZNK8OpenMesh11ArrayKernel15is_valid_handleENS_10FaceHandleE'); abort(-1);
  }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  function __ZN8OpenMesh11ArrayKernelD2Ev() {
  Module['printErr']('missing function: _ZN8OpenMesh11ArrayKernelD2Ev'); abort(-1);
  }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function __ZNK8OpenMesh12BaseProperty5statsERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE() {
  Module['printErr']('missing function: _ZNK8OpenMesh12BaseProperty5statsERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE'); abort(-1);
  }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function __ZN8OpenMesh16PolyConnectivity8add_faceERKNSt3__16vectorINS_12VertexHandleENS1_9allocatorIS3_EEEE() {
  Module['printErr']('missing function: _ZN8OpenMesh16PolyConnectivity8add_faceERKNSt3__16vectorINS_12VertexHandleENS1_9allocatorIS3_EEEE'); abort(-1);
  }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function __Z5omerrv() {
  Module['printErr']('missing function: _Z5omerrv'); abort(-1);
  }

  var _cos=Math_cos;

  function _fseeko() {
  return _fseek.apply(null, arguments)
  }


  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

  function __ZNK8OpenMesh11ArrayKernel15is_valid_handleENS_12VertexHandleE() {
  Module['printErr']('missing function: _ZNK8OpenMesh11ArrayKernel15is_valid_handleENS_12VertexHandleE'); abort(-1);
  }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var _acos=Math_acos;

  function __ZTIN8OpenMesh11ArrayKernelE() {
  Module['printErr']('missing function: _ZTIN8OpenMesh11ArrayKernelE'); abort(-1);
  }

  function __ZTIN8OpenMesh12BasePropertyE() {
  Module['printErr']('missing function: _ZTIN8OpenMesh12BasePropertyE'); abort(-1);
  }

  function __ZTVN8OpenMesh12BasePropertyE() {
  Module['printErr']('missing function: _ZTVN8OpenMesh12BasePropertyE'); abort(-1);
  }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
__ATINIT__.push(function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viddd(x) { Module["printErr"]("Invalid function pointer called with signature 'viddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iid(x) { Module["printErr"]("Invalid function pointer called with signature 'iid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dii(x) { Module["printErr"]("Invalid function pointer called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiid(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iid(index,a1,a2) {
  try {
    return Module["dynCall_iid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiid(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiid"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiiiiid": nullFunc_iiiiiid, "nullFunc_vid": nullFunc_vid, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_viddd": nullFunc_viddd, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iiid": nullFunc_iiid, "nullFunc_iid": nullFunc_iid, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_dii": nullFunc_dii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiid": nullFunc_viiid, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiiiiid": invoke_iiiiiid, "invoke_vid": invoke_vid, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_viddd": invoke_viddd, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iiid": invoke_iiid, "invoke_iid": invoke_iid, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_diii": invoke_diii, "invoke_dii": invoke_dii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viiid": invoke_viiid, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiiid": invoke_iiiiid, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_fread": _fread, "___cxa_guard_acquire": ___cxa_guard_acquire, "___assert_fail": ___assert_fail, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___ctype_toupper_loc": ___ctype_toupper_loc, "__addDays": __addDays, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sysconf": _sysconf, "_close": _close, "_cos": _cos, "_write": _write, "__isLeapYear": __isLeapYear, "_ftell": _ftell, "___cxa_atexit": ___cxa_atexit, "___cxa_rethrow": ___cxa_rethrow, "_catclose": _catclose, "__ZNK8OpenMesh11ArrayKernel15is_valid_handleENS_12VertexHandleE": __ZNK8OpenMesh11ArrayKernel15is_valid_handleENS_12VertexHandleE, "__ZNK8OpenMesh12BaseProperty5statsERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE": __ZNK8OpenMesh12BaseProperty5statsERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE, "__Z5omerrv": __Z5omerrv, "_send": _send, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_guard_release": ___cxa_guard_release, "_strerror_r": _strerror_r, "___setErrNo": ___setErrNo, "_newlocale": _newlocale, "___resumeException": ___resumeException, "_freelocale": _freelocale, "___cxa_call_unexpected": ___cxa_call_unexpected, "_pthread_once": _pthread_once, "_printf": _printf, "_read": _read, "_fwrite": _fwrite, "_time": _time, "_pthread_mutex_lock": _pthread_mutex_lock, "_catopen": _catopen, "_exit": _exit, "___cxa_guard_abort": ___cxa_guard_abort, "___ctype_b_loc": ___ctype_b_loc, "_lseek": _lseek, "_vfprintf": _vfprintf, "___cxa_allocate_exception": ___cxa_allocate_exception, "_pwrite": _pwrite, "__ZN8OpenMesh11ArrayKernelC2Ev": __ZN8OpenMesh11ArrayKernelC2Ev, "_open": _open, "_uselocale": _uselocale, "___cxa_end_catch": ___cxa_end_catch, "__ZNK8OpenMesh11ArrayKernel15is_valid_handleENS_14HalfedgeHandleE": __ZNK8OpenMesh11ArrayKernel15is_valid_handleENS_14HalfedgeHandleE, "_strftime": _strftime, "_fseek": _fseek, "_fclose": _fclose, "_pthread_key_create": _pthread_key_create, "__ZN8OpenMesh16PolyConnectivity8add_faceERKNSt3__16vectorINS_12VertexHandleENS1_9allocatorIS3_EEEE": __ZN8OpenMesh16PolyConnectivity8add_faceERKNSt3__16vectorINS_12VertexHandleENS1_9allocatorIS3_EEEE, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_recv": _recv, "_fgetc": _fgetc, "_abort": _abort, "_fopen": _fopen, "_pthread_getspecific": _pthread_getspecific, "_pthread_cond_wait": _pthread_cond_wait, "_acos": _acos, "__ZN8OpenMesh11ArrayKernelD2Ev": __ZN8OpenMesh11ArrayKernelD2Ev, "___gxx_personality_v0": ___gxx_personality_v0, "_ungetc": _ungetc, "_calloc": _calloc, "_fflush": _fflush, "_strftime_l": _strftime_l, "_fprintf": _fprintf, "__reallyNegative": __reallyNegative, "_catgets": _catgets, "_fileno": _fileno, "__exit": __exit, "__arraySum": __arraySum, "_fseeko": _fseeko, "___ctype_tolower_loc": ___ctype_tolower_loc, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pread": _pread, "_mkport": _mkport, "_getc": _getc, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_pthread_setspecific": _pthread_setspecific, "_ftello": _ftello, "_fputc": _fputc, "___cxa_throw": ___cxa_throw, "__ZNK8OpenMesh11ArrayKernel15is_valid_handleENS_10FaceHandleE": __ZNK8OpenMesh11ArrayKernel15is_valid_handleENS_10FaceHandleE, "_strerror": _strerror, "__formatString": __formatString, "_atexit": _atexit, "_sqrt": _sqrt, "__ZNK8OpenMesh11ArrayKernel6handleERKNS_10ArrayItems6VertexE": __ZNK8OpenMesh11ArrayKernel6handleERKNS_10ArrayItems6VertexE, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "__ZTIN8OpenMesh11ArrayKernelE": __ZTIN8OpenMesh11ArrayKernelE, "__ZTIN8OpenMesh12BasePropertyE": __ZTIN8OpenMesh12BasePropertyE, "__ZTVN8OpenMesh12BasePropertyE": __ZTVN8OpenMesh12BasePropertyE, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var __ZTIN8OpenMesh11ArrayKernelE=env.__ZTIN8OpenMesh11ArrayKernelE|0;
  var __ZTIN8OpenMesh12BasePropertyE=env.__ZTIN8OpenMesh12BasePropertyE|0;
  var __ZTVN8OpenMesh12BasePropertyE=env.__ZTVN8OpenMesh12BasePropertyE|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_iiiiiid=env.nullFunc_iiiiiid;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viddd=env.nullFunc_viddd;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iiid=env.nullFunc_iiid;
  var nullFunc_iid=env.nullFunc_iid;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_dii=env.nullFunc_dii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiid=env.nullFunc_viiid;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_iiiiid=env.nullFunc_iiiiid;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var invoke_vid=env.invoke_vid;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viddd=env.invoke_viddd;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iiid=env.invoke_iiid;
  var invoke_iid=env.invoke_iid;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_dii=env.invoke_dii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiid=env.invoke_viiid;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiiid=env.invoke_iiiiid;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _fread=env._fread;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var ___assert_fail=env.___assert_fail;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var __addDays=env.__addDays;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var _cos=env._cos;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var _ftell=env._ftell;
  var ___cxa_atexit=env.___cxa_atexit;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var _catclose=env._catclose;
  var __ZNK8OpenMesh11ArrayKernel15is_valid_handleENS_12VertexHandleE=env.__ZNK8OpenMesh11ArrayKernel15is_valid_handleENS_12VertexHandleE;
  var __ZNK8OpenMesh12BaseProperty5statsERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE=env.__ZNK8OpenMesh12BaseProperty5statsERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE;
  var __Z5omerrv=env.__Z5omerrv;
  var _send=env._send;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _strerror_r=env._strerror_r;
  var ___setErrNo=env.___setErrNo;
  var _newlocale=env._newlocale;
  var ___resumeException=env.___resumeException;
  var _freelocale=env._freelocale;
  var ___cxa_call_unexpected=env.___cxa_call_unexpected;
  var _pthread_once=env._pthread_once;
  var _printf=env._printf;
  var _read=env._read;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _catopen=env._catopen;
  var _exit=env._exit;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var _lseek=env._lseek;
  var _vfprintf=env._vfprintf;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _pwrite=env._pwrite;
  var __ZN8OpenMesh11ArrayKernelC2Ev=env.__ZN8OpenMesh11ArrayKernelC2Ev;
  var _open=env._open;
  var _uselocale=env._uselocale;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var __ZNK8OpenMesh11ArrayKernel15is_valid_handleENS_14HalfedgeHandleE=env.__ZNK8OpenMesh11ArrayKernel15is_valid_handleENS_14HalfedgeHandleE;
  var _strftime=env._strftime;
  var _fseek=env._fseek;
  var _fclose=env._fclose;
  var _pthread_key_create=env._pthread_key_create;
  var __ZN8OpenMesh16PolyConnectivity8add_faceERKNSt3__16vectorINS_12VertexHandleENS1_9allocatorIS3_EEEE=env.__ZN8OpenMesh16PolyConnectivity8add_faceERKNSt3__16vectorINS_12VertexHandleENS1_9allocatorIS3_EEEE;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _recv=env._recv;
  var _fgetc=env._fgetc;
  var _abort=env._abort;
  var _fopen=env._fopen;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _acos=env._acos;
  var __ZN8OpenMesh11ArrayKernelD2Ev=env.__ZN8OpenMesh11ArrayKernelD2Ev;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _ungetc=env._ungetc;
  var _calloc=env._calloc;
  var _fflush=env._fflush;
  var _strftime_l=env._strftime_l;
  var _fprintf=env._fprintf;
  var __reallyNegative=env.__reallyNegative;
  var _catgets=env._catgets;
  var _fileno=env._fileno;
  var __exit=env.__exit;
  var __arraySum=env.__arraySum;
  var _fseeko=env._fseeko;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var _getc=env._getc;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var _pthread_setspecific=env._pthread_setspecific;
  var _ftello=env._ftello;
  var _fputc=env._fputc;
  var ___cxa_throw=env.___cxa_throw;
  var __ZNK8OpenMesh11ArrayKernel15is_valid_handleENS_10FaceHandleE=env.__ZNK8OpenMesh11ArrayKernel15is_valid_handleENS_10FaceHandleE;
  var _strerror=env._strerror;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var _sqrt=env._sqrt;
  var __ZNK8OpenMesh11ArrayKernel6handleERKNS_10ArrayItems6VertexE=env.__ZNK8OpenMesh11ArrayKernel6handleERKNS_10ArrayItems6VertexE;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $epsilon = 0.0, $filename = 0, $i = 0, $last_node = 0, $my_dgpc = 0, $my_mesh = 0, $r = 0.0, $source_idx = 0, $stopdist = 0.0, $theta = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $my_mesh = sp + 144|0;
 $my_dgpc = sp + 16|0;
 $10 = 0;
 $11 = $argc;
 $12 = $argv;
 $15 = $11;
 $16 = ($15|0)<(3);
 if ($16) {
  $17 = $12;
  $18 = HEAP32[$17>>2]|0;
  __Z11usage_errorPKc($18);
 }
 $19 = $12;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $filename = $21;
 $22 = $12;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_atoi($24)|0);
 $source_idx = $25;
 $stopdist = -1.0;
 $26 = $11;
 $27 = ($26|0)>(3);
 if ($27) {
  $28 = $12;
  $29 = ((($28)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (+_atof($30));
  $stopdist = $31;
 }
 $epsilon = -1.0;
 $32 = $11;
 $33 = ($32|0)>(4);
 if ($33) {
  $34 = $12;
  $35 = ((($34)) + 16|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (+_atof($36));
  $epsilon = $37;
 }
 $38 = $11;
 $39 = ($38|0)>(5);
 if ($39) {
  $40 = $12;
  $41 = HEAP32[$40>>2]|0;
  __Z11usage_errorPKc($41);
 }
 __ZN4DGPC6MeshOMINS_7Vector3IdEEEC2Ev($my_mesh);
 $42 = $filename;
 __THREW__ = 0;
 (invoke_iii(477,($my_mesh|0),($42|0))|0);
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 L13: do {
  if ($44) {
   label = 13;
  } else {
   __THREW__ = 0;
   invoke_vii(478,($my_dgpc|0),($my_mesh|0));
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   if ($46) {
    label = 13;
   } else {
    $47 = $stopdist;
    $48 = $47 > 0.0;
    if ($48) {
     $49 = $stopdist;
     __THREW__ = 0;
     invoke_vid(479,($my_dgpc|0),(+$49));
     $50 = __THREW__; __THREW__ = 0;
     $51 = $50&1;
     if (!($51)) {
      label = 15;
     }
    } else {
     label = 15;
    }
    L18: do {
     if ((label|0) == 15) {
      $58 = $epsilon;
      $59 = $58 > 0.0;
      if ($59) {
       $60 = $epsilon;
       __THREW__ = 0;
       invoke_vid(481,($my_dgpc|0),(+$60));
       $61 = __THREW__; __THREW__ = 0;
       $62 = $61&1;
       if ($62) {
        break;
       }
      }
      $63 = $source_idx;
      __THREW__ = 0;
      invoke_vii(482,($my_dgpc|0),($63|0));
      $64 = __THREW__; __THREW__ = 0;
      $65 = $64&1;
      if (!($65)) {
       __THREW__ = 0;
       $66 = (invoke_ii(483,($my_dgpc|0))|0);
       $67 = __THREW__; __THREW__ = 0;
       $68 = $67&1;
       if (!($68)) {
        $last_node = $66;
        __THREW__ = 0;
        $69 = (invoke_iii(484,(5004|0),(11300|0))|0);
        $70 = __THREW__; __THREW__ = 0;
        $71 = $70&1;
        if (!($71)) {
         $72 = $last_node;
         __THREW__ = 0;
         $73 = (invoke_iii(485,($69|0),($72|0))|0);
         $74 = __THREW__; __THREW__ = 0;
         $75 = $74&1;
         if (!($75)) {
          $8 = $73;
          $9 = 486;
          $76 = $8;
          $77 = $9;
          __THREW__ = 0;
          (invoke_ii($77|0,($76|0))|0);
          $78 = __THREW__; __THREW__ = 0;
          $79 = $78&1;
          if (!($79)) {
           $6 = 5004;
           $7 = 486;
           $80 = $6;
           $81 = $7;
           __THREW__ = 0;
           (invoke_ii($81|0,($80|0))|0);
           $82 = __THREW__; __THREW__ = 0;
           $83 = $82&1;
           if (!($83)) {
            __THREW__ = 0;
            $84 = (invoke_iii(484,(5004|0),(11331|0))|0);
            $85 = __THREW__; __THREW__ = 0;
            $86 = $85&1;
            if (!($86)) {
             $4 = $84;
             $5 = 486;
             $87 = $4;
             $88 = $5;
             __THREW__ = 0;
             (invoke_ii($88|0,($87|0))|0);
             $89 = __THREW__; __THREW__ = 0;
             $90 = $89&1;
             if (!($90)) {
              __THREW__ = 0;
              $91 = (invoke_iii(484,(5004|0),(11351|0))|0);
              $92 = __THREW__; __THREW__ = 0;
              $93 = $92&1;
              if (!($93)) {
               $2 = $91;
               $3 = 486;
               $94 = $2;
               $95 = $3;
               __THREW__ = 0;
               (invoke_ii($95|0,($94|0))|0);
               $96 = __THREW__; __THREW__ = 0;
               $97 = $96&1;
               if (!($97)) {
                $i = 0;
                while(1) {
                 $98 = $i;
                 $99 = HEAP32[$my_mesh>>2]|0;
                 $100 = ((($99)) + 8|0);
                 $101 = HEAP32[$100>>2]|0;
                 __THREW__ = 0;
                 $102 = (invoke_ii($101|0,($my_mesh|0))|0);
                 $103 = __THREW__; __THREW__ = 0;
                 $104 = $103&1;
                 if ($104) {
                  break L18;
                 }
                 $105 = ($98>>>0)<($102>>>0);
                 if (!($105)) {
                  break;
                 }
                 $106 = $i;
                 __THREW__ = 0;
                 $107 = (+invoke_dii(487,($my_dgpc|0),($106|0)));
                 $108 = __THREW__; __THREW__ = 0;
                 $109 = $108&1;
                 if ($109) {
                  break L18;
                 }
                 $r = $107;
                 $110 = $r;
                 $111 = $110 < 1.7976931348623157E+308;
                 if ($111) {
                  $112 = $i;
                  __THREW__ = 0;
                  $113 = (+invoke_dii(488,($my_dgpc|0),($112|0)));
                  $114 = __THREW__; __THREW__ = 0;
                  $115 = $114&1;
                  if ($115) {
                   break L18;
                  }
                  $theta = $113;
                  $116 = $i;
                  __THREW__ = 0;
                  $117 = (invoke_iii(485,(5004|0),($116|0))|0);
                  $118 = __THREW__; __THREW__ = 0;
                  $119 = $118&1;
                  if ($119) {
                   break L18;
                  }
                  __THREW__ = 0;
                  $120 = (invoke_iii(484,($117|0),(11371|0))|0);
                  $121 = __THREW__; __THREW__ = 0;
                  $122 = $121&1;
                  if ($122) {
                   break L18;
                  }
                  $123 = $r;
                  __THREW__ = 0;
                  $124 = (invoke_iid(489,($120|0),(+$123))|0);
                  $125 = __THREW__; __THREW__ = 0;
                  $126 = $125&1;
                  if ($126) {
                   break L18;
                  }
                  __THREW__ = 0;
                  $127 = (invoke_iii(484,($124|0),(11371|0))|0);
                  $128 = __THREW__; __THREW__ = 0;
                  $129 = $128&1;
                  if ($129) {
                   break L18;
                  }
                  $130 = $theta;
                  __THREW__ = 0;
                  $131 = (invoke_iid(489,($127|0),(+$130))|0);
                  $132 = __THREW__; __THREW__ = 0;
                  $133 = $132&1;
                  if ($133) {
                   break L18;
                  }
                  $0 = $131;
                  $1 = 486;
                  $134 = $0;
                  $135 = $1;
                  __THREW__ = 0;
                  (invoke_ii($135|0,($134|0))|0);
                  $136 = __THREW__; __THREW__ = 0;
                  $137 = $136&1;
                  if ($137) {
                   break L18;
                  }
                 }
                 $138 = $i;
                 $139 = (($138) + 1)|0;
                 $i = $139;
                }
                __THREW__ = 0;
                invoke_vi(480,($my_dgpc|0));
                $140 = __THREW__; __THREW__ = 0;
                $141 = $140&1;
                if ($141) {
                 label = 13;
                 break L13;
                }
                __ZN4DGPC6MeshOMINS_7Vector3IdEEED2Ev($my_mesh);
                $142 = $10;
                STACKTOP = sp;return ($142|0);
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $54 = ___cxa_find_matching_catch()|0;
    $55 = tempRet0;
    $13 = $54;
    $14 = $55;
    __THREW__ = 0;
    invoke_vi(480,($my_dgpc|0));
    $56 = __THREW__; __THREW__ = 0;
    $57 = $56&1;
    if ($57) {
     $147 = ___cxa_find_matching_catch(0|0)|0;
     $148 = tempRet0;
     ___clang_call_terminate($147);
     // unreachable;
    }
   }
  }
 } while(0);
 if ((label|0) == 13) {
  $52 = ___cxa_find_matching_catch()|0;
  $53 = tempRet0;
  $13 = $52;
  $14 = $53;
 }
 __THREW__ = 0;
 invoke_vi(43,($my_mesh|0));
 $143 = __THREW__; __THREW__ = 0;
 $144 = $143&1;
 if ($144) {
  $147 = ___cxa_find_matching_catch(0|0)|0;
  $148 = tempRet0;
  ___clang_call_terminate($147);
  // unreachable;
 } else {
  $145 = $13;
  $146 = $14;
  ___resumeException($145|0);
  // unreachable;
 }
 return (0)|0;
}
function __Z11usage_errorPKc($progname) {
 $progname = $progname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $26 = $progname;
 $27 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(5004,11376)|0);
 $28 = $26;
 $29 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($27,$28)|0);
 $30 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($29,11384)|0);
 $24 = $30;
 $25 = 486;
 $31 = $24;
 $32 = $25;
 (FUNCTION_TABLE_ii[$32 & 1023]($31)|0);
 $22 = 5004;
 $23 = 486;
 $33 = $22;
 $34 = $23;
 (FUNCTION_TABLE_ii[$34 & 1023]($33)|0);
 $35 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(5004,11426)|0);
 $20 = $35;
 $21 = 486;
 $36 = $20;
 $37 = $21;
 (FUNCTION_TABLE_ii[$37 & 1023]($36)|0);
 $18 = 5004;
 $19 = 486;
 $38 = $18;
 $39 = $19;
 (FUNCTION_TABLE_ii[$39 & 1023]($38)|0);
 $40 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(5004,11437)|0);
 $41 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($40,11440)|0);
 $16 = $41;
 $17 = 486;
 $42 = $16;
 $43 = $17;
 (FUNCTION_TABLE_ii[$43 & 1023]($42)|0);
 $44 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(5004,11437)|0);
 $45 = $26;
 $46 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($44,$45)|0);
 $47 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($46,11495)|0);
 $14 = $47;
 $15 = 486;
 $48 = $14;
 $49 = $15;
 (FUNCTION_TABLE_ii[$49 & 1023]($48)|0);
 $12 = 5004;
 $13 = 486;
 $50 = $12;
 $51 = $13;
 (FUNCTION_TABLE_ii[$51 & 1023]($50)|0);
 $52 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(5004,11437)|0);
 $53 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($52,11507)|0);
 $10 = $53;
 $11 = 486;
 $54 = $10;
 $55 = $11;
 (FUNCTION_TABLE_ii[$55 & 1023]($54)|0);
 $56 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(5004,11437)|0);
 $57 = $26;
 $58 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($56,$57)|0);
 $59 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($58,11588)|0);
 $8 = $59;
 $9 = 486;
 $60 = $8;
 $61 = $9;
 (FUNCTION_TABLE_ii[$61 & 1023]($60)|0);
 $6 = 5004;
 $7 = 486;
 $62 = $6;
 $63 = $7;
 (FUNCTION_TABLE_ii[$63 & 1023]($62)|0);
 $64 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(5004,11437)|0);
 $65 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($64,11604)|0);
 $4 = $65;
 $5 = 486;
 $66 = $4;
 $67 = $5;
 (FUNCTION_TABLE_ii[$67 & 1023]($66)|0);
 $68 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(5004,11437)|0);
 $69 = $26;
 $70 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($68,$69)|0);
 $71 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($70,11704)|0);
 $2 = $71;
 $3 = 486;
 $72 = $2;
 $73 = $3;
 (FUNCTION_TABLE_ii[$73 & 1023]($72)|0);
 $0 = 5004;
 $1 = 486;
 $74 = $0;
 $75 = $1;
 (FUNCTION_TABLE_ii[$75 & 1023]($74)|0);
 _exit(-1);
 // unreachable;
}
function __ZN4DGPC6MeshOMINS_7Vector3IdEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8OpenMesh21PolyMesh_ArrayKernelTIN4DGPC14OpenMeshTraitsINS1_7Vector3IdEEEEEC2Ev($1);
 $2 = 3224;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN4DGPC6MeshOMINS_7Vector3IdEEE7openOBJEPKc($this,$filename) {
 $this = $this|0;
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0.0, $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__a$i$i$i$i = 0, $__annotator$i = 0, $__i$i$i = 0, $__i$i$i$i$i = 0, $eh$lpad$body$i$index5Z2D = 0, $eh$lpad$body$i$indexZ2D = 0;
 var $eh$lpad$body$index10Z2D = 0, $eh$lpad$body$indexZ2D = 0, $face = 0, $i = 0, $in = 0, $line = 0, $maxpoly = 0, $next = 0, $nf = 0, $nv = 0, $poly = 0, $t = 0, $t1 = 0, $v = 0, $v0 = 0, $v1 = 0, $v2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1184|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 48|0;
 $__annotator$i = sp + 1169|0;
 $24 = sp + 1064|0;
 $28 = sp + 1048|0;
 $32 = sp + 1032|0;
 $37 = sp + 1012|0;
 $40 = sp + 1000|0;
 $43 = sp + 988|0;
 $44 = sp + 984|0;
 $45 = sp + 980|0;
 $141 = sp + 596|0;
 $in = sp + 284|0;
 $line = sp + 272|0;
 $i = sp + 120|0;
 $173 = sp + 108|0;
 $t = sp + 1166|0;
 $v0 = sp + 40|0;
 $v1 = sp + 32|0;
 $v2 = sp + 24|0;
 $174 = sp;
 $175 = sp + 104|0;
 $t1 = sp + 1165|0;
 $face = sp + 92|0;
 $v = sp + 88|0;
 $176 = sp + 84|0;
 $next = sp + 1164|0;
 $177 = sp + 80|0;
 $169 = $this;
 $170 = $filename;
 $179 = $169;
 $180 = $170;
 $164 = $in;
 $165 = $180;
 $166 = 8;
 $181 = $164;
 $182 = ((($181)) + 108|0);
 $163 = $182;
 $183 = $163;
 $162 = $183;
 $184 = $162;
 $185 = 6536;
 HEAP32[$184>>2] = $185;
 $186 = 6212;
 HEAP32[$183>>2] = $186;
 $187 = 2908;
 HEAP32[$181>>2] = $187;
 $188 = ((($181)) + 108|0);
 $189 = 2928;
 HEAP32[$188>>2] = $189;
 $190 = ((($181)) + 8|0);
 $159 = $181;
 $191 = 2940;
 $160 = $191;
 $161 = $190;
 $192 = $159;
 $193 = $160;
 $194 = HEAP32[$193>>2]|0;
 HEAP32[$192>>2] = $194;
 $195 = ((($193)) + 4|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = HEAP32[$192>>2]|0;
 $198 = ((($197)) + -12|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = (($192) + ($199)|0);
 HEAP32[$200>>2] = $196;
 $201 = ((($192)) + 4|0);
 HEAP32[$201>>2] = 0;
 $202 = HEAP32[$192>>2]|0;
 $203 = ((($202)) + -12|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = (($192) + ($204)|0);
 $206 = $161;
 $157 = $205;
 $158 = $206;
 $207 = $157;
 $208 = $158;
 __THREW__ = 0;
 invoke_vii(490,($207|0),($208|0));
 $209 = __THREW__; __THREW__ = 0;
 $210 = $209&1;
 if ($210) {
  $241 = ___cxa_find_matching_catch()|0;
  $242 = tempRet0;
  $167 = $241;
  $168 = $242;
 } else {
  $211 = ((($207)) + 72|0);
  HEAP32[$211>>2] = 0;
  $212 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $213 = ((($207)) + 76|0);
  HEAP32[$213>>2] = $212;
  $214 = 2908;
  HEAP32[$181>>2] = $214;
  $215 = ((($181)) + 108|0);
  $216 = 2928;
  HEAP32[$215>>2] = $216;
  $217 = ((($181)) + 8|0);
  __THREW__ = 0;
  invoke_vi(491,($217|0));
  $218 = __THREW__; __THREW__ = 0;
  $219 = $218&1;
  if ($219) {
   $243 = ___cxa_find_matching_catch()|0;
   $244 = tempRet0;
   $167 = $243;
   $168 = $244;
  } else {
   $220 = ((($181)) + 8|0);
   $221 = $165;
   $222 = $166;
   $223 = $222 | 8;
   __THREW__ = 0;
   $224 = (invoke_iiii(492,($220|0),($221|0),($223|0))|0);
   $225 = __THREW__; __THREW__ = 0;
   $226 = $225&1;
   do {
    if (!($226)) {
     $227 = ($224|0)==(0|0);
     if ($227) {
      $228 = HEAP32[$181>>2]|0;
      $229 = ((($228)) + -12|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = (($181) + ($230)|0);
      $155 = $231;
      $156 = 4;
      $232 = $155;
      $233 = $156;
      $153 = $232;
      $154 = $233;
      $234 = $153;
      $235 = ((($234)) + 16|0);
      $236 = HEAP32[$235>>2]|0;
      $237 = $154;
      $238 = $236 | $237;
      __THREW__ = 0;
      invoke_vii(493,($234|0),($238|0));
      $239 = __THREW__; __THREW__ = 0;
      $240 = $239&1;
      if ($240) {
       break;
      }
     }
     $152 = $line;
     $258 = $152;
     $151 = $258;
     $259 = $151;
     $150 = $259;
     $260 = $150;
     $149 = $260;
     $148 = $258;
     $261 = $148;
     $147 = $261;
     $262 = $147;
     $146 = $262;
     $263 = $146;
     $__a$i$i = $263;
     $__i$i$i = 0;
     while(1) {
      $264 = $__i$i$i;
      $265 = ($264>>>0)<(3);
      if (!($265)) {
       break;
      }
      $266 = $__i$i$i;
      $267 = $__a$i$i;
      $268 = (($267) + ($266<<2)|0);
      HEAP32[$268>>2] = 0;
      $269 = $__i$i$i;
      $270 = (($269) + 1)|0;
      $__i$i$i = $270;
     }
     $maxpoly = 0;
     L16: while(1) {
      $144 = $in;
      $145 = $line;
      $271 = $144;
      $272 = $145;
      $273 = $144;
      $274 = HEAP32[$273>>2]|0;
      $275 = ((($274)) + -12|0);
      $276 = HEAP32[$275>>2]|0;
      $277 = (($273) + ($276)|0);
      $139 = $277;
      $140 = 10;
      $278 = $139;
      __THREW__ = 0;
      $279 = (invoke_ii(494,($278|0))|0);
      $280 = __THREW__; __THREW__ = 0;
      $281 = $280&1;
      if ($281) {
       label = 65;
       break;
      }
      HEAP32[$141>>2] = $279;
      $138 = $141;
      $282 = $138;
      __THREW__ = 0;
      $283 = (invoke_iii(495,($282|0),(7688|0))|0);
      $284 = __THREW__; __THREW__ = 0;
      $285 = $284&1;
      if ($285) {
       label = 20;
       break;
      }
      $286 = $140;
      $136 = $283;
      $137 = $286;
      $287 = $136;
      $288 = HEAP32[$287>>2]|0;
      $289 = ((($288)) + 28|0);
      $290 = HEAP32[$289>>2]|0;
      $291 = $137;
      __THREW__ = 0;
      $292 = (invoke_iii($290|0,($287|0),($291|0))|0);
      $293 = __THREW__; __THREW__ = 0;
      $294 = $293&1;
      if ($294) {
       label = 20;
       break;
      }
      __THREW__ = 0;
      invoke_vi(496,($141|0));
      $303 = __THREW__; __THREW__ = 0;
      $304 = $303&1;
      if ($304) {
       label = 65;
       break;
      }
      __THREW__ = 0;
      $305 = (invoke_iiii(497,($271|0),($272|0),($292|0))|0);
      $306 = __THREW__; __THREW__ = 0;
      $307 = $306&1;
      if ($307) {
       label = 65;
       break;
      }
      $308 = HEAP32[$305>>2]|0;
      $309 = ((($308)) + -12|0);
      $310 = HEAP32[$309>>2]|0;
      $311 = (($305) + ($310)|0);
      $135 = $311;
      $312 = $135;
      $134 = $312;
      $313 = $134;
      $133 = $313;
      $314 = $133;
      $315 = ((($314)) + 16|0);
      $316 = HEAP32[$315>>2]|0;
      $317 = $316 & 5;
      $318 = ($317|0)!=(0);
      $319 = $318 ^ 1;
      if (!($319)) {
       label = 96;
       break;
      }
      $132 = $line;
      $320 = $132;
      $131 = $320;
      $321 = $131;
      $130 = $321;
      $322 = $130;
      $129 = $322;
      $323 = $129;
      $128 = $323;
      $324 = $128;
      $127 = $324;
      $325 = $127;
      $326 = HEAP8[$325>>0]|0;
      $327 = $326&255;
      $328 = $327 & 1;
      $329 = ($328|0)!=(0);
      if ($329) {
       $121 = $322;
       $330 = $121;
       $120 = $330;
       $331 = $120;
       $119 = $331;
       $332 = $119;
       $333 = ((($332)) + 8|0);
       $334 = HEAP32[$333>>2]|0;
       $341 = $334;
      } else {
       $126 = $322;
       $335 = $126;
       $125 = $335;
       $336 = $125;
       $124 = $336;
       $337 = $124;
       $338 = ((($337)) + 1|0);
       $123 = $338;
       $339 = $123;
       $122 = $339;
       $340 = $122;
       $341 = $340;
      }
      $118 = $341;
      $342 = $118;
      $116 = $173;
      $117 = $342;
      $343 = $116;
      $115 = $343;
      $344 = $115;
      $114 = $344;
      $345 = $114;
      $113 = $345;
      $346 = $117;
      $347 = $117;
      __THREW__ = 0;
      $348 = (invoke_ii(498,($347|0))|0);
      $349 = __THREW__; __THREW__ = 0;
      $350 = $349&1;
      if ($350) {
       label = 65;
       break;
      }
      __THREW__ = 0;
      invoke_viii(499,($343|0),($346|0),($348|0));
      $351 = __THREW__; __THREW__ = 0;
      $352 = $351&1;
      if ($352) {
       label = 65;
       break;
      }
      $108 = $i;
      $109 = $173;
      $110 = 8;
      $353 = $108;
      $354 = ((($353)) + 60|0);
      $107 = $354;
      $355 = $107;
      $106 = $355;
      $356 = $106;
      $357 = 6536;
      HEAP32[$356>>2] = $357;
      $358 = 6212;
      HEAP32[$355>>2] = $358;
      $359 = 2964;
      HEAP32[$353>>2] = $359;
      $360 = ((($353)) + 60|0);
      $361 = 2984;
      HEAP32[$360>>2] = $361;
      $362 = ((($353)) + 8|0);
      $103 = $353;
      $363 = 2996;
      $104 = $363;
      $105 = $362;
      $364 = $103;
      $365 = $104;
      $366 = HEAP32[$365>>2]|0;
      HEAP32[$364>>2] = $366;
      $367 = ((($365)) + 4|0);
      $368 = HEAP32[$367>>2]|0;
      $369 = HEAP32[$364>>2]|0;
      $370 = ((($369)) + -12|0);
      $371 = HEAP32[$370>>2]|0;
      $372 = (($364) + ($371)|0);
      HEAP32[$372>>2] = $368;
      $373 = ((($364)) + 4|0);
      HEAP32[$373>>2] = 0;
      $374 = HEAP32[$364>>2]|0;
      $375 = ((($374)) + -12|0);
      $376 = HEAP32[$375>>2]|0;
      $377 = (($364) + ($376)|0);
      $378 = $105;
      $101 = $377;
      $102 = $378;
      $379 = $101;
      $380 = $102;
      __THREW__ = 0;
      invoke_vii(490,($379|0),($380|0));
      $381 = __THREW__; __THREW__ = 0;
      $382 = $381&1;
      if ($382) {
       label = 41;
       break;
      }
      $383 = ((($379)) + 72|0);
      HEAP32[$383>>2] = 0;
      $384 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
      $385 = ((($379)) + 76|0);
      HEAP32[$385>>2] = $384;
      $386 = 2964;
      HEAP32[$353>>2] = $386;
      $387 = ((($353)) + 60|0);
      $388 = 2984;
      HEAP32[$387>>2] = $388;
      $389 = ((($353)) + 8|0);
      $390 = $109;
      $391 = $110;
      $392 = $391 | 8;
      $96 = $389;
      $97 = $390;
      $98 = $392;
      $393 = $96;
      __THREW__ = 0;
      invoke_vi(500,($393|0));
      $394 = __THREW__; __THREW__ = 0;
      $395 = $394&1;
      if ($395) {
       label = 42;
       break;
      }
      $396 = 3016;
      HEAP32[$393>>2] = $396;
      $397 = ((($393)) + 32|0);
      $95 = $397;
      $398 = $95;
      $94 = $398;
      $399 = $94;
      $93 = $399;
      $400 = $93;
      $92 = $400;
      $91 = $398;
      $401 = $91;
      $90 = $401;
      $402 = $90;
      $89 = $402;
      $403 = $89;
      $__a$i$i$i$i = $403;
      $__i$i$i$i$i = 0;
      while(1) {
       $404 = $__i$i$i$i$i;
       $405 = ($404>>>0)<(3);
       if (!($405)) {
        break;
       }
       $406 = $__i$i$i$i$i;
       $407 = $__a$i$i$i$i;
       $408 = (($407) + ($406<<2)|0);
       HEAP32[$408>>2] = 0;
       $409 = $__i$i$i$i$i;
       $410 = (($409) + 1)|0;
       $__i$i$i$i$i = $410;
      }
      $411 = ((($393)) + 44|0);
      HEAP32[$411>>2] = 0;
      $412 = ((($393)) + 48|0);
      $413 = $98;
      HEAP32[$412>>2] = $413;
      $414 = $97;
      __THREW__ = 0;
      invoke_vii(501,($393|0),($414|0));
      $415 = __THREW__; __THREW__ = 0;
      $416 = $415&1;
      if ($416) {
       label = 37;
       break;
      }
      __THREW__ = 0;
      invoke_vi(502,($173|0));
      $442 = __THREW__; __THREW__ = 0;
      $443 = $442&1;
      if ($443) {
       label = 65;
       break;
      }
      $87 = $line;
      $88 = 0;
      $444 = $87;
      $86 = $444;
      $445 = $86;
      $85 = $445;
      $446 = $85;
      $84 = $446;
      $447 = $84;
      $83 = $447;
      $448 = $83;
      $449 = HEAP8[$448>>0]|0;
      $450 = $449&255;
      $451 = $450 & 1;
      $452 = ($451|0)!=(0);
      if ($452) {
       $77 = $445;
       $453 = $77;
       $76 = $453;
       $454 = $76;
       $75 = $454;
       $455 = $75;
       $456 = ((($455)) + 8|0);
       $457 = HEAP32[$456>>2]|0;
       $466 = $457;
      } else {
       $82 = $445;
       $458 = $82;
       $81 = $458;
       $459 = $81;
       $80 = $459;
       $460 = $80;
       $461 = ((($460)) + 1|0);
       $79 = $461;
       $462 = $79;
       $78 = $462;
       $463 = $78;
       $466 = $463;
      }
      $464 = $88;
      $465 = (($466) + ($464)|0);
      $467 = HEAP8[$465>>0]|0;
      $468 = $467 << 24 >> 24;
      $469 = ($468|0)==(118);
      do {
       if ($469) {
        $73 = $line;
        $74 = 1;
        $470 = $73;
        $72 = $470;
        $471 = $72;
        $71 = $471;
        $472 = $71;
        $70 = $472;
        $473 = $70;
        $69 = $473;
        $474 = $69;
        $475 = HEAP8[$474>>0]|0;
        $476 = $475&255;
        $477 = $476 & 1;
        $478 = ($477|0)!=(0);
        if ($478) {
         $63 = $471;
         $479 = $63;
         $62 = $479;
         $480 = $62;
         $61 = $480;
         $481 = $61;
         $482 = ((($481)) + 8|0);
         $483 = HEAP32[$482>>2]|0;
         $492 = $483;
        } else {
         $68 = $471;
         $484 = $68;
         $67 = $484;
         $485 = $67;
         $66 = $485;
         $486 = $66;
         $487 = ((($486)) + 1|0);
         $65 = $487;
         $488 = $65;
         $64 = $488;
         $489 = $64;
         $492 = $489;
        }
        $490 = $74;
        $491 = (($492) + ($490)|0);
        $493 = HEAP8[$491>>0]|0;
        $494 = $493 << 24 >> 24;
        __THREW__ = 0;
        $495 = (invoke_ii(503,($494|0))|0);
        $496 = __THREW__; __THREW__ = 0;
        $497 = $496&1;
        if ($497) {
         label = 67;
         break L16;
        }
        $498 = ($495|0)!=(0);
        if (!($498)) {
         label = 68;
         break;
        }
        __THREW__ = 0;
        (invoke_iii(504,($i|0),($t|0))|0);
        $499 = __THREW__; __THREW__ = 0;
        $500 = $499&1;
        if ($500) {
         label = 67;
         break L16;
        }
        __THREW__ = 0;
        (invoke_iii(505,($i|0),($v0|0))|0);
        $501 = __THREW__; __THREW__ = 0;
        $502 = $501&1;
        if ($502) {
         label = 67;
         break L16;
        }
        __THREW__ = 0;
        (invoke_iii(505,($i|0),($v1|0))|0);
        $503 = __THREW__; __THREW__ = 0;
        $504 = $503&1;
        if ($504) {
         label = 67;
         break L16;
        }
        __THREW__ = 0;
        (invoke_iii(505,($i|0),($v2|0))|0);
        $505 = __THREW__; __THREW__ = 0;
        $506 = $505&1;
        if ($506) {
         label = 67;
         break L16;
        }
        $507 = +HEAPF64[$v0>>3];
        $508 = +HEAPF64[$v1>>3];
        $509 = +HEAPF64[$v2>>3];
        __THREW__ = 0;
        invoke_viddd(506,($174|0),(+$507),(+$508),(+$509));
        $510 = __THREW__; __THREW__ = 0;
        $511 = $510&1;
        if ($511) {
         label = 67;
         break L16;
        }
        __THREW__ = 0;
        $512 = (invoke_iii(507,($179|0),($174|0))|0);
        $513 = __THREW__; __THREW__ = 0;
        $514 = $513&1;
        if ($514) {
         label = 67;
         break L16;
        }
        HEAP32[$175>>2] = $512;
       } else {
        label = 68;
       }
      } while(0);
      do {
       if ((label|0) == 68) {
        label = 0;
        $59 = $line;
        $60 = 0;
        $521 = $59;
        $58 = $521;
        $522 = $58;
        $57 = $522;
        $523 = $57;
        $56 = $523;
        $524 = $56;
        $55 = $524;
        $525 = $55;
        $526 = HEAP8[$525>>0]|0;
        $527 = $526&255;
        $528 = $527 & 1;
        $529 = ($528|0)!=(0);
        if ($529) {
         $49 = $522;
         $530 = $49;
         $48 = $530;
         $531 = $48;
         $47 = $531;
         $532 = $47;
         $533 = ((($532)) + 8|0);
         $534 = HEAP32[$533>>2]|0;
         $543 = $534;
        } else {
         $54 = $522;
         $535 = $54;
         $53 = $535;
         $536 = $53;
         $52 = $536;
         $537 = $52;
         $538 = ((($537)) + 1|0);
         $51 = $538;
         $539 = $51;
         $50 = $539;
         $540 = $50;
         $543 = $540;
        }
        $541 = $60;
        $542 = (($543) + ($541)|0);
        $544 = HEAP8[$542>>0]|0;
        $545 = $544 << 24 >> 24;
        $546 = ($545|0)==(102);
        if (!($546)) {
         break;
        }
        __THREW__ = 0;
        (invoke_iii(504,($i|0),($t1|0))|0);
        $547 = __THREW__; __THREW__ = 0;
        $548 = $547&1;
        if ($548) {
         label = 67;
         break L16;
        }
        $46 = $face;
        $549 = $46;
        $42 = $549;
        $550 = $42;
        $41 = $550;
        $22 = $24;
        $23 = -1;
        $551 = $22;
        HEAP32[$551>>2] = 0;
        $552 = HEAP32[$24>>2]|0;
        HEAP32[$43>>2] = $552;
        $25 = $43;
        HEAP32[$550>>2] = 0;
        $553 = ((($550)) + 4|0);
        $26 = $28;
        $27 = -1;
        $554 = $26;
        HEAP32[$554>>2] = 0;
        $555 = HEAP32[$28>>2]|0;
        HEAP32[$44>>2] = $555;
        $29 = $44;
        HEAP32[$553>>2] = 0;
        $556 = ((($550)) + 8|0);
        $30 = $32;
        $31 = -1;
        $557 = $30;
        HEAP32[$557>>2] = 0;
        $558 = HEAP32[$32>>2]|0;
        HEAP32[$45>>2] = $558;
        $33 = $45;
        $39 = $556;
        HEAP32[$40>>2] = 0;
        $559 = $39;
        $38 = $40;
        $560 = $38;
        $561 = HEAP32[$560>>2]|0;
        $36 = $559;
        HEAP32[$37>>2] = $561;
        $562 = $36;
        $35 = $562;
        $34 = $37;
        $563 = $34;
        $564 = HEAP32[$563>>2]|0;
        HEAP32[$562>>2] = $564;
        L64: while(1) {
         $565 = HEAP32[$i>>2]|0;
         $566 = ((($565)) + -12|0);
         $567 = HEAP32[$566>>2]|0;
         $568 = (($i) + ($567)|0);
         $21 = $568;
         $569 = $21;
         $20 = $569;
         $570 = $20;
         $571 = ((($570)) + 16|0);
         $572 = HEAP32[$571>>2]|0;
         $573 = $572 & 2;
         $574 = ($573|0)!=(0);
         $575 = $574 ^ 1;
         if (!($575)) {
          break;
         }
         __THREW__ = 0;
         (invoke_iii(508,($i|0),($v|0))|0);
         $576 = __THREW__; __THREW__ = 0;
         $577 = $576&1;
         if ($577) {
          label = 89;
          break L16;
         }
         $578 = HEAP32[$v>>2]|0;
         $579 = (($578) - 1)|0;
         HEAP32[$v>>2] = $579;
         $580 = HEAP32[$v>>2]|0;
         __THREW__ = 0;
         $581 = (invoke_iii(509,($179|0),($580|0))|0);
         $582 = __THREW__; __THREW__ = 0;
         $583 = $582&1;
         if ($583) {
          label = 89;
          break L16;
         }
         HEAP32[$176>>2] = $581;
         $18 = $face;
         $19 = $176;
         $584 = $18;
         $585 = ((($584)) + 4|0);
         $586 = HEAP32[$585>>2]|0;
         $17 = $584;
         $587 = $17;
         $588 = ((($587)) + 8|0);
         $16 = $588;
         $589 = $16;
         $15 = $589;
         $590 = $15;
         $591 = HEAP32[$590>>2]|0;
         $592 = ($586|0)!=($591|0);
         if ($592) {
          __ZNSt3__16vectorIN8OpenMesh12VertexHandleENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator$i,$584,1);
          $14 = $584;
          $593 = $14;
          $594 = ((($593)) + 8|0);
          $13 = $594;
          $595 = $13;
          $12 = $595;
          $596 = $12;
          $597 = ((($584)) + 4|0);
          $598 = HEAP32[$597>>2]|0;
          $11 = $598;
          $599 = $11;
          $600 = $19;
          $8 = $596;
          $9 = $599;
          $10 = $600;
          $601 = $9;
          $602 = $10;
          ;HEAP32[$601>>2]=HEAP32[$602>>2]|0;
          __ZNSt3__16vectorIN8OpenMesh12VertexHandleENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
          $603 = ((($584)) + 4|0);
          $604 = HEAP32[$603>>2]|0;
          $605 = ((($604)) + 4|0);
          HEAP32[$603>>2] = $605;
         } else {
          $606 = $19;
          __THREW__ = 0;
          invoke_vii(510,($584|0),($606|0));
          $607 = __THREW__; __THREW__ = 0;
          $608 = $607&1;
          if ($608) {
           label = 89;
           break L16;
          }
         }
         __THREW__ = 0;
         $609 = (invoke_ii(511,($i|0))|0);
         $610 = __THREW__; __THREW__ = 0;
         $611 = $610&1;
         if ($611) {
          label = 89;
          break L16;
         }
         $612 = $609&255;
         HEAP8[$next>>0] = $612;
         while(1) {
          $613 = HEAP8[$next>>0]|0;
          $614 = $613 << 24 >> 24;
          __THREW__ = 0;
          $615 = (invoke_ii(512,($614|0))|0);
          $616 = __THREW__; __THREW__ = 0;
          $617 = $616&1;
          if ($617) {
           label = 89;
           break L16;
          }
          $618 = ($615|0)!=(0);
          if ($618) {
           continue L64;
          }
          $619 = HEAP32[$i>>2]|0;
          $620 = ((($619)) + -12|0);
          $621 = HEAP32[$620>>2]|0;
          $622 = (($i) + ($621)|0);
          $7 = $622;
          $623 = $7;
          $6 = $623;
          $624 = $6;
          $625 = ((($624)) + 16|0);
          $626 = HEAP32[$625>>2]|0;
          $627 = $626 & 2;
          $628 = ($627|0)!=(0);
          $629 = $628 ^ 1;
          if (!($629)) {
           continue L64;
          }
          __THREW__ = 0;
          (invoke_iii(504,($i|0),($next|0))|0);
          $630 = __THREW__; __THREW__ = 0;
          $631 = $630&1;
          if ($631) {
           label = 89;
           break L16;
          }
          __THREW__ = 0;
          $632 = (invoke_ii(511,($i|0))|0);
          $633 = __THREW__; __THREW__ = 0;
          $634 = $633&1;
          if ($634) {
           label = 89;
           break L16;
          }
          $635 = $632&255;
          HEAP8[$next>>0] = $635;
          $636 = HEAP8[$next>>0]|0;
          $637 = $636 << 24 >> 24;
          $638 = ($637|0)==(13);
          if (!($638)) {
           continue;
          }
          __THREW__ = 0;
          (invoke_iii(504,($i|0),($next|0))|0);
          $639 = __THREW__; __THREW__ = 0;
          $640 = $639&1;
          if ($640) {
           label = 89;
           break L16;
          }
         }
        }
        __THREW__ = 0;
        $645 = (invoke_iii(514,($179|0),($face|0))|0);
        $646 = __THREW__; __THREW__ = 0;
        $647 = $646&1;
        if ($647) {
         label = 89;
         break L16;
        }
        HEAP32[$177>>2] = $645;
        $5 = $face;
        $648 = $5;
        $649 = ((($648)) + 4|0);
        $650 = HEAP32[$649>>2]|0;
        $651 = HEAP32[$648>>2]|0;
        $652 = $650;
        $653 = $651;
        $654 = (($652) - ($653))|0;
        $655 = (($654|0) / 4)&-1;
        $poly = $655;
        $656 = $poly;
        $657 = $maxpoly;
        $658 = ($656|0)>($657|0);
        if ($658) {
         $659 = $poly;
         $maxpoly = $659;
        }
        __THREW__ = 0;
        invoke_vi(513,($face|0));
        $660 = __THREW__; __THREW__ = 0;
        $661 = $660&1;
        if ($661) {
         label = 67;
         break L16;
        }
       }
      } while(0);
      __THREW__ = 0;
      invoke_vi(11,($i|0));
      $662 = __THREW__; __THREW__ = 0;
      $663 = $662&1;
      if ($663) {
       label = 65;
       break;
      }
     }
     do {
      if ((label|0) == 20) {
       $295 = ___cxa_find_matching_catch()|0;
       $296 = tempRet0;
       $142 = $295;
       $143 = $296;
       __THREW__ = 0;
       invoke_vi(496,($141|0));
       $297 = __THREW__; __THREW__ = 0;
       $298 = $297&1;
       if ($298) {
        $301 = ___cxa_find_matching_catch(0|0)|0;
        $302 = tempRet0;
        ___clang_call_terminate($301);
        // unreachable;
       } else {
        $299 = $142;
        $300 = $143;
        $eh$lpad$body$index10Z2D = $300;$eh$lpad$body$indexZ2D = $299;
        label = 66;
        break;
       }
      }
      else if ((label|0) == 37) {
       $417 = ___cxa_find_matching_catch()|0;
       $418 = tempRet0;
       $99 = $417;
       $100 = $418;
       __THREW__ = 0;
       invoke_vi(502,($397|0));
       $419 = __THREW__; __THREW__ = 0;
       $420 = $419&1;
       if ($420) {
        $425 = ___cxa_find_matching_catch(0|0)|0;
        $426 = tempRet0;
        ___clang_call_terminate($425);
        // unreachable;
       }
       __THREW__ = 0;
       invoke_vi(194,($393|0));
       $421 = __THREW__; __THREW__ = 0;
       $422 = $421&1;
       if ($422) {
        $425 = ___cxa_find_matching_catch(0|0)|0;
        $426 = tempRet0;
        ___clang_call_terminate($425);
        // unreachable;
       } else {
        $423 = $99;
        $424 = $100;
        $eh$lpad$body$i$index5Z2D = $424;$eh$lpad$body$i$indexZ2D = $423;
        label = 43;
        break;
       }
      }
      else if ((label|0) == 41) {
       $427 = ___cxa_find_matching_catch()|0;
       $428 = tempRet0;
       $111 = $427;
       $112 = $428;
       label = 44;
      }
      else if ((label|0) == 42) {
       $429 = ___cxa_find_matching_catch()|0;
       $430 = tempRet0;
       $eh$lpad$body$i$index5Z2D = $430;$eh$lpad$body$i$indexZ2D = $429;
       label = 43;
      }
      else if ((label|0) == 67) {
       $519 = ___cxa_find_matching_catch()|0;
       $520 = tempRet0;
       $171 = $519;
       $172 = $520;
       label = 95;
      }
      else if ((label|0) == 89) {
       $641 = ___cxa_find_matching_catch()|0;
       $642 = tempRet0;
       $171 = $641;
       $172 = $642;
       __THREW__ = 0;
       invoke_vi(513,($face|0));
       $643 = __THREW__; __THREW__ = 0;
       $644 = $643&1;
       if ($644) {
        $711 = ___cxa_find_matching_catch(0|0)|0;
        $712 = tempRet0;
        ___clang_call_terminate($711);
        // unreachable;
       } else {
        label = 95;
       }
      }
      else if ((label|0) == 96) {
       $4 = $in;
       $666 = $4;
       $667 = ((($666)) + 8|0);
       __THREW__ = 0;
       $668 = (invoke_ii(515,($667|0))|0);
       $669 = __THREW__; __THREW__ = 0;
       $670 = $669&1;
       if ($670) {
        label = 65;
       } else {
        $671 = ($668|0)==(0|0);
        if ($671) {
         $672 = HEAP32[$666>>2]|0;
         $673 = ((($672)) + -12|0);
         $674 = HEAP32[$673>>2]|0;
         $675 = (($666) + ($674)|0);
         $2 = $675;
         $3 = 4;
         $676 = $2;
         $677 = $3;
         $0 = $676;
         $1 = $677;
         $678 = $0;
         $679 = ((($678)) + 16|0);
         $680 = HEAP32[$679>>2]|0;
         $681 = $1;
         $682 = $680 | $681;
         __THREW__ = 0;
         invoke_vii(493,($678|0),($682|0));
         $683 = __THREW__; __THREW__ = 0;
         $684 = $683&1;
         if ($684) {
          label = 65;
          break;
         }
        }
        $685 = HEAP32[$179>>2]|0;
        $686 = ((($685)) + 8|0);
        $687 = HEAP32[$686>>2]|0;
        __THREW__ = 0;
        $688 = (invoke_ii($687|0,($179|0))|0);
        $689 = __THREW__; __THREW__ = 0;
        $690 = $689&1;
        if ($690) {
         label = 65;
        } else {
         $nv = $688;
         $691 = HEAP32[$179>>2]|0;
         $692 = ((($691)) + 20|0);
         $693 = HEAP32[$692>>2]|0;
         __THREW__ = 0;
         $694 = (invoke_ii($693|0,($179|0))|0);
         $695 = __THREW__; __THREW__ = 0;
         $696 = $695&1;
         if ($696) {
          label = 65;
         } else {
          $nf = $694;
          $697 = $170;
          $698 = $nv;
          $699 = $nf;
          $700 = $maxpoly;
          __THREW__ = 0;
          HEAP32[$vararg_buffer>>2] = $697;
          $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
          HEAP32[$vararg_ptr1>>2] = $698;
          $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
          HEAP32[$vararg_ptr2>>2] = $699;
          $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
          HEAP32[$vararg_ptr3>>2] = $700;
          (invoke_iii(516,(12299|0),($vararg_buffer|0))|0);
          $701 = __THREW__; __THREW__ = 0;
          $702 = $701&1;
          if ($702) {
           label = 65;
          } else {
           $178 = 1;
           __THREW__ = 0;
           invoke_vi(502,($line|0));
           $703 = __THREW__; __THREW__ = 0;
           $704 = $703&1;
           if ($704) {
            $515 = ___cxa_find_matching_catch()|0;
            $516 = tempRet0;
            $171 = $515;
            $172 = $516;
            break;
           } else {
            __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($in);
            STACKTOP = sp;return 1;
           }
          }
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 43) {
      $111 = $eh$lpad$body$i$indexZ2D;
      $112 = $eh$lpad$body$i$index5Z2D;
      __THREW__ = 0;
      $431 = __THREW__; __THREW__ = 0;
      $432 = $431&1;
      if ($432) {
       $440 = ___cxa_find_matching_catch(0|0)|0;
       $441 = tempRet0;
       ___clang_call_terminate($440);
       // unreachable;
      } else {
       label = 44;
      }
     }
     else if ((label|0) == 65) {
      $517 = ___cxa_find_matching_catch()|0;
      $518 = tempRet0;
      $eh$lpad$body$index10Z2D = $518;$eh$lpad$body$indexZ2D = $517;
      label = 66;
     }
     else if ((label|0) == 95) {
      __THREW__ = 0;
      invoke_vi(11,($i|0));
      $664 = __THREW__; __THREW__ = 0;
      $665 = $664&1;
      if ($665) {
       $711 = ___cxa_find_matching_catch(0|0)|0;
       $712 = tempRet0;
       ___clang_call_terminate($711);
       // unreachable;
      } else {
       label = 104;
      }
     }
     if ((label|0) == 44) {
      $433 = ((($353)) + 60|0);
      __THREW__ = 0;
      invoke_vi(210,($433|0));
      $434 = __THREW__; __THREW__ = 0;
      $435 = $434&1;
      if ($435) {
       $440 = ___cxa_find_matching_catch(0|0)|0;
       $441 = tempRet0;
       ___clang_call_terminate($440);
       // unreachable;
      }
      $436 = $111;
      $437 = $112;
      $171 = $436;
      $172 = $437;
      __THREW__ = 0;
      invoke_vi(502,($173|0));
      $438 = __THREW__; __THREW__ = 0;
      $439 = $438&1;
      if ($439) {
       $711 = ___cxa_find_matching_catch(0|0)|0;
       $712 = tempRet0;
       ___clang_call_terminate($711);
       // unreachable;
      } else {
       label = 104;
      }
     }
     else if ((label|0) == 66) {
      $171 = $eh$lpad$body$indexZ2D;
      $172 = $eh$lpad$body$index10Z2D;
      label = 104;
     }
     if ((label|0) == 104) {
      __THREW__ = 0;
      invoke_vi(502,($line|0));
      $705 = __THREW__; __THREW__ = 0;
      $706 = $705&1;
      if ($706) {
       $711 = ___cxa_find_matching_catch(0|0)|0;
       $712 = tempRet0;
       ___clang_call_terminate($711);
       // unreachable;
      }
     }
     __THREW__ = 0;
     invoke_vi(7,($in|0));
     $707 = __THREW__; __THREW__ = 0;
     $708 = $707&1;
     if ($708) {
      $711 = ___cxa_find_matching_catch(0|0)|0;
      $712 = tempRet0;
      ___clang_call_terminate($711);
      // unreachable;
     } else {
      $709 = $171;
      $710 = $172;
      ___resumeException($709|0);
      // unreachable;
     }
    }
   } while(0);
   $245 = ___cxa_find_matching_catch()|0;
   $246 = tempRet0;
   $167 = $245;
   $168 = $246;
   __THREW__ = 0;
   invoke_vi(33,($217|0));
   $247 = __THREW__; __THREW__ = 0;
   $248 = $247&1;
   if ($248) {
    $256 = ___cxa_find_matching_catch(0|0)|0;
    $257 = tempRet0;
    ___clang_call_terminate($256);
    // unreachable;
   }
  }
  __THREW__ = 0;
  $249 = __THREW__; __THREW__ = 0;
  $250 = $249&1;
  if ($250) {
   $256 = ___cxa_find_matching_catch(0|0)|0;
   $257 = tempRet0;
   ___clang_call_terminate($256);
   // unreachable;
  }
 }
 $251 = ((($181)) + 108|0);
 __THREW__ = 0;
 invoke_vi(210,($251|0));
 $252 = __THREW__; __THREW__ = 0;
 $253 = $252&1;
 if ($253) {
  $256 = ___cxa_find_matching_catch(0|0)|0;
  $257 = tempRet0;
  ___clang_call_terminate($256);
  // unreachable;
 } else {
  $254 = $167;
  $255 = $168;
  ___resumeException($254|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEEC2ERKS4_($this,$mesh) {
 $this = $this|0;
 $mesh = $mesh|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 308|0;
 $6 = sp + 292|0;
 $10 = sp + 276|0;
 $15 = sp + 256|0;
 $18 = sp + 244|0;
 $21 = sp + 232|0;
 $22 = sp + 228|0;
 $23 = sp + 224|0;
 $27 = sp + 208|0;
 $31 = sp + 192|0;
 $35 = sp + 176|0;
 $40 = sp + 156|0;
 $43 = sp + 144|0;
 $46 = sp + 132|0;
 $47 = sp + 128|0;
 $48 = sp + 124|0;
 $52 = sp + 108|0;
 $56 = sp + 92|0;
 $60 = sp + 76|0;
 $65 = sp + 56|0;
 $68 = sp + 44|0;
 $71 = sp + 32|0;
 $72 = sp + 28|0;
 $73 = sp + 24|0;
 $75 = $this;
 $76 = $mesh;
 $79 = $75;
 $80 = $76;
 HEAP32[$79>>2] = $80;
 $81 = ((($79)) + 24|0);
 __ZN4DGPC4HeapIdEC2Ev($81);
 $82 = ((($79)) + 56|0);
 $74 = $82;
 $83 = $74;
 $70 = $83;
 $84 = $70;
 $69 = $84;
 $50 = $52;
 $51 = -1;
 $85 = $50;
 HEAP32[$85>>2] = 0;
 $86 = HEAP32[$52>>2]|0;
 HEAP32[$71>>2] = $86;
 $53 = $71;
 HEAP32[$84>>2] = 0;
 $87 = ((($84)) + 4|0);
 $54 = $56;
 $55 = -1;
 $88 = $54;
 HEAP32[$88>>2] = 0;
 $89 = HEAP32[$56>>2]|0;
 HEAP32[$72>>2] = $89;
 $57 = $72;
 HEAP32[$87>>2] = 0;
 $90 = ((($84)) + 8|0);
 $58 = $60;
 $59 = -1;
 $91 = $58;
 HEAP32[$91>>2] = 0;
 $92 = HEAP32[$60>>2]|0;
 HEAP32[$73>>2] = $92;
 $61 = $73;
 $67 = $90;
 HEAP32[$68>>2] = 0;
 $93 = $67;
 $66 = $68;
 $94 = $66;
 $95 = HEAP32[$94>>2]|0;
 $64 = $93;
 HEAP32[$65>>2] = $95;
 $96 = $64;
 $63 = $96;
 $62 = $65;
 $97 = $62;
 $98 = HEAP32[$97>>2]|0;
 HEAP32[$96>>2] = $98;
 $99 = ((($79)) + 68|0);
 $49 = $99;
 $100 = $49;
 $45 = $100;
 $101 = $45;
 $44 = $101;
 $25 = $27;
 $26 = -1;
 $102 = $25;
 HEAP32[$102>>2] = 0;
 $103 = HEAP32[$27>>2]|0;
 HEAP32[$46>>2] = $103;
 $28 = $46;
 HEAP32[$101>>2] = 0;
 $104 = ((($101)) + 4|0);
 $29 = $31;
 $30 = -1;
 $105 = $29;
 HEAP32[$105>>2] = 0;
 $106 = HEAP32[$31>>2]|0;
 HEAP32[$47>>2] = $106;
 $32 = $47;
 HEAP32[$104>>2] = 0;
 $107 = ((($101)) + 8|0);
 $33 = $35;
 $34 = -1;
 $108 = $33;
 HEAP32[$108>>2] = 0;
 $109 = HEAP32[$35>>2]|0;
 HEAP32[$48>>2] = $109;
 $36 = $48;
 $42 = $107;
 HEAP32[$43>>2] = 0;
 $110 = $42;
 $41 = $43;
 $111 = $41;
 $112 = HEAP32[$111>>2]|0;
 $39 = $110;
 HEAP32[$40>>2] = $112;
 $113 = $39;
 $38 = $113;
 $37 = $40;
 $114 = $37;
 $115 = HEAP32[$114>>2]|0;
 HEAP32[$113>>2] = $115;
 $116 = ((($79)) + 80|0);
 $24 = $116;
 $117 = $24;
 $20 = $117;
 $118 = $20;
 $19 = $118;
 $0 = $2;
 $1 = -1;
 $119 = $0;
 HEAP32[$119>>2] = 0;
 $120 = HEAP32[$2>>2]|0;
 HEAP32[$21>>2] = $120;
 $3 = $21;
 HEAP32[$118>>2] = 0;
 $121 = ((($118)) + 4|0);
 $4 = $6;
 $5 = -1;
 $122 = $4;
 HEAP32[$122>>2] = 0;
 $123 = HEAP32[$6>>2]|0;
 HEAP32[$22>>2] = $123;
 $7 = $22;
 HEAP32[$121>>2] = 0;
 $124 = ((($118)) + 8|0);
 $8 = $10;
 $9 = -1;
 $125 = $8;
 HEAP32[$125>>2] = 0;
 $126 = HEAP32[$10>>2]|0;
 HEAP32[$23>>2] = $126;
 $11 = $23;
 $17 = $124;
 HEAP32[$18>>2] = 0;
 $127 = $17;
 $16 = $18;
 $128 = $16;
 $129 = HEAP32[$128>>2]|0;
 $14 = $127;
 HEAP32[$15>>2] = $129;
 $130 = $14;
 $13 = $130;
 $12 = $15;
 $131 = $12;
 $132 = HEAP32[$131>>2]|0;
 HEAP32[$130>>2] = $132;
 $133 = ((($79)) + 8|0);
 HEAPF64[$133>>3] = 9.9999999999999998E-13;
 $134 = ((($79)) + 16|0);
 HEAPF64[$134>>3] = 1.7976931348623157E+308;
 $135 = HEAP32[$79>>2]|0;
 $136 = HEAP32[$135>>2]|0;
 $137 = ((($136)) + 8|0);
 $138 = HEAP32[$137>>2]|0;
 __THREW__ = 0;
 $139 = (invoke_ii($138|0,($135|0))|0);
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if (!($141)) {
  $n = $139;
  $142 = ((($79)) + 56|0);
  $143 = $n;
  __THREW__ = 0;
  invoke_vii(517,($142|0),($143|0));
  $144 = __THREW__; __THREW__ = 0;
  $145 = $144&1;
  if (!($145)) {
   $146 = ((($79)) + 68|0);
   $147 = $n;
   __THREW__ = 0;
   invoke_vii(517,($146|0),($147|0));
   $148 = __THREW__; __THREW__ = 0;
   $149 = $148&1;
   if (!($149)) {
    STACKTOP = sp;return;
   }
  }
 }
 $150 = ___cxa_find_matching_catch()|0;
 $151 = tempRet0;
 $77 = $150;
 $78 = $151;
 __THREW__ = 0;
 invoke_vi(518,($116|0));
 $152 = __THREW__; __THREW__ = 0;
 $153 = $152&1;
 if ($153) {
  $162 = ___cxa_find_matching_catch(0|0)|0;
  $163 = tempRet0;
  ___clang_call_terminate($162);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(519,($99|0));
 $154 = __THREW__; __THREW__ = 0;
 $155 = $154&1;
 if ($155) {
  $162 = ___cxa_find_matching_catch(0|0)|0;
  $163 = tempRet0;
  ___clang_call_terminate($162);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(519,($82|0));
 $156 = __THREW__; __THREW__ = 0;
 $157 = $156&1;
 if ($157) {
  $162 = ___cxa_find_matching_catch(0|0)|0;
  $163 = tempRet0;
  ___clang_call_terminate($162);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(520,($81|0));
 $158 = __THREW__; __THREW__ = 0;
 $159 = $158&1;
 if ($159) {
  $162 = ___cxa_find_matching_catch(0|0)|0;
  $163 = tempRet0;
  ___clang_call_terminate($162);
  // unreachable;
 } else {
  $160 = $77;
  $161 = $78;
  ___resumeException($160|0);
  // unreachable;
 }
}
function __ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEE11setStopDistEd($this,$d) {
 $this = $this|0;
 $d = +$d;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $d;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 16|0);
 HEAPF64[$4>>3] = $3;
 STACKTOP = sp;return;
}
function __ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 80|0);
 __THREW__ = 0;
 invoke_vi(518,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   $14 = ___cxa_find_matching_catch()|0;
   $15 = tempRet0;
   $1 = $14;
   $2 = $15;
   $16 = ((($3)) + 68|0);
   __THREW__ = 0;
   invoke_vi(519,($16|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $31 = ___cxa_find_matching_catch(0|0)|0;
    $32 = tempRet0;
    ___clang_call_terminate($31);
    // unreachable;
   } else {
    label = 8;
   }
  } else {
   $7 = ((($3)) + 68|0);
   __THREW__ = 0;
   invoke_vi(519,($7|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $19 = ___cxa_find_matching_catch()|0;
    $20 = tempRet0;
    $1 = $19;
    $2 = $20;
    label = 8;
    break;
   }
   $10 = ((($3)) + 56|0);
   __THREW__ = 0;
   invoke_vi(519,($10|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $21 = ___cxa_find_matching_catch()|0;
    $22 = tempRet0;
    $1 = $21;
    $2 = $22;
    break;
   } else {
    $13 = ((($3)) + 24|0);
    __ZN4DGPC4HeapIdED2Ev($13);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ((($3)) + 56|0);
  __THREW__ = 0;
  invoke_vi(519,($23|0));
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if ($25) {
   $31 = ___cxa_find_matching_catch(0|0)|0;
   $32 = tempRet0;
   ___clang_call_terminate($31);
   // unreachable;
  }
 }
 $26 = ((($3)) + 24|0);
 __THREW__ = 0;
 invoke_vi(520,($26|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $31 = ___cxa_find_matching_catch(0|0)|0;
  $32 = tempRet0;
  ___clang_call_terminate($31);
  // unreachable;
 } else {
  $29 = $1;
  $30 = $2;
  ___resumeException($29|0);
  // unreachable;
 }
}
function __ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEE6setEpsEd($this,$eps) {
 $this = $this|0;
 $eps = +$eps;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $eps;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 8|0);
 HEAPF64[$4>>3] = $3;
 STACKTOP = sp;return;
}
function __ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEE13setNodeSourceEi($this,$node_idx) {
 $this = $this|0;
 $node_idx = $node_idx|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__annotator$i = 0, $alpha = 0.0, $b = 0, $heh = 0, $i = 0, $num = 0, $phitot = 0.0, $source = 0, $source_pt = 0, $start = 0, $to = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy12 = sp + 292|0;
 $$byval_copy11 = sp + 288|0;
 $$byval_copy10 = sp + 284|0;
 $$byval_copy9 = sp + 280|0;
 $$byval_copy8 = sp + 276|0;
 $$byval_copy7 = sp + 272|0;
 $$byval_copy6 = sp + 268|0;
 $$byval_copy5 = sp + 264|0;
 $$byval_copy4 = sp + 260|0;
 $$byval_copy3 = sp + 256|0;
 $$byval_copy2 = sp + 252|0;
 $$byval_copy1 = sp + 248|0;
 $$byval_copy = sp + 244|0;
 $__annotator$i = sp + 296|0;
 $source = sp + 148|0;
 $heh = sp + 144|0;
 $23 = sp + 140|0;
 $24 = sp + 136|0;
 $b = sp + 132|0;
 $25 = sp + 128|0;
 $26 = sp + 124|0;
 $27 = sp + 120|0;
 $28 = sp + 116|0;
 $29 = sp + 112|0;
 $30 = sp + 108|0;
 $start = sp + 104|0;
 $to = sp + 100|0;
 $31 = sp + 96|0;
 $32 = sp + 92|0;
 $33 = sp + 88|0;
 $34 = sp + 84|0;
 $35 = sp + 80|0;
 $36 = sp + 76|0;
 $37 = sp + 72|0;
 $38 = sp + 68|0;
 $39 = sp + 64|0;
 $40 = sp + 60|0;
 $41 = sp + 56|0;
 $source_pt = sp + 16|0;
 $42 = sp + 52|0;
 $43 = sp + 48|0;
 $21 = $this;
 $22 = $node_idx;
 $44 = $21;
 __ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEE10initializeEv($44);
 $45 = ((($44)) + 56|0);
 $46 = $22;
 $19 = $45;
 $20 = $46;
 $47 = $19;
 $48 = $20;
 $49 = HEAP32[$47>>2]|0;
 $50 = (($49) + ($48<<3)|0);
 HEAPF64[$50>>3] = 0.0;
 $51 = ((($44)) + 68|0);
 $52 = $22;
 $12 = $51;
 $13 = $52;
 $53 = $12;
 $54 = $13;
 $55 = HEAP32[$53>>2]|0;
 $56 = (($55) + ($54<<3)|0);
 HEAPF64[$56>>3] = 0.0;
 $57 = HEAP32[$44>>2]|0;
 $58 = $22;
 $59 = (__ZNK8OpenMesh11ArrayKernel13vertex_handleEj($57,$58)|0);
 HEAP32[$source>>2] = $59;
 $60 = HEAP32[$44>>2]|0;
 ;HEAP32[$23>>2]=HEAP32[$source>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$23>>2]|0;
 $61 = (__ZNK8OpenMesh11ArrayKernel15halfedge_handleENS_12VertexHandleE($60,$$byval_copy)|0);
 HEAP32[$heh>>2] = $61;
 $62 = HEAP32[$44>>2]|0;
 ;HEAP32[$24>>2]=HEAP32[$source>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$24>>2]|0;
 $63 = (__ZNK8OpenMesh16PolyConnectivity11is_boundaryENS_12VertexHandleE($62,$$byval_copy1)|0);
 L1: do {
  if ($63) {
   $64 = HEAP32[$44>>2]|0;
   ;HEAP32[$25>>2]=HEAP32[$heh>>2]|0;
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$25>>2]|0;
   $65 = (__ZNK8OpenMesh11ArrayKernel24opposite_halfedge_handleENS_14HalfedgeHandleE($64,$$byval_copy2)|0);
   HEAP32[$b>>2] = $65;
   while(1) {
    $66 = HEAP32[$44>>2]|0;
    ;HEAP32[$26>>2]=HEAP32[$b>>2]|0;
    ;HEAP32[$$byval_copy3>>2]=HEAP32[$26>>2]|0;
    $67 = (__ZNK8OpenMesh16PolyConnectivity11is_boundaryENS_14HalfedgeHandleE($66,$$byval_copy3)|0);
    $68 = $67 ^ 1;
    if (!($68)) {
     break L1;
    }
    $69 = HEAP32[$44>>2]|0;
    ;HEAP32[$28>>2]=HEAP32[$b>>2]|0;
    ;HEAP32[$$byval_copy4>>2]=HEAP32[$28>>2]|0;
    $70 = (__ZNK8OpenMesh11ArrayKernel20next_halfedge_handleENS_14HalfedgeHandleE($69,$$byval_copy4)|0);
    HEAP32[$27>>2] = $70;
    ;HEAP32[$heh>>2]=HEAP32[$27>>2]|0;
    $71 = HEAP32[$44>>2]|0;
    ;HEAP32[$30>>2]=HEAP32[$heh>>2]|0;
    ;HEAP32[$$byval_copy5>>2]=HEAP32[$30>>2]|0;
    $72 = (__ZNK8OpenMesh11ArrayKernel24opposite_halfedge_handleENS_14HalfedgeHandleE($71,$$byval_copy5)|0);
    HEAP32[$29>>2] = $72;
    ;HEAP32[$b>>2]=HEAP32[$29>>2]|0;
   }
  }
 } while(0);
 ;HEAP32[$start>>2]=HEAP32[$heh>>2]|0;
 __ZN8OpenMesh12VertexHandleC2Ei($to,-1);
 while(1) {
  $73 = HEAP32[$44>>2]|0;
  ;HEAP32[$32>>2]=HEAP32[$heh>>2]|0;
  ;HEAP32[$$byval_copy6>>2]=HEAP32[$32>>2]|0;
  $74 = (__ZNK8OpenMesh11ArrayKernel20next_halfedge_handleENS_14HalfedgeHandleE($73,$$byval_copy6)|0);
  HEAP32[$31>>2] = $74;
  ;HEAP32[$heh>>2]=HEAP32[$31>>2]|0;
  $75 = HEAP32[$44>>2]|0;
  ;HEAP32[$34>>2]=HEAP32[$heh>>2]|0;
  ;HEAP32[$$byval_copy7>>2]=HEAP32[$34>>2]|0;
  $76 = (__ZNK8OpenMesh11ArrayKernel16to_vertex_handleENS_14HalfedgeHandleE($75,$$byval_copy7)|0);
  HEAP32[$33>>2] = $76;
  ;HEAP32[$to>>2]=HEAP32[$33>>2]|0;
  while(1) {
   $77 = (__ZNK8OpenMesh10BaseHandleneERKS0_($to,$source)|0);
   if (!($77)) {
    break;
   }
   $78 = ((($44)) + 80|0);
   $79 = (__ZNK8OpenMesh10BaseHandle3idxEv($to)|0);
   HEAP32[$35>>2] = $79;
   $10 = $78;
   $11 = $35;
   $80 = $10;
   $81 = ((($80)) + 4|0);
   $82 = HEAP32[$81>>2]|0;
   $9 = $80;
   $83 = $9;
   $84 = ((($83)) + 8|0);
   $8 = $84;
   $85 = $8;
   $7 = $85;
   $86 = $7;
   $87 = HEAP32[$86>>2]|0;
   $88 = ($82|0)!=($87|0);
   if ($88) {
    __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i,$80,1);
    $6 = $80;
    $89 = $6;
    $90 = ((($89)) + 8|0);
    $5 = $90;
    $91 = $5;
    $4 = $91;
    $92 = $4;
    $93 = ((($80)) + 4|0);
    $94 = HEAP32[$93>>2]|0;
    $3 = $94;
    $95 = $3;
    $96 = $11;
    $0 = $92;
    $1 = $95;
    $2 = $96;
    $97 = $1;
    $98 = $2;
    $99 = HEAP32[$98>>2]|0;
    HEAP32[$97>>2] = $99;
    __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
    $100 = ((($80)) + 4|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = ((($101)) + 4|0);
    HEAP32[$100>>2] = $102;
   } else {
    $103 = $11;
    __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_($80,$103);
   }
   $104 = HEAP32[$44>>2]|0;
   ;HEAP32[$37>>2]=HEAP32[$heh>>2]|0;
   ;HEAP32[$$byval_copy8>>2]=HEAP32[$37>>2]|0;
   $105 = (__ZNK8OpenMesh11ArrayKernel20next_halfedge_handleENS_14HalfedgeHandleE($104,$$byval_copy8)|0);
   HEAP32[$36>>2] = $105;
   ;HEAP32[$heh>>2]=HEAP32[$36>>2]|0;
   $106 = HEAP32[$44>>2]|0;
   ;HEAP32[$39>>2]=HEAP32[$heh>>2]|0;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$39>>2]|0;
   $107 = (__ZNK8OpenMesh11ArrayKernel16to_vertex_handleENS_14HalfedgeHandleE($106,$$byval_copy9)|0);
   HEAP32[$38>>2] = $107;
   ;HEAP32[$to>>2]=HEAP32[$38>>2]|0;
  }
  $108 = HEAP32[$44>>2]|0;
  ;HEAP32[$41>>2]=HEAP32[$heh>>2]|0;
  ;HEAP32[$$byval_copy10>>2]=HEAP32[$41>>2]|0;
  $109 = (__ZNK8OpenMesh11ArrayKernel24opposite_halfedge_handleENS_14HalfedgeHandleE($108,$$byval_copy10)|0);
  HEAP32[$40>>2] = $109;
  ;HEAP32[$heh>>2]=HEAP32[$40>>2]|0;
  $110 = (__ZNK8OpenMesh10BaseHandleneERKS0_($heh,$start)|0);
  if (!($110)) {
   break;
  }
 }
 $111 = HEAP32[$44>>2]|0;
 ;HEAP32[$42>>2]=HEAP32[$source>>2]|0;
 ;HEAP32[$$byval_copy11>>2]=HEAP32[$42>>2]|0;
 $112 = (__ZNK8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEE5pointENS_12VertexHandleE($111,$$byval_copy11)|0);
 __ZN4DGPC7Vector3IdEC2ERKS1_($source_pt,$112);
 $113 = (+__ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEE15initializeGammaERKS3_($44,$source_pt));
 $phitot = $113;
 $114 = HEAP32[$44>>2]|0;
 ;HEAP32[$43>>2]=HEAP32[$source>>2]|0;
 ;HEAP32[$$byval_copy12>>2]=HEAP32[$43>>2]|0;
 $115 = (__ZNK8OpenMesh16PolyConnectivity11is_boundaryENS_12VertexHandleE($114,$$byval_copy12)|0);
 if ($115) {
  STACKTOP = sp;return;
 }
 $116 = $phitot;
 $117 = 6.2831853071795862 / $116;
 $alpha = $117;
 $118 = ((($44)) + 80|0);
 $14 = $118;
 $119 = $14;
 $120 = ((($119)) + 4|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = HEAP32[$119>>2]|0;
 $123 = $121;
 $124 = $122;
 $125 = (($123) - ($124))|0;
 $126 = (($125|0) / 4)&-1;
 $num = $126;
 $i = 0;
 while(1) {
  $127 = $i;
  $128 = $num;
  $129 = ($127>>>0)<($128>>>0);
  if (!($129)) {
   break;
  }
  $130 = $alpha;
  $131 = ((($44)) + 68|0);
  $132 = ((($44)) + 80|0);
  $133 = $i;
  $15 = $132;
  $16 = $133;
  $134 = $15;
  $135 = $16;
  $136 = HEAP32[$134>>2]|0;
  $137 = (($136) + ($135<<2)|0);
  $138 = HEAP32[$137>>2]|0;
  $17 = $131;
  $18 = $138;
  $139 = $17;
  $140 = $18;
  $141 = HEAP32[$139>>2]|0;
  $142 = (($141) + ($140<<3)|0);
  $143 = +HEAPF64[$142>>3];
  $144 = $143 * $130;
  HEAPF64[$142>>3] = $144;
  $145 = $i;
  $146 = (($145) + 1)|0;
  $i = $146;
 }
 STACKTOP = sp;return;
}
function __ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEE3runEv($this) {
 $this = $this|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $__annotator$i1 = 0, $__annotator$i4 = 0, $__old_size$i = 0, $curr = 0, $curr_vertex = 0, $edges = 0, $end = 0, $face = 0;
 var $face_start = 0, $heh = 0, $i = 0, $last_finished = 0, $n = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy12 = sp + 552|0;
 $$byval_copy11 = sp + 548|0;
 $$byval_copy10 = sp + 544|0;
 $$byval_copy9 = sp + 540|0;
 $$byval_copy8 = sp + 536|0;
 $$byval_copy7 = sp + 532|0;
 $$byval_copy6 = sp + 528|0;
 $$byval_copy5 = sp + 524|0;
 $$byval_copy4 = sp + 520|0;
 $$byval_copy3 = sp + 516|0;
 $$byval_copy2 = sp + 512|0;
 $$byval_copy1 = sp + 508|0;
 $$byval_copy = sp + 504|0;
 $__annotator$i4 = sp + 559|0;
 $__annotator$i1 = sp + 558|0;
 $__annotator$i = sp + 557|0;
 $42 = sp;
 $45 = sp + 556|0;
 $59 = sp + 268|0;
 $63 = sp + 252|0;
 $67 = sp + 236|0;
 $72 = sp + 216|0;
 $75 = sp + 204|0;
 $78 = sp + 192|0;
 $79 = sp + 188|0;
 $80 = sp + 184|0;
 $edges = sp + 160|0;
 $next = sp + 148|0;
 $heh = sp + 144|0;
 $end = sp + 132|0;
 $curr_vertex = sp + 124|0;
 $face_start = sp + 120|0;
 $85 = sp + 116|0;
 $face = sp + 112|0;
 $86 = sp + 108|0;
 $87 = sp + 104|0;
 $88 = sp + 100|0;
 $89 = sp + 96|0;
 $90 = sp + 92|0;
 $91 = sp + 88|0;
 $92 = sp + 84|0;
 $93 = sp + 80|0;
 $94 = sp + 76|0;
 $95 = sp + 72|0;
 $96 = sp + 68|0;
 $97 = sp + 64|0;
 $98 = sp + 60|0;
 $99 = sp + 56|0;
 $100 = sp + 52|0;
 $101 = sp + 48|0;
 $102 = sp + 44|0;
 $103 = sp + 40|0;
 $104 = sp + 36|0;
 $105 = sp + 32|0;
 $106 = sp + 28|0;
 $107 = sp + 24|0;
 $108 = sp + 12|0;
 $109 = sp + 8|0;
 $82 = $this;
 $111 = $82;
 $last_finished = -1;
 $81 = $next;
 $112 = $81;
 $77 = $112;
 $113 = $77;
 $76 = $113;
 $57 = $59;
 $58 = -1;
 $114 = $57;
 HEAP32[$114>>2] = 0;
 $115 = HEAP32[$59>>2]|0;
 HEAP32[$78>>2] = $115;
 $60 = $78;
 HEAP32[$113>>2] = 0;
 $116 = ((($113)) + 4|0);
 $61 = $63;
 $62 = -1;
 $117 = $61;
 HEAP32[$117>>2] = 0;
 $118 = HEAP32[$63>>2]|0;
 HEAP32[$79>>2] = $118;
 $64 = $79;
 HEAP32[$116>>2] = 0;
 $119 = ((($113)) + 8|0);
 $65 = $67;
 $66 = -1;
 $120 = $65;
 HEAP32[$120>>2] = 0;
 $121 = HEAP32[$67>>2]|0;
 HEAP32[$80>>2] = $121;
 $68 = $80;
 $74 = $119;
 HEAP32[$75>>2] = 0;
 $122 = $74;
 $73 = $75;
 $123 = $73;
 $124 = HEAP32[$123>>2]|0;
 $71 = $122;
 HEAP32[$72>>2] = $124;
 $125 = $71;
 $70 = $125;
 $69 = $72;
 $126 = $69;
 $127 = HEAP32[$126>>2]|0;
 HEAP32[$125>>2] = $127;
 __THREW__ = 0;
 invoke_vii(521,($heh|0),-1);
 $128 = __THREW__; __THREW__ = 0;
 $129 = $128&1;
 L1: do {
  if (!($129)) {
   __THREW__ = 0;
   invoke_vii(521,($end|0),-1);
   $130 = __THREW__; __THREW__ = 0;
   $131 = $130&1;
   if (!($131)) {
    L3: while(1) {
     $132 = ((($111)) + 24|0);
     __THREW__ = 0;
     $133 = (invoke_ii(522,($132|0))|0);
     $134 = __THREW__; __THREW__ = 0;
     $135 = $134&1;
     if ($135) {
      break L1;
     }
     $136 = $133 ^ 1;
     if (!($136)) {
      label = 56;
      break;
     }
     $137 = ((($111)) + 24|0);
     __THREW__ = 0;
     $138 = (invoke_ii(523,($137|0))|0);
     $139 = __THREW__; __THREW__ = 0;
     $140 = $139&1;
     if ($140) {
      break L1;
     }
     $curr = $138;
     $141 = $curr;
     $142 = ($141|0)==(-1);
     if ($142) {
      label = 56;
      break;
     }
     $147 = $curr;
     $last_finished = $147;
     $148 = HEAP32[$111>>2]|0;
     $149 = $curr;
     __THREW__ = 0;
     $150 = (invoke_iii(509,($148|0),($149|0))|0);
     $151 = __THREW__; __THREW__ = 0;
     $152 = $151&1;
     if ($152) {
      break L1;
     }
     HEAP32[$curr_vertex>>2] = $150;
     $153 = HEAP32[$111>>2]|0;
     ;HEAP32[$85>>2]=HEAP32[$curr_vertex>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$85>>2]|0;
     $154 = (invoke_iii(524,($153|0),($$byval_copy|0))|0);
     $155 = __THREW__; __THREW__ = 0;
     $156 = $155&1;
     if ($156) {
      break L1;
     }
     HEAP32[$face_start>>2] = $154;
     ;HEAP32[$face>>2]=HEAP32[$face_start>>2]|0;
     while(1) {
      $157 = HEAP32[$111>>2]|0;
      ;HEAP32[$87>>2]=HEAP32[$face>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy1>>2]=HEAP32[$87>>2]|0;
      $158 = (invoke_iii(525,($157|0),($$byval_copy1|0))|0);
      $159 = __THREW__; __THREW__ = 0;
      $160 = $159&1;
      if ($160) {
       break L1;
      }
      HEAP32[$86>>2] = $158;
      ;HEAP32[$face>>2]=HEAP32[$86>>2]|0;
      $161 = HEAP32[$111>>2]|0;
      ;HEAP32[$88>>2]=HEAP32[$face>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy2>>2]=HEAP32[$88>>2]|0;
      $162 = (invoke_iii(526,($161|0),($$byval_copy2|0))|0);
      $163 = __THREW__; __THREW__ = 0;
      $164 = $163&1;
      if ($164) {
       break L1;
      }
      L15: do {
       if (!($162)) {
        $165 = HEAP32[$111>>2]|0;
        ;HEAP32[$90>>2]=HEAP32[$face>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy3>>2]=HEAP32[$90>>2]|0;
        $166 = (invoke_iii(527,($165|0),($$byval_copy3|0))|0);
        $167 = __THREW__; __THREW__ = 0;
        $168 = $167&1;
        if ($168) {
         break L1;
        }
        HEAP32[$89>>2] = $166;
        ;HEAP32[$heh>>2]=HEAP32[$89>>2]|0;
        ;HEAP32[$end>>2]=HEAP32[$heh>>2]|0;
        $169 = HEAP32[$111>>2]|0;
        ;HEAP32[$91>>2]=HEAP32[$heh>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy4>>2]=HEAP32[$91>>2]|0;
        $170 = (invoke_iii(528,($169|0),($$byval_copy4|0))|0);
        $171 = __THREW__; __THREW__ = 0;
        $172 = $171&1;
        if ($172) {
         break L1;
        }
        HEAP32[$92>>2] = $170;
        __THREW__ = 0;
        $173 = (invoke_ii(529,($92|0))|0);
        $174 = __THREW__; __THREW__ = 0;
        $175 = $174&1;
        if ($175) {
         break L1;
        }
        HEAP32[$edges>>2] = $173;
        $176 = HEAP32[$111>>2]|0;
        ;HEAP32[$94>>2]=HEAP32[$heh>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy5>>2]=HEAP32[$94>>2]|0;
        $177 = (invoke_iii(530,($176|0),($$byval_copy5|0))|0);
        $178 = __THREW__; __THREW__ = 0;
        $179 = $178&1;
        if ($179) {
         break L1;
        }
        HEAP32[$93>>2] = $177;
        ;HEAP32[$heh>>2]=HEAP32[$93>>2]|0;
        $180 = HEAP32[$111>>2]|0;
        ;HEAP32[$95>>2]=HEAP32[$heh>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy6>>2]=HEAP32[$95>>2]|0;
        $181 = (invoke_iii(528,($180|0),($$byval_copy6|0))|0);
        $182 = __THREW__; __THREW__ = 0;
        $183 = $182&1;
        if ($183) {
         break L1;
        }
        HEAP32[$96>>2] = $181;
        __THREW__ = 0;
        $184 = (invoke_ii(529,($96|0))|0);
        $185 = __THREW__; __THREW__ = 0;
        $186 = $185&1;
        if ($186) {
         break L1;
        }
        $187 = ((($edges)) + 4|0);
        HEAP32[$187>>2] = $184;
        $188 = HEAP32[$111>>2]|0;
        ;HEAP32[$98>>2]=HEAP32[$heh>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy7>>2]=HEAP32[$98>>2]|0;
        $189 = (invoke_iii(530,($188|0),($$byval_copy7|0))|0);
        $190 = __THREW__; __THREW__ = 0;
        $191 = $190&1;
        if ($191) {
         break L1;
        }
        HEAP32[$97>>2] = $189;
        ;HEAP32[$heh>>2]=HEAP32[$97>>2]|0;
        $192 = HEAP32[$111>>2]|0;
        ;HEAP32[$99>>2]=HEAP32[$heh>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy8>>2]=HEAP32[$99>>2]|0;
        $193 = (invoke_iii(528,($192|0),($$byval_copy8|0))|0);
        $194 = __THREW__; __THREW__ = 0;
        $195 = $194&1;
        if ($195) {
         break L1;
        }
        HEAP32[$100>>2] = $193;
        __THREW__ = 0;
        $196 = (invoke_ii(529,($100|0))|0);
        $197 = __THREW__; __THREW__ = 0;
        $198 = $197&1;
        if ($198) {
         break L1;
        }
        $199 = ((($edges)) + 8|0);
        HEAP32[$199>>2] = $196;
        $200 = HEAP32[$111>>2]|0;
        ;HEAP32[$102>>2]=HEAP32[$heh>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy9>>2]=HEAP32[$102>>2]|0;
        $201 = (invoke_iii(530,($200|0),($$byval_copy9|0))|0);
        $202 = __THREW__; __THREW__ = 0;
        $203 = $202&1;
        if ($203) {
         break L1;
        }
        HEAP32[$101>>2] = $201;
        ;HEAP32[$heh>>2]=HEAP32[$101>>2]|0;
        $204 = ((($edges)) + 4|0);
        $205 = HEAP32[$204>>2]|0;
        $206 = $curr;
        $207 = ($205|0)==($206|0);
        if (!($207)) {
         label = 25;
         break L3;
        }
        $54 = $next;
        $209 = $54;
        $53 = $209;
        $210 = $53;
        $211 = ((($210)) + 4|0);
        $212 = HEAP32[$211>>2]|0;
        $213 = HEAP32[$210>>2]|0;
        $214 = $212;
        $215 = $213;
        $216 = (($214) - ($215))|0;
        $217 = (($216|0) / 4)&-1;
        $__old_size$i = $217;
        $51 = $209;
        $218 = $51;
        $219 = HEAP32[$218>>2]|0;
        $49 = $218;
        $50 = $219;
        $220 = $49;
        while(1) {
         $221 = $50;
         $222 = ((($220)) + 4|0);
         $223 = HEAP32[$222>>2]|0;
         $224 = ($221|0)!=($223|0);
         if (!($224)) {
          break;
         }
         $48 = $220;
         $225 = $48;
         $226 = ((($225)) + 8|0);
         $47 = $226;
         $227 = $47;
         $46 = $227;
         $228 = $46;
         $229 = ((($220)) + 4|0);
         $230 = HEAP32[$229>>2]|0;
         $231 = ((($230)) + -4|0);
         HEAP32[$229>>2] = $231;
         $39 = $231;
         $232 = $39;
         $43 = $228;
         $44 = $232;
         $233 = $43;
         $234 = $44;
         ;HEAP8[$42>>0]=HEAP8[$45>>0]|0;
         $40 = $233;
         $41 = $234;
        }
        $235 = $__old_size$i;
        __THREW__ = 0;
        invoke_vii(532,($209|0),($235|0));
        $236 = __THREW__; __THREW__ = 0;
        $237 = $236&1;
        if ($237) {
         label = 30;
         break L3;
        }
        $52 = $209;
        $241 = ((($edges)) + 8|0);
        $37 = $next;
        $38 = $241;
        $242 = $37;
        $243 = ((($242)) + 4|0);
        $244 = HEAP32[$243>>2]|0;
        $36 = $242;
        $245 = $36;
        $246 = ((($245)) + 8|0);
        $35 = $246;
        $247 = $35;
        $34 = $247;
        $248 = $34;
        $249 = HEAP32[$248>>2]|0;
        $250 = ($244|0)!=($249|0);
        if ($250) {
         __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i,$242,1);
         $33 = $242;
         $251 = $33;
         $252 = ((($251)) + 8|0);
         $32 = $252;
         $253 = $32;
         $31 = $253;
         $254 = $31;
         $255 = ((($242)) + 4|0);
         $256 = HEAP32[$255>>2]|0;
         $30 = $256;
         $257 = $30;
         $258 = $38;
         $27 = $254;
         $28 = $257;
         $29 = $258;
         $259 = $28;
         $260 = $29;
         $261 = HEAP32[$260>>2]|0;
         HEAP32[$259>>2] = $261;
         __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
         $262 = ((($242)) + 4|0);
         $263 = HEAP32[$262>>2]|0;
         $264 = ((($263)) + 4|0);
         HEAP32[$262>>2] = $264;
        } else {
         $265 = $38;
         __THREW__ = 0;
         invoke_vii(533,($242|0),($265|0));
         $266 = __THREW__; __THREW__ = 0;
         $267 = $266&1;
         if ($267) {
          break L1;
         }
        }
        while(1) {
         __THREW__ = 0;
         $268 = (invoke_iii(534,($heh|0),($end|0))|0);
         $269 = __THREW__; __THREW__ = 0;
         $270 = $269&1;
         if ($270) {
          break L1;
         }
         if (!($268)) {
          break;
         }
         $271 = HEAP32[$111>>2]|0;
         ;HEAP32[$104>>2]=HEAP32[$heh>>2]|0;
         __THREW__ = 0;
         ;HEAP32[$$byval_copy10>>2]=HEAP32[$104>>2]|0;
         $272 = (invoke_iii(528,($271|0),($$byval_copy10|0))|0);
         $273 = __THREW__; __THREW__ = 0;
         $274 = $273&1;
         if ($274) {
          break L1;
         }
         HEAP32[$105>>2] = $272;
         __THREW__ = 0;
         $275 = (invoke_ii(529,($105|0))|0);
         $276 = __THREW__; __THREW__ = 0;
         $277 = $276&1;
         if ($277) {
          break L1;
         }
         HEAP32[$103>>2] = $275;
         $25 = $next;
         $26 = $103;
         $278 = $25;
         $279 = ((($278)) + 4|0);
         $280 = HEAP32[$279>>2]|0;
         $24 = $278;
         $281 = $24;
         $282 = ((($281)) + 8|0);
         $23 = $282;
         $283 = $23;
         $22 = $283;
         $284 = $22;
         $285 = HEAP32[$284>>2]|0;
         $286 = ($280|0)!=($285|0);
         if ($286) {
          __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i1,$278,1);
          $21 = $278;
          $287 = $21;
          $288 = ((($287)) + 8|0);
          $20 = $288;
          $289 = $20;
          $19 = $289;
          $290 = $19;
          $291 = ((($278)) + 4|0);
          $292 = HEAP32[$291>>2]|0;
          $18 = $292;
          $293 = $18;
          $294 = $26;
          $15 = $290;
          $16 = $293;
          $17 = $294;
          $295 = $16;
          $296 = $17;
          $297 = HEAP32[$296>>2]|0;
          HEAP32[$295>>2] = $297;
          __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i1);
          $298 = ((($278)) + 4|0);
          $299 = HEAP32[$298>>2]|0;
          $300 = ((($299)) + 4|0);
          HEAP32[$298>>2] = $300;
         } else {
          $301 = $26;
          __THREW__ = 0;
          invoke_vii(533,($278|0),($301|0));
          $302 = __THREW__; __THREW__ = 0;
          $303 = $302&1;
          if ($303) {
           break L1;
          }
         }
         $304 = HEAP32[$111>>2]|0;
         ;HEAP32[$107>>2]=HEAP32[$heh>>2]|0;
         __THREW__ = 0;
         ;HEAP32[$$byval_copy11>>2]=HEAP32[$107>>2]|0;
         $305 = (invoke_iii(530,($304|0),($$byval_copy11|0))|0);
         $306 = __THREW__; __THREW__ = 0;
         $307 = $306&1;
         if ($307) {
          break L1;
         }
         HEAP32[$106>>2] = $305;
         ;HEAP32[$heh>>2]=HEAP32[$106>>2]|0;
        }
        $13 = $next;
        $14 = $edges;
        $308 = $13;
        $309 = ((($308)) + 4|0);
        $310 = HEAP32[$309>>2]|0;
        $12 = $308;
        $311 = $12;
        $312 = ((($311)) + 8|0);
        $11 = $312;
        $313 = $11;
        $10 = $313;
        $314 = $10;
        $315 = HEAP32[$314>>2]|0;
        $316 = ($310|0)!=($315|0);
        if ($316) {
         __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i4,$308,1);
         $9 = $308;
         $317 = $9;
         $318 = ((($317)) + 8|0);
         $8 = $318;
         $319 = $8;
         $7 = $319;
         $320 = $7;
         $321 = ((($308)) + 4|0);
         $322 = HEAP32[$321>>2]|0;
         $6 = $322;
         $323 = $6;
         $324 = $14;
         $3 = $320;
         $4 = $323;
         $5 = $324;
         $325 = $4;
         $326 = $5;
         $327 = HEAP32[$326>>2]|0;
         HEAP32[$325>>2] = $327;
         __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i4);
         $328 = ((($308)) + 4|0);
         $329 = HEAP32[$328>>2]|0;
         $330 = ((($329)) + 4|0);
         HEAP32[$328>>2] = $330;
        } else {
         $331 = $14;
         __THREW__ = 0;
         invoke_vii(533,($308|0),($331|0));
         $332 = __THREW__; __THREW__ = 0;
         $333 = $332&1;
         if ($333) {
          break L1;
         }
        }
        $i = 0;
        while(1) {
         $334 = $i;
         $2 = $next;
         $335 = $2;
         $336 = ((($335)) + 4|0);
         $337 = HEAP32[$336>>2]|0;
         $338 = HEAP32[$335>>2]|0;
         $339 = $337;
         $340 = $338;
         $341 = (($339) - ($340))|0;
         $342 = (($341|0) / 4)&-1;
         $343 = ($334>>>0)<($342>>>0);
         if (!($343)) {
          break L15;
         }
         $344 = $i;
         $0 = $next;
         $1 = $344;
         $345 = $0;
         $346 = $1;
         $347 = HEAP32[$345>>2]|0;
         $348 = (($347) + ($346<<2)|0);
         $349 = HEAP32[$348>>2]|0;
         $n = $349;
         $350 = $n;
         $351 = HEAP32[$edges>>2]|0;
         $352 = ($350|0)!=($351|0);
         if ($352) {
          $353 = $n;
          __THREW__ = 0;
          (invoke_iiii(535,($111|0),($353|0),($edges|0))|0);
          $354 = __THREW__; __THREW__ = 0;
          $355 = $354&1;
          if ($355) {
           break L1;
          }
         }
         $356 = $n;
         $357 = ((($edges)) + 8|0);
         $358 = HEAP32[$357>>2]|0;
         $359 = ($356|0)!=($358|0);
         if ($359) {
          $360 = $n;
          $361 = ((($edges)) + 4|0);
          __THREW__ = 0;
          (invoke_iiii(535,($111|0),($360|0),($361|0))|0);
          $362 = __THREW__; __THREW__ = 0;
          $363 = $362&1;
          if ($363) {
           break L1;
          }
         }
         $364 = $i;
         $365 = (($364) + 1)|0;
         $i = $365;
        }
       }
      } while(0);
      $366 = HEAP32[$111>>2]|0;
      ;HEAP32[$109>>2]=HEAP32[$face>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy12>>2]=HEAP32[$109>>2]|0;
      $367 = (invoke_iii(530,($366|0),($$byval_copy12|0))|0);
      $368 = __THREW__; __THREW__ = 0;
      $369 = $368&1;
      if ($369) {
       break L1;
      }
      HEAP32[$108>>2] = $367;
      ;HEAP32[$face>>2]=HEAP32[$108>>2]|0;
      __THREW__ = 0;
      $370 = (invoke_iii(534,($face|0),($face_start|0))|0);
      $371 = __THREW__; __THREW__ = 0;
      $372 = $371&1;
      if ($372) {
       break L1;
      }
      if (!($370)) {
       continue L3;
      }
     }
    }
    if ((label|0) == 25) {
     __THREW__ = 0;
     invoke_viiii(531,(11755|0),(11772|0),300,(11848|0));
     $208 = __THREW__; __THREW__ = 0;
     break;
    }
    else if ((label|0) == 30) {
     $238 = ___cxa_find_matching_catch()|0;
     $239 = tempRet0;
     $55 = $238;
     $56 = $239;
     $240 = $55;
     ___cxa_call_unexpected(($240|0));
     // unreachable;
    }
    else if ((label|0) == 56) {
     $373 = $last_finished;
     $110 = 1;
     __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($next);
     STACKTOP = sp;return ($373|0);
    }
   }
  }
 } while(0);
 $143 = ___cxa_find_matching_catch()|0;
 $144 = tempRet0;
 $83 = $143;
 $84 = $144;
 __THREW__ = 0;
 invoke_vi(518,($next|0));
 $145 = __THREW__; __THREW__ = 0;
 $146 = $145&1;
 if ($146) {
  $376 = ___cxa_find_matching_catch(0|0)|0;
  $377 = tempRet0;
  ___clang_call_terminate($376);
  // unreachable;
 } else {
  $374 = $83;
  $375 = $84;
  ___resumeException($374|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($__os,$__str) {
 $__os = $__os|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__os;
 $1 = $__str;
 $2 = $0;
 $3 = $1;
 $4 = $1;
 $5 = (__ZNSt3__111char_traitsIcE6lengthEPKc($4)|0);
 $6 = (__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($2,$3,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_($__os) {
 $__os = $__os|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 12|0;
 $8 = $__os;
 $9 = $8;
 $10 = $8;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + -12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($10) + ($13)|0);
 $3 = $14;
 $4 = 10;
 $15 = $3;
 $16 = (__ZNKSt3__18ios_base6getlocEv($15)|0);
 HEAP32[$5>>2] = $16;
 $2 = $5;
 $17 = $2;
 __THREW__ = 0;
 $18 = (invoke_iii(495,($17|0),(7688|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if (!($20)) {
  $21 = $4;
  $0 = $18;
  $1 = $21;
  $22 = $0;
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 28|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $1;
  __THREW__ = 0;
  $27 = (invoke_iii($25|0,($22|0),($26|0))|0);
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if (!($29)) {
   __ZNSt3__16localeD2Ev($5);
   (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($9,$27)|0);
   $38 = $8;
   (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($38)|0);
   $39 = $8;
   STACKTOP = sp;return ($39|0);
  }
 }
 $30 = ___cxa_find_matching_catch()|0;
 $31 = tempRet0;
 $6 = $30;
 $7 = $31;
 __THREW__ = 0;
 invoke_vi(496,($5|0));
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 if ($33) {
  $36 = ___cxa_find_matching_catch(0|0)|0;
  $37 = tempRet0;
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  $34 = $6;
  $35 = $7;
  ___resumeException($34|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEE11getDistanceEi($this,$ni) {
 $this = $this|0;
 $ni = $ni|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $ni;
 $4 = $2;
 $5 = ((($4)) + 56|0);
 $6 = $3;
 $0 = $5;
 $1 = $6;
 $7 = $0;
 $8 = $1;
 $9 = HEAP32[$7>>2]|0;
 $10 = (($9) + ($8<<3)|0);
 $11 = +HEAPF64[$10>>3];
 STACKTOP = sp;return (+$11);
}
function __ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEE8getAngleEi($this,$ni) {
 $this = $this|0;
 $ni = $ni|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $ni;
 $4 = $2;
 $5 = ((($4)) + 68|0);
 $6 = $3;
 $0 = $5;
 $1 = $6;
 $7 = $0;
 $8 = $1;
 $9 = HEAP32[$7>>2]|0;
 $10 = (($9) + ($8<<3)|0);
 $11 = +HEAPF64[$10>>3];
 STACKTOP = sp;return (+$11);
}
function __ZN4DGPC6MeshOMINS_7Vector3IdEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8OpenMesh21PolyMesh_ArrayKernelTIN4DGPC14OpenMeshTraitsINS1_7Vector3IdEEEEED2Ev($1);
 STACKTOP = sp;return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZN8OpenMesh21PolyMesh_ArrayKernelTIN4DGPC14OpenMeshTraitsINS1_7Vector3IdEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8OpenMesh9PolyMeshTINS_13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS3_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PolyMeshTINS_13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS3_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8OpenMesh16PolyConnectivityD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh16PolyConnectivityD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 2872;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 212|0);
 __THREW__ = 0;
 invoke_vi(536,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $11 = ___cxa_find_matching_catch()|0;
   $12 = tempRet0;
   $1 = $11;
   $2 = $12;
   $13 = ((($3)) + 200|0);
   __THREW__ = 0;
   invoke_vi(537,($13|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $22 = ___cxa_find_matching_catch(0|0)|0;
    $23 = tempRet0;
    ___clang_call_terminate($22);
    // unreachable;
   }
  } else {
   $8 = ((($3)) + 200|0);
   __THREW__ = 0;
   invoke_vi(537,($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $16 = ___cxa_find_matching_catch()|0;
    $17 = tempRet0;
    $1 = $16;
    $2 = $17;
    break;
   } else {
    __ZN8OpenMesh11ArrayKernelD2Ev(($3|0));
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(538,($3|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $22 = ___cxa_find_matching_catch(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  $20 = $1;
  $21 = $2;
  ___resumeException($20|0);
  // unreachable;
 }
}
function __ZNSt3__16vectorINS_4pairIN8OpenMesh14HalfedgeHandleES3_EENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseINS_4pairIN8OpenMesh14HalfedgeHandleES3_EENS_9allocatorIS4_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh16PolyConnectivity15AddFaceEdgeInfoENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN8OpenMesh16PolyConnectivity15AddFaceEdgeInfoENS_9allocatorIS3_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN8OpenMesh16PolyConnectivity15AddFaceEdgeInfoENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 12|0;
 $32 = sp + 4|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = ((($40)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = ((($45)) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = ((($40)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -8|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = ((($55)) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = ((($61)) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $70 = (($69|0) / 8)&-1;
 $25 = $58;
 $26 = $59;
 $27 = $70;
 $71 = $25;
 $72 = $26;
 $73 = $27;
 $22 = $71;
 $23 = $72;
 $24 = $73;
 $74 = $23;
 $21 = $74;
 $75 = $21;
 __ZdlPv($75);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseINS_4pairIN8OpenMesh14HalfedgeHandleES3_EENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 12|0;
 $32 = sp + 4|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = ((($40)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = ((($45)) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = ((($40)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -8|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = ((($55)) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = ((($61)) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $70 = (($69|0) / 8)&-1;
 $25 = $58;
 $26 = $59;
 $27 = $70;
 $71 = $25;
 $72 = $26;
 $73 = $27;
 $22 = $71;
 $23 = $72;
 $24 = $73;
 $74 = $23;
 $21 = $74;
 $75 = $21;
 __ZdlPv($75);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh16PolyConnectivityD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(1,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZNK8OpenMesh11ArrayKernel10n_verticesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 84|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 4)&-1;
 STACKTOP = sp;return ($11|0);
}
function __ZNK8OpenMesh11ArrayKernel11n_halfedgesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 96|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 32)&-1;
 $12 = $11<<1;
 STACKTOP = sp;return ($12|0);
}
function __ZNK8OpenMesh11ArrayKernel7n_edgesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 96|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 32)&-1;
 STACKTOP = sp;return ($11|0);
}
function __ZNK8OpenMesh11ArrayKernel7n_facesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 108|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 4)&-1;
 STACKTOP = sp;return ($11|0);
}
function __ZNSt3__111char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s;
 $1 = $0;
 $2 = (_strlen(($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($__os,$__str,$__len) {
 $__os = $__os|0;
 $__str = $__str|0;
 $__len = $__len|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__s = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 108|0;
 $5 = sp + 92|0;
 $__s = sp + 16|0;
 $25 = sp + 4|0;
 $26 = sp;
 $20 = $__os;
 $21 = $__str;
 $22 = $__len;
 $27 = $20;
 __THREW__ = 0;
 invoke_vii(539,($__s|0),($27|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 L1: do {
  if ($29) {
   label = 15;
  } else {
   $19 = $__s;
   $30 = $19;
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&1;
   do {
    if ($32) {
     $33 = $20;
     $17 = $25;
     $18 = $33;
     $34 = $17;
     $35 = $18;
     $36 = HEAP32[$35>>2]|0;
     $37 = ((($36)) + -12|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (($35) + ($38)|0);
     $16 = $39;
     $40 = $16;
     $15 = $40;
     $41 = $15;
     $42 = ((($41)) + 24|0);
     $43 = HEAP32[$42>>2]|0;
     HEAP32[$34>>2] = $43;
     $44 = $21;
     $45 = $20;
     $46 = HEAP32[$45>>2]|0;
     $47 = ((($46)) + -12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (($45) + ($48)|0);
     $10 = $49;
     $50 = $10;
     $51 = ((($50)) + 4|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $52 & 176;
     $54 = ($53|0)==(32);
     $55 = $21;
     $56 = $22;
     $57 = (($55) + ($56)|0);
     $58 = $54 ? $57 : $55;
     $59 = $21;
     $60 = $22;
     $61 = (($59) + ($60)|0);
     $62 = $20;
     $63 = HEAP32[$62>>2]|0;
     $64 = ((($63)) + -12|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (($62) + ($65)|0);
     $67 = $20;
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + -12|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (($67) + ($70)|0);
     $8 = $71;
     $72 = $8;
     $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $74 = ((($72)) + 76|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($73,$75)|0);
     do {
      if ($76) {
       $3 = $72;
       $4 = 32;
       $77 = $3;
       __THREW__ = 0;
       $78 = (invoke_ii(494,($77|0))|0);
       $79 = __THREW__; __THREW__ = 0;
       $80 = $79&1;
       if ($80) {
        label = 16;
       } else {
        HEAP32[$5>>2] = $78;
        $2 = $5;
        $81 = $2;
        __THREW__ = 0;
        $82 = (invoke_iii(495,($81|0),(7688|0))|0);
        $83 = __THREW__; __THREW__ = 0;
        $84 = $83&1;
        if (!($84)) {
         $85 = $4;
         $0 = $82;
         $1 = $85;
         $86 = $0;
         $87 = HEAP32[$86>>2]|0;
         $88 = ((($87)) + 28|0);
         $89 = HEAP32[$88>>2]|0;
         $90 = $1;
         __THREW__ = 0;
         $91 = (invoke_iii($89|0,($86|0),($90|0))|0);
         $92 = __THREW__; __THREW__ = 0;
         $93 = $92&1;
         if (!($93)) {
          __THREW__ = 0;
          invoke_vi(496,($5|0));
          $102 = __THREW__; __THREW__ = 0;
          $103 = $102&1;
          if ($103) {
           label = 16;
           break;
          }
          $104 = $91 << 24 >> 24;
          $105 = ((($72)) + 76|0);
          HEAP32[$105>>2] = $104;
          label = 12;
          break;
         }
        }
        $94 = ___cxa_find_matching_catch(0|0)|0;
        $95 = tempRet0;
        $6 = $94;
        $7 = $95;
        __THREW__ = 0;
        invoke_vi(496,($5|0));
        $96 = __THREW__; __THREW__ = 0;
        $97 = $96&1;
        if ($97) {
         $100 = ___cxa_find_matching_catch(0|0,0|0)|0;
         $101 = tempRet0;
         ___clang_call_terminate($100);
         // unreachable;
        } else {
         $98 = $6;
         $99 = $7;
         $eh$lpad$body$index2Z2D = $99;$eh$lpad$body$indexZ2D = $98;
         break;
        }
       }
      } else {
       label = 12;
      }
     } while(0);
     if ((label|0) == 12) {
      $106 = ((($72)) + 76|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = $107&255;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$25>>2]|0;
      $109 = (invoke_iiiiiii(540,($$byval_copy|0),($44|0),($58|0),($61|0),($66|0),($108|0))|0);
      $110 = __THREW__; __THREW__ = 0;
      $111 = $110&1;
      if ($111) {
       label = 16;
      } else {
       HEAP32[$26>>2] = $109;
       $9 = $26;
       $112 = $9;
       $113 = HEAP32[$112>>2]|0;
       $114 = ($113|0)==(0|0);
       if (!($114)) {
        break;
       }
       $115 = $20;
       $116 = HEAP32[$115>>2]|0;
       $117 = ((($116)) + -12|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = (($115) + ($118)|0);
       $13 = $119;
       $14 = 5;
       $120 = $13;
       $121 = $14;
       $11 = $120;
       $12 = $121;
       $122 = $11;
       $123 = ((($122)) + 16|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = $12;
       $126 = $124 | $125;
       __THREW__ = 0;
       invoke_vii(493,($122|0),($126|0));
       $127 = __THREW__; __THREW__ = 0;
       $128 = $127&1;
       if ($128) {
        label = 16;
       } else {
        break;
       }
      }
     }
     if ((label|0) == 16) {
      $131 = ___cxa_find_matching_catch(0|0)|0;
      $132 = tempRet0;
      $eh$lpad$body$index2Z2D = $132;$eh$lpad$body$indexZ2D = $131;
     }
     $23 = $eh$lpad$body$indexZ2D;
     $24 = $eh$lpad$body$index2Z2D;
     __THREW__ = 0;
     invoke_vi(541,($__s|0));
     $133 = __THREW__; __THREW__ = 0;
     $134 = $133&1;
     if (!($134)) {
      break L1;
     }
     $152 = ___cxa_find_matching_catch(0|0)|0;
     $153 = tempRet0;
     ___clang_call_terminate($152);
     // unreachable;
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(541,($__s|0));
   $135 = __THREW__; __THREW__ = 0;
   $136 = $135&1;
   if ($136) {
    label = 15;
   } else {
    $145 = $20;
    STACKTOP = sp;return ($145|0);
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $129 = ___cxa_find_matching_catch(0|0)|0;
  $130 = tempRet0;
  $23 = $129;
  $24 = $130;
 }
 $137 = $23;
 (___cxa_begin_catch(($137|0))|0);
 $138 = $20;
 $139 = HEAP32[$138>>2]|0;
 $140 = ((($139)) + -12|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = (($138) + ($141)|0);
 __THREW__ = 0;
 invoke_vi(542,($142|0));
 $143 = __THREW__; __THREW__ = 0;
 $144 = $143&1;
 if (!($144)) {
  ___cxa_end_catch();
  $145 = $20;
  STACKTOP = sp;return ($145|0);
 }
 $146 = ___cxa_find_matching_catch()|0;
 $147 = tempRet0;
 $23 = $146;
 $24 = $147;
 __THREW__ = 0;
 invoke_v(543);
 $148 = __THREW__; __THREW__ = 0;
 $149 = $148&1;
 if ($149) {
  $152 = ___cxa_find_matching_catch(0|0)|0;
  $153 = tempRet0;
  ___clang_call_terminate($152);
  // unreachable;
 } else {
  $150 = $23;
  $151 = $24;
  ___resumeException($150|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__111char_traitsIcE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__111char_traitsIcE11eq_int_typeEii($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__np = 0, $__ns = 0, $__r$i = 0, $__sp = 0, $__sz = 0, $cleanup$dest = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp + 172|0;
 $32 = sp + 136|0;
 $40 = sp + 104|0;
 $47 = sp + 72|0;
 $48 = sp + 68|0;
 $54 = sp + 48|0;
 $55 = sp + 32|0;
 $__sp = sp + 20|0;
 $58 = sp + 8|0;
 $60 = sp;
 $49 = $__ob;
 $50 = $__op;
 $51 = $__oe;
 $52 = $__iob;
 $53 = $__fl;
 $61 = HEAP32[$__s>>2]|0;
 $45 = $47;
 $46 = -1;
 $62 = $45;
 HEAP32[$62>>2] = 0;
 $63 = HEAP32[$47>>2]|0;
 HEAP32[$54>>2] = $63;
 $44 = $54;
 $64 = ($61|0)==(0|0);
 if ($64) {
  ;HEAP32[$48>>2]=HEAP32[$__s>>2]|0;
  $178 = HEAP32[$48>>2]|0;
  STACKTOP = sp;return ($178|0);
 }
 $65 = $51;
 $66 = $49;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $__sz = $69;
 $70 = $52;
 $34 = $70;
 $71 = $34;
 $72 = ((($71)) + 12|0);
 $73 = HEAP32[$72>>2]|0;
 $__ns = $73;
 $74 = $__ns;
 $75 = $__sz;
 $76 = ($74|0)>($75|0);
 if ($76) {
  $77 = $__sz;
  $78 = $__ns;
  $79 = (($78) - ($77))|0;
  $__ns = $79;
 } else {
  $__ns = 0;
 }
 $80 = $50;
 $81 = $49;
 $82 = $80;
 $83 = $81;
 $84 = (($82) - ($83))|0;
 $__np = $84;
 $85 = $__np;
 $86 = ($85|0)>(0);
 if ($86) {
  $87 = HEAP32[$__s>>2]|0;
  $88 = $49;
  $89 = $__np;
  $24 = $87;
  $25 = $88;
  $26 = $89;
  $90 = $24;
  $91 = HEAP32[$90>>2]|0;
  $92 = ((($91)) + 48|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $25;
  $95 = $26;
  $96 = (FUNCTION_TABLE_iiii[$93 & 1023]($90,$94,$95)|0);
  $97 = $__np;
  $98 = ($96|0)!=($97|0);
  if ($98) {
   $21 = $23;
   $22 = -1;
   $99 = $21;
   HEAP32[$99>>2] = 0;
   $100 = HEAP32[$23>>2]|0;
   HEAP32[$55>>2] = $100;
   $0 = $55;
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$48>>2]=HEAP32[$__s>>2]|0;
   $178 = HEAP32[$48>>2]|0;
   STACKTOP = sp;return ($178|0);
  }
 }
 $101 = $__ns;
 $102 = ($101|0)>(0);
 if ($102) {
  $103 = $__ns;
  $104 = $53;
  $4 = $__sp;
  $5 = $103;
  $6 = $104;
  $105 = $4;
  $3 = $105;
  $106 = $3;
  $2 = $106;
  $107 = $2;
  $1 = $107;
  $108 = $5;
  $109 = $6;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($105,$108,$109);
  $110 = HEAP32[$__s>>2]|0;
  $20 = $__sp;
  $111 = $20;
  $19 = $111;
  $112 = $19;
  $18 = $112;
  $113 = $18;
  $17 = $113;
  $114 = $17;
  $16 = $114;
  $115 = $16;
  $116 = HEAP8[$115>>0]|0;
  $117 = $116&255;
  $118 = $117 & 1;
  $119 = ($118|0)!=(0);
  if ($119) {
   $10 = $112;
   $120 = $10;
   $9 = $120;
   $121 = $9;
   $8 = $121;
   $122 = $8;
   $123 = ((($122)) + 8|0);
   $124 = HEAP32[$123>>2]|0;
   $131 = $124;
  } else {
   $15 = $112;
   $125 = $15;
   $14 = $125;
   $126 = $14;
   $13 = $126;
   $127 = $13;
   $128 = ((($127)) + 1|0);
   $12 = $128;
   $129 = $12;
   $11 = $129;
   $130 = $11;
   $131 = $130;
  }
  $7 = $131;
  $132 = $7;
  $133 = $__ns;
  $27 = $110;
  $28 = $132;
  $29 = $133;
  $134 = $27;
  $135 = HEAP32[$134>>2]|0;
  $136 = ((($135)) + 48|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $28;
  $139 = $29;
  __THREW__ = 0;
  $140 = (invoke_iiii($137|0,($134|0),($138|0),($139|0))|0);
  $141 = __THREW__; __THREW__ = 0;
  $142 = $141&1;
  if ($142) {
   $147 = ___cxa_find_matching_catch()|0;
   $148 = tempRet0;
   $56 = $147;
   $57 = $148;
   __THREW__ = 0;
   invoke_vi(502,($__sp|0));
   $149 = __THREW__; __THREW__ = 0;
   $150 = $149&1;
   if ($150) {
    $181 = ___cxa_find_matching_catch(0|0)|0;
    $182 = tempRet0;
    ___clang_call_terminate($181);
    // unreachable;
   } else {
    $179 = $56;
    $180 = $57;
    ___resumeException($179|0);
    // unreachable;
   }
  }
  $143 = $__ns;
  $144 = ($140|0)!=($143|0);
  if ($144) {
   $30 = $32;
   $31 = -1;
   $145 = $30;
   HEAP32[$145>>2] = 0;
   $146 = HEAP32[$32>>2]|0;
   HEAP32[$58>>2] = $146;
   $33 = $58;
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$48>>2]=HEAP32[$__s>>2]|0;
   $59 = 1;
  } else {
   $59 = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
  $cleanup$dest = $59;
  $switch = ($cleanup$dest>>>0)<(1);
  if (!($switch)) {
   $178 = HEAP32[$48>>2]|0;
   STACKTOP = sp;return ($178|0);
  }
 }
 $151 = $51;
 $152 = $50;
 $153 = $151;
 $154 = $152;
 $155 = (($153) - ($154))|0;
 $__np = $155;
 $156 = $__np;
 $157 = ($156|0)>(0);
 if ($157) {
  $158 = HEAP32[$__s>>2]|0;
  $159 = $50;
  $160 = $__np;
  $35 = $158;
  $36 = $159;
  $37 = $160;
  $161 = $35;
  $162 = HEAP32[$161>>2]|0;
  $163 = ((($162)) + 48|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $36;
  $166 = $37;
  $167 = (FUNCTION_TABLE_iiii[$164 & 1023]($161,$165,$166)|0);
  $168 = $__np;
  $169 = ($167|0)!=($168|0);
  if ($169) {
   $38 = $40;
   $39 = -1;
   $170 = $38;
   HEAP32[$170>>2] = 0;
   $171 = HEAP32[$40>>2]|0;
   HEAP32[$60>>2] = $171;
   $41 = $60;
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$48>>2]=HEAP32[$__s>>2]|0;
   $178 = HEAP32[$48>>2]|0;
   STACKTOP = sp;return ($178|0);
  }
 }
 $172 = $52;
 $42 = $172;
 $43 = 0;
 $173 = $42;
 $174 = ((($173)) + 12|0);
 $175 = HEAP32[$174>>2]|0;
 $__r$i = $175;
 $176 = $43;
 $177 = ((($173)) + 12|0);
 HEAP32[$177>>2] = $176;
 ;HEAP32[$48>>2]=HEAP32[$__s>>2]|0;
 $178 = HEAP32[$48>>2]|0;
 STACKTOP = sp;return ($178|0);
}
function __ZN8OpenMesh14HalfedgeHandleC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh10BaseHandleC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN4DGPC4HeapIdE5emptyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN4DGPC4HeapIdE3topEv($1)|0);
 $3 = ($2|0)==(-1);
 STACKTOP = sp;return ($3|0);
}
function __ZN4DGPC4HeapIdE12getCandidateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $3;
 $1 = $4;
 $5 = $1;
 $0 = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($6)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7|0)==($9|0);
 if ($10) {
  $2 = -1;
  $13 = $2;
  STACKTOP = sp;return ($13|0);
 } else {
  $11 = (__ZN4DGPC4HeapIdE3topEv($4)|0);
  $ret = $11;
  __ZN4DGPC4HeapIdE3popEv($4);
  $12 = $ret;
  $2 = $12;
  $13 = $2;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNK8OpenMesh11ArrayKernel13vertex_handleEj($this,$_i) {
 $this = $this|0;
 $_i = $_i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $3 = $this;
 $4 = $_i;
 $5 = $3;
 $6 = $4;
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($5)|0);
 $11 = ($6>>>0)<($10>>>0);
 if ($11) {
  $12 = ((($5)) + 84|0);
  $13 = $4;
  $0 = $12;
  $1 = $13;
  $14 = $0;
  $15 = $1;
  $16 = HEAP32[$14>>2]|0;
  $17 = (($16) + ($15<<2)|0);
  $18 = (__ZNK8OpenMesh11ArrayKernel6handleERKNS_10ArrayItems6VertexE(($5|0),($17|0))|0);
  HEAP32[$2>>2] = $18;
  $19 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($19|0);
 } else {
  __ZN8OpenMesh12VertexHandleC2Ei($2,-1);
  $19 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function __ZNK8OpenMesh11ArrayKernel15halfedge_handleENS_12VertexHandleE($this,$_vh) {
 $this = $this|0;
 $_vh = $_vh|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 12|0;
 $0 = sp + 8|0;
 $2 = sp;
 $1 = $this;
 $3 = $1;
 ;HEAP32[$2>>2]=HEAP32[$_vh>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
 $4 = (__ZNK8OpenMesh11ArrayKernel6vertexENS_12VertexHandleE($3,$$byval_copy)|0);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function __ZNK8OpenMesh11ArrayKernel24opposite_halfedge_handleENS_14HalfedgeHandleE($this,$_heh) {
 $this = $this|0;
 $_heh = $_heh|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = $this;
 $2 = (__ZNK8OpenMesh10BaseHandle3idxEv($_heh)|0);
 $3 = $2 & 1;
 $4 = ($3|0)!=(0);
 $5 = (__ZNK8OpenMesh10BaseHandle3idxEv($_heh)|0);
 $6 = (($5) - 1)|0;
 $7 = (($5) + 1)|0;
 $8 = $4 ? $6 : $7;
 __ZN8OpenMesh14HalfedgeHandleC2Ei($0,$8);
 $9 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($9|0);
}
function __ZNK8OpenMesh16PolyConnectivity11is_boundaryENS_14HalfedgeHandleE($this,$_heh) {
 $this = $this|0;
 $_heh = $_heh|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $1 = sp;
 $0 = $this;
 $2 = $0;
 ;HEAP32[$1>>2]=HEAP32[$_heh>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
 $3 = (__ZNK8OpenMesh11ArrayKernel11is_boundaryENS_14HalfedgeHandleE($2,$$byval_copy)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK8OpenMesh11ArrayKernel20prev_halfedge_handleENS_14HalfedgeHandleE($this,$_heh) {
 $this = $this|0;
 $_heh = $_heh|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 17|0;
 $$byval_copy = sp + 12|0;
 $0 = sp + 8|0;
 $2 = sp;
 $3 = sp + 16|0;
 $1 = $this;
 $4 = $1;
 ;HEAP32[$2>>2]=HEAP32[$_heh>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$3>>0]|0;
 $5 = (__ZNK8OpenMesh11ArrayKernel20prev_halfedge_handleENS_14HalfedgeHandleENS_7GenProg9Bool2TypeILb1EEE($4,$$byval_copy,$$byval_copy1)|0);
 HEAP32[$0>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNK8OpenMesh11ArrayKernel16to_vertex_handleENS_14HalfedgeHandleE($this,$_heh) {
 $this = $this|0;
 $_heh = $_heh|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 12|0;
 $0 = sp + 8|0;
 $2 = sp;
 $1 = $this;
 $3 = $1;
 ;HEAP32[$2>>2]=HEAP32[$_heh>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
 $4 = (__ZNK8OpenMesh11ArrayKernel8halfedgeENS_14HalfedgeHandleE($3,$$byval_copy)|0);
 $5 = ((($4)) + 4|0);
 ;HEAP32[$0>>2]=HEAP32[$5>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNK8OpenMesh10BaseHandle3idxEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZNK8OpenMesh11ArrayKernel20next_halfedge_handleENS_14HalfedgeHandleE($this,$_heh) {
 $this = $this|0;
 $_heh = $_heh|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 12|0;
 $0 = sp + 8|0;
 $2 = sp;
 $1 = $this;
 $3 = $1;
 ;HEAP32[$2>>2]=HEAP32[$_heh>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
 $4 = (__ZNK8OpenMesh11ArrayKernel8halfedgeENS_14HalfedgeHandleE($3,$$byval_copy)|0);
 $5 = ((($4)) + 8|0);
 ;HEAP32[$0>>2]=HEAP32[$5>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 4)&-1;
 $35 = (($22) + ($34<<2)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<2)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = (($43) + ($51<<2)|0);
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 72|0;
 $23 = sp + 60|0;
 $__v = sp + 12|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = ((($33)) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 4)&-1;
 $45 = (($44) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $45;
 $46 = $21;
 $47 = (__ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv($46)|0);
 $__ms$i = $47;
 $48 = HEAP32[$22>>2]|0;
 $49 = $__ms$i;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($46);
 }
 $19 = $46;
 $51 = $19;
 $18 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = ((($53)) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$52>>2]|0;
 $59 = $57;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 4)&-1;
 $__cap$i = $62;
 $63 = $__cap$i;
 $64 = $__ms$i;
 $65 = (($64>>>0) / 2)&-1;
 $66 = ($63>>>0)>=($65>>>0);
 if ($66) {
  $67 = $__ms$i;
  $20 = $67;
 } else {
  $68 = $__cap$i;
  $69 = $68<<1;
  HEAP32[$23>>2] = $69;
  $12 = $23;
  $13 = $22;
  $70 = $12;
  $71 = $13;
  ;HEAP8[$11>>0]=HEAP8[$14>>0]|0;
  $9 = $70;
  $10 = $71;
  $72 = $9;
  $73 = $10;
  $6 = $11;
  $7 = $72;
  $8 = $73;
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75>>>0)<($77>>>0);
  $79 = $10;
  $80 = $9;
  $81 = $78 ? $79 : $80;
  $82 = HEAP32[$81>>2]|0;
  $20 = $82;
 }
 $83 = $20;
 $5 = $32;
 $84 = $5;
 $85 = ((($84)) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$84>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 4)&-1;
 $92 = $__a;
 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EjjS3_($__v,$83,$91,$92);
 $93 = $__a;
 $94 = ((($__v)) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $4 = $95;
 $96 = $4;
 $97 = $29;
 $3 = $97;
 $98 = $3;
 $0 = $93;
 $1 = $96;
 $2 = $98;
 $99 = $1;
 $100 = $2;
 $101 = HEAP32[$100>>2]|0;
 HEAP32[$99>>2] = $101;
 $102 = ((($__v)) + 8|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ((($103)) + 4|0);
 HEAP32[$102>>2] = $104;
 __THREW__ = 0;
 invoke_vii(544,($32|0),($__v|0));
 $105 = __THREW__; __THREW__ = 0;
 $106 = $105&1;
 if (!($106)) {
  __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $107 = ___cxa_find_matching_catch()|0;
 $108 = tempRet0;
 $30 = $107;
 $31 = $108;
 __THREW__ = 0;
 invoke_vi(545,($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $113 = ___cxa_find_matching_catch(0|0)|0;
  $114 = tempRet0;
  ___clang_call_terminate($113);
  // unreachable;
 } else {
  $111 = $30;
  $112 = $31;
  ___resumeException($111|0);
  // unreachable;
 }
}
function __ZNK8OpenMesh10BaseHandleneERKS0_($this,$_rhs) {
 $this = $this|0;
 $_rhs = $_rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_rhs;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)!=($5|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEE22tryComputeNodeFromEdgeEiPi($this,$node,$edge) {
 $this = $this|0;
 $node = $node|0;
 $edge = $edge|0;
 var $$byval_copy = 0, $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $alpha = 0, $h = 0, $newdist = 0.0, $pt = 0, $thresh = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 72|0;
 $6 = sp + 76|0;
 $alpha = sp + 8|0;
 $h = sp + 32|0;
 $10 = sp + 24|0;
 $7 = $this;
 $8 = $node;
 $9 = $edge;
 $11 = $7;
 $12 = ((($11)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = 1.0 + $13;
 $thresh = $14;
 $15 = HEAP32[$11>>2]|0;
 $16 = $8;
 $17 = (__ZNK8OpenMesh11ArrayKernel13vertex_handleEj($15,$16)|0);
 HEAP32[$h>>2] = $17;
 $18 = HEAP32[$11>>2]|0;
 ;HEAP32[$10>>2]=HEAP32[$h>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$10>>2]|0;
 $19 = (__ZNK8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEE5pointENS_12VertexHandleE($18,$$byval_copy)|0);
 $pt = $19;
 $20 = $pt;
 $21 = $9;
 $22 = (+__ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEE15computeDistanceERKS3_PiRd($11,$20,$21,$alpha));
 $newdist = $22;
 $23 = ((($11)) + 56|0);
 $24 = $8;
 $4 = $23;
 $5 = $24;
 $25 = $4;
 $26 = $5;
 $27 = HEAP32[$25>>2]|0;
 $28 = (($27) + ($26<<3)|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $newdist;
 $31 = $29 / $30;
 $32 = $thresh;
 $33 = $31 > $32;
 if (!($33)) {
  $$expand_i1_val2 = 0;
  HEAP8[$6>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$6>>0]|0;
  $57 = $$pre_trunc&1;
  STACKTOP = sp;return ($57|0);
 }
 $34 = $newdist;
 $35 = ((($11)) + 56|0);
 $36 = $8;
 $2 = $35;
 $3 = $36;
 $37 = $2;
 $38 = $3;
 $39 = HEAP32[$37>>2]|0;
 $40 = (($39) + ($38<<3)|0);
 HEAPF64[$40>>3] = $34;
 $41 = $8;
 $42 = $9;
 $43 = +HEAPF64[$alpha>>3];
 $44 = (+__ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEE12computeAngleEiPid($11,$41,$42,$43));
 $45 = ((($11)) + 68|0);
 $46 = $8;
 $0 = $45;
 $1 = $46;
 $47 = $0;
 $48 = $1;
 $49 = HEAP32[$47>>2]|0;
 $50 = (($49) + ($48<<3)|0);
 HEAPF64[$50>>3] = $44;
 $51 = $newdist;
 $52 = ((($11)) + 16|0);
 $53 = +HEAPF64[$52>>3];
 $54 = $51 < $53;
 if ($54) {
  $55 = ((($11)) + 24|0);
  $56 = $8;
  __ZN4DGPC4HeapIdE4pushEi($55,$56);
 }
 $$expand_i1_val = 1;
 HEAP8[$6>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$6>>0]|0;
 $57 = $$pre_trunc&1;
 STACKTOP = sp;return ($57|0);
}
function __ZNK8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEE5pointENS_12VertexHandleE($this,$_vh) {
 $this = $this|0;
 $_vh = $_vh|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $1 = sp + 4|0;
 $2 = sp;
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 228|0);
 ;HEAP32[$1>>2]=HEAP32[$4>>2]|0;
 ;HEAP32[$2>>2]=HEAP32[$_vh>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;
 $5 = (__ZNK8OpenMesh10BaseKernel8propertyIN4DGPC7Vector3IdEEEENS_12VPropHandleTIT_E15const_referenceES7_NS_12VertexHandleE($3,$$byval_copy,$$byval_copy1)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEE15computeDistanceERKS3_PiRd($this,$pt,$edge,$alpha) {
 $this = $this|0;
 $pt = $pt|0;
 $edge = $edge|0;
 $alpha = $alpha|0;
 var $$byval_copy = 0, $$byval_copy4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0;
 var $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0;
 var $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0;
 var $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0;
 var $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0;
 var $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0;
 var $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0;
 var $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0.0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0;
 var $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0;
 var $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0;
 var $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0, $395 = 0.0, $396 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $A2 = 0.0;
 var $H = 0.0, $H_under_root = 0.0, $Nj = 0, $Nk = 0, $Ui = 0.0, $Uj = 0, $Ujsq = 0.0, $Uk = 0, $Uksq = 0.0, $a = 0.0, $b = 0.0, $c = 0.0, $cos_ji = 0.0, $cos_jk = 0.0, $dijkstra_j = 0.0, $dijkstra_j1 = 0.0, $dijkstra_k = 0.0, $dijkstra_k2 = 0.0, $djk = 0, $djksq = 0.0;
 var $djpt = 0.0, $djptsq = 0.0, $dkpt = 0.0, $dkptsq = 0.0, $ej = 0, $ej_ekj = 0.0, $ek = 0, $ek_ekj = 0.0, $ekj = 0, $f1_j = 0.0, $f1_k = 0.0, $f3 = 0.0, $f31 = 0.0, $f32 = 0.0, $f4 = 0.0, $or$cond = 0, $or$cond3 = 0, $xj = 0.0, $xk = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy4 = sp + 692|0;
 $$byval_copy = sp + 688|0;
 $5 = sp + 440|0;
 $8 = sp + 702|0;
 $14 = sp + 432|0;
 $17 = sp + 701|0;
 $23 = sp + 424|0;
 $26 = sp + 700|0;
 $32 = sp + 416|0;
 $35 = sp + 699|0;
 $41 = sp + 408|0;
 $44 = sp + 698|0;
 $50 = sp + 400|0;
 $53 = sp + 697|0;
 $59 = sp + 392|0;
 $62 = sp + 696|0;
 $72 = sp + 452|0;
 $73 = sp + 444|0;
 $Uk = sp + 376|0;
 $Uj = sp + 368|0;
 $ekj = sp + 312|0;
 $djk = sp + 296|0;
 $ej = sp + 216|0;
 $ek = sp + 192|0;
 $74 = sp + 160|0;
 $75 = sp + 16|0;
 $68 = $this;
 $69 = $pt;
 $70 = $edge;
 $71 = $alpha;
 $76 = $68;
 $77 = HEAP32[$76>>2]|0;
 $78 = HEAP32[$76>>2]|0;
 $79 = $70;
 $80 = HEAP32[$79>>2]|0;
 $81 = (__ZNK8OpenMesh11ArrayKernel13vertex_handleEj($78,$80)|0);
 HEAP32[$72>>2] = $81;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$72>>2]|0;
 $82 = (__ZNK8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEE5pointENS_12VertexHandleE($77,$$byval_copy)|0);
 $Nk = $82;
 $83 = HEAP32[$76>>2]|0;
 $84 = HEAP32[$76>>2]|0;
 $85 = $70;
 $86 = ((($85)) + 4|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (__ZNK8OpenMesh11ArrayKernel13vertex_handleEj($84,$87)|0);
 HEAP32[$73>>2] = $88;
 ;HEAP32[$$byval_copy4>>2]=HEAP32[$73>>2]|0;
 $89 = (__ZNK8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEE5pointENS_12VertexHandleE($83,$$byval_copy4)|0);
 $Nj = $89;
 $90 = ((($76)) + 56|0);
 $91 = $70;
 $92 = HEAP32[$91>>2]|0;
 $65 = $90;
 $66 = $92;
 $93 = $65;
 $94 = $66;
 $95 = HEAP32[$93>>2]|0;
 $96 = (($95) + ($94<<3)|0);
 $97 = +HEAPF64[$96>>3];
 HEAPF64[$Uk>>3] = $97;
 $98 = ((($76)) + 56|0);
 $99 = $70;
 $100 = ((($99)) + 4|0);
 $101 = HEAP32[$100>>2]|0;
 $63 = $98;
 $64 = $101;
 $102 = $63;
 $103 = $64;
 $104 = HEAP32[$102>>2]|0;
 $105 = (($104) + ($103<<3)|0);
 $106 = +HEAPF64[$105>>3];
 HEAPF64[$Uj>>3] = $106;
 $107 = $Nj;
 $108 = $69;
 $109 = (+__ZNK4DGPC7Vector3IdE5dist2ERKS1_($107,$108));
 $djptsq = $109;
 $110 = $djptsq;
 $111 = (+Math_sqrt((+$110)));
 $djpt = $111;
 $112 = $Nk;
 $113 = $69;
 $114 = (+__ZNK4DGPC7Vector3IdE5dist2ERKS1_($112,$113));
 $dkptsq = $114;
 $115 = $dkptsq;
 $116 = (+Math_sqrt((+$115)));
 $dkpt = $116;
 $117 = $Nk;
 $118 = $Nj;
 __ZNK4DGPC7Vector3IdEmiERKS1_($ekj,$117,$118);
 $119 = (+__ZNK4DGPC7Vector3IdE7length2Ev($ekj));
 $djksq = $119;
 $120 = $djksq;
 $121 = (+Math_sqrt((+$120)));
 HEAPF64[$djk>>3] = $121;
 $60 = $Uj;
 $61 = $Uk;
 $122 = $60;
 $123 = $61;
 ;HEAP8[$59>>0]=HEAP8[$62>>0]|0;
 $57 = $122;
 $58 = $123;
 $124 = $57;
 $125 = $58;
 $54 = $59;
 $55 = $124;
 $56 = $125;
 $126 = $55;
 $127 = +HEAPF64[$126>>3];
 $128 = $56;
 $129 = +HEAPF64[$128>>3];
 $130 = $127 < $129;
 $131 = $58;
 $132 = $57;
 $133 = $130 ? $131 : $132;
 $51 = $djk;
 $52 = $133;
 $134 = $51;
 $135 = $52;
 ;HEAP8[$50>>0]=HEAP8[$53>>0]|0;
 $48 = $134;
 $49 = $135;
 $136 = $48;
 $137 = $49;
 $45 = $50;
 $46 = $136;
 $47 = $137;
 $138 = $46;
 $139 = +HEAPF64[$138>>3];
 $140 = $47;
 $141 = +HEAPF64[$140>>3];
 $142 = $139 < $141;
 $143 = $49;
 $144 = $48;
 $145 = $142 ? $143 : $144;
 $146 = +HEAPF64[$145>>3];
 $a = $146;
 $42 = $Uj;
 $43 = $Uk;
 $147 = $42;
 $148 = $43;
 ;HEAP8[$41>>0]=HEAP8[$44>>0]|0;
 $39 = $147;
 $40 = $148;
 $149 = $40;
 $150 = $39;
 $36 = $41;
 $37 = $149;
 $38 = $150;
 $151 = $37;
 $152 = +HEAPF64[$151>>3];
 $153 = $38;
 $154 = +HEAPF64[$153>>3];
 $155 = $152 < $154;
 $156 = $40;
 $157 = $39;
 $158 = $155 ? $156 : $157;
 $33 = $djk;
 $34 = $158;
 $159 = $33;
 $160 = $34;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $30 = $159;
 $31 = $160;
 $161 = $31;
 $162 = $30;
 $27 = $32;
 $28 = $161;
 $29 = $162;
 $163 = $28;
 $164 = +HEAPF64[$163>>3];
 $165 = $29;
 $166 = +HEAPF64[$165>>3];
 $167 = $164 < $166;
 $168 = $31;
 $169 = $30;
 $170 = $167 ? $168 : $169;
 $171 = +HEAPF64[$170>>3];
 $c = $171;
 $172 = $a;
 $173 = +HEAPF64[$djk>>3];
 $174 = $172 == $173;
 do {
  if ($174) {
   $24 = $Uj;
   $25 = $Uk;
   $175 = $24;
   $176 = $25;
   ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
   $21 = $175;
   $22 = $176;
   $177 = $21;
   $178 = $22;
   $18 = $23;
   $19 = $177;
   $20 = $178;
   $179 = $19;
   $180 = +HEAPF64[$179>>3];
   $181 = $20;
   $182 = +HEAPF64[$181>>3];
   $183 = $180 < $182;
   $184 = $22;
   $185 = $21;
   $186 = $183 ? $184 : $185;
   $187 = +HEAPF64[$186>>3];
   $b = $187;
  } else {
   $188 = $a;
   $189 = +HEAPF64[$Uj>>3];
   $190 = $188 == $189;
   if ($190) {
    $15 = $djk;
    $16 = $Uk;
    $191 = $15;
    $192 = $16;
    ;HEAP8[$14>>0]=HEAP8[$17>>0]|0;
    $12 = $191;
    $13 = $192;
    $193 = $12;
    $194 = $13;
    $9 = $14;
    $10 = $193;
    $11 = $194;
    $195 = $10;
    $196 = +HEAPF64[$195>>3];
    $197 = $11;
    $198 = +HEAPF64[$197>>3];
    $199 = $196 < $198;
    $200 = $13;
    $201 = $12;
    $202 = $199 ? $200 : $201;
    $203 = +HEAPF64[$202>>3];
    $b = $203;
    break;
   }
   $204 = $a;
   $205 = +HEAPF64[$Uk>>3];
   $206 = $204 == $205;
   if ($206) {
    $6 = $djk;
    $7 = $Uj;
    $207 = $6;
    $208 = $7;
    ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
    $3 = $207;
    $4 = $208;
    $209 = $3;
    $210 = $4;
    $0 = $5;
    $1 = $209;
    $2 = $210;
    $211 = $1;
    $212 = +HEAPF64[$211>>3];
    $213 = $2;
    $214 = +HEAPF64[$213>>3];
    $215 = $212 < $214;
    $216 = $4;
    $217 = $3;
    $218 = $215 ? $216 : $217;
    $219 = +HEAPF64[$218>>3];
    $b = $219;
   }
  }
 } while(0);
 $220 = $a;
 $221 = $b;
 $222 = $c;
 $223 = $221 + $222;
 $224 = $220 + $223;
 $225 = $c;
 $226 = $a;
 $227 = $b;
 $228 = $226 - $227;
 $229 = $225 - $228;
 $230 = $224 * $229;
 $231 = $c;
 $232 = $a;
 $233 = $b;
 $234 = $232 - $233;
 $235 = $231 + $234;
 $236 = $230 * $235;
 $237 = $a;
 $238 = $b;
 $239 = $c;
 $240 = $238 - $239;
 $241 = $237 + $240;
 $242 = $236 * $241;
 $H_under_root = $242;
 $243 = $H_under_root;
 $244 = $243 < 0.0;
 $245 = +HEAPF64[$djk>>3];
 $246 = $245 < 9.9999999999999993E-12;
 $or$cond = $244 | $246;
 if ($or$cond) {
  $247 = +HEAPF64[$Uj>>3];
  $248 = $Nj;
  $249 = $69;
  $250 = (+__ZNK4DGPC7Vector3IdE4distERKS1_($248,$249));
  $251 = $247 + $250;
  $dijkstra_j = $251;
  $252 = +HEAPF64[$Uk>>3];
  $253 = $Nk;
  $254 = $69;
  $255 = (+__ZNK4DGPC7Vector3IdE4distERKS1_($253,$254));
  $256 = $252 + $255;
  $dijkstra_k = $256;
  $257 = $dijkstra_j;
  $258 = $dijkstra_k;
  $259 = $257 < $258;
  $260 = $71;
  if ($259) {
   HEAPF64[$260>>3] = 0.0;
   $261 = $dijkstra_j;
   $67 = $261;
   $396 = $67;
   STACKTOP = sp;return (+$396);
  } else {
   HEAPF64[$260>>3] = 1.0;
   $262 = $dijkstra_k;
   $67 = $262;
   $396 = $67;
   STACKTOP = sp;return (+$396);
  }
 }
 $263 = $H_under_root;
 $264 = (+Math_sqrt((+$263)));
 $H = $264;
 $265 = $Nj;
 $266 = $69;
 __ZNK4DGPC7Vector3IdEmiERKS1_($ej,$265,$266);
 $267 = $Nk;
 $268 = $69;
 __ZNK4DGPC7Vector3IdEmiERKS1_($ek,$267,$268);
 __ZNK4DGPC7Vector3IdE9crossProdERKS1_($74,$ej,$ek);
 $269 = (+__ZNK4DGPC7Vector3IdE6lengthEv($74));
 $A2 = $269;
 $270 = (+__ZNK4DGPC7Vector3IdEmlERKS1_($ej,$ekj));
 $ej_ekj = $270;
 $271 = (+__ZNK4DGPC7Vector3IdEmlERKS1_($ek,$ekj));
 $ek_ekj = $271;
 $272 = $djksq;
 $273 = +HEAPF64[$Uj>>3];
 $274 = +HEAPF64[$Uk>>3];
 $275 = $273 - $274;
 $276 = +HEAPF64[$Uj>>3];
 $277 = +HEAPF64[$Uk>>3];
 $278 = $276 - $277;
 $279 = $275 * $278;
 $280 = $272 - $279;
 $f31 = $280;
 $281 = +HEAPF64[$Uj>>3];
 $282 = +HEAPF64[$Uk>>3];
 $283 = $281 + $282;
 $284 = +HEAPF64[$Uj>>3];
 $285 = +HEAPF64[$Uk>>3];
 $286 = $284 + $285;
 $287 = $283 * $286;
 $288 = $djksq;
 $289 = $287 - $288;
 $f32 = $289;
 $290 = $f31;
 $291 = $f32;
 $292 = $290 * $291;
 $f3 = $292;
 $293 = +HEAPF64[$Uj>>3];
 $294 = +HEAPF64[$Uj>>3];
 $295 = $293 * $294;
 $Ujsq = $295;
 $296 = +HEAPF64[$Uk>>3];
 $297 = +HEAPF64[$Uk>>3];
 $298 = $296 * $297;
 $Uksq = $298;
 $299 = $A2;
 $300 = $djksq;
 $301 = $Uksq;
 $302 = $300 + $301;
 $303 = $Ujsq;
 $304 = $302 - $303;
 $305 = $299 * $304;
 $f1_j = $305;
 $306 = $A2;
 $307 = $djksq;
 $308 = $Ujsq;
 $309 = $307 + $308;
 $310 = $Uksq;
 $311 = $309 - $310;
 $312 = $306 * $311;
 $f1_k = $312;
 $313 = $f1_j;
 $314 = $ek_ekj;
 $315 = $H;
 $316 = $314 * $315;
 $317 = $313 + $316;
 $xj = $317;
 $318 = $f1_k;
 $319 = $ej_ekj;
 $320 = $H;
 $321 = $319 * $320;
 $322 = $318 - $321;
 $xk = $322;
 $323 = $xj;
 $324 = $323 < 0.0;
 $325 = $xk;
 $326 = $325 < 0.0;
 $or$cond3 = $324 | $326;
 if (!($or$cond3)) {
  $343 = $A2;
  $344 = 2.0 * $343;
  $345 = $djksq;
  $346 = $344 * $345;
  $f4 = $346;
  $347 = $xj;
  $348 = $xj;
  $349 = $347 * $348;
  $350 = $djptsq;
  $351 = $349 * $350;
  $352 = $xj;
  $353 = 2.0 * $352;
  $354 = $xk;
  $355 = $353 * $354;
  __ZN4DGPCmlIdEENS_7Vector3IT_EES2_RKS3_($75,$355,$ej);
  $356 = (+__ZNK4DGPC7Vector3IdEmlERKS1_($75,$ek));
  $357 = $351 + $356;
  $358 = $xk;
  $359 = $xk;
  $360 = $358 * $359;
  $361 = $dkptsq;
  $362 = $360 * $361;
  $363 = $357 + $362;
  $364 = (+Math_sqrt((+$363)));
  $365 = $f4;
  $366 = $364 / $365;
  $Ui = $366;
  $367 = $Ujsq;
  $368 = $Uksq;
  $369 = $367 + $368;
  $370 = $djksq;
  $371 = $369 - $370;
  $372 = +HEAPF64[$Uj>>3];
  $373 = 2.0 * $372;
  $374 = +HEAPF64[$Uk>>3];
  $375 = $373 * $374;
  $376 = $371 / $375;
  $cos_jk = $376;
  $377 = $Ujsq;
  $378 = $Ui;
  $379 = $Ui;
  $380 = $378 * $379;
  $381 = $377 + $380;
  $382 = $djptsq;
  $383 = $381 - $382;
  $384 = +HEAPF64[$Uj>>3];
  $385 = 2.0 * $384;
  $386 = $Ui;
  $387 = $385 * $386;
  $388 = $383 / $387;
  $cos_ji = $388;
  $389 = $cos_ji;
  $390 = (+Math_acos((+$389)));
  $391 = $cos_jk;
  $392 = (+Math_acos((+$391)));
  $393 = $390 / $392;
  $394 = $71;
  HEAPF64[$394>>3] = $393;
  $395 = $Ui;
  $67 = $395;
  $396 = $67;
  STACKTOP = sp;return (+$396);
 }
 $327 = +HEAPF64[$Uj>>3];
 $328 = $Nj;
 $329 = $69;
 $330 = (+__ZNK4DGPC7Vector3IdE4distERKS1_($328,$329));
 $331 = $327 + $330;
 $dijkstra_j1 = $331;
 $332 = +HEAPF64[$Uk>>3];
 $333 = $Nk;
 $334 = $69;
 $335 = (+__ZNK4DGPC7Vector3IdE4distERKS1_($333,$334));
 $336 = $332 + $335;
 $dijkstra_k2 = $336;
 $337 = $dijkstra_j1;
 $338 = $dijkstra_k2;
 $339 = $337 < $338;
 $340 = $71;
 if ($339) {
  HEAPF64[$340>>3] = 0.0;
  $341 = $dijkstra_j1;
  $67 = $341;
  $396 = $67;
  STACKTOP = sp;return (+$396);
 } else {
  HEAPF64[$340>>3] = 1.0;
  $342 = $dijkstra_k2;
  $67 = $342;
  $396 = $67;
  STACKTOP = sp;return (+$396);
 }
 return +(0.0);
}
function __ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEE12computeAngleEiPid($this,$node,$edge,$alpha) {
 $this = $this|0;
 $node = $node|0;
 $edge = $edge|0;
 $alpha = +$alpha;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $angle = 0.0;
 var $diff = 0.0, $njphi = 0.0, $nkphi = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = $this;
 $6 = $node;
 $7 = $edge;
 $8 = $alpha;
 $9 = $5;
 $10 = ((($9)) + 68|0);
 $11 = $7;
 $12 = HEAP32[$11>>2]|0;
 $2 = $10;
 $3 = $12;
 $13 = $2;
 $14 = $3;
 $15 = HEAP32[$13>>2]|0;
 $16 = (($15) + ($14<<3)|0);
 $17 = +HEAPF64[$16>>3];
 $nkphi = $17;
 $18 = ((($9)) + 68|0);
 $19 = $7;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $0 = $18;
 $1 = $21;
 $22 = $0;
 $23 = $1;
 $24 = HEAP32[$22>>2]|0;
 $25 = (($24) + ($23<<3)|0);
 $26 = +HEAPF64[$25>>3];
 $njphi = $26;
 $27 = $njphi;
 $28 = $nkphi;
 $29 = $27 - $28;
 $30 = (+Math_abs((+$29)));
 $diff = $30;
 $31 = $diff;
 $32 = ((($9)) + 8|0);
 $33 = +HEAPF64[$32>>3];
 $34 = $31 < $33;
 if ($34) {
  $35 = $njphi;
  $4 = $35;
  $58 = $4;
  STACKTOP = sp;return (+$58);
 }
 $36 = $diff;
 $37 = $36 > 3.1415926535897931;
 do {
  if ($37) {
   $38 = $njphi;
   $39 = $nkphi;
   $40 = $38 < $39;
   if ($40) {
    $41 = $njphi;
    $42 = $41 + 6.2831853071795862;
    $njphi = $42;
    break;
   } else {
    $43 = $nkphi;
    $44 = $43 + 6.2831853071795862;
    $nkphi = $44;
    break;
   }
  }
 } while(0);
 $45 = $8;
 $46 = 1.0 - $45;
 $47 = $njphi;
 $48 = $46 * $47;
 $49 = $8;
 $50 = $nkphi;
 $51 = $49 * $50;
 $52 = $48 + $51;
 $angle = $52;
 $53 = $angle;
 $54 = $53 > 6.2831853071795862;
 if ($54) {
  $55 = $angle;
  $56 = $55 - 6.2831853071795862;
  $angle = $56;
 }
 $57 = $angle;
 $4 = $57;
 $58 = $4;
 STACKTOP = sp;return (+$58);
}
function __ZN4DGPC4HeapIdE4pushEi($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 252|0;
 $$byval_copy = sp + 248|0;
 $13 = sp + 196|0;
 $14 = sp + 192|0;
 $15 = sp + 32|0;
 $16 = sp + 24|0;
 $17 = sp + 16|0;
 $20 = sp + 180|0;
 $23 = sp + 168|0;
 $27 = sp + 152|0;
 $30 = sp + 140|0;
 $__annotator$i$i = sp + 257|0;
 $46 = sp + 76|0;
 $47 = sp + 72|0;
 $48 = sp + 256|0;
 $53 = sp;
 $56 = sp + 40|0;
 $51 = $this;
 $52 = $idx;
 $57 = $51;
 $58 = $52;
 $59 = ((($57)) + 28|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $52;
 $49 = $60;
 $50 = $61;
 $62 = $49;
 $63 = $50;
 $64 = HEAP32[$62>>2]|0;
 $65 = (($64) + ($63<<3)|0);
 $66 = +HEAPF64[$65>>3];
 __ZN4DGPC8HeapNodeIdEC2Eid($53,$58,$66);
 $44 = $57;
 $45 = $53;
 $67 = $44;
 $68 = $45;
 $42 = $67;
 $43 = $68;
 $69 = $42;
 $70 = ((($69)) + 4|0);
 $71 = HEAP32[$70>>2]|0;
 $41 = $69;
 $72 = $41;
 $73 = ((($72)) + 8|0);
 $40 = $73;
 $74 = $40;
 $39 = $74;
 $75 = $39;
 $76 = HEAP32[$75>>2]|0;
 $77 = ($71|0)!=($76|0);
 if ($77) {
  __ZNSt3__16vectorIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i$i,$69,1);
  $38 = $69;
  $78 = $38;
  $79 = ((($78)) + 8|0);
  $37 = $79;
  $80 = $37;
  $36 = $80;
  $81 = $36;
  $82 = ((($69)) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $35 = $83;
  $84 = $35;
  $85 = $43;
  $32 = $81;
  $33 = $84;
  $34 = $85;
  $86 = $33;
  $87 = $34;
  ;HEAP32[$86>>2]=HEAP32[$87>>2]|0;HEAP32[$86+4>>2]=HEAP32[$87+4>>2]|0;HEAP32[$86+8>>2]=HEAP32[$87+8>>2]|0;HEAP32[$86+12>>2]=HEAP32[$87+12>>2]|0;
  __ZNSt3__16vectorIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i$i);
  $88 = ((($69)) + 4|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ((($89)) + 16|0);
  HEAP32[$88>>2] = $90;
  label = 4;
 } else {
  $91 = $43;
  __THREW__ = 0;
  invoke_vii(546,($69|0),($91|0));
  $92 = __THREW__; __THREW__ = 0;
  $93 = $92&1;
  if (!($93)) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $31 = $67;
  $94 = $31;
  $95 = HEAP32[$94>>2]|0;
  $28 = $94;
  $29 = $95;
  $96 = $29;
  $25 = $27;
  $26 = $96;
  $97 = $25;
  $98 = $26;
  HEAP32[$97>>2] = $98;
  $99 = HEAP32[$27>>2]|0;
  HEAP32[$30>>2] = $99;
  $100 = HEAP32[$30>>2]|0;
  HEAP32[$46>>2] = $100;
  $24 = $67;
  $101 = $24;
  $102 = ((($101)) + 4|0);
  $103 = HEAP32[$102>>2]|0;
  $21 = $101;
  $22 = $103;
  $104 = $22;
  $18 = $20;
  $19 = $104;
  $105 = $18;
  $106 = $19;
  HEAP32[$105>>2] = $106;
  $107 = HEAP32[$20>>2]|0;
  HEAP32[$23>>2] = $107;
  $108 = HEAP32[$23>>2]|0;
  HEAP32[$47>>2] = $108;
  ;HEAP8[$15>>0]=HEAP8[$48>>0]|0;
  ;HEAP8[$16>>0]=HEAP8[$47>>0]|0;HEAP8[$16+1>>0]=HEAP8[$47+1>>0]|0;HEAP8[$16+2>>0]=HEAP8[$47+2>>0]|0;HEAP8[$16+3>>0]=HEAP8[$47+3>>0]|0;
  ;HEAP8[$17>>0]=HEAP8[$46>>0]|0;HEAP8[$17+1>>0]=HEAP8[$46+1>>0]|0;HEAP8[$17+2>>0]=HEAP8[$46+2>>0]|0;HEAP8[$17+3>>0]=HEAP8[$46+3>>0]|0;
  ;HEAP32[$13>>2]=HEAP32[$17>>2]|0;
  ;HEAP32[$14>>2]=HEAP32[$16>>2]|0;
  $11 = $16;
  $12 = $17;
  $109 = $11;
  $10 = $109;
  $110 = $10;
  $111 = HEAP32[$110>>2]|0;
  $112 = $12;
  $9 = $112;
  $113 = $9;
  $114 = HEAP32[$113>>2]|0;
  $115 = $111;
  $116 = $114;
  $117 = (($115) - ($116))|0;
  $118 = (($117|0) / 16)&-1;
  __THREW__ = 0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$13>>2]|0;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$14>>2]|0;
  invoke_viiii(547,($$byval_copy|0),($$byval_copy1|0),($15|0),($118|0));
  $119 = __THREW__; __THREW__ = 0;
  $120 = $119&1;
  if (!($120)) {
   __ZN4DGPC8HeapNodeIdED2Ev($53);
   $121 = ((($57)) + 16|0);
   $122 = $52;
   $7 = $121;
   $8 = $122;
   $123 = $7;
   $124 = $8;
   $5 = $123;
   $6 = $124;
   $125 = $5;
   $126 = HEAP32[$125>>2]|0;
   $127 = $6;
   $128 = (($127>>>0) / 32)&-1;
   $129 = (($126) + ($128<<2)|0);
   $130 = $6;
   $131 = (($130>>>0) % 32)&-1;
   $132 = 1 << $131;
   $2 = $56;
   $3 = $129;
   $4 = $132;
   $133 = $2;
   $134 = $3;
   HEAP32[$133>>2] = $134;
   $135 = ((($133)) + 4|0);
   $136 = $4;
   HEAP32[$135>>2] = $136;
   $0 = $56;
   $1 = 1;
   $137 = $0;
   $138 = $1;
   $139 = $138&1;
   $140 = ((($137)) + 4|0);
   $141 = HEAP32[$140>>2]|0;
   if ($139) {
    $142 = HEAP32[$137>>2]|0;
    $143 = HEAP32[$142>>2]|0;
    $144 = $143 | $141;
    HEAP32[$142>>2] = $144;
    STACKTOP = sp;return;
   } else {
    $145 = $141 ^ -1;
    $146 = HEAP32[$137>>2]|0;
    $147 = HEAP32[$146>>2]|0;
    $148 = $147 & $145;
    HEAP32[$146>>2] = $148;
    STACKTOP = sp;return;
   }
  }
 }
 $149 = ___cxa_find_matching_catch()|0;
 $150 = tempRet0;
 $54 = $149;
 $55 = $150;
 __THREW__ = 0;
 invoke_vi(548,($53|0));
 $151 = __THREW__; __THREW__ = 0;
 $152 = $151&1;
 if ($152) {
  $155 = ___cxa_find_matching_catch(0|0)|0;
  $156 = tempRet0;
  ___clang_call_terminate($155);
  // unreachable;
 } else {
  $153 = $54;
  $154 = $55;
  ___resumeException($153|0);
  // unreachable;
 }
}
function __ZN4DGPC8HeapNodeIdEC2Eid($this,$idx,$key) {
 $this = $this|0;
 $idx = $idx|0;
 $key = +$key;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $key;
 $3 = $0;
 $4 = $1;
 HEAP32[$3>>2] = $4;
 $5 = $2;
 $6 = ((($3)) + 8|0);
 HEAPF64[$6>>3] = $5;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 72|0;
 $23 = sp + 60|0;
 $__v = sp + 12|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = ((($33)) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 16)&-1;
 $45 = (($44) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $45;
 $46 = $21;
 $47 = (__ZNKSt3__16vectorIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEE8max_sizeEv($46)|0);
 $__ms$i = $47;
 $48 = HEAP32[$22>>2]|0;
 $49 = $__ms$i;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($46);
 }
 $19 = $46;
 $51 = $19;
 $18 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = ((($53)) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$52>>2]|0;
 $59 = $57;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 16)&-1;
 $__cap$i = $62;
 $63 = $__cap$i;
 $64 = $__ms$i;
 $65 = (($64>>>0) / 2)&-1;
 $66 = ($63>>>0)>=($65>>>0);
 if ($66) {
  $67 = $__ms$i;
  $20 = $67;
 } else {
  $68 = $__cap$i;
  $69 = $68<<1;
  HEAP32[$23>>2] = $69;
  $12 = $23;
  $13 = $22;
  $70 = $12;
  $71 = $13;
  ;HEAP8[$11>>0]=HEAP8[$14>>0]|0;
  $9 = $70;
  $10 = $71;
  $72 = $9;
  $73 = $10;
  $6 = $11;
  $7 = $72;
  $8 = $73;
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75>>>0)<($77>>>0);
  $79 = $10;
  $80 = $9;
  $81 = $78 ? $79 : $80;
  $82 = HEAP32[$81>>2]|0;
  $20 = $82;
 }
 $83 = $20;
 $5 = $32;
 $84 = $5;
 $85 = ((($84)) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$84>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 16)&-1;
 $92 = $__a;
 __ZNSt3__114__split_bufferIN4DGPC8HeapNodeIdEERNS_9allocatorIS3_EEEC2EjjS6_($__v,$83,$91,$92);
 $93 = $__a;
 $94 = ((($__v)) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $4 = $95;
 $96 = $4;
 $97 = $29;
 $3 = $97;
 $98 = $3;
 $0 = $93;
 $1 = $96;
 $2 = $98;
 $99 = $1;
 $100 = $2;
 ;HEAP32[$99>>2]=HEAP32[$100>>2]|0;HEAP32[$99+4>>2]=HEAP32[$100+4>>2]|0;HEAP32[$99+8>>2]=HEAP32[$100+8>>2]|0;HEAP32[$99+12>>2]=HEAP32[$100+12>>2]|0;
 $101 = ((($__v)) + 8|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ((($102)) + 16|0);
 HEAP32[$101>>2] = $103;
 __THREW__ = 0;
 invoke_vii(549,($32|0),($__v|0));
 $104 = __THREW__; __THREW__ = 0;
 $105 = $104&1;
 if (!($105)) {
  __ZNSt3__114__split_bufferIN4DGPC8HeapNodeIdEERNS_9allocatorIS3_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $106 = ___cxa_find_matching_catch()|0;
 $107 = tempRet0;
 $30 = $106;
 $31 = $107;
 __THREW__ = 0;
 invoke_vi(550,($__v|0));
 $108 = __THREW__; __THREW__ = 0;
 $109 = $108&1;
 if ($109) {
  $112 = ___cxa_find_matching_catch(0|0)|0;
  $113 = tempRet0;
  ___clang_call_terminate($112);
  // unreachable;
 } else {
  $110 = $30;
  $111 = $31;
  ___resumeException($110|0);
  // unreachable;
 }
}
function __ZNSt3__19__sift_upIRNS_7greaterIN4DGPC8HeapNodeIdEEEENS_11__wrap_iterIPS4_EEEEvT0_SA_T_NS_15iterator_traitsISA_E15difference_typeE($__first,$__last,$__comp,$__len) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 $__len = $__len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $__ptr = 0, $__t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp + 96|0;
 $24 = sp + 40|0;
 $__ptr = sp + 20|0;
 $__t = sp;
 $29 = sp + 16|0;
 $27 = $__comp;
 $28 = $__len;
 $30 = $28;
 $31 = ($30|0)>(1);
 if (!($31)) {
  STACKTOP = sp;return;
 }
 $32 = $28;
 $33 = (($32) - 2)|0;
 $34 = (($33|0) / 2)&-1;
 $28 = $34;
 $35 = $28;
 $25 = $__first;
 $26 = $35;
 $36 = $25;
 ;HEAP32[$24>>2]=HEAP32[$36>>2]|0;
 $37 = $26;
 $22 = $24;
 $23 = $37;
 $38 = $22;
 $39 = $23;
 $40 = HEAP32[$38>>2]|0;
 $41 = (($40) + ($39<<4)|0);
 HEAP32[$38>>2] = $41;
 $42 = HEAP32[$24>>2]|0;
 HEAP32[$__ptr>>2] = $42;
 $43 = $27;
 $21 = $__ptr;
 $44 = $21;
 $45 = HEAP32[$44>>2]|0;
 $20 = $__last;
 $46 = $20;
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($47)) + -16|0);
 HEAP32[$46>>2] = $48;
 $14 = $46;
 $49 = $14;
 $50 = HEAP32[$49>>2]|0;
 $5 = $43;
 $6 = $45;
 $7 = $50;
 $51 = $6;
 $52 = $7;
 $53 = (__ZNK4DGPC8HeapNodeIdEgtERKS1_($51,$52)|0);
 if (!($53)) {
  STACKTOP = sp;return;
 }
 $4 = $__last;
 $54 = $4;
 $55 = HEAP32[$54>>2]|0;
 $0 = $55;
 $56 = $0;
 ;HEAP32[$__t>>2]=HEAP32[$56>>2]|0;HEAP32[$__t+4>>2]=HEAP32[$56+4>>2]|0;HEAP32[$__t+8>>2]=HEAP32[$56+8>>2]|0;HEAP32[$__t+12>>2]=HEAP32[$56+12>>2]|0;
 while(1) {
  $1 = $__last;
  $57 = $1;
  $58 = HEAP32[$57>>2]|0;
  $2 = $__ptr;
  $59 = $2;
  $60 = HEAP32[$59>>2]|0;
  $3 = $60;
  $61 = $3;
  ;HEAP32[$58>>2]=HEAP32[$61>>2]|0;HEAP32[$58+4>>2]=HEAP32[$61+4>>2]|0;HEAP32[$58+8>>2]=HEAP32[$61+8>>2]|0;HEAP32[$58+12>>2]=HEAP32[$61+12>>2]|0;
  ;HEAP32[$__last>>2]=HEAP32[$__ptr>>2]|0;
  $62 = $28;
  $63 = ($62|0)==(0);
  if ($63) {
   break;
  }
  $64 = $28;
  $65 = (($64) - 1)|0;
  $66 = (($65|0) / 2)&-1;
  $28 = $66;
  $67 = $28;
  $11 = $__first;
  $12 = $67;
  $68 = $11;
  ;HEAP32[$10>>2]=HEAP32[$68>>2]|0;
  $69 = $12;
  $8 = $10;
  $9 = $69;
  $70 = $8;
  $71 = $9;
  $72 = HEAP32[$70>>2]|0;
  $73 = (($72) + ($71<<4)|0);
  HEAP32[$70>>2] = $73;
  $74 = HEAP32[$10>>2]|0;
  HEAP32[$29>>2] = $74;
  ;HEAP32[$__ptr>>2]=HEAP32[$29>>2]|0;
  $75 = $27;
  $13 = $__ptr;
  $76 = $13;
  $77 = HEAP32[$76>>2]|0;
  $15 = $75;
  $16 = $77;
  $17 = $__t;
  $78 = $16;
  $79 = $17;
  $80 = (__ZNK4DGPC8HeapNodeIdEgtERKS1_($78,$79)|0);
  if (!($80)) {
   break;
  }
 }
 $18 = $__last;
 $81 = $18;
 $82 = HEAP32[$81>>2]|0;
 $19 = $__t;
 $83 = $19;
 ;HEAP32[$82>>2]=HEAP32[$83>>2]|0;HEAP32[$82+4>>2]=HEAP32[$83+4>>2]|0;HEAP32[$82+8>>2]=HEAP32[$83+8>>2]|0;HEAP32[$82+12>>2]=HEAP32[$83+12>>2]|0;
 __ZN4DGPC8HeapNodeIdED2Ev($__t);
 STACKTOP = sp;return;
}
function __ZN4DGPC8HeapNodeIdED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNK4DGPC8HeapNodeIdEgtERKS1_($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $x;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = $1;
 $6 = ((($5)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $4 > $7;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__16vectorIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 77|0;
 $10 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $3 = $24;
 $25 = $3;
 ;HEAP8[$2>>0]=HEAP8[$4>>0]|0;
 $1 = $25;
 $26 = $1;
 $0 = $26;
 HEAP32[$18>>2] = 268435455;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $11 = $18;
 $12 = $19;
 $28 = $11;
 $29 = $12;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $8 = $28;
 $9 = $29;
 $30 = $9;
 $31 = $8;
 $5 = $10;
 $6 = $30;
 $7 = $31;
 $32 = $6;
 $33 = HEAP32[$32>>2]|0;
 $34 = $7;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $9;
 $38 = $8;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIN4DGPC8HeapNodeIdEERNS_9allocatorIS3_EEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 124|0;
 $8 = sp + 108|0;
 $22 = sp + 52|0;
 $29 = sp + 24|0;
 $34 = sp + 4|0;
 $35 = sp;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = ((($36)) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = ((($46)) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = ((($54)) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $64 = $63<<4;
  $14 = $64;
  $65 = $14;
  $66 = (__Znwj($65)|0);
  $69 = $66;
 } else {
  $20 = $22;
  $21 = -1;
  $67 = $20;
  HEAP32[$67>>2] = 0;
  $68 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $68;
  $23 = $35;
  $69 = 0;
 }
 HEAP32[$36>>2] = $69;
 $70 = HEAP32[$36>>2]|0;
 $71 = $32;
 $72 = (($70) + ($71<<4)|0);
 $73 = ((($36)) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = ((($36)) + 4|0);
 HEAP32[$74>>2] = $72;
 $75 = HEAP32[$36>>2]|0;
 $76 = $31;
 $77 = (($75) + ($76<<4)|0);
 $26 = $36;
 $78 = $26;
 $79 = ((($78)) + 12|0);
 $25 = $79;
 $80 = $25;
 $24 = $80;
 $81 = $24;
 HEAP32[$81>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 140|0;
 $__t$i1 = sp + 116|0;
 $__t$i = sp + 68|0;
 $36 = $this;
 $37 = $__v;
 $38 = $36;
 __ZNKSt3__16vectorIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEE17__annotate_deleteEv($38);
 $35 = $38;
 $39 = $35;
 $40 = ((($39)) + 8|0);
 $34 = $40;
 $41 = $34;
 $33 = $41;
 $42 = $33;
 $43 = HEAP32[$38>>2]|0;
 $44 = ((($38)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $37;
 $47 = ((($46)) + 4|0);
 $28 = $42;
 $29 = $43;
 $30 = $45;
 $31 = $47;
 while(1) {
  $48 = $30;
  $49 = $29;
  $50 = ($48|0)!=($49|0);
  if (!($50)) {
   break;
  }
  $51 = $28;
  $52 = $31;
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + -16|0);
  $27 = $54;
  $55 = $27;
  $56 = $30;
  $57 = ((($56)) + -16|0);
  $30 = $57;
  $23 = $57;
  $58 = $23;
  $22 = $58;
  $59 = $22;
  $24 = $51;
  $25 = $55;
  $26 = $59;
  $60 = $25;
  $61 = $26;
  ;HEAP32[$60>>2]=HEAP32[$61>>2]|0;HEAP32[$60+4>>2]=HEAP32[$61+4>>2]|0;HEAP32[$60+8>>2]=HEAP32[$61+8>>2]|0;HEAP32[$60+12>>2]=HEAP32[$61+12>>2]|0;
  $62 = $31;
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($63)) + -16|0);
  HEAP32[$62>>2] = $64;
 }
 $65 = $37;
 $66 = ((($65)) + 4|0);
 $3 = $38;
 $4 = $66;
 $67 = $3;
 $2 = $67;
 $68 = $2;
 $69 = HEAP32[$68>>2]|0;
 HEAP32[$__t$i2>>2] = $69;
 $70 = $4;
 $0 = $70;
 $71 = $0;
 $72 = HEAP32[$71>>2]|0;
 $73 = $3;
 HEAP32[$73>>2] = $72;
 $1 = $__t$i2;
 $74 = $1;
 $75 = HEAP32[$74>>2]|0;
 $76 = $4;
 HEAP32[$76>>2] = $75;
 $77 = ((($38)) + 4|0);
 $78 = $37;
 $79 = ((($78)) + 8|0);
 $8 = $77;
 $9 = $79;
 $80 = $8;
 $7 = $80;
 $81 = $7;
 $82 = HEAP32[$81>>2]|0;
 HEAP32[$__t$i1>>2] = $82;
 $83 = $9;
 $5 = $83;
 $84 = $5;
 $85 = HEAP32[$84>>2]|0;
 $86 = $8;
 HEAP32[$86>>2] = $85;
 $6 = $__t$i1;
 $87 = $6;
 $88 = HEAP32[$87>>2]|0;
 $89 = $9;
 HEAP32[$89>>2] = $88;
 $12 = $38;
 $90 = $12;
 $91 = ((($90)) + 8|0);
 $11 = $91;
 $92 = $11;
 $10 = $92;
 $93 = $10;
 $94 = $37;
 $15 = $94;
 $95 = $15;
 $96 = ((($95)) + 12|0);
 $14 = $96;
 $97 = $14;
 $13 = $97;
 $98 = $13;
 $19 = $93;
 $20 = $98;
 $99 = $19;
 $18 = $99;
 $100 = $18;
 $101 = HEAP32[$100>>2]|0;
 HEAP32[$__t$i>>2] = $101;
 $102 = $20;
 $16 = $102;
 $103 = $16;
 $104 = HEAP32[$103>>2]|0;
 $105 = $19;
 HEAP32[$105>>2] = $104;
 $17 = $__t$i;
 $106 = $17;
 $107 = HEAP32[$106>>2]|0;
 $108 = $20;
 HEAP32[$108>>2] = $107;
 $109 = $37;
 $110 = ((($109)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $37;
 HEAP32[$112>>2] = $111;
 $21 = $38;
 $113 = $21;
 $114 = ((($113)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = HEAP32[$113>>2]|0;
 $117 = $115;
 $118 = $116;
 $119 = (($117) - ($118))|0;
 $120 = (($119|0) / 16)&-1;
 __ZNKSt3__16vectorIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEE14__annotate_newEj($38,$120);
 $32 = $38;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN4DGPC8HeapNodeIdEERNS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 8|0;
 $20 = sp + 125|0;
 $26 = sp;
 $29 = sp + 124|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26>>0]=HEAP8[$29>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = ((($38)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = ((($43)) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($38)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -16|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17>>0]=HEAP8[$20>>0]|0;
  $15 = $53;
  $16 = $54;
  $55 = $16;
  __ZN4DGPC8HeapNodeIdED2Ev($55);
 }
 $56 = HEAP32[$32>>2]|0;
 $57 = ($56|0)!=(0|0);
 if (!($57)) {
  STACKTOP = sp;return;
 }
 $13 = $32;
 $58 = $13;
 $59 = ((($58)) + 12|0);
 $12 = $59;
 $60 = $12;
 $11 = $60;
 $61 = $11;
 $62 = ((($61)) + 4|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = HEAP32[$32>>2]|0;
 $3 = $32;
 $65 = $3;
 $2 = $65;
 $66 = $2;
 $67 = ((($66)) + 12|0);
 $1 = $67;
 $68 = $1;
 $0 = $68;
 $69 = $0;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 16)&-1;
 $8 = $63;
 $9 = $64;
 $10 = $75;
 $76 = $8;
 $77 = $9;
 $78 = $10;
 $5 = $76;
 $6 = $77;
 $7 = $78;
 $79 = $6;
 $4 = $79;
 $80 = $4;
 __ZdlPv($80);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 16)&-1;
 $39 = (($26) + ($38<<4)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 16)&-1;
 $51 = (($42) + ($50<<4)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 16)&-1;
 $67 = (($54) + ($66<<4)|0);
 __ZNKSt3__16vectorIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 16)&-1;
 $39 = (($26) + ($38<<4)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 16)&-1;
 $55 = (($42) + ($54<<4)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<4)|0);
 __ZNKSt3__16vectorIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNK4DGPC7Vector3IdE5dist2ERKS1_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $dx = 0.0, $dy = 0.0, $dz = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = (__ZNK4DGPC7Vector3IdE1xEv($2)|0);
 $4 = +HEAPF64[$3>>3];
 $5 = $1;
 $6 = (__ZNK4DGPC7Vector3IdE1xEv($5)|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $4 - $7;
 $dx = $8;
 $9 = (__ZNK4DGPC7Vector3IdE1yEv($2)|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $1;
 $12 = (__ZNK4DGPC7Vector3IdE1yEv($11)|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $10 - $13;
 $dy = $14;
 $15 = (__ZNK4DGPC7Vector3IdE1zEv($2)|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $1;
 $18 = (__ZNK4DGPC7Vector3IdE1zEv($17)|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $16 - $19;
 $dz = $20;
 $21 = $dx;
 $22 = $dx;
 $23 = $21 * $22;
 $24 = $dy;
 $25 = $dy;
 $26 = $24 * $25;
 $27 = $23 + $26;
 $28 = $dz;
 $29 = $dz;
 $30 = $28 * $29;
 $31 = $27 + $30;
 STACKTOP = sp;return (+$31);
}
function __ZNK4DGPC7Vector3IdEmiERKS1_($agg$result,$this,$v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = (__ZNK4DGPC7Vector3IdE1xEv($2)|0);
 $4 = +HEAPF64[$3>>3];
 $5 = $1;
 $6 = (__ZNK4DGPC7Vector3IdE1xEv($5)|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $4 - $7;
 $9 = (__ZNK4DGPC7Vector3IdE1yEv($2)|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $1;
 $12 = (__ZNK4DGPC7Vector3IdE1yEv($11)|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $10 - $13;
 $15 = (__ZNK4DGPC7Vector3IdE1zEv($2)|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $1;
 $18 = (__ZNK4DGPC7Vector3IdE1zEv($17)|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $16 - $19;
 __ZN4DGPC7Vector3IdEC2Eddd($agg$result,$8,$14,$20);
 STACKTOP = sp;return;
}
function __ZNK4DGPC7Vector3IdE7length2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZNK4DGPC7Vector3IdE1xEv($1)|0);
 $3 = +HEAPF64[$2>>3];
 $4 = (__ZNK4DGPC7Vector3IdE1xEv($1)|0);
 $5 = +HEAPF64[$4>>3];
 $6 = $3 * $5;
 $7 = (__ZNK4DGPC7Vector3IdE1yEv($1)|0);
 $8 = +HEAPF64[$7>>3];
 $9 = (__ZNK4DGPC7Vector3IdE1yEv($1)|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $8 * $10;
 $12 = $6 + $11;
 $13 = (__ZNK4DGPC7Vector3IdE1zEv($1)|0);
 $14 = +HEAPF64[$13>>3];
 $15 = (__ZNK4DGPC7Vector3IdE1zEv($1)|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $14 * $16;
 $18 = $12 + $17;
 STACKTOP = sp;return (+$18);
}
function __ZNK4DGPC7Vector3IdE4distERKS1_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = (+__ZNK4DGPC7Vector3IdE5dist2ERKS1_($2,$3));
 $5 = (+Math_sqrt((+$4)));
 STACKTOP = sp;return (+$5);
}
function __ZNK4DGPC7Vector3IdE9crossProdERKS1_($agg$result,$this,$v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $5 = 0, $6 = 0, $7 = 0.0;
 var $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = (__ZNK4DGPC7Vector3IdE1yEv($2)|0);
 $4 = +HEAPF64[$3>>3];
 $5 = $1;
 $6 = (__ZNK4DGPC7Vector3IdE1zEv($5)|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $4 * $7;
 $9 = (__ZNK4DGPC7Vector3IdE1zEv($2)|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $1;
 $12 = (__ZNK4DGPC7Vector3IdE1yEv($11)|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $10 * $13;
 $15 = $8 - $14;
 $16 = (__ZNK4DGPC7Vector3IdE1zEv($2)|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $1;
 $19 = (__ZNK4DGPC7Vector3IdE1xEv($18)|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $17 * $20;
 $22 = (__ZNK4DGPC7Vector3IdE1xEv($2)|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $1;
 $25 = (__ZNK4DGPC7Vector3IdE1zEv($24)|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $23 * $26;
 $28 = $21 - $27;
 $29 = (__ZNK4DGPC7Vector3IdE1xEv($2)|0);
 $30 = +HEAPF64[$29>>3];
 $31 = $1;
 $32 = (__ZNK4DGPC7Vector3IdE1yEv($31)|0);
 $33 = +HEAPF64[$32>>3];
 $34 = $30 * $33;
 $35 = (__ZNK4DGPC7Vector3IdE1yEv($2)|0);
 $36 = +HEAPF64[$35>>3];
 $37 = $1;
 $38 = (__ZNK4DGPC7Vector3IdE1xEv($37)|0);
 $39 = +HEAPF64[$38>>3];
 $40 = $36 * $39;
 $41 = $34 - $40;
 __ZN4DGPC7Vector3IdEC2Eddd($agg$result,$15,$28,$41);
 STACKTOP = sp;return;
}
function __ZNK4DGPC7Vector3IdE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (+__ZNK4DGPC7Vector3IdE7length2Ev($1));
 $3 = (+Math_sqrt((+$2)));
 STACKTOP = sp;return (+$3);
}
function __ZNK4DGPC7Vector3IdEmlERKS1_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = (__ZNK4DGPC7Vector3IdE1xEv($2)|0);
 $4 = +HEAPF64[$3>>3];
 $5 = $1;
 $6 = (__ZNK4DGPC7Vector3IdE1xEv($5)|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $4 * $7;
 $9 = (__ZNK4DGPC7Vector3IdE1yEv($2)|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $1;
 $12 = (__ZNK4DGPC7Vector3IdE1yEv($11)|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $10 * $13;
 $15 = $8 + $14;
 $16 = (__ZNK4DGPC7Vector3IdE1zEv($2)|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $1;
 $19 = (__ZNK4DGPC7Vector3IdE1zEv($18)|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $17 * $20;
 $22 = $15 + $21;
 STACKTOP = sp;return (+$22);
}
function __ZN4DGPCmlIdEENS_7Vector3IT_EES2_RKS3_($agg$result,$d,$v) {
 $agg$result = $agg$result|0;
 $d = +$d;
 $v = $v|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $d;
 $1 = $v;
 $2 = $1;
 $3 = $0;
 __ZNK4DGPC7Vector3IdEmlEd($agg$result,$2,$3);
 STACKTOP = sp;return;
}
function __ZNK4DGPC7Vector3IdEmlEd($agg$result,$this,$d) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $d = +$d;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $d;
 $2 = $0;
 $3 = (__ZNK4DGPC7Vector3IdE1xEv($2)|0);
 $4 = +HEAPF64[$3>>3];
 $5 = $1;
 $6 = $4 * $5;
 $7 = (__ZNK4DGPC7Vector3IdE1yEv($2)|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $1;
 $10 = $8 * $9;
 $11 = (__ZNK4DGPC7Vector3IdE1zEv($2)|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $1;
 $14 = $12 * $13;
 __ZN4DGPC7Vector3IdEC2Eddd($agg$result,$6,$10,$14);
 STACKTOP = sp;return;
}
function __ZNK4DGPC7Vector3IdE1xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK4DGPC7Vector3IdE1yEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK4DGPC7Vector3IdE1zEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN4DGPC7Vector3IdEC2Eddd($this,$x,$y,$z) {
 $this = $this|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZN4DGPC7Vector3IdE3setEddd($4,$5,$6,$7);
 STACKTOP = sp;return;
}
function __ZN4DGPC7Vector3IdE3setEddd($this,$x,$y,$z) {
 $this = $this|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $0;
 $5 = $1;
 HEAPF64[$4>>3] = $5;
 $6 = $2;
 $7 = ((($4)) + 8|0);
 HEAPF64[$7>>3] = $6;
 $8 = $3;
 $9 = ((($4)) + 16|0);
 HEAPF64[$9>>3] = $8;
 STACKTOP = sp;return;
}
function __ZNK8OpenMesh10BaseKernel8propertyIN4DGPC7Vector3IdEEEENS_12VPropHandleTIT_E15const_referenceES7_NS_12VertexHandleE($this,$_ph,$_vh) {
 $this = $this|0;
 $_ph = $_ph|0;
 $_vh = $_vh|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $1 = sp;
 $0 = $this;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 ;HEAP32[$1>>2]=HEAP32[$_ph>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNK8OpenMesh17PropertyContainer8propertyIN4DGPC7Vector3IdEEEERKNS_9PropertyTIT_EENS_15BasePropHandleTIS6_EE($3,$$byval_copy)|0);
 $5 = (__ZNK8OpenMesh10BaseHandle3idxEv($_vh)|0);
 $6 = (__ZNK8OpenMesh9PropertyTIN4DGPC7Vector3IdEEEixEi($4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK8OpenMesh17PropertyContainer8propertyIN4DGPC7Vector3IdEEEERKNS_9PropertyTIT_EENS_15BasePropHandleTIS6_EE($this,$_h) {
 $this = $this|0;
 $_h = $_h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = $this;
 $6 = $5;
 $7 = (__ZNK8OpenMesh10BaseHandle3idxEv($_h)|0);
 $8 = ($7|0)>=(0);
 if (!($8)) {
  ___assert_fail((11956|0),(12008|0),166,(12082|0));
  // unreachable;
 }
 $9 = (__ZNK8OpenMesh10BaseHandle3idxEv($_h)|0);
 $10 = ((($6)) + 4|0);
 $4 = $10;
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$11>>2]|0;
 $15 = $13;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = (($17|0) / 4)&-1;
 $19 = ($9|0)<($18|0);
 if (!($19)) {
  ___assert_fail((11956|0),(12008|0),166,(12082|0));
  // unreachable;
 }
 $20 = ((($6)) + 4|0);
 $21 = (__ZNK8OpenMesh10BaseHandle3idxEv($_h)|0);
 $0 = $20;
 $1 = $21;
 $22 = $0;
 $23 = $1;
 $24 = HEAP32[$22>>2]|0;
 $25 = (($24) + ($23<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  ___assert_fail((12091|0),(12008|0),167,(12082|0));
  // unreachable;
 }
 $28 = ((($6)) + 4|0);
 $29 = (__ZNK8OpenMesh10BaseHandle3idxEv($_h)|0);
 $2 = $28;
 $3 = $29;
 $30 = $2;
 $31 = $3;
 $32 = HEAP32[$30>>2]|0;
 $33 = (($32) + ($31<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0|0);
 if ($35) {
  $37 = 0;
 } else {
  $36 = (___dynamic_cast($34,__ZTIN8OpenMesh12BasePropertyE,24,0)|0);
  $37 = $36;
 }
 $p = $37;
 $38 = $p;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = $p;
  STACKTOP = sp;return ($40|0);
 } else {
  ___assert_fail((12121|0),(12008|0),172,(12082|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNK8OpenMesh9PropertyTIN4DGPC7Vector3IdEEEixEi($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $_idx;
 $5 = $3;
 $6 = $4;
 $7 = ((($5)) + 20|0);
 $2 = $7;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$8>>2]|0;
 $12 = $10;
 $13 = $11;
 $14 = (($12) - ($13))|0;
 $15 = (($14|0) / 24)&-1;
 $16 = ($6>>>0)<($15>>>0);
 if ($16) {
  $17 = ((($5)) + 20|0);
  $18 = $4;
  $0 = $17;
  $1 = $18;
  $19 = $0;
  $20 = $1;
  $21 = HEAP32[$19>>2]|0;
  $22 = (($21) + (($20*24)|0)|0);
  STACKTOP = sp;return ($22|0);
 } else {
  ___assert_fail((11852|0),(11880|0),202,(11945|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 77|0;
 $10 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $3 = $24;
 $25 = $3;
 ;HEAP8[$2>>0]=HEAP8[$4>>0]|0;
 $1 = $25;
 $26 = $1;
 $0 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $11 = $18;
 $12 = $19;
 $28 = $11;
 $29 = $12;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $8 = $28;
 $9 = $29;
 $30 = $9;
 $31 = $8;
 $5 = $10;
 $6 = $30;
 $7 = $31;
 $32 = $6;
 $33 = HEAP32[$32>>2]|0;
 $34 = $7;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $9;
 $38 = $8;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 124|0;
 $8 = sp + 108|0;
 $22 = sp + 52|0;
 $29 = sp + 24|0;
 $34 = sp + 4|0;
 $35 = sp;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = ((($36)) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = ((($46)) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = ((($54)) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $64 = $63<<2;
  $14 = $64;
  $65 = $14;
  $66 = (__Znwj($65)|0);
  $69 = $66;
 } else {
  $20 = $22;
  $21 = -1;
  $67 = $20;
  HEAP32[$67>>2] = 0;
  $68 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $68;
  $23 = $35;
  $69 = 0;
 }
 HEAP32[$36>>2] = $69;
 $70 = HEAP32[$36>>2]|0;
 $71 = $32;
 $72 = (($70) + ($71<<2)|0);
 $73 = ((($36)) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = ((($36)) + 4|0);
 HEAP32[$74>>2] = $72;
 $75 = HEAP32[$36>>2]|0;
 $76 = $31;
 $77 = (($75) + ($76<<2)|0);
 $26 = $36;
 $78 = $26;
 $79 = ((($78)) + 12|0);
 $25 = $79;
 $80 = $25;
 $24 = $80;
 $81 = $24;
 HEAP32[$81>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 8|0;
 $20 = sp + 125|0;
 $26 = sp;
 $29 = sp + 124|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26>>0]=HEAP8[$29>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = ((($38)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = ((($43)) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($38)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -4|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17>>0]=HEAP8[$20>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = ((($57)) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = ((($65)) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 4)&-1;
 $11 = $62;
 $12 = $63;
 $13 = $74;
 $75 = $11;
 $76 = $12;
 $77 = $13;
 $8 = $75;
 $9 = $76;
 $10 = $77;
 $78 = $9;
 $7 = $78;
 $79 = $7;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNK8OpenMesh11ArrayKernel8halfedgeENS_14HalfedgeHandleE($this,$_heh) {
 $this = $this|0;
 $_heh = $_heh|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $3 = sp;
 $2 = $this;
 $4 = $2;
 ;HEAP32[$3>>2]=HEAP32[$_heh>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
 $5 = (__ZNK8OpenMesh11ArrayKernel15is_valid_handleENS_14HalfedgeHandleE(($4|0),($$byval_copy|0))|0);
 if ($5) {
  $6 = (__ZNK8OpenMesh10BaseHandle3idxEv($_heh)|0);
  $7 = $6 & 1;
  $8 = ((($4)) + 96|0);
  $9 = (__ZNK8OpenMesh10BaseHandle3idxEv($_heh)|0);
  $10 = $9 >> 1;
  $0 = $8;
  $1 = $10;
  $11 = $0;
  $12 = $1;
  $13 = HEAP32[$11>>2]|0;
  $14 = (($13) + ($12<<5)|0);
  $15 = (($14) + ($7<<4)|0);
  STACKTOP = sp;return ($15|0);
 } else {
  ___assert_fail((12173|0),(12195|0),159,(12262|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNK8OpenMesh11ArrayKernel20prev_halfedge_handleENS_14HalfedgeHandleENS_7GenProg9Bool2TypeILb1EEE($this,$_heh,$0) {
 $this = $this|0;
 $_heh = $_heh|0;
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 12|0;
 $1 = sp + 8|0;
 $3 = sp;
 $2 = $this;
 $4 = $2;
 ;HEAP32[$3>>2]=HEAP32[$_heh>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
 $5 = (__ZNK8OpenMesh11ArrayKernel8halfedgeENS_14HalfedgeHandleE($4,$$byval_copy)|0);
 $6 = ((($5)) + 12|0);
 ;HEAP32[$1>>2]=HEAP32[$6>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZNK8OpenMesh11ArrayKernel11is_boundaryENS_14HalfedgeHandleE($this,$_heh) {
 $this = $this|0;
 $_heh = $_heh|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 12|0;
 $1 = sp + 4|0;
 $2 = sp;
 $0 = $this;
 $3 = $0;
 ;HEAP32[$1>>2]=HEAP32[$_heh>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNK8OpenMesh11ArrayKernel11face_handleENS_14HalfedgeHandleE($3,$$byval_copy)|0);
 HEAP32[$2>>2] = $4;
 $5 = (__ZNK8OpenMesh10BaseHandle8is_validEv($2)|0);
 $6 = $5 ^ 1;
 STACKTOP = sp;return ($6|0);
}
function __ZNK8OpenMesh11ArrayKernel11face_handleENS_14HalfedgeHandleE($this,$_heh) {
 $this = $this|0;
 $_heh = $_heh|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 12|0;
 $0 = sp + 8|0;
 $2 = sp;
 $1 = $this;
 $3 = $1;
 ;HEAP32[$2>>2]=HEAP32[$_heh>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
 $4 = (__ZNK8OpenMesh11ArrayKernel8halfedgeENS_14HalfedgeHandleE($3,$$byval_copy)|0);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function __ZNK8OpenMesh10BaseHandle8is_validEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(-1);
 STACKTOP = sp;return ($3|0);
}
function __ZNK8OpenMesh11ArrayKernel6vertexENS_12VertexHandleE($this,$_vh) {
 $this = $this|0;
 $_vh = $_vh|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $3 = sp;
 $2 = $this;
 $4 = $2;
 ;HEAP32[$3>>2]=HEAP32[$_vh>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
 $5 = (__ZNK8OpenMesh11ArrayKernel15is_valid_handleENS_12VertexHandleE(($4|0),($$byval_copy|0))|0);
 if ($5) {
  $6 = ((($4)) + 84|0);
  $7 = (__ZNK8OpenMesh10BaseHandle3idxEv($_vh)|0);
  $0 = $6;
  $1 = $7;
  $8 = $0;
  $9 = $1;
  $10 = HEAP32[$8>>2]|0;
  $11 = (($10) + ($9<<2)|0);
  STACKTOP = sp;return ($11|0);
 } else {
  ___assert_fail((12271|0),(12195|0),147,(12292|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh12VertexHandleC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh10BaseHandleC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh10BaseHandleC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 HEAP32[$2>>2] = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 12|0;
 $32 = sp + 4|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = ((($40)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = ((($45)) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = ((($40)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -4|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = ((($55)) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = ((($61)) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $70 = (($69|0) / 4)&-1;
 $25 = $58;
 $26 = $59;
 $27 = $70;
 $71 = $25;
 $72 = $26;
 $73 = $27;
 $22 = $71;
 $23 = $72;
 $24 = $73;
 $74 = $23;
 $21 = $74;
 $75 = $21;
 __ZdlPv($75);
 STACKTOP = sp;return;
}
function __ZN4DGPC4HeapIdE3topEv($this) {
 $this = $this|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__old_size$i$i$i = 0;
 var $__t$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 324|0;
 $$byval_copy1 = sp + 320|0;
 $$byval_copy = sp + 316|0;
 $__t$i$i$i$i = sp + 48|0;
 $12 = sp + 264|0;
 $13 = sp + 260|0;
 $14 = sp + 256|0;
 $15 = sp + 40|0;
 $16 = sp + 32|0;
 $21 = sp + 236|0;
 $22 = sp + 232|0;
 $23 = sp + 24|0;
 $24 = sp + 16|0;
 $25 = sp + 8|0;
 $28 = sp + 220|0;
 $31 = sp + 208|0;
 $36 = sp;
 $39 = sp + 329|0;
 $53 = sp + 124|0;
 $56 = sp + 112|0;
 $59 = sp + 100|0;
 $60 = sp + 96|0;
 $61 = sp + 328|0;
 $69 = $this;
 $70 = $69;
 while(1) {
  $67 = $70;
  $71 = $67;
  $66 = $71;
  $72 = $66;
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($72)) + 4|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73|0)==($75|0);
  if ($76) {
   $175 = 0;
  } else {
   $1 = $70;
   $77 = $1;
   $0 = $77;
   $78 = $0;
   $79 = HEAP32[$78>>2]|0;
   $80 = HEAP32[$79>>2]|0;
   $81 = (__ZNK4DGPC4HeapIdE8isInHeapEi($70,$80)|0);
   $82 = $81 ^ 1;
   $175 = $82;
  }
  if (!($175)) {
   break;
  }
  $58 = $70;
  $83 = $58;
  $57 = $83;
  $84 = $57;
  $85 = HEAP32[$84>>2]|0;
  $54 = $84;
  $55 = $85;
  $86 = $55;
  $51 = $53;
  $52 = $86;
  $87 = $51;
  $88 = $52;
  HEAP32[$87>>2] = $88;
  $89 = HEAP32[$53>>2]|0;
  HEAP32[$56>>2] = $89;
  $90 = HEAP32[$56>>2]|0;
  HEAP32[$59>>2] = $90;
  $32 = $83;
  $91 = $32;
  $92 = ((($91)) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  $29 = $91;
  $30 = $93;
  $94 = $30;
  $26 = $28;
  $27 = $94;
  $95 = $26;
  $96 = $27;
  HEAP32[$95>>2] = $96;
  $97 = HEAP32[$28>>2]|0;
  HEAP32[$31>>2] = $97;
  $98 = HEAP32[$31>>2]|0;
  HEAP32[$60>>2] = $98;
  ;HEAP8[$23>>0]=HEAP8[$61>>0]|0;
  ;HEAP8[$24>>0]=HEAP8[$60>>0]|0;HEAP8[$24+1>>0]=HEAP8[$60+1>>0]|0;HEAP8[$24+2>>0]=HEAP8[$60+2>>0]|0;HEAP8[$24+3>>0]=HEAP8[$60+3>>0]|0;
  ;HEAP8[$25>>0]=HEAP8[$59>>0]|0;HEAP8[$25+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$25+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$25+3>>0]=HEAP8[$59+3>>0]|0;
  ;HEAP32[$21>>2]=HEAP32[$25>>2]|0;
  ;HEAP32[$22>>2]=HEAP32[$24>>2]|0;
  $19 = $24;
  $20 = $25;
  $99 = $19;
  $18 = $99;
  $100 = $18;
  $101 = HEAP32[$100>>2]|0;
  $102 = $20;
  $17 = $102;
  $103 = $17;
  $104 = HEAP32[$103>>2]|0;
  $105 = $101;
  $106 = $104;
  $107 = (($105) - ($106))|0;
  $108 = (($107|0) / 16)&-1;
  ;HEAP8[$15>>0]=HEAP8[$22>>0]|0;HEAP8[$15+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$15+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$15+3>>0]=HEAP8[$22+3>>0]|0;
  ;HEAP8[$16>>0]=HEAP8[$21>>0]|0;HEAP8[$16+1>>0]=HEAP8[$21+1>>0]|0;HEAP8[$16+2>>0]=HEAP8[$21+2>>0]|0;HEAP8[$16+3>>0]=HEAP8[$21+3>>0]|0;
  $10 = $23;
  $11 = $108;
  $109 = $11;
  $110 = ($109|0)>(1);
  if ($110) {
   $9 = $16;
   $111 = $9;
   $112 = HEAP32[$111>>2]|0;
   $8 = $15;
   $113 = $8;
   $114 = HEAP32[$113>>2]|0;
   $115 = ((($114)) + -16|0);
   HEAP32[$113>>2] = $115;
   $2 = $113;
   $116 = $2;
   $117 = HEAP32[$116>>2]|0;
   $6 = $112;
   $7 = $117;
   $118 = $6;
   $5 = $118;
   $119 = $5;
   ;HEAP32[$__t$i$i$i$i>>2]=HEAP32[$119>>2]|0;HEAP32[$__t$i$i$i$i+4>>2]=HEAP32[$119+4>>2]|0;HEAP32[$__t$i$i$i$i+8>>2]=HEAP32[$119+8>>2]|0;HEAP32[$__t$i$i$i$i+12>>2]=HEAP32[$119+12>>2]|0;
   $120 = $6;
   $121 = $7;
   $4 = $121;
   $122 = $4;
   ;HEAP32[$120>>2]=HEAP32[$122>>2]|0;HEAP32[$120+4>>2]=HEAP32[$122+4>>2]|0;HEAP32[$120+8>>2]=HEAP32[$122+8>>2]|0;HEAP32[$120+12>>2]=HEAP32[$122+12>>2]|0;
   $123 = $7;
   $3 = $__t$i$i$i$i;
   $124 = $3;
   ;HEAP32[$123>>2]=HEAP32[$124>>2]|0;HEAP32[$123+4>>2]=HEAP32[$124+4>>2]|0;HEAP32[$123+8>>2]=HEAP32[$124+8>>2]|0;HEAP32[$123+12>>2]=HEAP32[$124+12>>2]|0;
   __ZN4DGPC8HeapNodeIdED2Ev($__t$i$i$i$i);
   ;HEAP32[$12>>2]=HEAP32[$16>>2]|0;
   ;HEAP32[$13>>2]=HEAP32[$15>>2]|0;
   $125 = $10;
   $126 = $11;
   $127 = (($126) - 1)|0;
   ;HEAP32[$14>>2]=HEAP32[$16>>2]|0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$13>>2]|0;
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$14>>2]|0;
   __ZNSt3__111__sift_downIRNS_7greaterIN4DGPC8HeapNodeIdEEEENS_11__wrap_iterIPS4_EEEEvT0_SA_T_NS_15iterator_traitsISA_E15difference_typeESA_($$byval_copy,$$byval_copy1,$125,$127,$$byval_copy2);
  }
  $50 = $83;
  $128 = $50;
  $129 = ((($128)) + 4|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = ((($130)) + -16|0);
  $46 = $128;
  $47 = $131;
  $132 = $46;
  $45 = $132;
  $133 = $45;
  $134 = ((($133)) + 4|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = HEAP32[$133>>2]|0;
  $137 = $135;
  $138 = $136;
  $139 = (($137) - ($138))|0;
  $140 = (($139|0) / 16)&-1;
  $__old_size$i$i$i = $140;
  $141 = $47;
  $43 = $132;
  $44 = $141;
  $142 = $43;
  while(1) {
   $143 = $44;
   $144 = ((($142)) + 4|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ($143|0)!=($145|0);
   if (!($146)) {
    break;
   }
   $42 = $142;
   $147 = $42;
   $148 = ((($147)) + 8|0);
   $41 = $148;
   $149 = $41;
   $40 = $149;
   $150 = $40;
   $151 = ((($142)) + 4|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = ((($152)) + -16|0);
   HEAP32[$151>>2] = $153;
   $33 = $153;
   $154 = $33;
   $37 = $150;
   $38 = $154;
   $155 = $37;
   $156 = $38;
   ;HEAP8[$36>>0]=HEAP8[$39>>0]|0;
   $34 = $155;
   $35 = $156;
   $157 = $35;
   __ZN4DGPC8HeapNodeIdED2Ev($157);
  }
  $158 = $__old_size$i$i$i;
  __THREW__ = 0;
  invoke_vii(551,($132|0),($158|0));
  $159 = __THREW__; __THREW__ = 0;
  $160 = $159&1;
  if ($160) {
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  $161 = ___cxa_find_matching_catch()|0;
  $162 = tempRet0;
  $48 = $161;
  $49 = $162;
  $163 = $48;
  ___cxa_call_unexpected(($163|0));
  // unreachable;
 }
 $63 = $70;
 $164 = $63;
 $62 = $164;
 $165 = $62;
 $166 = HEAP32[$165>>2]|0;
 $167 = ((($165)) + 4|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = ($166|0)==($168|0);
 if ($169) {
  $68 = -1;
  $174 = $68;
  STACKTOP = sp;return ($174|0);
 } else {
  $65 = $70;
  $170 = $65;
  $64 = $170;
  $171 = $64;
  $172 = HEAP32[$171>>2]|0;
  $173 = HEAP32[$172>>2]|0;
  $68 = $173;
  $174 = $68;
  STACKTOP = sp;return ($174|0);
 }
 return (0)|0;
}
function __ZN4DGPC4HeapIdE3popEv($this) {
 $this = $this|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__old_size$i$i$i = 0, $__old_size$i$i$i2 = 0;
 var $__t$i$i$i$i = 0, $__t$i$i$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 672|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy5 = sp + 648|0;
 $$byval_copy4 = sp + 644|0;
 $$byval_copy3 = sp + 640|0;
 $$byval_copy2 = sp + 636|0;
 $$byval_copy1 = sp + 632|0;
 $$byval_copy = sp + 628|0;
 $__t$i$i$i$i1 = sp + 112|0;
 $23 = sp + 536|0;
 $24 = sp + 532|0;
 $25 = sp + 528|0;
 $26 = sp + 104|0;
 $27 = sp + 96|0;
 $32 = sp + 508|0;
 $33 = sp + 504|0;
 $34 = sp + 88|0;
 $35 = sp + 80|0;
 $36 = sp + 72|0;
 $39 = sp + 492|0;
 $42 = sp + 480|0;
 $47 = sp + 64|0;
 $50 = sp + 655|0;
 $64 = sp + 396|0;
 $67 = sp + 384|0;
 $70 = sp + 372|0;
 $71 = sp + 368|0;
 $72 = sp + 654|0;
 $__t$i$i$i$i = sp + 48|0;
 $85 = sp + 316|0;
 $86 = sp + 312|0;
 $87 = sp + 308|0;
 $88 = sp + 40|0;
 $89 = sp + 32|0;
 $94 = sp + 288|0;
 $95 = sp + 284|0;
 $96 = sp + 24|0;
 $97 = sp + 16|0;
 $98 = sp + 8|0;
 $101 = sp + 272|0;
 $104 = sp + 260|0;
 $109 = sp;
 $112 = sp + 653|0;
 $126 = sp + 176|0;
 $129 = sp + 164|0;
 $132 = sp + 152|0;
 $133 = sp + 148|0;
 $134 = sp + 652|0;
 $138 = sp + 128|0;
 $137 = $this;
 $139 = $137;
 while(1) {
  $136 = $139;
  $140 = $136;
  $135 = $140;
  $141 = $135;
  $142 = HEAP32[$141>>2]|0;
  $143 = ((($141)) + 4|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = ($142|0)==($144|0);
  if ($145) {
   $351 = 0;
  } else {
   $74 = $139;
   $146 = $74;
   $73 = $146;
   $147 = $73;
   $148 = HEAP32[$147>>2]|0;
   $149 = HEAP32[$148>>2]|0;
   $150 = (__ZNK4DGPC4HeapIdE8isInHeapEi($139,$149)|0);
   $151 = $150 ^ 1;
   $351 = $151;
  }
  if (!($351)) {
   break;
  }
  $69 = $139;
  $152 = $69;
  $68 = $152;
  $153 = $68;
  $154 = HEAP32[$153>>2]|0;
  $65 = $153;
  $66 = $154;
  $155 = $66;
  $62 = $64;
  $63 = $155;
  $156 = $62;
  $157 = $63;
  HEAP32[$156>>2] = $157;
  $158 = HEAP32[$64>>2]|0;
  HEAP32[$67>>2] = $158;
  $159 = HEAP32[$67>>2]|0;
  HEAP32[$70>>2] = $159;
  $43 = $152;
  $160 = $43;
  $161 = ((($160)) + 4|0);
  $162 = HEAP32[$161>>2]|0;
  $40 = $160;
  $41 = $162;
  $163 = $41;
  $37 = $39;
  $38 = $163;
  $164 = $37;
  $165 = $38;
  HEAP32[$164>>2] = $165;
  $166 = HEAP32[$39>>2]|0;
  HEAP32[$42>>2] = $166;
  $167 = HEAP32[$42>>2]|0;
  HEAP32[$71>>2] = $167;
  ;HEAP8[$34>>0]=HEAP8[$72>>0]|0;
  ;HEAP8[$35>>0]=HEAP8[$71>>0]|0;HEAP8[$35+1>>0]=HEAP8[$71+1>>0]|0;HEAP8[$35+2>>0]=HEAP8[$71+2>>0]|0;HEAP8[$35+3>>0]=HEAP8[$71+3>>0]|0;
  ;HEAP8[$36>>0]=HEAP8[$70>>0]|0;HEAP8[$36+1>>0]=HEAP8[$70+1>>0]|0;HEAP8[$36+2>>0]=HEAP8[$70+2>>0]|0;HEAP8[$36+3>>0]=HEAP8[$70+3>>0]|0;
  ;HEAP32[$32>>2]=HEAP32[$36>>2]|0;
  ;HEAP32[$33>>2]=HEAP32[$35>>2]|0;
  $30 = $35;
  $31 = $36;
  $168 = $30;
  $29 = $168;
  $169 = $29;
  $170 = HEAP32[$169>>2]|0;
  $171 = $31;
  $28 = $171;
  $172 = $28;
  $173 = HEAP32[$172>>2]|0;
  $174 = $170;
  $175 = $173;
  $176 = (($174) - ($175))|0;
  $177 = (($176|0) / 16)&-1;
  ;HEAP8[$26>>0]=HEAP8[$33>>0]|0;HEAP8[$26+1>>0]=HEAP8[$33+1>>0]|0;HEAP8[$26+2>>0]=HEAP8[$33+2>>0]|0;HEAP8[$26+3>>0]=HEAP8[$33+3>>0]|0;
  ;HEAP8[$27>>0]=HEAP8[$32>>0]|0;HEAP8[$27+1>>0]=HEAP8[$32+1>>0]|0;HEAP8[$27+2>>0]=HEAP8[$32+2>>0]|0;HEAP8[$27+3>>0]=HEAP8[$32+3>>0]|0;
  $21 = $34;
  $22 = $177;
  $178 = $22;
  $179 = ($178|0)>(1);
  if ($179) {
   $20 = $27;
   $180 = $20;
   $181 = HEAP32[$180>>2]|0;
   $19 = $26;
   $182 = $19;
   $183 = HEAP32[$182>>2]|0;
   $184 = ((($183)) + -16|0);
   HEAP32[$182>>2] = $184;
   $13 = $182;
   $185 = $13;
   $186 = HEAP32[$185>>2]|0;
   $17 = $181;
   $18 = $186;
   $187 = $17;
   $16 = $187;
   $188 = $16;
   ;HEAP32[$__t$i$i$i$i1>>2]=HEAP32[$188>>2]|0;HEAP32[$__t$i$i$i$i1+4>>2]=HEAP32[$188+4>>2]|0;HEAP32[$__t$i$i$i$i1+8>>2]=HEAP32[$188+8>>2]|0;HEAP32[$__t$i$i$i$i1+12>>2]=HEAP32[$188+12>>2]|0;
   $189 = $17;
   $190 = $18;
   $15 = $190;
   $191 = $15;
   ;HEAP32[$189>>2]=HEAP32[$191>>2]|0;HEAP32[$189+4>>2]=HEAP32[$191+4>>2]|0;HEAP32[$189+8>>2]=HEAP32[$191+8>>2]|0;HEAP32[$189+12>>2]=HEAP32[$191+12>>2]|0;
   $192 = $18;
   $14 = $__t$i$i$i$i1;
   $193 = $14;
   ;HEAP32[$192>>2]=HEAP32[$193>>2]|0;HEAP32[$192+4>>2]=HEAP32[$193+4>>2]|0;HEAP32[$192+8>>2]=HEAP32[$193+8>>2]|0;HEAP32[$192+12>>2]=HEAP32[$193+12>>2]|0;
   __ZN4DGPC8HeapNodeIdED2Ev($__t$i$i$i$i1);
   ;HEAP32[$23>>2]=HEAP32[$27>>2]|0;
   ;HEAP32[$24>>2]=HEAP32[$26>>2]|0;
   $194 = $21;
   $195 = $22;
   $196 = (($195) - 1)|0;
   ;HEAP32[$25>>2]=HEAP32[$27>>2]|0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$23>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$24>>2]|0;
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$25>>2]|0;
   __ZNSt3__111__sift_downIRNS_7greaterIN4DGPC8HeapNodeIdEEEENS_11__wrap_iterIPS4_EEEEvT0_SA_T_NS_15iterator_traitsISA_E15difference_typeESA_($$byval_copy,$$byval_copy1,$194,$196,$$byval_copy2);
  }
  $61 = $152;
  $197 = $61;
  $198 = ((($197)) + 4|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = ((($199)) + -16|0);
  $57 = $197;
  $58 = $200;
  $201 = $57;
  $56 = $201;
  $202 = $56;
  $203 = ((($202)) + 4|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = HEAP32[$202>>2]|0;
  $206 = $204;
  $207 = $205;
  $208 = (($206) - ($207))|0;
  $209 = (($208|0) / 16)&-1;
  $__old_size$i$i$i2 = $209;
  $210 = $58;
  $54 = $201;
  $55 = $210;
  $211 = $54;
  while(1) {
   $212 = $55;
   $213 = ((($211)) + 4|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = ($212|0)!=($214|0);
   if (!($215)) {
    break;
   }
   $53 = $211;
   $216 = $53;
   $217 = ((($216)) + 8|0);
   $52 = $217;
   $218 = $52;
   $51 = $218;
   $219 = $51;
   $220 = ((($211)) + 4|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = ((($221)) + -16|0);
   HEAP32[$220>>2] = $222;
   $44 = $222;
   $223 = $44;
   $48 = $219;
   $49 = $223;
   $224 = $48;
   $225 = $49;
   ;HEAP8[$47>>0]=HEAP8[$50>>0]|0;
   $45 = $224;
   $46 = $225;
   $226 = $46;
   __ZN4DGPC8HeapNodeIdED2Ev($226);
  }
  $227 = $__old_size$i$i$i2;
  __THREW__ = 0;
  invoke_vii(551,($201|0),($227|0));
  $228 = __THREW__; __THREW__ = 0;
  $229 = $228&1;
  if ($229) {
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  $230 = ___cxa_find_matching_catch()|0;
  $231 = tempRet0;
  $59 = $230;
  $60 = $231;
  $232 = $59;
  ___cxa_call_unexpected(($232|0));
  // unreachable;
 }
 $12 = $139;
 $233 = $12;
 $11 = $233;
 $234 = $11;
 $235 = HEAP32[$234>>2]|0;
 $236 = ((($234)) + 4|0);
 $237 = HEAP32[$236>>2]|0;
 $238 = ($235|0)==($237|0);
 if ($238) {
  STACKTOP = sp;return;
 }
 $239 = ((($139)) + 16|0);
 $10 = $139;
 $240 = $10;
 $9 = $240;
 $241 = $9;
 $242 = HEAP32[$241>>2]|0;
 $243 = HEAP32[$242>>2]|0;
 $7 = $239;
 $8 = $243;
 $244 = $7;
 $245 = $8;
 $5 = $244;
 $6 = $245;
 $246 = $5;
 $247 = HEAP32[$246>>2]|0;
 $248 = $6;
 $249 = (($248>>>0) / 32)&-1;
 $250 = (($247) + ($249<<2)|0);
 $251 = $6;
 $252 = (($251>>>0) % 32)&-1;
 $253 = 1 << $252;
 $2 = $138;
 $3 = $250;
 $4 = $253;
 $254 = $2;
 $255 = $3;
 HEAP32[$254>>2] = $255;
 $256 = ((($254)) + 4|0);
 $257 = $4;
 HEAP32[$256>>2] = $257;
 $0 = $138;
 $1 = 0;
 $258 = $0;
 $259 = $1;
 $260 = $259&1;
 $261 = ((($258)) + 4|0);
 $262 = HEAP32[$261>>2]|0;
 if ($260) {
  $263 = HEAP32[$258>>2]|0;
  $264 = HEAP32[$263>>2]|0;
  $265 = $264 | $262;
  HEAP32[$263>>2] = $265;
 } else {
  $266 = $262 ^ -1;
  $267 = HEAP32[$258>>2]|0;
  $268 = HEAP32[$267>>2]|0;
  $269 = $268 & $266;
  HEAP32[$267>>2] = $269;
 }
 $131 = $139;
 $270 = $131;
 $130 = $270;
 $271 = $130;
 $272 = HEAP32[$271>>2]|0;
 $127 = $271;
 $128 = $272;
 $273 = $128;
 $124 = $126;
 $125 = $273;
 $274 = $124;
 $275 = $125;
 HEAP32[$274>>2] = $275;
 $276 = HEAP32[$126>>2]|0;
 HEAP32[$129>>2] = $276;
 $277 = HEAP32[$129>>2]|0;
 HEAP32[$132>>2] = $277;
 $105 = $270;
 $278 = $105;
 $279 = ((($278)) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $102 = $278;
 $103 = $280;
 $281 = $103;
 $99 = $101;
 $100 = $281;
 $282 = $99;
 $283 = $100;
 HEAP32[$282>>2] = $283;
 $284 = HEAP32[$101>>2]|0;
 HEAP32[$104>>2] = $284;
 $285 = HEAP32[$104>>2]|0;
 HEAP32[$133>>2] = $285;
 ;HEAP8[$96>>0]=HEAP8[$134>>0]|0;
 ;HEAP8[$97>>0]=HEAP8[$133>>0]|0;HEAP8[$97+1>>0]=HEAP8[$133+1>>0]|0;HEAP8[$97+2>>0]=HEAP8[$133+2>>0]|0;HEAP8[$97+3>>0]=HEAP8[$133+3>>0]|0;
 ;HEAP8[$98>>0]=HEAP8[$132>>0]|0;HEAP8[$98+1>>0]=HEAP8[$132+1>>0]|0;HEAP8[$98+2>>0]=HEAP8[$132+2>>0]|0;HEAP8[$98+3>>0]=HEAP8[$132+3>>0]|0;
 ;HEAP32[$94>>2]=HEAP32[$98>>2]|0;
 ;HEAP32[$95>>2]=HEAP32[$97>>2]|0;
 $92 = $97;
 $93 = $98;
 $286 = $92;
 $91 = $286;
 $287 = $91;
 $288 = HEAP32[$287>>2]|0;
 $289 = $93;
 $90 = $289;
 $290 = $90;
 $291 = HEAP32[$290>>2]|0;
 $292 = $288;
 $293 = $291;
 $294 = (($292) - ($293))|0;
 $295 = (($294|0) / 16)&-1;
 ;HEAP8[$88>>0]=HEAP8[$95>>0]|0;HEAP8[$88+1>>0]=HEAP8[$95+1>>0]|0;HEAP8[$88+2>>0]=HEAP8[$95+2>>0]|0;HEAP8[$88+3>>0]=HEAP8[$95+3>>0]|0;
 ;HEAP8[$89>>0]=HEAP8[$94>>0]|0;HEAP8[$89+1>>0]=HEAP8[$94+1>>0]|0;HEAP8[$89+2>>0]=HEAP8[$94+2>>0]|0;HEAP8[$89+3>>0]=HEAP8[$94+3>>0]|0;
 $83 = $96;
 $84 = $295;
 $296 = $84;
 $297 = ($296|0)>(1);
 if ($297) {
  $82 = $89;
  $298 = $82;
  $299 = HEAP32[$298>>2]|0;
  $81 = $88;
  $300 = $81;
  $301 = HEAP32[$300>>2]|0;
  $302 = ((($301)) + -16|0);
  HEAP32[$300>>2] = $302;
  $75 = $300;
  $303 = $75;
  $304 = HEAP32[$303>>2]|0;
  $79 = $299;
  $80 = $304;
  $305 = $79;
  $78 = $305;
  $306 = $78;
  ;HEAP32[$__t$i$i$i$i>>2]=HEAP32[$306>>2]|0;HEAP32[$__t$i$i$i$i+4>>2]=HEAP32[$306+4>>2]|0;HEAP32[$__t$i$i$i$i+8>>2]=HEAP32[$306+8>>2]|0;HEAP32[$__t$i$i$i$i+12>>2]=HEAP32[$306+12>>2]|0;
  $307 = $79;
  $308 = $80;
  $77 = $308;
  $309 = $77;
  ;HEAP32[$307>>2]=HEAP32[$309>>2]|0;HEAP32[$307+4>>2]=HEAP32[$309+4>>2]|0;HEAP32[$307+8>>2]=HEAP32[$309+8>>2]|0;HEAP32[$307+12>>2]=HEAP32[$309+12>>2]|0;
  $310 = $80;
  $76 = $__t$i$i$i$i;
  $311 = $76;
  ;HEAP32[$310>>2]=HEAP32[$311>>2]|0;HEAP32[$310+4>>2]=HEAP32[$311+4>>2]|0;HEAP32[$310+8>>2]=HEAP32[$311+8>>2]|0;HEAP32[$310+12>>2]=HEAP32[$311+12>>2]|0;
  __ZN4DGPC8HeapNodeIdED2Ev($__t$i$i$i$i);
  ;HEAP32[$85>>2]=HEAP32[$89>>2]|0;
  ;HEAP32[$86>>2]=HEAP32[$88>>2]|0;
  $312 = $83;
  $313 = $84;
  $314 = (($313) - 1)|0;
  ;HEAP32[$87>>2]=HEAP32[$89>>2]|0;
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$85>>2]|0;
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$86>>2]|0;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$87>>2]|0;
  __ZNSt3__111__sift_downIRNS_7greaterIN4DGPC8HeapNodeIdEEEENS_11__wrap_iterIPS4_EEEEvT0_SA_T_NS_15iterator_traitsISA_E15difference_typeESA_($$byval_copy3,$$byval_copy4,$312,$314,$$byval_copy5);
 }
 $123 = $270;
 $315 = $123;
 $316 = ((($315)) + 4|0);
 $317 = HEAP32[$316>>2]|0;
 $318 = ((($317)) + -16|0);
 $119 = $315;
 $120 = $318;
 $319 = $119;
 $118 = $319;
 $320 = $118;
 $321 = ((($320)) + 4|0);
 $322 = HEAP32[$321>>2]|0;
 $323 = HEAP32[$320>>2]|0;
 $324 = $322;
 $325 = $323;
 $326 = (($324) - ($325))|0;
 $327 = (($326|0) / 16)&-1;
 $__old_size$i$i$i = $327;
 $328 = $120;
 $116 = $319;
 $117 = $328;
 $329 = $116;
 while(1) {
  $330 = $117;
  $331 = ((($329)) + 4|0);
  $332 = HEAP32[$331>>2]|0;
  $333 = ($330|0)!=($332|0);
  if (!($333)) {
   break;
  }
  $115 = $329;
  $334 = $115;
  $335 = ((($334)) + 8|0);
  $114 = $335;
  $336 = $114;
  $113 = $336;
  $337 = $113;
  $338 = ((($329)) + 4|0);
  $339 = HEAP32[$338>>2]|0;
  $340 = ((($339)) + -16|0);
  HEAP32[$338>>2] = $340;
  $106 = $340;
  $341 = $106;
  $110 = $337;
  $111 = $341;
  $342 = $110;
  $343 = $111;
  ;HEAP8[$109>>0]=HEAP8[$112>>0]|0;
  $107 = $342;
  $108 = $343;
  $344 = $108;
  __ZN4DGPC8HeapNodeIdED2Ev($344);
 }
 $345 = $__old_size$i$i$i;
 __THREW__ = 0;
 invoke_vii(551,($319|0),($345|0));
 $346 = __THREW__; __THREW__ = 0;
 $347 = $346&1;
 if ($347) {
  $348 = ___cxa_find_matching_catch()|0;
  $349 = tempRet0;
  $121 = $348;
  $122 = $349;
  $350 = $121;
  ___cxa_call_unexpected(($350|0));
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNK4DGPC4HeapIdE8isInHeapEi($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp;
 $8 = $this;
 $9 = $idx;
 $11 = $8;
 $12 = ((($11)) + 16|0);
 $13 = $9;
 $6 = $12;
 $7 = $13;
 $14 = $6;
 $15 = $7;
 $4 = $14;
 $5 = $15;
 $16 = $4;
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = (($18>>>0) / 32)&-1;
 $20 = (($17) + ($19<<2)|0);
 $21 = $5;
 $22 = (($21>>>0) % 32)&-1;
 $23 = 1 << $22;
 $1 = $10;
 $2 = $20;
 $3 = $23;
 $24 = $1;
 $25 = $2;
 HEAP32[$24>>2] = $25;
 $26 = ((($24)) + 4|0);
 $27 = $3;
 HEAP32[$26>>2] = $27;
 $0 = $10;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($28)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $30 & $32;
 $34 = ($33|0)!=(0);
 STACKTOP = sp;return ($34|0);
}
function __ZNSt3__111__sift_downIRNS_7greaterIN4DGPC8HeapNodeIdEEEENS_11__wrap_iterIPS4_EEEEvT0_SA_T_NS_15iterator_traitsISA_E15difference_typeESA_($__first,$__last,$__comp,$__len,$__start) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 $__len = $__len|0;
 $__start = $__start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0, $__child_i = 0, $__top = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 184|0;
 $22 = sp + 160|0;
 $34 = sp + 112|0;
 $45 = sp + 68|0;
 $__child_i = sp + 28|0;
 $54 = sp + 24|0;
 $__top = sp;
 $55 = sp + 20|0;
 $56 = sp + 16|0;
 $52 = $__comp;
 $53 = $__len;
 $50 = $__start;
 $51 = $__first;
 $57 = $50;
 $49 = $57;
 $58 = $49;
 $59 = HEAP32[$58>>2]|0;
 $60 = $51;
 $48 = $60;
 $61 = $48;
 $62 = HEAP32[$61>>2]|0;
 $63 = $59;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 16)&-1;
 $__child = $66;
 $67 = $53;
 $68 = ($67|0)<(2);
 if ($68) {
  STACKTOP = sp;return;
 }
 $69 = $53;
 $70 = (($69) - 2)|0;
 $71 = (($70|0) / 2)&-1;
 $72 = $__child;
 $73 = ($71|0)<($72|0);
 if ($73) {
  STACKTOP = sp;return;
 }
 $74 = $__child;
 $75 = $74<<1;
 $76 = (($75) + 1)|0;
 $__child = $76;
 $77 = $__child;
 $46 = $__first;
 $47 = $77;
 $78 = $46;
 ;HEAP32[$45>>2]=HEAP32[$78>>2]|0;
 $79 = $47;
 $43 = $45;
 $44 = $79;
 $80 = $43;
 $81 = $44;
 $82 = HEAP32[$80>>2]|0;
 $83 = (($82) + ($81<<4)|0);
 HEAP32[$80>>2] = $83;
 $84 = HEAP32[$45>>2]|0;
 HEAP32[$__child_i>>2] = $84;
 $85 = $__child;
 $86 = (($85) + 1)|0;
 $87 = $53;
 $88 = ($86|0)<($87|0);
 if ($88) {
  $89 = $52;
  $42 = $__child_i;
  $90 = $42;
  $91 = HEAP32[$90>>2]|0;
  $35 = $__child_i;
  $36 = 1;
  $92 = $35;
  ;HEAP32[$34>>2]=HEAP32[$92>>2]|0;
  $93 = $36;
  $32 = $34;
  $33 = $93;
  $94 = $32;
  $95 = $33;
  $96 = HEAP32[$94>>2]|0;
  $97 = (($96) + ($95<<4)|0);
  HEAP32[$94>>2] = $97;
  $98 = HEAP32[$34>>2]|0;
  HEAP32[$54>>2] = $98;
  $26 = $54;
  $99 = $26;
  $100 = HEAP32[$99>>2]|0;
  $11 = $89;
  $12 = $91;
  $13 = $100;
  $101 = $12;
  $102 = $13;
  $103 = (__ZNK4DGPC8HeapNodeIdEgtERKS1_($101,$102)|0);
  if ($103) {
   $10 = $__child_i;
   $104 = $10;
   $105 = HEAP32[$104>>2]|0;
   $106 = ((($105)) + 16|0);
   HEAP32[$104>>2] = $106;
   $107 = $__child;
   $108 = (($107) + 1)|0;
   $__child = $108;
  }
 }
 $109 = $52;
 $1 = $__child_i;
 $110 = $1;
 $111 = HEAP32[$110>>2]|0;
 $0 = $__start;
 $112 = $0;
 $113 = HEAP32[$112>>2]|0;
 $2 = $109;
 $3 = $111;
 $4 = $113;
 $114 = $3;
 $115 = $4;
 $116 = (__ZNK4DGPC8HeapNodeIdEgtERKS1_($114,$115)|0);
 if ($116) {
  STACKTOP = sp;return;
 }
 $5 = $__start;
 $117 = $5;
 $118 = HEAP32[$117>>2]|0;
 $6 = $118;
 $119 = $6;
 ;HEAP32[$__top>>2]=HEAP32[$119>>2]|0;HEAP32[$__top+4>>2]=HEAP32[$119+4>>2]|0;HEAP32[$__top+8>>2]=HEAP32[$119+8>>2]|0;HEAP32[$__top+12>>2]=HEAP32[$119+12>>2]|0;
 while(1) {
  $7 = $__start;
  $120 = $7;
  $121 = HEAP32[$120>>2]|0;
  $8 = $__child_i;
  $122 = $8;
  $123 = HEAP32[$122>>2]|0;
  $9 = $123;
  $124 = $9;
  ;HEAP32[$121>>2]=HEAP32[$124>>2]|0;HEAP32[$121+4>>2]=HEAP32[$124+4>>2]|0;HEAP32[$121+8>>2]=HEAP32[$124+8>>2]|0;HEAP32[$121+12>>2]=HEAP32[$124+12>>2]|0;
  ;HEAP32[$__start>>2]=HEAP32[$__child_i>>2]|0;
  $125 = $53;
  $126 = (($125) - 2)|0;
  $127 = (($126|0) / 2)&-1;
  $128 = $__child;
  $129 = ($127|0)<($128|0);
  if ($129) {
   break;
  }
  $130 = $__child;
  $131 = $130<<1;
  $132 = (($131) + 1)|0;
  $__child = $132;
  $133 = $__child;
  $17 = $__first;
  $18 = $133;
  $134 = $17;
  ;HEAP32[$16>>2]=HEAP32[$134>>2]|0;
  $135 = $18;
  $14 = $16;
  $15 = $135;
  $136 = $14;
  $137 = $15;
  $138 = HEAP32[$136>>2]|0;
  $139 = (($138) + ($137<<4)|0);
  HEAP32[$136>>2] = $139;
  $140 = HEAP32[$16>>2]|0;
  HEAP32[$55>>2] = $140;
  ;HEAP32[$__child_i>>2]=HEAP32[$55>>2]|0;
  $141 = $__child;
  $142 = (($141) + 1)|0;
  $143 = $53;
  $144 = ($142|0)<($143|0);
  if ($144) {
   $145 = $52;
   $19 = $__child_i;
   $146 = $19;
   $147 = HEAP32[$146>>2]|0;
   $23 = $__child_i;
   $24 = 1;
   $148 = $23;
   ;HEAP32[$22>>2]=HEAP32[$148>>2]|0;
   $149 = $24;
   $20 = $22;
   $21 = $149;
   $150 = $20;
   $151 = $21;
   $152 = HEAP32[$150>>2]|0;
   $153 = (($152) + ($151<<4)|0);
   HEAP32[$150>>2] = $153;
   $154 = HEAP32[$22>>2]|0;
   HEAP32[$56>>2] = $154;
   $25 = $56;
   $155 = $25;
   $156 = HEAP32[$155>>2]|0;
   $27 = $145;
   $28 = $147;
   $29 = $156;
   $157 = $28;
   $158 = $29;
   $159 = (__ZNK4DGPC8HeapNodeIdEgtERKS1_($157,$158)|0);
   if ($159) {
    $30 = $__child_i;
    $160 = $30;
    $161 = HEAP32[$160>>2]|0;
    $162 = ((($161)) + 16|0);
    HEAP32[$160>>2] = $162;
    $163 = $__child;
    $164 = (($163) + 1)|0;
    $__child = $164;
   }
  }
  $165 = $52;
  $31 = $__child_i;
  $166 = $31;
  $167 = HEAP32[$166>>2]|0;
  $37 = $165;
  $38 = $167;
  $39 = $__top;
  $168 = $38;
  $169 = $39;
  $170 = (__ZNK4DGPC8HeapNodeIdEgtERKS1_($168,$169)|0);
  $171 = $170 ^ 1;
  if (!($171)) {
   break;
  }
 }
 $40 = $__start;
 $172 = $40;
 $173 = HEAP32[$172>>2]|0;
 $41 = $__top;
 $174 = $41;
 ;HEAP32[$173>>2]=HEAP32[$174>>2]|0;HEAP32[$173+4>>2]=HEAP32[$174+4>>2]|0;HEAP32[$173+8>>2]=HEAP32[$174+8>>2]|0;HEAP32[$173+12>>2]=HEAP32[$174+12>>2]|0;
 __ZN4DGPC8HeapNodeIdED2Ev($__top);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 16)&-1;
 $35 = (($22) + ($34<<4)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<4)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 16)&-1;
 $52 = (($43) + ($51<<4)|0);
 __ZNKSt3__16vectorIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEE10initializeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0.0, $99 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 268|0;
 $5 = sp + 64|0;
 $6 = sp + 256|0;
 $9 = sp + 244|0;
 $10 = sp + 56|0;
 $16 = sp + 220|0;
 $17 = sp + 216|0;
 $18 = sp + 48|0;
 $19 = sp + 40|0;
 $20 = sp + 32|0;
 $22 = sp + 208|0;
 $23 = sp + 204|0;
 $24 = sp + 281|0;
 $25 = sp + 24|0;
 $26 = sp + 16|0;
 $29 = sp + 192|0;
 $32 = sp + 180|0;
 $37 = sp + 8|0;
 $40 = sp + 280|0;
 $54 = sp + 96|0;
 $57 = sp + 84|0;
 $60 = sp + 72|0;
 $61 = sp + 68|0;
 $62 = sp;
 $59 = $this;
 $63 = $59;
 $64 = ((($63)) + 56|0);
 $58 = $64;
 $65 = $58;
 $66 = HEAP32[$65>>2]|0;
 $55 = $65;
 $56 = $66;
 $67 = $56;
 $52 = $54;
 $53 = $67;
 $68 = $52;
 $69 = $53;
 HEAP32[$68>>2] = $69;
 $70 = HEAP32[$54>>2]|0;
 HEAP32[$57>>2] = $70;
 $71 = HEAP32[$57>>2]|0;
 HEAP32[$60>>2] = $71;
 $72 = ((($63)) + 56|0);
 $33 = $72;
 $73 = $33;
 $74 = ((($73)) + 4|0);
 $75 = HEAP32[$74>>2]|0;
 $30 = $73;
 $31 = $75;
 $76 = $31;
 $27 = $29;
 $28 = $76;
 $77 = $27;
 $78 = $28;
 HEAP32[$77>>2] = $78;
 $79 = HEAP32[$29>>2]|0;
 HEAP32[$32>>2] = $79;
 $80 = HEAP32[$32>>2]|0;
 HEAP32[$61>>2] = $80;
 HEAPF64[$62>>3] = 1.7976931348623157E+308;
 ;HEAP8[$25>>0]=HEAP8[$61>>0]|0;HEAP8[$25+1>>0]=HEAP8[$61+1>>0]|0;HEAP8[$25+2>>0]=HEAP8[$61+2>>0]|0;HEAP8[$25+3>>0]=HEAP8[$61+3>>0]|0;
 ;HEAP8[$26>>0]=HEAP8[$60>>0]|0;HEAP8[$26+1>>0]=HEAP8[$60+1>>0]|0;HEAP8[$26+2>>0]=HEAP8[$60+2>>0]|0;HEAP8[$26+3>>0]=HEAP8[$60+3>>0]|0;
 $21 = $62;
 ;HEAP32[$22>>2]=HEAP32[$26>>2]|0;
 ;HEAP32[$23>>2]=HEAP32[$25>>2]|0;
 $81 = $21;
 ;HEAP8[$18>>0]=HEAP8[$24>>0]|0;
 ;HEAP8[$19>>0]=HEAP8[$23>>0]|0;HEAP8[$19+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$23+3>>0]|0;
 ;HEAP8[$20>>0]=HEAP8[$22>>0]|0;HEAP8[$20+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$20+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$20+3>>0]=HEAP8[$22+3>>0]|0;
 $15 = $81;
 ;HEAP32[$16>>2]=HEAP32[$20>>2]|0;
 $13 = $19;
 $14 = $20;
 $82 = $13;
 $12 = $82;
 $83 = $12;
 $84 = HEAP32[$83>>2]|0;
 $85 = $14;
 $11 = $85;
 $86 = $11;
 $87 = HEAP32[$86>>2]|0;
 $88 = $84;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 8)&-1;
 $92 = $15;
 ;HEAP8[$10>>0]=HEAP8[$16>>0]|0;HEAP8[$10+1>>0]=HEAP8[$16+1>>0]|0;HEAP8[$10+2>>0]=HEAP8[$16+2>>0]|0;HEAP8[$10+3>>0]=HEAP8[$16+3>>0]|0;
 $7 = $91;
 $8 = $92;
 ;HEAP32[$9>>2]=HEAP32[$10>>2]|0;
 $93 = $7;
 $94 = $8;
 ;HEAP8[$5>>0]=HEAP8[$9>>0]|0;HEAP8[$5+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[$9+3>>0]|0;
 $3 = $93;
 $4 = $94;
 while(1) {
  $95 = $3;
  $96 = ($95|0)>(0);
  if (!($96)) {
   break;
  }
  $97 = $4;
  $98 = +HEAPF64[$97>>3];
  $1 = $5;
  $99 = $1;
  $100 = HEAP32[$99>>2]|0;
  HEAPF64[$100>>3] = $98;
  $0 = $5;
  $101 = $0;
  $102 = HEAP32[$101>>2]|0;
  $103 = ((($102)) + 8|0);
  HEAP32[$101>>2] = $103;
  $104 = $3;
  $105 = (($104) + -1)|0;
  $3 = $105;
 }
 ;HEAP32[$2>>2]=HEAP32[$5>>2]|0;
 $106 = HEAP32[$2>>2]|0;
 HEAP32[$6>>2] = $106;
 $107 = HEAP32[$6>>2]|0;
 HEAP32[$17>>2] = $107;
 $108 = ((($63)) + 24|0);
 $109 = ((($63)) + 56|0);
 __ZN4DGPC4HeapIdE10initializeEPNSt3__16vectorIdNS2_9allocatorIdEEEE($108,$109);
 $110 = ((($63)) + 80|0);
 $49 = $110;
 $111 = $49;
 $48 = $111;
 $112 = $48;
 $113 = ((($112)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = HEAP32[$112>>2]|0;
 $116 = $114;
 $117 = $115;
 $118 = (($116) - ($117))|0;
 $119 = (($118|0) / 4)&-1;
 $__old_size$i = $119;
 $46 = $111;
 $120 = $46;
 $121 = HEAP32[$120>>2]|0;
 $44 = $120;
 $45 = $121;
 $122 = $44;
 while(1) {
  $123 = $45;
  $124 = ((($122)) + 4|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($123|0)!=($125|0);
  if (!($126)) {
   break;
  }
  $43 = $122;
  $127 = $43;
  $128 = ((($127)) + 8|0);
  $42 = $128;
  $129 = $42;
  $41 = $129;
  $130 = $41;
  $131 = ((($122)) + 4|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = ((($132)) + -4|0);
  HEAP32[$131>>2] = $133;
  $34 = $133;
  $134 = $34;
  $38 = $130;
  $39 = $134;
  $135 = $38;
  $136 = $39;
  ;HEAP8[$37>>0]=HEAP8[$40>>0]|0;
  $35 = $135;
  $36 = $136;
 }
 $137 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(532,($111|0),($137|0));
 $138 = __THREW__; __THREW__ = 0;
 $139 = $138&1;
 if ($139) {
  $140 = ___cxa_find_matching_catch()|0;
  $141 = tempRet0;
  $50 = $140;
  $51 = $141;
  $142 = $50;
  ___cxa_call_unexpected(($142|0));
  // unreachable;
 } else {
  $47 = $111;
  STACKTOP = sp;return;
 }
}
function __ZNK8OpenMesh16PolyConnectivity11is_boundaryENS_12VertexHandleE($this,$_vh) {
 $this = $this|0;
 $_vh = $_vh|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $heh = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 24|0;
 $$byval_copy = sp + 20|0;
 $heh = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 $0 = $this;
 $4 = $0;
 ;HEAP32[$1>>2]=HEAP32[$_vh>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
 $5 = (__ZNK8OpenMesh11ArrayKernel15halfedge_handleENS_12VertexHandleE($4,$$byval_copy)|0);
 HEAP32[$heh>>2] = $5;
 $6 = (__ZNK8OpenMesh10BaseHandle8is_validEv($heh)|0);
 if (!($6)) {
  $10 = 0;
  $9 = $10 ^ 1;
  STACKTOP = sp;return ($9|0);
 }
 ;HEAP32[$2>>2]=HEAP32[$heh>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;
 $7 = (__ZNK8OpenMesh11ArrayKernel11face_handleENS_14HalfedgeHandleE($4,$$byval_copy1)|0);
 HEAP32[$3>>2] = $7;
 $8 = (__ZNK8OpenMesh10BaseHandle8is_validEv($3)|0);
 $10 = $8;
 $9 = $10 ^ 1;
 STACKTOP = sp;return ($9|0);
}
function __ZN4DGPC7Vector3IdEC2ERKS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK4DGPC7Vector3IdE1xEv($3)|0);
 $5 = +HEAPF64[$4>>3];
 $6 = $1;
 $7 = (__ZNK4DGPC7Vector3IdE1yEv($6)|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $1;
 $10 = (__ZNK4DGPC7Vector3IdE1zEv($9)|0);
 $11 = +HEAPF64[$10>>3];
 __ZN4DGPC7Vector3IdE3setEddd($2,$5,$8,$11);
 STACKTOP = sp;return;
}
function __ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEE15initializeGammaERKS3_($this,$point) {
 $this = $this|0;
 $point = $point|0;
 var $$ = 0, $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $cos_phi = 0.0, $dist = 0.0, $i = 0, $ip = 0, $nb = 0;
 var $nb_t = 0, $nbp = 0, $nbp_t = 0, $nbvh = 0, $nbvhp = 0, $ni = 0, $nip = 0, $num = 0, $phi = 0.0, $phitot = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 244|0;
 $$byval_copy = sp + 240|0;
 $nbvh = sp + 180|0;
 $11 = sp + 172|0;
 $12 = sp + 112|0;
 $nbvhp = sp + 160|0;
 $13 = sp + 152|0;
 $nb_t = sp + 88|0;
 $14 = sp + 64|0;
 $nbp_t = sp + 40|0;
 $15 = sp + 16|0;
 $9 = $this;
 $10 = $point;
 $16 = $9;
 $17 = ((($16)) + 80|0);
 $8 = $17;
 $18 = $8;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$18>>2]|0;
 $22 = $20;
 $23 = $21;
 $24 = (($22) - ($23))|0;
 $25 = (($24|0) / 4)&-1;
 $num = $25;
 $phitot = 0.0;
 $i = 0;
 while(1) {
  $26 = $i;
  $27 = $num;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = ((($16)) + 80|0);
  $30 = $i;
  $6 = $29;
  $7 = $30;
  $31 = $6;
  $32 = $7;
  $33 = HEAP32[$31>>2]|0;
  $34 = (($33) + ($32<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $ni = $35;
  $36 = HEAP32[$16>>2]|0;
  $37 = $ni;
  $38 = (__ZNK8OpenMesh11ArrayKernel13vertex_handleEj($36,$37)|0);
  HEAP32[$nbvh>>2] = $38;
  $39 = HEAP32[$16>>2]|0;
  ;HEAP32[$11>>2]=HEAP32[$nbvh>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
  $40 = (__ZNK8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEE5pointENS_12VertexHandleE($39,$$byval_copy)|0);
  $nb = $40;
  $41 = $10;
  $42 = $nb;
  __ZNK4DGPC7Vector3IdEmiERKS1_($12,$41,$42);
  $43 = (+__ZNK4DGPC7Vector3IdE6lengthEv($12));
  $dist = $43;
  $44 = $dist;
  $45 = ((($16)) + 56|0);
  $46 = $ni;
  $2 = $45;
  $3 = $46;
  $47 = $2;
  $48 = $3;
  $49 = HEAP32[$47>>2]|0;
  $50 = (($49) + ($48<<3)|0);
  HEAPF64[$50>>3] = $44;
  $51 = $i;
  $52 = (($51) + 1)|0;
  $ip = $52;
  $53 = $ip;
  $54 = $num;
  $55 = ($53|0)>=($54|0);
  $$ = $55 ? 0 : $52;
  $ip = $$;
  $56 = ((($16)) + 80|0);
  $57 = $ip;
  $0 = $56;
  $1 = $57;
  $58 = $0;
  $59 = $1;
  $60 = HEAP32[$58>>2]|0;
  $61 = (($60) + ($59<<2)|0);
  $62 = HEAP32[$61>>2]|0;
  $nip = $62;
  $63 = HEAP32[$16>>2]|0;
  $64 = $nip;
  $65 = (__ZNK8OpenMesh11ArrayKernel13vertex_handleEj($63,$64)|0);
  HEAP32[$nbvhp>>2] = $65;
  $66 = HEAP32[$16>>2]|0;
  ;HEAP32[$13>>2]=HEAP32[$nbvhp>>2]|0;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$13>>2]|0;
  $67 = (__ZNK8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEE5pointENS_12VertexHandleE($66,$$byval_copy1)|0);
  $nbp = $67;
  $68 = $nb;
  $69 = $10;
  __ZNK4DGPC7Vector3IdEmiERKS1_($14,$68,$69);
  $70 = (__ZN4DGPC7Vector3IdE9normalizeEv($14)|0);
  __ZN4DGPC7Vector3IdEC2ERKS1_($nb_t,$70);
  $71 = $nbp;
  $72 = $10;
  __ZNK4DGPC7Vector3IdEmiERKS1_($15,$71,$72);
  $73 = (__ZN4DGPC7Vector3IdE9normalizeEv($15)|0);
  __ZN4DGPC7Vector3IdEC2ERKS1_($nbp_t,$73);
  $74 = (+__ZNK4DGPC7Vector3IdEmlERKS1_($nb_t,$nbp_t));
  $cos_phi = $74;
  $75 = $cos_phi;
  $76 = (+Math_acos((+$75)));
  $phi = $76;
  $77 = $phitot;
  $78 = ((($16)) + 68|0);
  $79 = $ni;
  $4 = $78;
  $5 = $79;
  $80 = $4;
  $81 = $5;
  $82 = HEAP32[$80>>2]|0;
  $83 = (($82) + ($81<<3)|0);
  HEAPF64[$83>>3] = $77;
  $84 = ((($16)) + 24|0);
  $85 = $ni;
  __ZN4DGPC4HeapIdE4pushEi($84,$85);
  $86 = $phi;
  $87 = $phitot;
  $88 = $87 + $86;
  $phitot = $88;
  $89 = $i;
  $90 = (($89) + 1)|0;
  $i = $90;
 }
 $91 = $phitot;
 STACKTOP = sp;return (+$91);
}
function __ZN4DGPC7Vector3IdE9normalizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $len = 0.0, $len2 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (+__ZNK4DGPC7Vector3IdE7length2Ev($1));
 $len2 = $2;
 $3 = $len2;
 $4 = $3 != 0.0;
 if (!($4)) {
  STACKTOP = sp;return ($1|0);
 }
 $5 = $len2;
 $6 = (+Math_sqrt((+$5)));
 $len = $6;
 $7 = $len;
 $8 = +HEAPF64[$1>>3];
 $9 = $8 / $7;
 HEAPF64[$1>>3] = $9;
 $10 = $len;
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $12 / $10;
 HEAPF64[$11>>3] = $13;
 $14 = $len;
 $15 = ((($1)) + 16|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $16 / $14;
 HEAPF64[$15>>3] = $17;
 STACKTOP = sp;return ($1|0);
}
function __ZN4DGPC4HeapIdE10initializeEPNSt3__16vectorIdNS2_9allocatorIdEEEE($this,$keys) {
 $this = $this|0;
 $keys = $keys|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $20 = sp + 56|0;
 $21 = sp + 48|0;
 $25 = sp + 32|0;
 $29 = sp + 8|0;
 $30 = sp;
 $27 = $this;
 $28 = $keys;
 $31 = $27;
 $32 = $28;
 $33 = ((($31)) + 28|0);
 HEAP32[$33>>2] = $32;
 $34 = ((($31)) + 28|0);
 $35 = HEAP32[$34>>2]|0;
 $26 = $35;
 $36 = $26;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$36>>2]|0;
 $40 = $38;
 $41 = $39;
 $42 = (($40) - ($41))|0;
 $43 = (($42|0) / 8)&-1;
 __ZN4DGPC4HeapIdE6resizeEi($31,$43);
 $44 = ((($31)) + 16|0);
 $11 = $44;
 $45 = $11;
 $9 = $45;
 $10 = 0;
 $46 = $9;
 $47 = HEAP32[$46>>2]|0;
 $48 = $10;
 $49 = (($48>>>0) / 32)&-1;
 $50 = (($47) + ($49<<2)|0);
 $51 = $10;
 $52 = (($51>>>0) % 32)&-1;
 $6 = $29;
 $7 = $50;
 $8 = $52;
 $53 = $6;
 $54 = $7;
 HEAP32[$53>>2] = $54;
 $55 = ((($53)) + 4|0);
 $56 = $8;
 HEAP32[$55>>2] = $56;
 $57 = ((($31)) + 16|0);
 $5 = $57;
 $58 = $5;
 $59 = ((($58)) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 $3 = $58;
 $4 = $60;
 $61 = $3;
 $62 = HEAP32[$61>>2]|0;
 $63 = $4;
 $64 = (($63>>>0) / 32)&-1;
 $65 = (($62) + ($64<<2)|0);
 $66 = $4;
 $67 = (($66>>>0) % 32)&-1;
 $0 = $30;
 $1 = $65;
 $2 = $67;
 $68 = $0;
 $69 = $1;
 HEAP32[$68>>2] = $69;
 $70 = ((($68)) + 4|0);
 $71 = $2;
 HEAP32[$70>>2] = $71;
 $24 = 0;
 $22 = $25;
 $23 = $29;
 $72 = $22;
 $73 = $23;
 $74 = HEAP32[$73>>2]|0;
 HEAP32[$72>>2] = $74;
 $75 = ((($72)) + 4|0);
 $76 = $23;
 $77 = ((($76)) + 4|0);
 $78 = HEAP32[$77>>2]|0;
 HEAP32[$75>>2] = $78;
 $12 = $30;
 $13 = $29;
 $79 = $12;
 $80 = HEAP32[$79>>2]|0;
 $81 = $13;
 $82 = HEAP32[$81>>2]|0;
 $83 = $80;
 $84 = $82;
 $85 = (($83) - ($84))|0;
 $86 = (($85|0) / 4)&-1;
 $87 = $86<<5;
 $88 = $12;
 $89 = ((($88)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($87) + ($90))|0;
 $92 = $13;
 $93 = ((($92)) + 4|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($91) - ($94))|0;
 $96 = $24;
 $97 = $96&1;
 $18 = $95;
 $98 = $97&1;
 $19 = $98;
 $99 = $18;
 $100 = ($99>>>0)>(0);
 if (!($100)) {
  STACKTOP = sp;return;
 }
 $101 = $19;
 $102 = $101&1;
 if ($102) {
  $16 = $20;
  $17 = $25;
  $103 = $16;
  $104 = $17;
  $105 = HEAP32[$104>>2]|0;
  HEAP32[$103>>2] = $105;
  $106 = ((($103)) + 4|0);
  $107 = $17;
  $108 = ((($107)) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  HEAP32[$106>>2] = $109;
  $110 = $18;
  __ZNSt3__113__fill_n_trueINS_6vectorIbNS_9allocatorIbEEEEEEvNS_14__bit_iteratorIT_Lb0EXLi0EEEENS6_9size_typeE($20,$110);
  STACKTOP = sp;return;
 } else {
  $14 = $21;
  $15 = $25;
  $111 = $14;
  $112 = $15;
  $113 = HEAP32[$112>>2]|0;
  HEAP32[$111>>2] = $113;
  $114 = ((($111)) + 4|0);
  $115 = $15;
  $116 = ((($115)) + 4|0);
  $117 = HEAP32[$116>>2]|0;
  HEAP32[$114>>2] = $117;
  $118 = $18;
  __ZNSt3__114__fill_n_falseINS_6vectorIbNS_9allocatorIbEEEEEEvNS_14__bit_iteratorIT_Lb0EXLi0EEEENS6_9size_typeE($21,$118);
  STACKTOP = sp;return;
 }
}
function __ZN4DGPC4HeapIdE6resizeEi($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $0;
 $3 = ((($2)) + 16|0);
 $4 = $1;
 __ZNSt3__16vectorIbNS_9allocatorIbEEE6resizeEjb($3,$4,0);
 STACKTOP = sp;return;
}
function __ZNSt3__113__fill_n_trueINS_6vectorIbNS_9allocatorIbEEEEEEvNS_14__bit_iteratorIT_Lb0EXLi0EEEENS6_9size_typeE($__first,$__n) {
 $__first = $__first|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__clz_f = 0, $__dn = 0, $__m = 0, $__m1 = 0, $__nw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 60|0;
 $10 = sp + 24|0;
 $__clz_f = sp + 20|0;
 HEAP32[$10>>2] = $__n;
 $11 = ((($__first)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = ((($__first)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (32 - ($15))|0;
  HEAP32[$__clz_f>>2] = $16;
  $7 = $__clz_f;
  $8 = $10;
  $17 = $7;
  $18 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $17;
  $5 = $18;
  $19 = $5;
  $20 = $4;
  $1 = $6;
  $2 = $19;
  $3 = $20;
  $21 = $2;
  $22 = HEAP32[$21>>2]|0;
  $23 = $3;
  $24 = HEAP32[$23>>2]|0;
  $25 = ($22>>>0)<($24>>>0);
  $26 = $5;
  $27 = $4;
  $28 = $25 ? $26 : $27;
  $29 = HEAP32[$28>>2]|0;
  $__dn = $29;
  $30 = ((($__first)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = -1 << $31;
  $33 = HEAP32[$__clz_f>>2]|0;
  $34 = $__dn;
  $35 = (($33) - ($34))|0;
  $36 = -1 >>> $35;
  $37 = $32 & $36;
  $__m = $37;
  $38 = $__m;
  $39 = HEAP32[$__first>>2]|0;
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 | $38;
  HEAP32[$39>>2] = $41;
  $42 = $__dn;
  $43 = HEAP32[$10>>2]|0;
  $44 = (($43) - ($42))|0;
  HEAP32[$10>>2] = $44;
  $45 = HEAP32[$__first>>2]|0;
  $46 = ((($45)) + 4|0);
  HEAP32[$__first>>2] = $46;
 }
 $47 = HEAP32[$10>>2]|0;
 $48 = (($47>>>0) / 32)&-1;
 $__nw = $48;
 $49 = HEAP32[$__first>>2]|0;
 $0 = $49;
 $50 = $0;
 $51 = $__nw;
 $52 = $51<<2;
 _memset(($50|0),-1,($52|0))|0;
 $53 = $__nw;
 $54 = $53<<5;
 $55 = HEAP32[$10>>2]|0;
 $56 = (($55) - ($54))|0;
 HEAP32[$10>>2] = $56;
 $57 = HEAP32[$10>>2]|0;
 $58 = ($57>>>0)>(0);
 if (!($58)) {
  STACKTOP = sp;return;
 }
 $59 = $__nw;
 $60 = HEAP32[$__first>>2]|0;
 $61 = (($60) + ($59<<2)|0);
 HEAP32[$__first>>2] = $61;
 $62 = HEAP32[$10>>2]|0;
 $63 = (32 - ($62))|0;
 $64 = -1 >>> $63;
 $__m1 = $64;
 $65 = $__m1;
 $66 = HEAP32[$__first>>2]|0;
 $67 = HEAP32[$66>>2]|0;
 $68 = $67 | $65;
 HEAP32[$66>>2] = $68;
 STACKTOP = sp;return;
}
function __ZNSt3__114__fill_n_falseINS_6vectorIbNS_9allocatorIbEEEEEEvNS_14__bit_iteratorIT_Lb0EXLi0EEEENS6_9size_typeE($__first,$__n) {
 $__first = $__first|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $__clz_f = 0, $__dn = 0, $__m = 0, $__m1 = 0, $__nw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 60|0;
 $10 = sp + 24|0;
 $__clz_f = sp + 20|0;
 HEAP32[$10>>2] = $__n;
 $11 = ((($__first)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = ((($__first)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (32 - ($15))|0;
  HEAP32[$__clz_f>>2] = $16;
  $7 = $__clz_f;
  $8 = $10;
  $17 = $7;
  $18 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $17;
  $5 = $18;
  $19 = $5;
  $20 = $4;
  $1 = $6;
  $2 = $19;
  $3 = $20;
  $21 = $2;
  $22 = HEAP32[$21>>2]|0;
  $23 = $3;
  $24 = HEAP32[$23>>2]|0;
  $25 = ($22>>>0)<($24>>>0);
  $26 = $5;
  $27 = $4;
  $28 = $25 ? $26 : $27;
  $29 = HEAP32[$28>>2]|0;
  $__dn = $29;
  $30 = ((($__first)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = -1 << $31;
  $33 = HEAP32[$__clz_f>>2]|0;
  $34 = $__dn;
  $35 = (($33) - ($34))|0;
  $36 = -1 >>> $35;
  $37 = $32 & $36;
  $__m = $37;
  $38 = $__m;
  $39 = $38 ^ -1;
  $40 = HEAP32[$__first>>2]|0;
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 & $39;
  HEAP32[$40>>2] = $42;
  $43 = $__dn;
  $44 = HEAP32[$10>>2]|0;
  $45 = (($44) - ($43))|0;
  HEAP32[$10>>2] = $45;
  $46 = HEAP32[$__first>>2]|0;
  $47 = ((($46)) + 4|0);
  HEAP32[$__first>>2] = $47;
 }
 $48 = HEAP32[$10>>2]|0;
 $49 = (($48>>>0) / 32)&-1;
 $__nw = $49;
 $50 = HEAP32[$__first>>2]|0;
 $0 = $50;
 $51 = $0;
 $52 = $__nw;
 $53 = $52<<2;
 _memset(($51|0),0,($53|0))|0;
 $54 = $__nw;
 $55 = $54<<5;
 $56 = HEAP32[$10>>2]|0;
 $57 = (($56) - ($55))|0;
 HEAP32[$10>>2] = $57;
 $58 = HEAP32[$10>>2]|0;
 $59 = ($58>>>0)>(0);
 if (!($59)) {
  STACKTOP = sp;return;
 }
 $60 = $__nw;
 $61 = HEAP32[$__first>>2]|0;
 $62 = (($61) + ($60<<2)|0);
 HEAP32[$__first>>2] = $62;
 $63 = HEAP32[$10>>2]|0;
 $64 = (32 - ($63))|0;
 $65 = -1 >>> $64;
 $__m1 = $65;
 $66 = $__m1;
 $67 = $66 ^ -1;
 $68 = HEAP32[$__first>>2]|0;
 $69 = HEAP32[$68>>2]|0;
 $70 = $69 & $67;
 HEAP32[$68>>2] = $70;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIbNS_9allocatorIbEEE6resizeEjb($this,$__sz,$__x) {
 $this = $this|0;
 $__sz = $__sz|0;
 $__x = $__x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__cap$i = 0, $__cs = 0, $__ms$i = 0, $__n = 0, $__r = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy3 = sp + 576|0;
 $$byval_copy2 = sp + 568|0;
 $$byval_copy1 = sp + 560|0;
 $$byval_copy = sp + 552|0;
 $24 = sp + 32|0;
 $27 = sp + 589|0;
 $36 = sp + 404|0;
 $37 = sp + 400|0;
 $42 = sp + 376|0;
 $43 = sp + 368|0;
 $44 = sp + 360|0;
 $45 = sp + 352|0;
 $46 = sp + 344|0;
 $47 = sp + 336|0;
 $48 = sp + 24|0;
 $49 = sp + 16|0;
 $52 = sp + 320|0;
 $60 = sp + 288|0;
 $61 = sp + 8|0;
 $64 = sp + 276|0;
 $65 = sp + 588|0;
 $66 = sp;
 $70 = sp + 260|0;
 $71 = sp + 587|0;
 $96 = sp + 160|0;
 $97 = sp + 152|0;
 $__r = sp + 120|0;
 $103 = sp + 104|0;
 $__v = sp + 88|0;
 $104 = sp + 584|0;
 $107 = sp + 72|0;
 $108 = sp + 64|0;
 $109 = sp + 56|0;
 $110 = sp + 48|0;
 $111 = sp + 40|0;
 $100 = $this;
 $101 = $__sz;
 $112 = $__x&1;
 $102 = $112;
 $113 = $100;
 $99 = $113;
 $114 = $99;
 $115 = ((($114)) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $__cs = $116;
 $117 = $__cs;
 $118 = $101;
 $119 = ($117>>>0)<($118>>>0);
 if (!($119)) {
  $322 = $101;
  $323 = ((($113)) + 4|0);
  HEAP32[$323>>2] = $322;
  STACKTOP = sp;return;
 }
 $98 = $__r;
 $89 = $113;
 $120 = $89;
 $88 = $120;
 $121 = $88;
 $122 = ((($121)) + 8|0);
 $87 = $122;
 $123 = $87;
 $86 = $123;
 $124 = $86;
 $125 = HEAP32[$124>>2]|0;
 $85 = $125;
 $126 = $85;
 $127 = $126<<5;
 $__c = $127;
 $128 = $101;
 $129 = $__cs;
 $130 = (($128) - ($129))|0;
 $__n = $130;
 $131 = $__n;
 $132 = $__c;
 $133 = ($131>>>0)<=($132>>>0);
 if ($133) {
  $134 = $__cs;
  $135 = $__c;
  $136 = $__n;
  $137 = (($135) - ($136))|0;
  $138 = ($134>>>0)<=($137>>>0);
  if ($138) {
   $84 = $113;
   $139 = $84;
   $140 = ((($139)) + 4|0);
   $141 = HEAP32[$140>>2]|0;
   $82 = $139;
   $83 = $141;
   $142 = $82;
   $143 = HEAP32[$142>>2]|0;
   $144 = $83;
   $145 = (($144>>>0) / 32)&-1;
   $146 = (($143) + ($145<<2)|0);
   $147 = $83;
   $148 = (($147>>>0) % 32)&-1;
   $79 = $103;
   $80 = $146;
   $81 = $148;
   $149 = $79;
   $150 = $80;
   HEAP32[$149>>2] = $150;
   $151 = ((($149)) + 4|0);
   $152 = $81;
   HEAP32[$151>>2] = $152;
   ;HEAP32[$__r>>2]=HEAP32[$103>>2]|0;HEAP32[$__r+4>>2]=HEAP32[$103+4>>2]|0;
   $153 = $__n;
   $154 = ((($113)) + 4|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = (($155) + ($153))|0;
   HEAP32[$154>>2] = $156;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 L8: do {
  if ((label|0) == 5) {
   $76 = $113;
   $157 = $76;
   $158 = ((($157)) + 8|0);
   $75 = $158;
   $159 = $75;
   $74 = $159;
   $160 = $74;
   $72 = $104;
   $73 = $160;
   $68 = $__v;
   $69 = $104;
   $161 = $68;
   $67 = $161;
   $50 = $52;
   $51 = -1;
   $162 = $50;
   HEAP32[$162>>2] = 0;
   $163 = HEAP32[$52>>2]|0;
   HEAP32[$70>>2] = $163;
   $53 = $70;
   HEAP32[$161>>2] = 0;
   $164 = ((($161)) + 4|0);
   HEAP32[$164>>2] = 0;
   $165 = ((($161)) + 8|0);
   $166 = $69;
   $54 = $71;
   $55 = $166;
   ;HEAP8[$66>>0]=HEAP8[$71>>0]|0;
   $63 = $165;
   HEAP32[$64>>2] = 0;
   $167 = $63;
   $62 = $64;
   $168 = $62;
   $169 = HEAP32[$168>>2]|0;
   $56 = $66;
   ;HEAP8[$61>>0]=HEAP8[$65>>0]|0;
   $59 = $167;
   HEAP32[$60>>2] = $169;
   $170 = $59;
   $58 = $61;
   $57 = $60;
   $171 = $57;
   $172 = HEAP32[$171>>2]|0;
   HEAP32[$170>>2] = $172;
   $173 = ((($113)) + 4|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = $__n;
   $176 = (($174) + ($175))|0;
   $34 = $113;
   $35 = $176;
   $177 = $34;
   $178 = (__ZNKSt3__16vectorIbNS_9allocatorIbEEE8max_sizeEv($177)|0);
   $__ms$i = $178;
   $179 = $35;
   $180 = $__ms$i;
   $181 = ($179>>>0)>($180>>>0);
   if ($181) {
    __THREW__ = 0;
    invoke_vi(552,($177|0));
    $182 = __THREW__; __THREW__ = 0;
    $183 = $182&1;
    if (!($183)) {
     label = 7;
    }
   } else {
    label = 7;
   }
   do {
    if ((label|0) == 7) {
     $32 = $177;
     $184 = $32;
     $31 = $184;
     $185 = $31;
     $186 = ((($185)) + 8|0);
     $30 = $186;
     $187 = $30;
     $29 = $187;
     $188 = $29;
     $189 = HEAP32[$188>>2]|0;
     $28 = $189;
     $190 = $28;
     $191 = $190<<5;
     $__cap$i = $191;
     $192 = $__cap$i;
     $193 = $__ms$i;
     $194 = (($193>>>0) / 2)&-1;
     $195 = ($192>>>0)>=($194>>>0);
     if ($195) {
      $196 = $__ms$i;
      $33 = $196;
     } else {
      $197 = $__cap$i;
      $198 = $197<<1;
      HEAP32[$36>>2] = $198;
      $199 = $35;
      $18 = $199;
      $200 = $18;
      $201 = (($200) + 31)|0;
      $202 = $201 & -32;
      HEAP32[$37>>2] = $202;
      $25 = $36;
      $26 = $37;
      $203 = $25;
      $204 = $26;
      ;HEAP8[$24>>0]=HEAP8[$27>>0]|0;
      $22 = $203;
      $23 = $204;
      $205 = $22;
      $206 = $23;
      $19 = $24;
      $20 = $205;
      $21 = $206;
      $207 = $20;
      $208 = HEAP32[$207>>2]|0;
      $209 = $21;
      $210 = HEAP32[$209>>2]|0;
      $211 = ($208>>>0)<($210>>>0);
      $212 = $23;
      $213 = $22;
      $214 = $211 ? $212 : $213;
      $215 = HEAP32[$214>>2]|0;
      $33 = $215;
     }
     $216 = $33;
     __THREW__ = 0;
     invoke_vii(553,($__v|0),($216|0));
     $217 = __THREW__; __THREW__ = 0;
     $218 = $217&1;
     if (!($218)) {
      $219 = ((($113)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $__n;
      $222 = (($220) + ($221))|0;
      $223 = ((($__v)) + 4|0);
      HEAP32[$223>>2] = $222;
      $17 = $113;
      $224 = $17;
      $15 = $224;
      $16 = 0;
      $225 = $15;
      $226 = HEAP32[$225>>2]|0;
      $227 = $16;
      $228 = (($227>>>0) / 32)&-1;
      $229 = (($226) + ($228<<2)|0);
      $230 = $16;
      $231 = (($230>>>0) % 32)&-1;
      $12 = $108;
      $13 = $229;
      $14 = $231;
      $232 = $12;
      $233 = $13;
      HEAP32[$232>>2] = $233;
      $234 = ((($232)) + 4|0);
      $235 = $14;
      HEAP32[$234>>2] = $235;
      $11 = $113;
      $236 = $11;
      $237 = ((($236)) + 4|0);
      $238 = HEAP32[$237>>2]|0;
      $9 = $236;
      $10 = $238;
      $239 = $9;
      $240 = HEAP32[$239>>2]|0;
      $241 = $10;
      $242 = (($241>>>0) / 32)&-1;
      $243 = (($240) + ($242<<2)|0);
      $244 = $10;
      $245 = (($244>>>0) % 32)&-1;
      $6 = $109;
      $7 = $243;
      $8 = $245;
      $246 = $6;
      $247 = $7;
      HEAP32[$246>>2] = $247;
      $248 = ((($246)) + 4|0);
      $249 = $8;
      HEAP32[$248>>2] = $249;
      $5 = $__v;
      $250 = $5;
      $3 = $250;
      $4 = 0;
      $251 = $3;
      $252 = HEAP32[$251>>2]|0;
      $253 = $4;
      $254 = (($253>>>0) / 32)&-1;
      $255 = (($252) + ($254<<2)|0);
      $256 = $4;
      $257 = (($256>>>0) % 32)&-1;
      $0 = $110;
      $1 = $255;
      $2 = $257;
      $258 = $0;
      $259 = $1;
      HEAP32[$258>>2] = $259;
      $260 = ((($258)) + 4|0);
      $261 = $2;
      HEAP32[$260>>2] = $261;
      ;HEAP8[$48>>0]=HEAP8[$109>>0]|0;HEAP8[$48+1>>0]=HEAP8[$109+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$109+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$109+3>>0]|0;HEAP8[$48+4>>0]=HEAP8[$109+4>>0]|0;HEAP8[$48+5>>0]=HEAP8[$109+5>>0]|0;HEAP8[$48+6>>0]=HEAP8[$109+6>>0]|0;HEAP8[$48+7>>0]=HEAP8[$109+7>>0]|0;
      ;HEAP8[$49>>0]=HEAP8[$108>>0]|0;HEAP8[$49+1>>0]=HEAP8[$108+1>>0]|0;HEAP8[$49+2>>0]=HEAP8[$108+2>>0]|0;HEAP8[$49+3>>0]=HEAP8[$108+3>>0]|0;HEAP8[$49+4>>0]=HEAP8[$108+4>>0]|0;HEAP8[$49+5>>0]=HEAP8[$108+5>>0]|0;HEAP8[$49+6>>0]=HEAP8[$108+6>>0]|0;HEAP8[$49+7>>0]=HEAP8[$108+7>>0]|0;
      $262 = ((($49)) + 4|0);
      $263 = HEAP32[$262>>2]|0;
      $264 = ((($110)) + 4|0);
      $265 = HEAP32[$264>>2]|0;
      $266 = ($263|0)==($265|0);
      if ($266) {
       ;HEAP32[$42>>2]=HEAP32[$49>>2]|0;HEAP32[$42+4>>2]=HEAP32[$49+4>>2]|0;
       ;HEAP32[$43>>2]=HEAP32[$48>>2]|0;HEAP32[$43+4>>2]=HEAP32[$48+4>>2]|0;
       $40 = $44;
       $41 = $110;
       $267 = $40;
       $268 = $41;
       $269 = HEAP32[$268>>2]|0;
       HEAP32[$267>>2] = $269;
       $270 = ((($267)) + 4|0);
       $271 = $41;
       $272 = ((($271)) + 4|0);
       $273 = HEAP32[$272>>2]|0;
       HEAP32[$270>>2] = $273;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$42>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$42+4>>2]|0;
       ;HEAP32[$$byval_copy1>>2]=HEAP32[$43>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$43+4>>2]|0;
       invoke_viiii(554,($107|0),($$byval_copy|0),($$byval_copy1|0),($44|0));
       $274 = __THREW__; __THREW__ = 0;
       $275 = $274&1;
       if ($275) {
        break;
       }
      } else {
       ;HEAP32[$45>>2]=HEAP32[$49>>2]|0;HEAP32[$45+4>>2]=HEAP32[$49+4>>2]|0;
       ;HEAP32[$46>>2]=HEAP32[$48>>2]|0;HEAP32[$46+4>>2]=HEAP32[$48+4>>2]|0;
       $38 = $47;
       $39 = $110;
       $276 = $38;
       $277 = $39;
       $278 = HEAP32[$277>>2]|0;
       HEAP32[$276>>2] = $278;
       $279 = ((($276)) + 4|0);
       $280 = $39;
       $281 = ((($280)) + 4|0);
       $282 = HEAP32[$281>>2]|0;
       HEAP32[$279>>2] = $282;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy2>>2]=HEAP32[$45>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$45+4>>2]|0;
       ;HEAP32[$$byval_copy3>>2]=HEAP32[$46>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$46+4>>2]|0;
       invoke_viiii(555,($107|0),($$byval_copy2|0),($$byval_copy3|0),($47|0));
       $283 = __THREW__; __THREW__ = 0;
       $284 = $283&1;
       if ($284) {
        break;
       }
      }
      ;HEAP32[$__r>>2]=HEAP32[$107>>2]|0;HEAP32[$__r+4>>2]=HEAP32[$107+4>>2]|0;
      __THREW__ = 0;
      invoke_vii(556,($113|0),($__v|0));
      $285 = __THREW__; __THREW__ = 0;
      $286 = $285&1;
      if (!($286)) {
       __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($__v);
       break L8;
      }
     }
    }
   } while(0);
   $287 = ___cxa_find_matching_catch()|0;
   $288 = tempRet0;
   $105 = $287;
   $106 = $288;
   __THREW__ = 0;
   invoke_vi(557,($__v|0));
   $289 = __THREW__; __THREW__ = 0;
   $290 = $289&1;
   if ($290) {
    $326 = ___cxa_find_matching_catch(0|0)|0;
    $327 = tempRet0;
    ___clang_call_terminate($326);
    // unreachable;
   } else {
    $324 = $105;
    $325 = $106;
    ___resumeException($324|0);
    // unreachable;
   }
  }
 } while(0);
 $77 = $111;
 $78 = $__r;
 $291 = $77;
 $292 = $78;
 $293 = HEAP32[$292>>2]|0;
 HEAP32[$291>>2] = $293;
 $294 = ((($291)) + 4|0);
 $295 = $78;
 $296 = ((($295)) + 4|0);
 $297 = HEAP32[$296>>2]|0;
 HEAP32[$294>>2] = $297;
 $298 = $__n;
 $299 = $102;
 $300 = $299&1;
 $94 = $298;
 $301 = $300&1;
 $95 = $301;
 $302 = $94;
 $303 = ($302>>>0)>(0);
 if (!($303)) {
  STACKTOP = sp;return;
 }
 $304 = $95;
 $305 = $304&1;
 if ($305) {
  $92 = $96;
  $93 = $111;
  $306 = $92;
  $307 = $93;
  $308 = HEAP32[$307>>2]|0;
  HEAP32[$306>>2] = $308;
  $309 = ((($306)) + 4|0);
  $310 = $93;
  $311 = ((($310)) + 4|0);
  $312 = HEAP32[$311>>2]|0;
  HEAP32[$309>>2] = $312;
  $313 = $94;
  __ZNSt3__113__fill_n_trueINS_6vectorIbNS_9allocatorIbEEEEEEvNS_14__bit_iteratorIT_Lb0EXLi0EEEENS6_9size_typeE($96,$313);
  STACKTOP = sp;return;
 } else {
  $90 = $97;
  $91 = $111;
  $314 = $90;
  $315 = $91;
  $316 = HEAP32[$315>>2]|0;
  HEAP32[$314>>2] = $316;
  $317 = ((($314)) + 4|0);
  $318 = $91;
  $319 = ((($318)) + 4|0);
  $320 = HEAP32[$319>>2]|0;
  HEAP32[$317>>2] = $320;
  $321 = $94;
  __ZNSt3__114__fill_n_falseINS_6vectorIbNS_9allocatorIbEEEEEEvNS_14__bit_iteratorIT_Lb0EXLi0EEEENS6_9size_typeE($97,$321);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__16vectorIbNS_9allocatorIbEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__amax = 0, $__nmax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $4 = sp + 48|0;
 $10 = $this;
 $11 = $10;
 $8 = $11;
 $12 = $8;
 $13 = ((($12)) + 8|0);
 $7 = $13;
 $14 = $7;
 $6 = $14;
 $15 = $6;
 $3 = $15;
 $16 = $3;
 ;HEAP8[$2>>0]=HEAP8[$4>>0]|0;
 $1 = $16;
 $17 = $1;
 $0 = $17;
 $__amax = 1073741823;
 $18 = (4294967295 / 2)&-1;
 $__nmax = $18;
 $19 = $__nmax;
 $20 = (($19>>>0) / 32)&-1;
 $21 = $__amax;
 $22 = ($20>>>0)<=($21>>>0);
 if ($22) {
  $23 = $__nmax;
  $9 = $23;
  $27 = $9;
  STACKTOP = sp;return ($27|0);
 } else {
  $24 = $__amax;
  $5 = $24;
  $25 = $5;
  $26 = $25<<5;
  $9 = $26;
  $27 = $9;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function __ZNSt3__16vectorIbNS_9allocatorIbEEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 160|0;
 $23 = sp + 128|0;
 $24 = sp + 8|0;
 $27 = sp + 116|0;
 $28 = sp + 226|0;
 $29 = sp;
 $33 = sp + 100|0;
 $34 = sp + 225|0;
 $__v = sp + 40|0;
 $47 = sp + 224|0;
 $50 = sp + 24|0;
 $51 = sp + 16|0;
 $45 = $this;
 $46 = $__n;
 $52 = $45;
 $53 = $46;
 $44 = $52;
 $54 = $44;
 $43 = $54;
 $55 = $43;
 $56 = ((($55)) + 8|0);
 $42 = $56;
 $57 = $42;
 $41 = $57;
 $58 = $41;
 $59 = HEAP32[$58>>2]|0;
 $40 = $59;
 $60 = $40;
 $61 = $60<<5;
 $62 = ($53>>>0)>($61>>>0);
 if (!($62)) {
  STACKTOP = sp;return;
 }
 $39 = $52;
 $63 = $39;
 $64 = ((($63)) + 8|0);
 $38 = $64;
 $65 = $38;
 $37 = $65;
 $66 = $37;
 $35 = $47;
 $36 = $66;
 $31 = $__v;
 $32 = $47;
 $67 = $31;
 $30 = $67;
 $13 = $15;
 $14 = -1;
 $68 = $13;
 HEAP32[$68>>2] = 0;
 $69 = HEAP32[$15>>2]|0;
 HEAP32[$33>>2] = $69;
 $16 = $33;
 HEAP32[$67>>2] = 0;
 $70 = ((($67)) + 4|0);
 HEAP32[$70>>2] = 0;
 $71 = ((($67)) + 8|0);
 $72 = $32;
 $17 = $34;
 $18 = $72;
 ;HEAP8[$29>>0]=HEAP8[$34>>0]|0;
 $26 = $71;
 HEAP32[$27>>2] = 0;
 $73 = $26;
 $25 = $27;
 $74 = $25;
 $75 = HEAP32[$74>>2]|0;
 $19 = $29;
 ;HEAP8[$24>>0]=HEAP8[$28>>0]|0;
 $22 = $73;
 HEAP32[$23>>2] = $75;
 $76 = $22;
 $21 = $24;
 $20 = $23;
 $77 = $20;
 $78 = HEAP32[$77>>2]|0;
 HEAP32[$76>>2] = $78;
 $79 = $46;
 __THREW__ = 0;
 invoke_vii(558,($__v|0),($79|0));
 $80 = __THREW__; __THREW__ = 0;
 $81 = $80&1;
 if (!($81)) {
  $11 = $52;
  $82 = $11;
  $9 = $82;
  $10 = 0;
  $83 = $9;
  $84 = HEAP32[$83>>2]|0;
  $85 = $10;
  $86 = (($85>>>0) / 32)&-1;
  $87 = (($84) + ($86<<2)|0);
  $88 = $10;
  $89 = (($88>>>0) % 32)&-1;
  $6 = $50;
  $7 = $87;
  $8 = $89;
  $90 = $6;
  $91 = $7;
  HEAP32[$90>>2] = $91;
  $92 = ((($90)) + 4|0);
  $93 = $8;
  HEAP32[$92>>2] = $93;
  $5 = $52;
  $94 = $5;
  $95 = ((($94)) + 4|0);
  $96 = HEAP32[$95>>2]|0;
  $3 = $94;
  $4 = $96;
  $97 = $3;
  $98 = HEAP32[$97>>2]|0;
  $99 = $4;
  $100 = (($99>>>0) / 32)&-1;
  $101 = (($98) + ($100<<2)|0);
  $102 = $4;
  $103 = (($102>>>0) % 32)&-1;
  $0 = $51;
  $1 = $101;
  $2 = $103;
  $104 = $0;
  $105 = $1;
  HEAP32[$104>>2] = $105;
  $106 = ((($104)) + 4|0);
  $107 = $2;
  HEAP32[$106>>2] = $107;
  __THREW__ = 0;
  invoke_viii(559,($__v|0),($50|0),($51|0));
  $108 = __THREW__; __THREW__ = 0;
  $109 = $108&1;
  if (!($109)) {
   __THREW__ = 0;
   invoke_vii(556,($52|0),($__v|0));
   $110 = __THREW__; __THREW__ = 0;
   $111 = $110&1;
   if (!($111)) {
    $12 = $52;
    __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($__v);
    STACKTOP = sp;return;
   }
  }
 }
 $112 = ___cxa_find_matching_catch()|0;
 $113 = tempRet0;
 $48 = $112;
 $49 = $113;
 __THREW__ = 0;
 invoke_vi(557,($__v|0));
 $114 = __THREW__; __THREW__ = 0;
 $115 = $114&1;
 if ($115) {
  $118 = ___cxa_find_matching_catch(0|0)|0;
  $119 = tempRet0;
  ___clang_call_terminate($118);
  // unreachable;
 } else {
  $116 = $48;
  $117 = $49;
  ___resumeException($116|0);
  // unreachable;
 }
}
function __ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb1EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($agg$result,$__first,$__last,$__result) {
 $agg$result = $agg$result|0;
 $__first = $__first|0;
 $__last = $__last|0;
 $__result = $__result|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__b = 0;
 var $__b2 = 0, $__clz = 0, $__dn = 0, $__m = 0, $__m1 = 0, $__n = 0, $__nw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 92|0;
 $__n = sp + 36|0;
 $15 = sp + 24|0;
 $13 = $__last;
 $14 = $__first;
 $16 = $13;
 $17 = HEAP32[$16>>2]|0;
 $18 = $14;
 $19 = HEAP32[$18>>2]|0;
 $20 = $17;
 $21 = $19;
 $22 = (($20) - ($21))|0;
 $23 = (($22|0) / 4)&-1;
 $24 = $23<<5;
 $25 = $13;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($24) + ($27))|0;
 $29 = $14;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($28) - ($31))|0;
 HEAP32[$__n>>2] = $32;
 $33 = HEAP32[$__n>>2]|0;
 $34 = ($33|0)>(0);
 if (!($34)) {
  $11 = $agg$result;
  $12 = $__result;
  $132 = $11;
  $133 = $12;
  $134 = HEAP32[$133>>2]|0;
  HEAP32[$132>>2] = $134;
  $135 = ((($132)) + 4|0);
  $136 = $12;
  $137 = ((($136)) + 4|0);
  $138 = HEAP32[$137>>2]|0;
  HEAP32[$135>>2] = $138;
  STACKTOP = sp;return;
 }
 $35 = ((($__first)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = ((($__first)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (32 - ($39))|0;
  $__clz = $40;
  $41 = $__clz;
  HEAP32[$15>>2] = $41;
  $6 = $15;
  $7 = $__n;
  $42 = $6;
  $43 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $42;
  $4 = $43;
  $44 = $4;
  $45 = $3;
  $0 = $5;
  $1 = $44;
  $2 = $45;
  $46 = $1;
  $47 = HEAP32[$46>>2]|0;
  $48 = $2;
  $49 = HEAP32[$48>>2]|0;
  $50 = ($47|0)<($49|0);
  $51 = $4;
  $52 = $3;
  $53 = $50 ? $51 : $52;
  $54 = HEAP32[$53>>2]|0;
  $__dn = $54;
  $55 = $__dn;
  $56 = HEAP32[$__n>>2]|0;
  $57 = (($56) - ($55))|0;
  HEAP32[$__n>>2] = $57;
  $58 = ((($__first)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = -1 << $59;
  $61 = $__clz;
  $62 = $__dn;
  $63 = (($61) - ($62))|0;
  $64 = -1 >>> $63;
  $65 = $60 & $64;
  $__m = $65;
  $66 = HEAP32[$__first>>2]|0;
  $67 = HEAP32[$66>>2]|0;
  $68 = $__m;
  $69 = $67 & $68;
  $__b = $69;
  $70 = $__m;
  $71 = $70 ^ -1;
  $72 = HEAP32[$__result>>2]|0;
  $73 = HEAP32[$72>>2]|0;
  $74 = $73 & $71;
  HEAP32[$72>>2] = $74;
  $75 = $__b;
  $76 = HEAP32[$__result>>2]|0;
  $77 = HEAP32[$76>>2]|0;
  $78 = $77 | $75;
  HEAP32[$76>>2] = $78;
  $79 = $__dn;
  $80 = ((($__result)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($79) + ($81))|0;
  $83 = (($82>>>0) / 32)&-1;
  $84 = HEAP32[$__result>>2]|0;
  $85 = (($84) + ($83<<2)|0);
  HEAP32[$__result>>2] = $85;
  $86 = $__dn;
  $87 = ((($__result)) + 4|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($86) + ($88))|0;
  $90 = (($89>>>0) % 32)&-1;
  $91 = ((($__result)) + 4|0);
  HEAP32[$91>>2] = $90;
  $92 = HEAP32[$__first>>2]|0;
  $93 = ((($92)) + 4|0);
  HEAP32[$__first>>2] = $93;
 }
 $94 = HEAP32[$__n>>2]|0;
 $95 = (($94>>>0) / 32)&-1;
 $__nw = $95;
 $96 = HEAP32[$__result>>2]|0;
 $9 = $96;
 $97 = $9;
 $98 = HEAP32[$__first>>2]|0;
 $10 = $98;
 $99 = $10;
 $100 = $__nw;
 $101 = $100<<2;
 _memmove(($97|0),($99|0),($101|0))|0;
 $102 = $__nw;
 $103 = $102<<5;
 $104 = HEAP32[$__n>>2]|0;
 $105 = (($104) - ($103))|0;
 HEAP32[$__n>>2] = $105;
 $106 = $__nw;
 $107 = HEAP32[$__result>>2]|0;
 $108 = (($107) + ($106<<2)|0);
 HEAP32[$__result>>2] = $108;
 $109 = HEAP32[$__n>>2]|0;
 $110 = ($109|0)>(0);
 if (!($110)) {
  $11 = $agg$result;
  $12 = $__result;
  $132 = $11;
  $133 = $12;
  $134 = HEAP32[$133>>2]|0;
  HEAP32[$132>>2] = $134;
  $135 = ((($132)) + 4|0);
  $136 = $12;
  $137 = ((($136)) + 4|0);
  $138 = HEAP32[$137>>2]|0;
  HEAP32[$135>>2] = $138;
  STACKTOP = sp;return;
 }
 $111 = $__nw;
 $112 = HEAP32[$__first>>2]|0;
 $113 = (($112) + ($111<<2)|0);
 HEAP32[$__first>>2] = $113;
 $114 = HEAP32[$__n>>2]|0;
 $115 = (32 - ($114))|0;
 $116 = -1 >>> $115;
 $__m1 = $116;
 $117 = HEAP32[$__first>>2]|0;
 $118 = HEAP32[$117>>2]|0;
 $119 = $__m1;
 $120 = $118 & $119;
 $__b2 = $120;
 $121 = $__m1;
 $122 = $121 ^ -1;
 $123 = HEAP32[$__result>>2]|0;
 $124 = HEAP32[$123>>2]|0;
 $125 = $124 & $122;
 HEAP32[$123>>2] = $125;
 $126 = $__b2;
 $127 = HEAP32[$__result>>2]|0;
 $128 = HEAP32[$127>>2]|0;
 $129 = $128 | $126;
 HEAP32[$127>>2] = $129;
 $130 = HEAP32[$__n>>2]|0;
 $131 = ((($__result)) + 4|0);
 HEAP32[$131>>2] = $130;
 $11 = $agg$result;
 $12 = $__result;
 $132 = $11;
 $133 = $12;
 $134 = HEAP32[$133>>2]|0;
 HEAP32[$132>>2] = $134;
 $135 = ((($132)) + 4|0);
 $136 = $12;
 $137 = ((($136)) + 4|0);
 $138 = HEAP32[$137>>2]|0;
 HEAP32[$135>>2] = $138;
 STACKTOP = sp;return;
}
function __ZNSt3__116__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb1EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($agg$result,$__first,$__last,$__result) {
 $agg$result = $agg$result|0;
 $__first = $__first|0;
 $__last = $__last|0;
 $__result = $__result|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__b = 0, $__b3 = 0, $__b4 = 0, $__clz_f = 0, $__clz_r = 0, $__clz_r1 = 0, $__ddn = 0, $__dn = 0, $__dn5 = 0, $__m = 0, $__m2 = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 16|0;
 $8 = sp + 182|0;
 $14 = sp + 8|0;
 $17 = sp + 181|0;
 $23 = sp;
 $26 = sp + 180|0;
 $__n = sp + 76|0;
 $31 = sp + 64|0;
 $__clz_r = sp + 52|0;
 $32 = sp + 44|0;
 $33 = sp + 20|0;
 $29 = $__last;
 $30 = $__first;
 $34 = $29;
 $35 = HEAP32[$34>>2]|0;
 $36 = $30;
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 4)&-1;
 $42 = $41<<5;
 $43 = $29;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($42) + ($45))|0;
 $47 = $30;
 $48 = ((($47)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($46) - ($49))|0;
 HEAP32[$__n>>2] = $50;
 $51 = HEAP32[$__n>>2]|0;
 $52 = ($51|0)>(0);
 if (!($52)) {
  $27 = $agg$result;
  $28 = $__result;
  $296 = $27;
  $297 = $28;
  $298 = HEAP32[$297>>2]|0;
  HEAP32[$296>>2] = $298;
  $299 = ((($296)) + 4|0);
  $300 = $28;
  $301 = ((($300)) + 4|0);
  $302 = HEAP32[$301>>2]|0;
  HEAP32[$299>>2] = $302;
  STACKTOP = sp;return;
 }
 $53 = ((($__first)) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)!=(0);
 if ($55) {
  $56 = ((($__first)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (32 - ($57))|0;
  $__clz_f = $58;
  $59 = $__clz_f;
  HEAP32[$31>>2] = $59;
  $6 = $31;
  $7 = $__n;
  $60 = $6;
  $61 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $60;
  $4 = $61;
  $62 = $4;
  $63 = $3;
  $0 = $5;
  $1 = $62;
  $2 = $63;
  $64 = $1;
  $65 = HEAP32[$64>>2]|0;
  $66 = $2;
  $67 = HEAP32[$66>>2]|0;
  $68 = ($65|0)<($67|0);
  $69 = $4;
  $70 = $3;
  $71 = $68 ? $69 : $70;
  $72 = HEAP32[$71>>2]|0;
  $__dn = $72;
  $73 = $__dn;
  $74 = HEAP32[$__n>>2]|0;
  $75 = (($74) - ($73))|0;
  HEAP32[$__n>>2] = $75;
  $76 = ((($__first)) + 4|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = -1 << $77;
  $79 = $__clz_f;
  $80 = $__dn;
  $81 = (($79) - ($80))|0;
  $82 = -1 >>> $81;
  $83 = $78 & $82;
  $__m = $83;
  $84 = HEAP32[$__first>>2]|0;
  $85 = HEAP32[$84>>2]|0;
  $86 = $__m;
  $87 = $85 & $86;
  $__b = $87;
  $88 = ((($__result)) + 4|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (32 - ($89))|0;
  HEAP32[$__clz_r>>2] = $90;
  $91 = $__dn;
  HEAP32[$32>>2] = $91;
  $15 = $32;
  $16 = $__clz_r;
  $92 = $15;
  $93 = $16;
  ;HEAP8[$14>>0]=HEAP8[$17>>0]|0;
  $12 = $92;
  $13 = $93;
  $94 = $13;
  $95 = $12;
  $9 = $14;
  $10 = $94;
  $11 = $95;
  $96 = $10;
  $97 = HEAP32[$96>>2]|0;
  $98 = $11;
  $99 = HEAP32[$98>>2]|0;
  $100 = ($97>>>0)<($99>>>0);
  $101 = $13;
  $102 = $12;
  $103 = $100 ? $101 : $102;
  $104 = HEAP32[$103>>2]|0;
  $__ddn = $104;
  $105 = ((($__result)) + 4|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = -1 << $106;
  $108 = HEAP32[$__clz_r>>2]|0;
  $109 = $__ddn;
  $110 = (($108) - ($109))|0;
  $111 = -1 >>> $110;
  $112 = $107 & $111;
  $__m = $112;
  $113 = $__m;
  $114 = $113 ^ -1;
  $115 = HEAP32[$__result>>2]|0;
  $116 = HEAP32[$115>>2]|0;
  $117 = $116 & $114;
  HEAP32[$115>>2] = $117;
  $118 = ((($__result)) + 4|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ((($__first)) + 4|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($119>>>0)>($121>>>0);
  $123 = $__b;
  if ($122) {
   $124 = ((($__result)) + 4|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ((($__first)) + 4|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($125) - ($127))|0;
   $129 = $123 << $128;
   $130 = HEAP32[$__result>>2]|0;
   $131 = HEAP32[$130>>2]|0;
   $132 = $131 | $129;
   HEAP32[$130>>2] = $132;
  } else {
   $133 = ((($__first)) + 4|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ((($__result)) + 4|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (($134) - ($136))|0;
   $138 = $123 >>> $137;
   $139 = HEAP32[$__result>>2]|0;
   $140 = HEAP32[$139>>2]|0;
   $141 = $140 | $138;
   HEAP32[$139>>2] = $141;
  }
  $142 = $__ddn;
  $143 = ((($__result)) + 4|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (($142) + ($144))|0;
  $146 = (($145>>>0) / 32)&-1;
  $147 = HEAP32[$__result>>2]|0;
  $148 = (($147) + ($146<<2)|0);
  HEAP32[$__result>>2] = $148;
  $149 = $__ddn;
  $150 = ((($__result)) + 4|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($149) + ($151))|0;
  $153 = (($152>>>0) % 32)&-1;
  $154 = ((($__result)) + 4|0);
  HEAP32[$154>>2] = $153;
  $155 = $__ddn;
  $156 = $__dn;
  $157 = (($156) - ($155))|0;
  $__dn = $157;
  $158 = $__dn;
  $159 = ($158|0)>(0);
  if ($159) {
   $160 = $__dn;
   $161 = (32 - ($160))|0;
   $162 = -1 >>> $161;
   $__m = $162;
   $163 = $__m;
   $164 = $163 ^ -1;
   $165 = HEAP32[$__result>>2]|0;
   $166 = HEAP32[$165>>2]|0;
   $167 = $166 & $164;
   HEAP32[$165>>2] = $167;
   $168 = $__b;
   $169 = ((($__first)) + 4|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = $__ddn;
   $172 = (($170) + ($171))|0;
   $173 = $168 >>> $172;
   $174 = HEAP32[$__result>>2]|0;
   $175 = HEAP32[$174>>2]|0;
   $176 = $175 | $173;
   HEAP32[$174>>2] = $176;
   $177 = $__dn;
   $178 = ((($__result)) + 4|0);
   HEAP32[$178>>2] = $177;
  }
  $179 = HEAP32[$__first>>2]|0;
  $180 = ((($179)) + 4|0);
  HEAP32[$__first>>2] = $180;
 }
 $181 = ((($__result)) + 4|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = (32 - ($182))|0;
 $__clz_r1 = $183;
 $184 = ((($__result)) + 4|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = -1 << $185;
 $__m2 = $186;
 while(1) {
  $187 = HEAP32[$__n>>2]|0;
  $188 = ($187>>>0)>=(32);
  if (!($188)) {
   break;
  }
  $189 = HEAP32[$__first>>2]|0;
  $190 = HEAP32[$189>>2]|0;
  $__b3 = $190;
  $191 = $__m2;
  $192 = $191 ^ -1;
  $193 = HEAP32[$__result>>2]|0;
  $194 = HEAP32[$193>>2]|0;
  $195 = $194 & $192;
  HEAP32[$193>>2] = $195;
  $196 = $__b3;
  $197 = ((($__result)) + 4|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = $196 << $198;
  $200 = HEAP32[$__result>>2]|0;
  $201 = HEAP32[$200>>2]|0;
  $202 = $201 | $199;
  HEAP32[$200>>2] = $202;
  $203 = HEAP32[$__result>>2]|0;
  $204 = ((($203)) + 4|0);
  HEAP32[$__result>>2] = $204;
  $205 = $__m2;
  $206 = HEAP32[$__result>>2]|0;
  $207 = HEAP32[$206>>2]|0;
  $208 = $207 & $205;
  HEAP32[$206>>2] = $208;
  $209 = $__b3;
  $210 = $__clz_r1;
  $211 = $209 >>> $210;
  $212 = HEAP32[$__result>>2]|0;
  $213 = HEAP32[$212>>2]|0;
  $214 = $213 | $211;
  HEAP32[$212>>2] = $214;
  $215 = HEAP32[$__n>>2]|0;
  $216 = (($215) - 32)|0;
  HEAP32[$__n>>2] = $216;
  $217 = HEAP32[$__first>>2]|0;
  $218 = ((($217)) + 4|0);
  HEAP32[$__first>>2] = $218;
 }
 $219 = HEAP32[$__n>>2]|0;
 $220 = ($219|0)>(0);
 if (!($220)) {
  $27 = $agg$result;
  $28 = $__result;
  $296 = $27;
  $297 = $28;
  $298 = HEAP32[$297>>2]|0;
  HEAP32[$296>>2] = $298;
  $299 = ((($296)) + 4|0);
  $300 = $28;
  $301 = ((($300)) + 4|0);
  $302 = HEAP32[$301>>2]|0;
  HEAP32[$299>>2] = $302;
  STACKTOP = sp;return;
 }
 $221 = HEAP32[$__n>>2]|0;
 $222 = (32 - ($221))|0;
 $223 = -1 >>> $222;
 $__m2 = $223;
 $224 = HEAP32[$__first>>2]|0;
 $225 = HEAP32[$224>>2]|0;
 $226 = $__m2;
 $227 = $225 & $226;
 $__b4 = $227;
 $228 = $__clz_r1;
 HEAP32[$33>>2] = $228;
 $24 = $__n;
 $25 = $33;
 $229 = $24;
 $230 = $25;
 ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
 $21 = $229;
 $22 = $230;
 $231 = $22;
 $232 = $21;
 $18 = $23;
 $19 = $231;
 $20 = $232;
 $233 = $19;
 $234 = HEAP32[$233>>2]|0;
 $235 = $20;
 $236 = HEAP32[$235>>2]|0;
 $237 = ($234|0)<($236|0);
 $238 = $22;
 $239 = $21;
 $240 = $237 ? $238 : $239;
 $241 = HEAP32[$240>>2]|0;
 $__dn5 = $241;
 $242 = ((($__result)) + 4|0);
 $243 = HEAP32[$242>>2]|0;
 $244 = -1 << $243;
 $245 = $__clz_r1;
 $246 = $__dn5;
 $247 = (($245) - ($246))|0;
 $248 = -1 >>> $247;
 $249 = $244 & $248;
 $__m2 = $249;
 $250 = $__m2;
 $251 = $250 ^ -1;
 $252 = HEAP32[$__result>>2]|0;
 $253 = HEAP32[$252>>2]|0;
 $254 = $253 & $251;
 HEAP32[$252>>2] = $254;
 $255 = $__b4;
 $256 = ((($__result)) + 4|0);
 $257 = HEAP32[$256>>2]|0;
 $258 = $255 << $257;
 $259 = HEAP32[$__result>>2]|0;
 $260 = HEAP32[$259>>2]|0;
 $261 = $260 | $258;
 HEAP32[$259>>2] = $261;
 $262 = $__dn5;
 $263 = ((($__result)) + 4|0);
 $264 = HEAP32[$263>>2]|0;
 $265 = (($262) + ($264))|0;
 $266 = (($265>>>0) / 32)&-1;
 $267 = HEAP32[$__result>>2]|0;
 $268 = (($267) + ($266<<2)|0);
 HEAP32[$__result>>2] = $268;
 $269 = $__dn5;
 $270 = ((($__result)) + 4|0);
 $271 = HEAP32[$270>>2]|0;
 $272 = (($269) + ($271))|0;
 $273 = (($272>>>0) % 32)&-1;
 $274 = ((($__result)) + 4|0);
 HEAP32[$274>>2] = $273;
 $275 = $__dn5;
 $276 = HEAP32[$__n>>2]|0;
 $277 = (($276) - ($275))|0;
 HEAP32[$__n>>2] = $277;
 $278 = HEAP32[$__n>>2]|0;
 $279 = ($278|0)>(0);
 if (!($279)) {
  $27 = $agg$result;
  $28 = $__result;
  $296 = $27;
  $297 = $28;
  $298 = HEAP32[$297>>2]|0;
  HEAP32[$296>>2] = $298;
  $299 = ((($296)) + 4|0);
  $300 = $28;
  $301 = ((($300)) + 4|0);
  $302 = HEAP32[$301>>2]|0;
  HEAP32[$299>>2] = $302;
  STACKTOP = sp;return;
 }
 $280 = HEAP32[$__n>>2]|0;
 $281 = (32 - ($280))|0;
 $282 = -1 >>> $281;
 $__m2 = $282;
 $283 = $__m2;
 $284 = $283 ^ -1;
 $285 = HEAP32[$__result>>2]|0;
 $286 = HEAP32[$285>>2]|0;
 $287 = $286 & $284;
 HEAP32[$285>>2] = $287;
 $288 = $__b4;
 $289 = $__dn5;
 $290 = $288 >>> $289;
 $291 = HEAP32[$__result>>2]|0;
 $292 = HEAP32[$291>>2]|0;
 $293 = $292 | $290;
 HEAP32[$291>>2] = $293;
 $294 = HEAP32[$__n>>2]|0;
 $295 = ((($__result)) + 4|0);
 HEAP32[$295>>2] = $294;
 $27 = $agg$result;
 $28 = $__result;
 $296 = $27;
 $297 = $28;
 $298 = HEAP32[$297>>2]|0;
 HEAP32[$296>>2] = $298;
 $299 = ((($296)) + 4|0);
 $300 = $28;
 $301 = ((($300)) + 4|0);
 $302 = HEAP32[$301>>2]|0;
 HEAP32[$299>>2] = $302;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIbNS_9allocatorIbEEE4swapERS3_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 124|0;
 $__t$i1 = sp + 76|0;
 $24 = sp;
 $27 = sp + 148|0;
 $__t$i = sp + 12|0;
 $33 = $this;
 $34 = $__x;
 $35 = $33;
 $36 = $34;
 $31 = $35;
 $32 = $36;
 $37 = $31;
 $30 = $37;
 $38 = $30;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$__t$i>>2] = $39;
 $40 = $32;
 $28 = $40;
 $41 = $28;
 $42 = HEAP32[$41>>2]|0;
 $43 = $31;
 HEAP32[$43>>2] = $42;
 $29 = $__t$i;
 $44 = $29;
 $45 = HEAP32[$44>>2]|0;
 $46 = $32;
 HEAP32[$46>>2] = $45;
 $47 = ((($35)) + 4|0);
 $48 = $34;
 $49 = ((($48)) + 4|0);
 $3 = $47;
 $4 = $49;
 $50 = $3;
 $2 = $50;
 $51 = $2;
 $52 = HEAP32[$51>>2]|0;
 HEAP32[$__t$i2>>2] = $52;
 $53 = $4;
 $0 = $53;
 $54 = $0;
 $55 = HEAP32[$54>>2]|0;
 $56 = $3;
 HEAP32[$56>>2] = $55;
 $1 = $__t$i2;
 $57 = $1;
 $58 = HEAP32[$57>>2]|0;
 $59 = $4;
 HEAP32[$59>>2] = $58;
 $7 = $35;
 $60 = $7;
 $61 = ((($60)) + 8|0);
 $6 = $61;
 $62 = $6;
 $5 = $62;
 $63 = $5;
 $64 = $34;
 $10 = $64;
 $65 = $10;
 $66 = ((($65)) + 8|0);
 $9 = $66;
 $67 = $9;
 $8 = $67;
 $68 = $8;
 $14 = $63;
 $15 = $68;
 $69 = $14;
 $13 = $69;
 $70 = $13;
 $71 = HEAP32[$70>>2]|0;
 HEAP32[$__t$i1>>2] = $71;
 $72 = $15;
 $11 = $72;
 $73 = $11;
 $74 = HEAP32[$73>>2]|0;
 $75 = $14;
 HEAP32[$75>>2] = $74;
 $12 = $__t$i1;
 $76 = $12;
 $77 = HEAP32[$76>>2]|0;
 $78 = $15;
 HEAP32[$78>>2] = $77;
 $18 = $35;
 $79 = $18;
 $80 = ((($79)) + 8|0);
 $17 = $80;
 $81 = $17;
 $16 = $81;
 $82 = $16;
 $83 = $34;
 $21 = $83;
 $84 = $21;
 $85 = ((($84)) + 8|0);
 $20 = $85;
 $86 = $20;
 $19 = $86;
 $87 = $19;
 $25 = $82;
 $26 = $87;
 $88 = $25;
 $89 = $26;
 ;HEAP8[$24>>0]=HEAP8[$27>>0]|0;
 $22 = $88;
 $23 = $89;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 8|0;
 $19 = sp;
 $18 = $this;
 $20 = $18;
 $21 = HEAP32[$20>>2]|0;
 $15 = $17;
 $16 = -1;
 $22 = $15;
 HEAP32[$22>>2] = 0;
 $23 = HEAP32[$17>>2]|0;
 HEAP32[$19>>2] = $23;
 $6 = $19;
 $24 = ($21|0)!=(0|0);
 if (!($24)) {
  $14 = $20;
  STACKTOP = sp;return;
 }
 $2 = $20;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$20>>2]|0;
 $5 = $20;
 $30 = $5;
 $31 = ((($30)) + 8|0);
 $4 = $31;
 $32 = $4;
 $3 = $32;
 $33 = $3;
 $34 = HEAP32[$33>>2]|0;
 $11 = $28;
 $12 = $29;
 $13 = $34;
 $35 = $11;
 $36 = $12;
 $37 = $13;
 $8 = $35;
 $9 = $36;
 $10 = $37;
 $38 = $9;
 $7 = $38;
 $39 = $7;
 __ZdlPv($39);
 $14 = $20;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIbNS_9allocatorIbEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = $this;
 $14 = $__n;
 $15 = $13;
 $16 = $14;
 $17 = (__ZNKSt3__16vectorIbNS_9allocatorIbEEE8max_sizeEv($15)|0);
 $18 = ($16>>>0)>($17>>>0);
 if ($18) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($15);
 }
 $19 = $14;
 $12 = $19;
 $20 = $12;
 $21 = (($20) - 1)|0;
 $22 = (($21>>>0) / 32)&-1;
 $23 = (($22) + 1)|0;
 $14 = $23;
 $2 = $15;
 $24 = $2;
 $25 = ((($24)) + 8|0);
 $1 = $25;
 $26 = $1;
 $0 = $26;
 $27 = $0;
 $28 = $14;
 $7 = $27;
 $8 = $28;
 $29 = $7;
 $30 = $8;
 $4 = $29;
 $5 = $30;
 $6 = 0;
 $31 = $5;
 $32 = $31<<2;
 $3 = $32;
 $33 = $3;
 $34 = (__Znwj($33)|0);
 HEAP32[$15>>2] = $34;
 $35 = ((($15)) + 4|0);
 HEAP32[$35>>2] = 0;
 $36 = $14;
 $11 = $15;
 $37 = $11;
 $38 = ((($37)) + 8|0);
 $10 = $38;
 $39 = $10;
 $9 = $39;
 $40 = $9;
 HEAP32[$40>>2] = $36;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELj0EEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__old_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = sp;
 $16 = sp + 184|0;
 $17 = sp + 176|0;
 $18 = sp + 252|0;
 $33 = sp + 112|0;
 $34 = sp + 104|0;
 $35 = sp + 96|0;
 $36 = sp + 88|0;
 $37 = sp + 80|0;
 $38 = sp + 72|0;
 $42 = sp + 48|0;
 $43 = sp + 40|0;
 $44 = sp + 32|0;
 $45 = sp + 24|0;
 $46 = sp + 16|0;
 $47 = sp + 8|0;
 $41 = $this;
 $48 = $41;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $__old_size = $50;
 $39 = $42;
 $40 = $__first;
 $51 = $39;
 $52 = $40;
 $53 = HEAP32[$52>>2]|0;
 HEAP32[$51>>2] = $53;
 $54 = ((($51)) + 4|0);
 $55 = $40;
 $56 = ((($55)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 HEAP32[$54>>2] = $57;
 $19 = $43;
 $20 = $__last;
 $58 = $19;
 $59 = $20;
 $60 = HEAP32[$59>>2]|0;
 HEAP32[$58>>2] = $60;
 $61 = ((($58)) + 4|0);
 $62 = $20;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 HEAP32[$61>>2] = $64;
 $14 = $16;
 $15 = $42;
 $65 = $14;
 $66 = $15;
 $67 = HEAP32[$66>>2]|0;
 HEAP32[$65>>2] = $67;
 $68 = ((($65)) + 4|0);
 $69 = $15;
 $70 = ((($69)) + 4|0);
 $71 = HEAP32[$70>>2]|0;
 HEAP32[$68>>2] = $71;
 $9 = $17;
 $10 = $43;
 $72 = $9;
 $73 = $10;
 $74 = HEAP32[$73>>2]|0;
 HEAP32[$72>>2] = $74;
 $75 = ((($72)) + 4|0);
 $76 = $10;
 $77 = ((($76)) + 4|0);
 $78 = HEAP32[$77>>2]|0;
 HEAP32[$75>>2] = $78;
 ;HEAP8[$13>>0]=HEAP8[$18>>0]|0;
 $11 = $17;
 $12 = $16;
 $79 = $11;
 $80 = HEAP32[$79>>2]|0;
 $81 = $12;
 $82 = HEAP32[$81>>2]|0;
 $83 = $80;
 $84 = $82;
 $85 = (($83) - ($84))|0;
 $86 = (($85|0) / 4)&-1;
 $87 = $86<<5;
 $88 = $11;
 $89 = ((($88)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($87) + ($90))|0;
 $92 = $12;
 $93 = ((($92)) + 4|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($91) - ($94))|0;
 $96 = ((($48)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = (($97) + ($95))|0;
 HEAP32[$96>>2] = $98;
 $0 = $44;
 $1 = $__first;
 $99 = $0;
 $100 = $1;
 $101 = HEAP32[$100>>2]|0;
 HEAP32[$99>>2] = $101;
 $102 = ((($99)) + 4|0);
 $103 = $1;
 $104 = ((($103)) + 4|0);
 $105 = HEAP32[$104>>2]|0;
 HEAP32[$102>>2] = $105;
 $2 = $45;
 $3 = $__last;
 $106 = $2;
 $107 = $3;
 $108 = HEAP32[$107>>2]|0;
 HEAP32[$106>>2] = $108;
 $109 = ((($106)) + 4|0);
 $110 = $3;
 $111 = ((($110)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 HEAP32[$109>>2] = $112;
 $113 = $__old_size;
 $7 = $48;
 $8 = $113;
 $114 = $7;
 $115 = HEAP32[$114>>2]|0;
 $116 = $8;
 $117 = (($116>>>0) / 32)&-1;
 $118 = (($115) + ($117<<2)|0);
 $119 = $8;
 $120 = (($119>>>0) % 32)&-1;
 $4 = $46;
 $5 = $118;
 $6 = $120;
 $121 = $4;
 $122 = $5;
 HEAP32[$121>>2] = $122;
 $123 = ((($121)) + 4|0);
 $124 = $6;
 HEAP32[$123>>2] = $124;
 $125 = ((($44)) + 4|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = ((($46)) + 4|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = ($126|0)==($128|0);
 if ($129) {
  $31 = $33;
  $32 = $44;
  $130 = $31;
  $131 = $32;
  $132 = HEAP32[$131>>2]|0;
  HEAP32[$130>>2] = $132;
  $133 = ((($130)) + 4|0);
  $134 = $32;
  $135 = ((($134)) + 4|0);
  $136 = HEAP32[$135>>2]|0;
  HEAP32[$133>>2] = $136;
  $29 = $34;
  $30 = $45;
  $137 = $29;
  $138 = $30;
  $139 = HEAP32[$138>>2]|0;
  HEAP32[$137>>2] = $139;
  $140 = ((($137)) + 4|0);
  $141 = $30;
  $142 = ((($141)) + 4|0);
  $143 = HEAP32[$142>>2]|0;
  HEAP32[$140>>2] = $143;
  $21 = $35;
  $22 = $46;
  $144 = $21;
  $145 = $22;
  $146 = HEAP32[$145>>2]|0;
  HEAP32[$144>>2] = $146;
  $147 = ((($144)) + 4|0);
  $148 = $22;
  $149 = ((($148)) + 4|0);
  $150 = HEAP32[$149>>2]|0;
  HEAP32[$147>>2] = $150;
  __ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($47,$33,$34,$35);
  STACKTOP = sp;return;
 } else {
  $23 = $36;
  $24 = $44;
  $151 = $23;
  $152 = $24;
  $153 = HEAP32[$152>>2]|0;
  HEAP32[$151>>2] = $153;
  $154 = ((($151)) + 4|0);
  $155 = $24;
  $156 = ((($155)) + 4|0);
  $157 = HEAP32[$156>>2]|0;
  HEAP32[$154>>2] = $157;
  $25 = $37;
  $26 = $45;
  $158 = $25;
  $159 = $26;
  $160 = HEAP32[$159>>2]|0;
  HEAP32[$158>>2] = $160;
  $161 = ((($158)) + 4|0);
  $162 = $26;
  $163 = ((($162)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  HEAP32[$161>>2] = $164;
  $27 = $38;
  $28 = $46;
  $165 = $27;
  $166 = $28;
  $167 = HEAP32[$166>>2]|0;
  HEAP32[$165>>2] = $167;
  $168 = ((($165)) + 4|0);
  $169 = $28;
  $170 = ((($169)) + 4|0);
  $171 = HEAP32[$170>>2]|0;
  HEAP32[$168>>2] = $171;
  __ZNSt3__116__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($47,$36,$37,$38);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($agg$result,$__first,$__last,$__result) {
 $agg$result = $agg$result|0;
 $__first = $__first|0;
 $__last = $__last|0;
 $__result = $__result|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__b = 0;
 var $__b2 = 0, $__clz = 0, $__dn = 0, $__m = 0, $__m1 = 0, $__n = 0, $__nw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 92|0;
 $__n = sp + 36|0;
 $15 = sp + 24|0;
 $13 = $__last;
 $14 = $__first;
 $16 = $13;
 $17 = HEAP32[$16>>2]|0;
 $18 = $14;
 $19 = HEAP32[$18>>2]|0;
 $20 = $17;
 $21 = $19;
 $22 = (($20) - ($21))|0;
 $23 = (($22|0) / 4)&-1;
 $24 = $23<<5;
 $25 = $13;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($24) + ($27))|0;
 $29 = $14;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($28) - ($31))|0;
 HEAP32[$__n>>2] = $32;
 $33 = HEAP32[$__n>>2]|0;
 $34 = ($33|0)>(0);
 if (!($34)) {
  $11 = $agg$result;
  $12 = $__result;
  $132 = $11;
  $133 = $12;
  $134 = HEAP32[$133>>2]|0;
  HEAP32[$132>>2] = $134;
  $135 = ((($132)) + 4|0);
  $136 = $12;
  $137 = ((($136)) + 4|0);
  $138 = HEAP32[$137>>2]|0;
  HEAP32[$135>>2] = $138;
  STACKTOP = sp;return;
 }
 $35 = ((($__first)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = ((($__first)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (32 - ($39))|0;
  $__clz = $40;
  $41 = $__clz;
  HEAP32[$15>>2] = $41;
  $6 = $15;
  $7 = $__n;
  $42 = $6;
  $43 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $42;
  $4 = $43;
  $44 = $4;
  $45 = $3;
  $0 = $5;
  $1 = $44;
  $2 = $45;
  $46 = $1;
  $47 = HEAP32[$46>>2]|0;
  $48 = $2;
  $49 = HEAP32[$48>>2]|0;
  $50 = ($47|0)<($49|0);
  $51 = $4;
  $52 = $3;
  $53 = $50 ? $51 : $52;
  $54 = HEAP32[$53>>2]|0;
  $__dn = $54;
  $55 = $__dn;
  $56 = HEAP32[$__n>>2]|0;
  $57 = (($56) - ($55))|0;
  HEAP32[$__n>>2] = $57;
  $58 = ((($__first)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = -1 << $59;
  $61 = $__clz;
  $62 = $__dn;
  $63 = (($61) - ($62))|0;
  $64 = -1 >>> $63;
  $65 = $60 & $64;
  $__m = $65;
  $66 = HEAP32[$__first>>2]|0;
  $67 = HEAP32[$66>>2]|0;
  $68 = $__m;
  $69 = $67 & $68;
  $__b = $69;
  $70 = $__m;
  $71 = $70 ^ -1;
  $72 = HEAP32[$__result>>2]|0;
  $73 = HEAP32[$72>>2]|0;
  $74 = $73 & $71;
  HEAP32[$72>>2] = $74;
  $75 = $__b;
  $76 = HEAP32[$__result>>2]|0;
  $77 = HEAP32[$76>>2]|0;
  $78 = $77 | $75;
  HEAP32[$76>>2] = $78;
  $79 = $__dn;
  $80 = ((($__result)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($79) + ($81))|0;
  $83 = (($82>>>0) / 32)&-1;
  $84 = HEAP32[$__result>>2]|0;
  $85 = (($84) + ($83<<2)|0);
  HEAP32[$__result>>2] = $85;
  $86 = $__dn;
  $87 = ((($__result)) + 4|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($86) + ($88))|0;
  $90 = (($89>>>0) % 32)&-1;
  $91 = ((($__result)) + 4|0);
  HEAP32[$91>>2] = $90;
  $92 = HEAP32[$__first>>2]|0;
  $93 = ((($92)) + 4|0);
  HEAP32[$__first>>2] = $93;
 }
 $94 = HEAP32[$__n>>2]|0;
 $95 = (($94>>>0) / 32)&-1;
 $__nw = $95;
 $96 = HEAP32[$__result>>2]|0;
 $9 = $96;
 $97 = $9;
 $98 = HEAP32[$__first>>2]|0;
 $10 = $98;
 $99 = $10;
 $100 = $__nw;
 $101 = $100<<2;
 _memmove(($97|0),($99|0),($101|0))|0;
 $102 = $__nw;
 $103 = $102<<5;
 $104 = HEAP32[$__n>>2]|0;
 $105 = (($104) - ($103))|0;
 HEAP32[$__n>>2] = $105;
 $106 = $__nw;
 $107 = HEAP32[$__result>>2]|0;
 $108 = (($107) + ($106<<2)|0);
 HEAP32[$__result>>2] = $108;
 $109 = HEAP32[$__n>>2]|0;
 $110 = ($109|0)>(0);
 if (!($110)) {
  $11 = $agg$result;
  $12 = $__result;
  $132 = $11;
  $133 = $12;
  $134 = HEAP32[$133>>2]|0;
  HEAP32[$132>>2] = $134;
  $135 = ((($132)) + 4|0);
  $136 = $12;
  $137 = ((($136)) + 4|0);
  $138 = HEAP32[$137>>2]|0;
  HEAP32[$135>>2] = $138;
  STACKTOP = sp;return;
 }
 $111 = $__nw;
 $112 = HEAP32[$__first>>2]|0;
 $113 = (($112) + ($111<<2)|0);
 HEAP32[$__first>>2] = $113;
 $114 = HEAP32[$__n>>2]|0;
 $115 = (32 - ($114))|0;
 $116 = -1 >>> $115;
 $__m1 = $116;
 $117 = HEAP32[$__first>>2]|0;
 $118 = HEAP32[$117>>2]|0;
 $119 = $__m1;
 $120 = $118 & $119;
 $__b2 = $120;
 $121 = $__m1;
 $122 = $121 ^ -1;
 $123 = HEAP32[$__result>>2]|0;
 $124 = HEAP32[$123>>2]|0;
 $125 = $124 & $122;
 HEAP32[$123>>2] = $125;
 $126 = $__b2;
 $127 = HEAP32[$__result>>2]|0;
 $128 = HEAP32[$127>>2]|0;
 $129 = $128 | $126;
 HEAP32[$127>>2] = $129;
 $130 = HEAP32[$__n>>2]|0;
 $131 = ((($__result)) + 4|0);
 HEAP32[$131>>2] = $130;
 $11 = $agg$result;
 $12 = $__result;
 $132 = $11;
 $133 = $12;
 $134 = HEAP32[$133>>2]|0;
 HEAP32[$132>>2] = $134;
 $135 = ((($132)) + 4|0);
 $136 = $12;
 $137 = ((($136)) + 4|0);
 $138 = HEAP32[$137>>2]|0;
 HEAP32[$135>>2] = $138;
 STACKTOP = sp;return;
}
function __ZNSt3__116__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($agg$result,$__first,$__last,$__result) {
 $agg$result = $agg$result|0;
 $__first = $__first|0;
 $__last = $__last|0;
 $__result = $__result|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__b = 0, $__b3 = 0, $__b4 = 0, $__clz_f = 0, $__clz_r = 0, $__clz_r1 = 0, $__ddn = 0, $__dn = 0, $__dn5 = 0, $__m = 0, $__m2 = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 16|0;
 $8 = sp + 182|0;
 $14 = sp + 8|0;
 $17 = sp + 181|0;
 $23 = sp;
 $26 = sp + 180|0;
 $__n = sp + 76|0;
 $31 = sp + 64|0;
 $__clz_r = sp + 52|0;
 $32 = sp + 44|0;
 $33 = sp + 20|0;
 $29 = $__last;
 $30 = $__first;
 $34 = $29;
 $35 = HEAP32[$34>>2]|0;
 $36 = $30;
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 4)&-1;
 $42 = $41<<5;
 $43 = $29;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($42) + ($45))|0;
 $47 = $30;
 $48 = ((($47)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($46) - ($49))|0;
 HEAP32[$__n>>2] = $50;
 $51 = HEAP32[$__n>>2]|0;
 $52 = ($51|0)>(0);
 if (!($52)) {
  $27 = $agg$result;
  $28 = $__result;
  $296 = $27;
  $297 = $28;
  $298 = HEAP32[$297>>2]|0;
  HEAP32[$296>>2] = $298;
  $299 = ((($296)) + 4|0);
  $300 = $28;
  $301 = ((($300)) + 4|0);
  $302 = HEAP32[$301>>2]|0;
  HEAP32[$299>>2] = $302;
  STACKTOP = sp;return;
 }
 $53 = ((($__first)) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)!=(0);
 if ($55) {
  $56 = ((($__first)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (32 - ($57))|0;
  $__clz_f = $58;
  $59 = $__clz_f;
  HEAP32[$31>>2] = $59;
  $6 = $31;
  $7 = $__n;
  $60 = $6;
  $61 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $60;
  $4 = $61;
  $62 = $4;
  $63 = $3;
  $0 = $5;
  $1 = $62;
  $2 = $63;
  $64 = $1;
  $65 = HEAP32[$64>>2]|0;
  $66 = $2;
  $67 = HEAP32[$66>>2]|0;
  $68 = ($65|0)<($67|0);
  $69 = $4;
  $70 = $3;
  $71 = $68 ? $69 : $70;
  $72 = HEAP32[$71>>2]|0;
  $__dn = $72;
  $73 = $__dn;
  $74 = HEAP32[$__n>>2]|0;
  $75 = (($74) - ($73))|0;
  HEAP32[$__n>>2] = $75;
  $76 = ((($__first)) + 4|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = -1 << $77;
  $79 = $__clz_f;
  $80 = $__dn;
  $81 = (($79) - ($80))|0;
  $82 = -1 >>> $81;
  $83 = $78 & $82;
  $__m = $83;
  $84 = HEAP32[$__first>>2]|0;
  $85 = HEAP32[$84>>2]|0;
  $86 = $__m;
  $87 = $85 & $86;
  $__b = $87;
  $88 = ((($__result)) + 4|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (32 - ($89))|0;
  HEAP32[$__clz_r>>2] = $90;
  $91 = $__dn;
  HEAP32[$32>>2] = $91;
  $15 = $32;
  $16 = $__clz_r;
  $92 = $15;
  $93 = $16;
  ;HEAP8[$14>>0]=HEAP8[$17>>0]|0;
  $12 = $92;
  $13 = $93;
  $94 = $13;
  $95 = $12;
  $9 = $14;
  $10 = $94;
  $11 = $95;
  $96 = $10;
  $97 = HEAP32[$96>>2]|0;
  $98 = $11;
  $99 = HEAP32[$98>>2]|0;
  $100 = ($97>>>0)<($99>>>0);
  $101 = $13;
  $102 = $12;
  $103 = $100 ? $101 : $102;
  $104 = HEAP32[$103>>2]|0;
  $__ddn = $104;
  $105 = ((($__result)) + 4|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = -1 << $106;
  $108 = HEAP32[$__clz_r>>2]|0;
  $109 = $__ddn;
  $110 = (($108) - ($109))|0;
  $111 = -1 >>> $110;
  $112 = $107 & $111;
  $__m = $112;
  $113 = $__m;
  $114 = $113 ^ -1;
  $115 = HEAP32[$__result>>2]|0;
  $116 = HEAP32[$115>>2]|0;
  $117 = $116 & $114;
  HEAP32[$115>>2] = $117;
  $118 = ((($__result)) + 4|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ((($__first)) + 4|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($119>>>0)>($121>>>0);
  $123 = $__b;
  if ($122) {
   $124 = ((($__result)) + 4|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ((($__first)) + 4|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($125) - ($127))|0;
   $129 = $123 << $128;
   $130 = HEAP32[$__result>>2]|0;
   $131 = HEAP32[$130>>2]|0;
   $132 = $131 | $129;
   HEAP32[$130>>2] = $132;
  } else {
   $133 = ((($__first)) + 4|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ((($__result)) + 4|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (($134) - ($136))|0;
   $138 = $123 >>> $137;
   $139 = HEAP32[$__result>>2]|0;
   $140 = HEAP32[$139>>2]|0;
   $141 = $140 | $138;
   HEAP32[$139>>2] = $141;
  }
  $142 = $__ddn;
  $143 = ((($__result)) + 4|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (($142) + ($144))|0;
  $146 = (($145>>>0) / 32)&-1;
  $147 = HEAP32[$__result>>2]|0;
  $148 = (($147) + ($146<<2)|0);
  HEAP32[$__result>>2] = $148;
  $149 = $__ddn;
  $150 = ((($__result)) + 4|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($149) + ($151))|0;
  $153 = (($152>>>0) % 32)&-1;
  $154 = ((($__result)) + 4|0);
  HEAP32[$154>>2] = $153;
  $155 = $__ddn;
  $156 = $__dn;
  $157 = (($156) - ($155))|0;
  $__dn = $157;
  $158 = $__dn;
  $159 = ($158|0)>(0);
  if ($159) {
   $160 = $__dn;
   $161 = (32 - ($160))|0;
   $162 = -1 >>> $161;
   $__m = $162;
   $163 = $__m;
   $164 = $163 ^ -1;
   $165 = HEAP32[$__result>>2]|0;
   $166 = HEAP32[$165>>2]|0;
   $167 = $166 & $164;
   HEAP32[$165>>2] = $167;
   $168 = $__b;
   $169 = ((($__first)) + 4|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = $__ddn;
   $172 = (($170) + ($171))|0;
   $173 = $168 >>> $172;
   $174 = HEAP32[$__result>>2]|0;
   $175 = HEAP32[$174>>2]|0;
   $176 = $175 | $173;
   HEAP32[$174>>2] = $176;
   $177 = $__dn;
   $178 = ((($__result)) + 4|0);
   HEAP32[$178>>2] = $177;
  }
  $179 = HEAP32[$__first>>2]|0;
  $180 = ((($179)) + 4|0);
  HEAP32[$__first>>2] = $180;
 }
 $181 = ((($__result)) + 4|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = (32 - ($182))|0;
 $__clz_r1 = $183;
 $184 = ((($__result)) + 4|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = -1 << $185;
 $__m2 = $186;
 while(1) {
  $187 = HEAP32[$__n>>2]|0;
  $188 = ($187>>>0)>=(32);
  if (!($188)) {
   break;
  }
  $189 = HEAP32[$__first>>2]|0;
  $190 = HEAP32[$189>>2]|0;
  $__b3 = $190;
  $191 = $__m2;
  $192 = $191 ^ -1;
  $193 = HEAP32[$__result>>2]|0;
  $194 = HEAP32[$193>>2]|0;
  $195 = $194 & $192;
  HEAP32[$193>>2] = $195;
  $196 = $__b3;
  $197 = ((($__result)) + 4|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = $196 << $198;
  $200 = HEAP32[$__result>>2]|0;
  $201 = HEAP32[$200>>2]|0;
  $202 = $201 | $199;
  HEAP32[$200>>2] = $202;
  $203 = HEAP32[$__result>>2]|0;
  $204 = ((($203)) + 4|0);
  HEAP32[$__result>>2] = $204;
  $205 = $__m2;
  $206 = HEAP32[$__result>>2]|0;
  $207 = HEAP32[$206>>2]|0;
  $208 = $207 & $205;
  HEAP32[$206>>2] = $208;
  $209 = $__b3;
  $210 = $__clz_r1;
  $211 = $209 >>> $210;
  $212 = HEAP32[$__result>>2]|0;
  $213 = HEAP32[$212>>2]|0;
  $214 = $213 | $211;
  HEAP32[$212>>2] = $214;
  $215 = HEAP32[$__n>>2]|0;
  $216 = (($215) - 32)|0;
  HEAP32[$__n>>2] = $216;
  $217 = HEAP32[$__first>>2]|0;
  $218 = ((($217)) + 4|0);
  HEAP32[$__first>>2] = $218;
 }
 $219 = HEAP32[$__n>>2]|0;
 $220 = ($219|0)>(0);
 if (!($220)) {
  $27 = $agg$result;
  $28 = $__result;
  $296 = $27;
  $297 = $28;
  $298 = HEAP32[$297>>2]|0;
  HEAP32[$296>>2] = $298;
  $299 = ((($296)) + 4|0);
  $300 = $28;
  $301 = ((($300)) + 4|0);
  $302 = HEAP32[$301>>2]|0;
  HEAP32[$299>>2] = $302;
  STACKTOP = sp;return;
 }
 $221 = HEAP32[$__n>>2]|0;
 $222 = (32 - ($221))|0;
 $223 = -1 >>> $222;
 $__m2 = $223;
 $224 = HEAP32[$__first>>2]|0;
 $225 = HEAP32[$224>>2]|0;
 $226 = $__m2;
 $227 = $225 & $226;
 $__b4 = $227;
 $228 = $__clz_r1;
 HEAP32[$33>>2] = $228;
 $24 = $__n;
 $25 = $33;
 $229 = $24;
 $230 = $25;
 ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
 $21 = $229;
 $22 = $230;
 $231 = $22;
 $232 = $21;
 $18 = $23;
 $19 = $231;
 $20 = $232;
 $233 = $19;
 $234 = HEAP32[$233>>2]|0;
 $235 = $20;
 $236 = HEAP32[$235>>2]|0;
 $237 = ($234|0)<($236|0);
 $238 = $22;
 $239 = $21;
 $240 = $237 ? $238 : $239;
 $241 = HEAP32[$240>>2]|0;
 $__dn5 = $241;
 $242 = ((($__result)) + 4|0);
 $243 = HEAP32[$242>>2]|0;
 $244 = -1 << $243;
 $245 = $__clz_r1;
 $246 = $__dn5;
 $247 = (($245) - ($246))|0;
 $248 = -1 >>> $247;
 $249 = $244 & $248;
 $__m2 = $249;
 $250 = $__m2;
 $251 = $250 ^ -1;
 $252 = HEAP32[$__result>>2]|0;
 $253 = HEAP32[$252>>2]|0;
 $254 = $253 & $251;
 HEAP32[$252>>2] = $254;
 $255 = $__b4;
 $256 = ((($__result)) + 4|0);
 $257 = HEAP32[$256>>2]|0;
 $258 = $255 << $257;
 $259 = HEAP32[$__result>>2]|0;
 $260 = HEAP32[$259>>2]|0;
 $261 = $260 | $258;
 HEAP32[$259>>2] = $261;
 $262 = $__dn5;
 $263 = ((($__result)) + 4|0);
 $264 = HEAP32[$263>>2]|0;
 $265 = (($262) + ($264))|0;
 $266 = (($265>>>0) / 32)&-1;
 $267 = HEAP32[$__result>>2]|0;
 $268 = (($267) + ($266<<2)|0);
 HEAP32[$__result>>2] = $268;
 $269 = $__dn5;
 $270 = ((($__result)) + 4|0);
 $271 = HEAP32[$270>>2]|0;
 $272 = (($269) + ($271))|0;
 $273 = (($272>>>0) % 32)&-1;
 $274 = ((($__result)) + 4|0);
 HEAP32[$274>>2] = $273;
 $275 = $__dn5;
 $276 = HEAP32[$__n>>2]|0;
 $277 = (($276) - ($275))|0;
 HEAP32[$__n>>2] = $277;
 $278 = HEAP32[$__n>>2]|0;
 $279 = ($278|0)>(0);
 if (!($279)) {
  $27 = $agg$result;
  $28 = $__result;
  $296 = $27;
  $297 = $28;
  $298 = HEAP32[$297>>2]|0;
  HEAP32[$296>>2] = $298;
  $299 = ((($296)) + 4|0);
  $300 = $28;
  $301 = ((($300)) + 4|0);
  $302 = HEAP32[$301>>2]|0;
  HEAP32[$299>>2] = $302;
  STACKTOP = sp;return;
 }
 $280 = HEAP32[$__n>>2]|0;
 $281 = (32 - ($280))|0;
 $282 = -1 >>> $281;
 $__m2 = $282;
 $283 = $__m2;
 $284 = $283 ^ -1;
 $285 = HEAP32[$__result>>2]|0;
 $286 = HEAP32[$285>>2]|0;
 $287 = $286 & $284;
 HEAP32[$285>>2] = $287;
 $288 = $__b4;
 $289 = $__dn5;
 $290 = $288 >>> $289;
 $291 = HEAP32[$__result>>2]|0;
 $292 = HEAP32[$291>>2]|0;
 $293 = $292 | $290;
 HEAP32[$291>>2] = $293;
 $294 = HEAP32[$__n>>2]|0;
 $295 = ((($__result)) + 4|0);
 HEAP32[$295>>2] = $294;
 $27 = $agg$result;
 $28 = $__result;
 $296 = $27;
 $297 = $28;
 $298 = HEAP32[$297>>2]|0;
 HEAP32[$296>>2] = $298;
 $299 = ((($296)) + 4|0);
 $300 = $28;
 $301 = ((($300)) + 4|0);
 $302 = HEAP32[$301>>2]|0;
 HEAP32[$299>>2] = $302;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4DGPC4HeapIdED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 16|0);
 __THREW__ = 0;
 invoke_vi(557,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZNSt3__114priority_queueIN4DGPC8HeapNodeIdEENS_6vectorIS3_NS_9allocatorIS3_EEEENS_7greaterIS3_EEED2Ev($3);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 __THREW__ = 0;
 invoke_vi(560,($3|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 } else {
  $11 = $1;
  $12 = $2;
  ___resumeException($11|0);
  // unreachable;
 }
}
function __ZNSt3__114priority_queueIN4DGPC8HeapNodeIdEENS_6vectorIS3_NS_9allocatorIS3_EEEENS_7greaterIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 12|0;
 $32 = sp + 4|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = ((($40)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = ((($45)) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = ((($40)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -16|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $53;
  $2 = $54;
  $55 = $2;
  __ZN4DGPC8HeapNodeIdED2Ev($55);
 }
 $15 = $33;
 $56 = $15;
 $57 = ((($56)) + 8|0);
 $14 = $57;
 $58 = $14;
 $13 = $58;
 $59 = $13;
 $60 = HEAP32[$33>>2]|0;
 $19 = $33;
 $61 = $19;
 $18 = $61;
 $62 = $18;
 $63 = ((($62)) + 8|0);
 $17 = $63;
 $64 = $17;
 $16 = $64;
 $65 = $16;
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$61>>2]|0;
 $68 = $66;
 $69 = $67;
 $70 = (($68) - ($69))|0;
 $71 = (($70|0) / 16)&-1;
 $25 = $59;
 $26 = $60;
 $27 = $71;
 $72 = $25;
 $73 = $26;
 $74 = $27;
 $22 = $72;
 $23 = $73;
 $24 = $74;
 $75 = $23;
 $21 = $75;
 $76 = $21;
 __ZdlPv($76);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 12|0;
 $32 = sp + 4|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = ((($40)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = ((($45)) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = ((($40)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -8|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = ((($55)) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = ((($61)) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $70 = (($69|0) / 8)&-1;
 $25 = $58;
 $26 = $59;
 $27 = $70;
 $71 = $25;
 $72 = $26;
 $73 = $27;
 $22 = $71;
 $23 = $72;
 $24 = $73;
 $74 = $23;
 $21 = $74;
 $75 = $21;
 __ZdlPv($75);
 STACKTOP = sp;return;
}
function __ZN4DGPC4HeapIdEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 152|0;
 $7 = sp + 132|0;
 $10 = sp + 120|0;
 $13 = sp + 108|0;
 $16 = sp + 96|0;
 $20 = sp + 80|0;
 $24 = sp + 64|0;
 $29 = sp + 44|0;
 $32 = sp + 32|0;
 $35 = sp + 20|0;
 $36 = sp + 16|0;
 $37 = sp + 12|0;
 $40 = $this;
 $41 = $40;
 $39 = $41;
 $42 = $39;
 $38 = $42;
 $43 = $38;
 $34 = $43;
 $44 = $34;
 $33 = $44;
 $14 = $16;
 $15 = -1;
 $45 = $14;
 HEAP32[$45>>2] = 0;
 $46 = HEAP32[$16>>2]|0;
 HEAP32[$35>>2] = $46;
 $17 = $35;
 HEAP32[$44>>2] = 0;
 $47 = ((($44)) + 4|0);
 $18 = $20;
 $19 = -1;
 $48 = $18;
 HEAP32[$48>>2] = 0;
 $49 = HEAP32[$20>>2]|0;
 HEAP32[$36>>2] = $49;
 $21 = $36;
 HEAP32[$47>>2] = 0;
 $50 = ((($44)) + 8|0);
 $22 = $24;
 $23 = -1;
 $51 = $22;
 HEAP32[$51>>2] = 0;
 $52 = HEAP32[$24>>2]|0;
 HEAP32[$37>>2] = $52;
 $25 = $37;
 $31 = $50;
 HEAP32[$32>>2] = 0;
 $53 = $31;
 $30 = $32;
 $54 = $30;
 $55 = HEAP32[$54>>2]|0;
 $28 = $53;
 HEAP32[$29>>2] = $55;
 $56 = $28;
 $27 = $56;
 $26 = $29;
 $57 = $26;
 $58 = HEAP32[$57>>2]|0;
 HEAP32[$56>>2] = $58;
 $59 = ((($41)) + 16|0);
 $12 = $59;
 $60 = $12;
 $11 = $60;
 $0 = $2;
 $1 = -1;
 $61 = $0;
 HEAP32[$61>>2] = 0;
 $62 = HEAP32[$2>>2]|0;
 HEAP32[$13>>2] = $62;
 $3 = $13;
 HEAP32[$60>>2] = 0;
 $63 = ((($60)) + 4|0);
 HEAP32[$63>>2] = 0;
 $64 = ((($60)) + 8|0);
 $9 = $64;
 HEAP32[$10>>2] = 0;
 $65 = $9;
 $8 = $10;
 $66 = $8;
 $67 = HEAP32[$66>>2]|0;
 $6 = $65;
 HEAP32[$7>>2] = $67;
 $68 = $6;
 $5 = $68;
 $4 = $7;
 $69 = $4;
 $70 = HEAP32[$69>>2]|0;
 HEAP32[$68>>2] = $70;
 $71 = ((($41)) + 28|0);
 HEAP32[$71>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 8)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$20>>2]|0;
 $39 = $19;
 $40 = (($38) + ($39<<3)|0);
 $13 = $20;
 $14 = $40;
 $41 = $13;
 $12 = $41;
 $42 = $12;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($48|0) / 8)&-1;
 $__old_size$i = $49;
 $50 = $14;
 $10 = $41;
 $11 = $50;
 $51 = $10;
 while(1) {
  $52 = $11;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $9 = $51;
  $56 = $9;
  $57 = ((($56)) + 8|0);
  $8 = $57;
  $58 = $8;
  $7 = $58;
  $59 = $7;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -8|0);
  HEAP32[$60>>2] = $62;
  $0 = $62;
  $63 = $0;
  $4 = $59;
  $5 = $63;
  $64 = $4;
  $65 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $64;
  $2 = $65;
 }
 $66 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(561,($41|0),($66|0));
 $67 = __THREW__; __THREW__ = 0;
 $68 = $67&1;
 if ($68) {
  $69 = ___cxa_find_matching_catch()|0;
  $70 = tempRet0;
  $15 = $69;
  $16 = $70;
  $71 = $15;
  ___cxa_call_unexpected(($71|0));
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0;
 var $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 72|0;
 $__v = sp + 12|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 8)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = ((($45)) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 8)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 8)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  $92 = $5;
  $93 = $4;
  $94 = $91 ? $92 : $93;
  $95 = HEAP32[$94>>2]|0;
  $15 = $95;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 8)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC2EjjS3_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(562,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if (!($108)) {
  __THREW__ = 0;
  invoke_vii(563,($30|0),($__v|0));
  $109 = __THREW__; __THREW__ = 0;
  $110 = $109&1;
  if (!($110)) {
   __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev($__v);
   STACKTOP = sp;return;
  }
 }
 $111 = ___cxa_find_matching_catch()|0;
 $112 = tempRet0;
 $28 = $111;
 $29 = $112;
 __THREW__ = 0;
 invoke_vi(564,($__v|0));
 $113 = __THREW__; __THREW__ = 0;
 $114 = $113&1;
 if ($114) {
  $117 = ___cxa_find_matching_catch(0|0)|0;
  $118 = tempRet0;
  ___clang_call_terminate($117);
  // unreachable;
 } else {
  $115 = $28;
  $116 = $29;
  ___resumeException($115|0);
  // unreachable;
 }
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 8)&-1;
 $35 = (($22) + ($34<<3)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<3)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 8)&-1;
 $52 = (($43) + ($51<<3)|0);
 __ZNKSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 36|0;
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = ((($9)) + 8|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $__a = $12;
 while(1) {
  __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator,$8,1);
  $13 = $__a;
  $14 = ((($8)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $2 = $15;
  $16 = $2;
  $0 = $13;
  $1 = $16;
  $17 = $1;
  HEAPF64[$17>>3] = 0.0;
  $18 = ((($8)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 8|0);
  HEAP32[$18>>2] = $20;
  $21 = $7;
  $22 = (($21) + -1)|0;
  $7 = $22;
  __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $23 = $7;
  $24 = ($23>>>0)>(0);
  if (!($24)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 77|0;
 $10 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $3 = $24;
 $25 = $3;
 ;HEAP8[$2>>0]=HEAP8[$4>>0]|0;
 $1 = $25;
 $26 = $1;
 $0 = $26;
 HEAP32[$18>>2] = 536870911;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $11 = $18;
 $12 = $19;
 $28 = $11;
 $29 = $12;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $8 = $28;
 $9 = $29;
 $30 = $9;
 $31 = $8;
 $5 = $10;
 $6 = $30;
 $7 = $31;
 $32 = $6;
 $33 = HEAP32[$32>>2]|0;
 $34 = $7;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $9;
 $38 = $8;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 124|0;
 $8 = sp + 108|0;
 $22 = sp + 52|0;
 $29 = sp + 24|0;
 $34 = sp + 4|0;
 $35 = sp;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = ((($36)) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = ((($46)) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = ((($54)) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $64 = $63<<3;
  $14 = $64;
  $65 = $14;
  $66 = (__Znwj($65)|0);
  $69 = $66;
 } else {
  $20 = $22;
  $21 = -1;
  $67 = $20;
  HEAP32[$67>>2] = 0;
  $68 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $68;
  $23 = $35;
  $69 = 0;
 }
 HEAP32[$36>>2] = $69;
 $70 = HEAP32[$36>>2]|0;
 $71 = $32;
 $72 = (($70) + ($71<<3)|0);
 $73 = ((($36)) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = ((($36)) + 4|0);
 HEAP32[$74>>2] = $72;
 $75 = HEAP32[$36>>2]|0;
 $76 = $31;
 $77 = (($75) + ($76<<3)|0);
 $26 = $36;
 $78 = $26;
 $79 = ((($78)) + 12|0);
 $25 = $79;
 $80 = $25;
 $24 = $80;
 $81 = $24;
 HEAP32[$81>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = ((($9)) + 12|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $__a = $14;
 while(1) {
  $15 = $__a;
  $16 = ((($8)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $0 = $17;
  $18 = $0;
  $1 = $15;
  $2 = $18;
  $19 = $2;
  HEAPF64[$19>>3] = 0.0;
  $20 = ((($8)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 8|0);
  HEAP32[$20>>2] = $22;
  $23 = $7;
  $24 = (($23) + -1)|0;
  $7 = $24;
  $25 = $7;
  $26 = ($25>>>0)>(0);
  if (!($26)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIdNS_9allocatorIdEEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 8)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<3)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<3;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 8)&-1;
 __ZNKSt3__16vectorIdNS_9allocatorIdEEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 8|0;
 $20 = sp + 125|0;
 $26 = sp;
 $29 = sp + 124|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26>>0]=HEAP8[$29>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = ((($38)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = ((($43)) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($38)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -8|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17>>0]=HEAP8[$20>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = ((($57)) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = ((($65)) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 8)&-1;
 $11 = $62;
 $12 = $63;
 $13 = $74;
 $75 = $11;
 $76 = $12;
 $77 = $13;
 $8 = $75;
 $9 = $76;
 $10 = $77;
 $78 = $9;
 $7 = $78;
 $79 = $7;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 8)&-1;
 $39 = (($26) + ($38<<3)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 8)&-1;
 $51 = (($42) + ($50<<3)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 8)&-1;
 $67 = (($54) + ($66<<3)|0);
 __ZNKSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 8)&-1;
 $39 = (($26) + ($38<<3)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 8)&-1;
 $55 = (($42) + ($54<<3)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<3)|0);
 __ZNKSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 64|0;
 $7 = sp + 44|0;
 $12 = sp + 24|0;
 $16 = sp + 8|0;
 $17 = sp + 4|0;
 $18 = sp;
 $13 = $this;
 $19 = $13;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($19);
 $20 = 3120;
 HEAP32[$19>>2] = $20;
 $21 = ((($19)) + 32|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($19)) + 36|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($19)) + 40|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($19)) + 52|0);
 HEAP32[$24>>2] = 0;
 $25 = ((($19)) + 56|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($19)) + 60|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($19)) + 64|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($19)) + 68|0);
 $10 = $12;
 $11 = -1;
 $29 = $10;
 HEAP32[$29>>2] = 0;
 $30 = HEAP32[$12>>2]|0;
 HEAP32[$16>>2] = $30;
 $9 = $16;
 HEAP32[$28>>2] = 0;
 $31 = ((($19)) + 72|0);
 ;HEAP32[$31>>2]=0|0;HEAP32[$31+4>>2]=0|0;
 $32 = ((($19)) + 80|0);
 ;HEAP32[$32>>2]=0|0;HEAP32[$32+4>>2]=0|0;
 $33 = ((($19)) + 88|0);
 HEAP32[$33>>2] = 0;
 $34 = ((($19)) + 92|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($19)) + 96|0);
 HEAP8[$35>>0] = 0;
 $36 = ((($19)) + 97|0);
 HEAP8[$36>>0] = 0;
 $37 = ((($19)) + 98|0);
 HEAP8[$37>>0] = 0;
 $8 = $19;
 $38 = $8;
 $39 = ((($38)) + 4|0);
 __ZNSt3__16localeC2ERKS0_($7,$39);
 $40 = HEAP32[$7>>2]|0;
 HEAP32[$17>>2] = $40;
 $4 = $17;
 $41 = $4;
 __THREW__ = 0;
 $42 = (invoke_iii(565,($41|0),(7748|0))|0);
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 if ($44) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $5 = $45;
  $6 = $46;
  $47 = $5;
  ___cxa_call_unexpected(($47|0));
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(496,($17|0));
 $48 = __THREW__; __THREW__ = 0;
 $49 = $48&1;
 L4: do {
  if ($49) {
   label = 8;
  } else {
   do {
    if ($42) {
     $3 = $19;
     $50 = $3;
     $51 = ((($50)) + 4|0);
     __ZNSt3__16localeC2ERKS0_($2,$51);
     $52 = HEAP32[$2>>2]|0;
     HEAP32[$18>>2] = $52;
     $1 = $18;
     $53 = $1;
     __THREW__ = 0;
     $54 = (invoke_iii(495,($53|0),(7748|0))|0);
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     if ($56) {
      $71 = ___cxa_find_matching_catch()|0;
      $72 = tempRet0;
      $14 = $71;
      $15 = $72;
      __THREW__ = 0;
      invoke_vi(496,($18|0));
      $73 = __THREW__; __THREW__ = 0;
      $74 = $73&1;
      if (!($74)) {
       break L4;
      }
      $84 = ___cxa_find_matching_catch(0|0)|0;
      $85 = tempRet0;
      ___clang_call_terminate($84);
      // unreachable;
     } else {
      $57 = ((($19)) + 68|0);
      HEAP32[$57>>2] = $54;
      __THREW__ = 0;
      invoke_vi(496,($18|0));
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 8;
       break L4;
      }
      $60 = ((($19)) + 68|0);
      $61 = HEAP32[$60>>2]|0;
      $0 = $61;
      $62 = $0;
      $63 = HEAP32[$62>>2]|0;
      $64 = ((($63)) + 28|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (FUNCTION_TABLE_ii[$65 & 1023]($62)|0);
      $67 = ((($19)) + 98|0);
      $68 = $66&1;
      HEAP8[$67>>0] = $68;
      break;
     }
    }
   } while(0);
   $75 = HEAP32[$19>>2]|0;
   $76 = ((($75)) + 12|0);
   $77 = HEAP32[$76>>2]|0;
   __THREW__ = 0;
   (invoke_iiii($77|0,($19|0),(0|0),4096)|0);
   $78 = __THREW__; __THREW__ = 0;
   $79 = $78&1;
   if ($79) {
    label = 8;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $69 = ___cxa_find_matching_catch()|0;
  $70 = tempRet0;
  $14 = $69;
  $15 = $70;
 }
 __THREW__ = 0;
 invoke_vi(194,($19|0));
 $80 = __THREW__; __THREW__ = 0;
 $81 = $80&1;
 if ($81) {
  $84 = ___cxa_find_matching_catch(0|0)|0;
  $85 = tempRet0;
  ___clang_call_terminate($84);
  // unreachable;
 } else {
  $82 = $14;
  $83 = $15;
  ___resumeException($82|0);
  // unreachable;
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($this,$__s,$__mode) {
 $this = $this|0;
 $__s = $__s|0;
 $__mode = $__mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__mdstr = 0, $__rt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__s;
 $2 = $__mode;
 $3 = $0;
 $__rt = 0;
 $4 = ((($3)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $__rt = $3;
   $7 = $2;
   $8 = $7 & -3;
   do {
    switch ($8|0) {
    case 48: case 16:  {
     $__mdstr = 12545;
     break;
    }
    case 1: case 17:  {
     $__mdstr = 12547;
     break;
    }
    case 8:  {
     $__mdstr = 12549;
     break;
    }
    case 24:  {
     $__mdstr = 12551;
     break;
    }
    case 56:  {
     $__mdstr = 12554;
     break;
    }
    case 9: case 25:  {
     $__mdstr = 12557;
     break;
    }
    case 52: case 20:  {
     $__mdstr = 12560;
     break;
    }
    case 5: case 21:  {
     $__mdstr = 12563;
     break;
    }
    case 12:  {
     $__mdstr = 12566;
     break;
    }
    case 28:  {
     $__mdstr = 12569;
     break;
    }
    case 60:  {
     $__mdstr = 12573;
     break;
    }
    case 13: case 29:  {
     $__mdstr = 12577;
     break;
    }
    default: {
     $__rt = 0;
    }
    }
   } while(0);
   $9 = $__rt;
   $10 = ($9|0)!=(0|0);
   if ($10) {
    $11 = $1;
    $12 = $__mdstr;
    $13 = (_fopen(($11|0),($12|0))|0);
    $14 = ((($3)) + 64|0);
    HEAP32[$14>>2] = $13;
    $15 = ((($3)) + 64|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)!=(0|0);
    if (!($17)) {
     $__rt = 0;
     break;
    }
    $18 = $2;
    $19 = ((($3)) + 88|0);
    HEAP32[$19>>2] = $18;
    $20 = $2;
    $21 = $20 & 2;
    $22 = ($21|0)!=(0);
    if ($22) {
     $23 = ((($3)) + 64|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (_fseek(($24|0),0,2)|0);
     $26 = ($25|0)!=(0);
     if ($26) {
      $27 = ((($3)) + 64|0);
      $28 = HEAP32[$27>>2]|0;
      (_fclose(($28|0))|0);
      $29 = ((($3)) + 64|0);
      HEAP32[$29>>2] = 0;
      $__rt = 0;
     }
    }
   }
  }
 } while(0);
 $30 = $__rt;
 STACKTOP = sp;return ($30|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 3120;
 HEAP32[$3>>2] = $4;
 __THREW__ = 0;
 (invoke_ii(515,($3|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch(0|0)|0;
  $8 = tempRet0;
  $1 = $7;
  $2 = $8;
  $9 = $1;
  (___cxa_begin_catch(($9|0))|0);
  __THREW__ = 0;
  invoke_v(543);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $18 = ___cxa_find_matching_catch()|0;
   $19 = tempRet0;
   $1 = $18;
   $2 = $19;
   __THREW__ = 0;
   invoke_vi(194,($3|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    $30 = ___cxa_find_matching_catch(0|0)|0;
    $31 = tempRet0;
    ___clang_call_terminate($30);
    // unreachable;
   } else {
    $28 = $1;
    $29 = $2;
    ___resumeException($28|0);
    // unreachable;
   }
  }
 }
 $12 = ((($3)) + 96|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&1;
 if ($14) {
  $15 = ((($3)) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   __ZdaPv($16);
  }
 }
 $22 = ((($3)) + 97|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&1;
 if (!($24)) {
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
  STACKTOP = sp;return;
 }
 $25 = ((($3)) + 56|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if ($27) {
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
  STACKTOP = sp;return;
 }
 __ZdaPv($26);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__17getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_($__is,$__str,$__dlm) {
 $__is = $__is|0;
 $__str = $__str|0;
 $__dlm = $__dlm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__ch = 0, $__err = 0, $__extr = 0, $__i = 0, $__m$i = 0, $__sen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $8 = sp + 229|0;
 $48 = sp + 228|0;
 $49 = sp + 227|0;
 $__sen = sp + 225|0;
 $51 = $__is;
 $52 = $__str;
 $53 = $__dlm;
 $56 = $51;
 __THREW__ = 0;
 invoke_viii(566,($__sen|0),($56|0),1);
 $57 = __THREW__; __THREW__ = 0;
 $58 = $57&1;
 L1: do {
  if (!($58)) {
   $50 = $__sen;
   $59 = $50;
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&1;
   if (!($61)) {
    $135 = $51;
    STACKTOP = sp;return ($135|0);
   }
   $62 = $52;
   $47 = $62;
   $63 = $47;
   $46 = $63;
   $41 = $63;
   $64 = $41;
   $40 = $64;
   $65 = $40;
   $39 = $65;
   $66 = $39;
   $67 = HEAP8[$66>>0]|0;
   $68 = $67&255;
   $69 = $68 & 1;
   $70 = ($69|0)!=(0);
   if ($70) {
    $29 = $63;
    $71 = $29;
    $28 = $71;
    $72 = $28;
    $27 = $72;
    $73 = $27;
    $74 = ((($73)) + 8|0);
    $75 = HEAP32[$74>>2]|0;
    HEAP8[$48>>0] = 0;
    __ZNSt3__111char_traitsIcE6assignERcRKc($75,$48);
    $32 = $63;
    $33 = 0;
    $76 = $32;
    $77 = $33;
    $31 = $76;
    $78 = $31;
    $30 = $78;
    $79 = $30;
    $80 = ((($79)) + 4|0);
    HEAP32[$80>>2] = $77;
   } else {
    $38 = $63;
    $81 = $38;
    $37 = $81;
    $82 = $37;
    $36 = $82;
    $83 = $36;
    $84 = ((($83)) + 1|0);
    $35 = $84;
    $85 = $35;
    $34 = $85;
    $86 = $34;
    HEAP8[$49>>0] = 0;
    __ZNSt3__111char_traitsIcE6assignERcRKc($86,$49);
    $44 = $63;
    $45 = 0;
    $87 = $44;
    $88 = $45;
    $89 = $88 << 1;
    $90 = $89&255;
    $43 = $87;
    $91 = $43;
    $42 = $91;
    $92 = $42;
    HEAP8[$92>>0] = $90;
   }
   $__err = 0;
   $__extr = 0;
   while(1) {
    $93 = $51;
    $94 = HEAP32[$93>>2]|0;
    $95 = ((($94)) + -12|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($93) + ($96)|0);
    $26 = $97;
    $98 = $26;
    $25 = $98;
    $99 = $25;
    $100 = ((($99)) + 24|0);
    $101 = HEAP32[$100>>2]|0;
    $24 = $101;
    $102 = $24;
    $103 = ((($102)) + 12|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = ((($102)) + 16|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ($104|0)==($106|0);
    if ($107) {
     $108 = HEAP32[$102>>2]|0;
     $109 = ((($108)) + 40|0);
     $110 = HEAP32[$109>>2]|0;
     __THREW__ = 0;
     $111 = (invoke_ii($110|0,($102|0))|0);
     $112 = __THREW__; __THREW__ = 0;
     $113 = $112&1;
     if ($113) {
      break L1;
     }
     $23 = $111;
    } else {
     $114 = ((($102)) + 12|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = ((($115)) + 1|0);
     HEAP32[$114>>2] = $116;
     $117 = HEAP8[$115>>0]|0;
     $118 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($117)|0);
     $23 = $118;
    }
    $119 = $23;
    $__i = $119;
    $120 = $__i;
    $121 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
    $122 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($120,$121)|0);
    if ($122) {
     label = 12;
     break;
    }
    $136 = $__extr;
    $137 = (($136) + 1)|0;
    $__extr = $137;
    $138 = $__i;
    $139 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($138)|0);
    $__ch = $139;
    $140 = $__ch;
    $141 = $53;
    $142 = (__ZNSt3__111char_traitsIcE2eqEcc($140,$141)|0);
    if ($142) {
     break;
    }
    $143 = $52;
    $144 = $__ch;
    __THREW__ = 0;
    invoke_vii(567,($143|0),($144|0));
    $145 = __THREW__; __THREW__ = 0;
    $146 = $145&1;
    if ($146) {
     break L1;
    }
    $147 = $52;
    $22 = $147;
    $148 = $22;
    $21 = $148;
    $149 = $21;
    $20 = $149;
    $150 = $20;
    $19 = $150;
    $151 = $19;
    $152 = HEAP8[$151>>0]|0;
    $153 = $152&255;
    $154 = $153 & 1;
    $155 = ($154|0)!=(0);
    if ($155) {
     $15 = $148;
     $156 = $15;
     $14 = $156;
     $157 = $14;
     $13 = $157;
     $158 = $13;
     $159 = ((($158)) + 4|0);
     $160 = HEAP32[$159>>2]|0;
     $177 = $160;
    } else {
     $18 = $148;
     $161 = $18;
     $17 = $161;
     $162 = $17;
     $16 = $162;
     $163 = $16;
     $164 = HEAP8[$163>>0]|0;
     $165 = $164&255;
     $166 = $165 >> 1;
     $177 = $166;
    }
    $167 = $52;
    $12 = $167;
    $168 = $12;
    $11 = $168;
    $169 = $11;
    $10 = $169;
    $170 = $10;
    $9 = $170;
    $171 = $9;
    $7 = $171;
    $172 = $7;
    ;HEAP8[$6>>0]=HEAP8[$8>>0]|0;
    $5 = $172;
    $173 = $5;
    $4 = $173;
    $__m$i = -1;
    $174 = $__m$i;
    $175 = (($174) - 16)|0;
    $176 = ($177|0)==($175|0);
    if ($176) {
     label = 22;
     break;
    }
   }
   if ((label|0) == 12) {
    $123 = $__err;
    $124 = $123 | 2;
    $__err = $124;
   }
   else if ((label|0) == 22) {
    $178 = $__err;
    $179 = $178 | 4;
    $__err = $179;
   }
   $180 = $__extr;
   $181 = ($180|0)==(0);
   if ($181) {
    $182 = $__err;
    $183 = $182 | 4;
    $__err = $183;
   }
   $184 = $51;
   $185 = HEAP32[$184>>2]|0;
   $186 = ((($185)) + -12|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = (($184) + ($187)|0);
   $189 = $__err;
   $2 = $188;
   $3 = $189;
   $190 = $2;
   $191 = $3;
   $0 = $190;
   $1 = $191;
   $192 = $0;
   $193 = ((($192)) + 16|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = $1;
   $196 = $194 | $195;
   __THREW__ = 0;
   invoke_vii(493,($192|0),($196|0));
   $197 = __THREW__; __THREW__ = 0;
   $198 = $197&1;
   if (!($198)) {
    $135 = $51;
    STACKTOP = sp;return ($135|0);
   }
  }
 } while(0);
 $125 = ___cxa_find_matching_catch(0|0)|0;
 $126 = tempRet0;
 $54 = $125;
 $55 = $126;
 $127 = $54;
 (___cxa_begin_catch(($127|0))|0);
 $128 = $51;
 $129 = HEAP32[$128>>2]|0;
 $130 = ((($129)) + -12|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = (($128) + ($131)|0);
 __THREW__ = 0;
 invoke_vi(542,($132|0));
 $133 = __THREW__; __THREW__ = 0;
 $134 = $133&1;
 if (!($134)) {
  ___cxa_end_catch();
  $135 = $51;
  STACKTOP = sp;return ($135|0);
 }
 $199 = ___cxa_find_matching_catch()|0;
 $200 = tempRet0;
 $54 = $199;
 $55 = $200;
 __THREW__ = 0;
 invoke_v(543);
 $201 = __THREW__; __THREW__ = 0;
 $202 = $201&1;
 if ($202) {
  $205 = ___cxa_find_matching_catch(0|0)|0;
  $206 = tempRet0;
  ___clang_call_terminate($205);
  // unreachable;
 } else {
  $203 = $54;
  $204 = $55;
  ___resumeException($203|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $132 = $this;
 $133 = $__s;
 $134 = $132;
 $135 = ((($134)) + 32|0);
 $136 = $133;
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($135,$136)|0);
 $137 = ((($134)) + 44|0);
 HEAP32[$137>>2] = 0;
 $138 = ((($134)) + 48|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = $139 & 8;
 $141 = ($140|0)!=(0);
 if ($141) {
  $142 = ((($134)) + 32|0);
  $131 = $142;
  $143 = $131;
  $130 = $143;
  $144 = $130;
  $129 = $144;
  $145 = $129;
  $128 = $145;
  $146 = $128;
  $127 = $146;
  $147 = $127;
  $148 = HEAP8[$147>>0]|0;
  $149 = $148&255;
  $150 = $149 & 1;
  $151 = ($150|0)!=(0);
  if ($151) {
   $121 = $144;
   $152 = $121;
   $120 = $152;
   $153 = $120;
   $119 = $153;
   $154 = $119;
   $155 = ((($154)) + 8|0);
   $156 = HEAP32[$155>>2]|0;
   $163 = $156;
  } else {
   $126 = $144;
   $157 = $126;
   $125 = $157;
   $158 = $125;
   $124 = $158;
   $159 = $124;
   $160 = ((($159)) + 1|0);
   $123 = $160;
   $161 = $123;
   $122 = $161;
   $162 = $122;
   $163 = $162;
  }
  $118 = $163;
  $164 = $118;
  $165 = ((($134)) + 32|0);
  $72 = $165;
  $166 = $72;
  $71 = $166;
  $167 = $71;
  $70 = $167;
  $168 = $70;
  $69 = $168;
  $169 = $69;
  $170 = HEAP8[$169>>0]|0;
  $171 = $170&255;
  $172 = $171 & 1;
  $173 = ($172|0)!=(0);
  if ($173) {
   $65 = $166;
   $174 = $65;
   $64 = $174;
   $175 = $64;
   $63 = $175;
   $176 = $63;
   $177 = ((($176)) + 4|0);
   $178 = HEAP32[$177>>2]|0;
   $186 = $178;
  } else {
   $68 = $166;
   $179 = $68;
   $67 = $179;
   $180 = $67;
   $66 = $180;
   $181 = $66;
   $182 = HEAP8[$181>>0]|0;
   $183 = $182&255;
   $184 = $183 >> 1;
   $186 = $184;
  }
  $185 = (($164) + ($186)|0);
  $187 = ((($134)) + 44|0);
  HEAP32[$187>>2] = $185;
  $188 = ((($134)) + 32|0);
  $13 = $188;
  $189 = $13;
  $12 = $189;
  $190 = $12;
  $11 = $190;
  $191 = $11;
  $10 = $191;
  $192 = $10;
  $9 = $192;
  $193 = $9;
  $194 = HEAP8[$193>>0]|0;
  $195 = $194&255;
  $196 = $195 & 1;
  $197 = ($196|0)!=(0);
  if ($197) {
   $3 = $190;
   $198 = $3;
   $2 = $198;
   $199 = $2;
   $1 = $199;
   $200 = $1;
   $201 = ((($200)) + 8|0);
   $202 = HEAP32[$201>>2]|0;
   $209 = $202;
  } else {
   $8 = $190;
   $203 = $8;
   $7 = $203;
   $204 = $7;
   $6 = $204;
   $205 = $6;
   $206 = ((($205)) + 1|0);
   $5 = $206;
   $207 = $5;
   $4 = $207;
   $208 = $4;
   $209 = $208;
  }
  $0 = $209;
  $210 = $0;
  $211 = ((($134)) + 32|0);
  $27 = $211;
  $212 = $27;
  $26 = $212;
  $213 = $26;
  $25 = $213;
  $214 = $25;
  $24 = $214;
  $215 = $24;
  $23 = $215;
  $216 = $23;
  $217 = HEAP8[$216>>0]|0;
  $218 = $217&255;
  $219 = $218 & 1;
  $220 = ($219|0)!=(0);
  if ($220) {
   $17 = $213;
   $221 = $17;
   $16 = $221;
   $222 = $16;
   $15 = $222;
   $223 = $15;
   $224 = ((($223)) + 8|0);
   $225 = HEAP32[$224>>2]|0;
   $232 = $225;
  } else {
   $22 = $213;
   $226 = $22;
   $21 = $226;
   $227 = $21;
   $20 = $227;
   $228 = $20;
   $229 = ((($228)) + 1|0);
   $19 = $229;
   $230 = $19;
   $18 = $230;
   $231 = $18;
   $232 = $231;
  }
  $14 = $232;
  $233 = $14;
  $234 = ((($134)) + 44|0);
  $235 = HEAP32[$234>>2]|0;
  $28 = $134;
  $29 = $210;
  $30 = $233;
  $31 = $235;
  $236 = $28;
  $237 = $29;
  $238 = ((($236)) + 8|0);
  HEAP32[$238>>2] = $237;
  $239 = $30;
  $240 = ((($236)) + 12|0);
  HEAP32[$240>>2] = $239;
  $241 = $31;
  $242 = ((($236)) + 16|0);
  HEAP32[$242>>2] = $241;
 }
 $243 = ((($134)) + 48|0);
 $244 = HEAP32[$243>>2]|0;
 $245 = $244 & 16;
 $246 = ($245|0)!=(0);
 if (!($246)) {
  STACKTOP = sp;return;
 }
 $247 = ((($134)) + 32|0);
 $41 = $247;
 $248 = $41;
 $40 = $248;
 $249 = $40;
 $39 = $249;
 $250 = $39;
 $38 = $250;
 $251 = $38;
 $252 = HEAP8[$251>>0]|0;
 $253 = $252&255;
 $254 = $253 & 1;
 $255 = ($254|0)!=(0);
 if ($255) {
  $34 = $248;
  $256 = $34;
  $33 = $256;
  $257 = $33;
  $32 = $257;
  $258 = $32;
  $259 = ((($258)) + 4|0);
  $260 = HEAP32[$259>>2]|0;
  $267 = $260;
 } else {
  $37 = $248;
  $261 = $37;
  $36 = $261;
  $262 = $36;
  $35 = $262;
  $263 = $35;
  $264 = HEAP8[$263>>0]|0;
  $265 = $264&255;
  $266 = $265 >> 1;
  $267 = $266;
 }
 $__sz = $267;
 $268 = ((($134)) + 32|0);
 $55 = $268;
 $269 = $55;
 $54 = $269;
 $270 = $54;
 $53 = $270;
 $271 = $53;
 $52 = $271;
 $272 = $52;
 $51 = $272;
 $273 = $51;
 $274 = HEAP8[$273>>0]|0;
 $275 = $274&255;
 $276 = $275 & 1;
 $277 = ($276|0)!=(0);
 if ($277) {
  $45 = $270;
  $278 = $45;
  $44 = $278;
  $279 = $44;
  $43 = $279;
  $280 = $43;
  $281 = ((($280)) + 8|0);
  $282 = HEAP32[$281>>2]|0;
  $289 = $282;
 } else {
  $50 = $270;
  $283 = $50;
  $49 = $283;
  $284 = $49;
  $48 = $284;
  $285 = $48;
  $286 = ((($285)) + 1|0);
  $47 = $286;
  $287 = $47;
  $46 = $287;
  $288 = $46;
  $289 = $288;
 }
 $42 = $289;
 $290 = $42;
 $291 = $__sz;
 $292 = (($290) + ($291)|0);
 $293 = ((($134)) + 44|0);
 HEAP32[$293>>2] = $292;
 $294 = ((($134)) + 32|0);
 $295 = ((($134)) + 32|0);
 $62 = $295;
 $296 = $62;
 $61 = $296;
 $297 = $61;
 $60 = $297;
 $298 = $60;
 $59 = $298;
 $299 = $59;
 $300 = HEAP8[$299>>0]|0;
 $301 = $300&255;
 $302 = $301 & 1;
 $303 = ($302|0)!=(0);
 if ($303) {
  $58 = $296;
  $304 = $58;
  $57 = $304;
  $305 = $57;
  $56 = $305;
  $306 = $56;
  $307 = HEAP32[$306>>2]|0;
  $308 = $307 & -2;
  $310 = $308;
 } else {
  $310 = 11;
 }
 $309 = (($310) - 1)|0;
 $73 = $294;
 $74 = $309;
 $311 = $73;
 $312 = $74;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($311,$312,0);
 $313 = ((($134)) + 32|0);
 $88 = $313;
 $314 = $88;
 $87 = $314;
 $315 = $87;
 $86 = $315;
 $316 = $86;
 $85 = $316;
 $317 = $85;
 $84 = $317;
 $318 = $84;
 $319 = HEAP8[$318>>0]|0;
 $320 = $319&255;
 $321 = $320 & 1;
 $322 = ($321|0)!=(0);
 if ($322) {
  $78 = $315;
  $323 = $78;
  $77 = $323;
  $324 = $77;
  $76 = $324;
  $325 = $76;
  $326 = ((($325)) + 8|0);
  $327 = HEAP32[$326>>2]|0;
  $334 = $327;
 } else {
  $83 = $315;
  $328 = $83;
  $82 = $328;
  $329 = $82;
  $81 = $329;
  $330 = $81;
  $331 = ((($330)) + 1|0);
  $80 = $331;
  $332 = $80;
  $79 = $332;
  $333 = $79;
  $334 = $333;
 }
 $75 = $334;
 $335 = $75;
 $336 = ((($134)) + 32|0);
 $102 = $336;
 $337 = $102;
 $101 = $337;
 $338 = $101;
 $100 = $338;
 $339 = $100;
 $99 = $339;
 $340 = $99;
 $98 = $340;
 $341 = $98;
 $342 = HEAP8[$341>>0]|0;
 $343 = $342&255;
 $344 = $343 & 1;
 $345 = ($344|0)!=(0);
 if ($345) {
  $92 = $338;
  $346 = $92;
  $91 = $346;
  $347 = $91;
  $90 = $347;
  $348 = $90;
  $349 = ((($348)) + 8|0);
  $350 = HEAP32[$349>>2]|0;
  $357 = $350;
 } else {
  $97 = $338;
  $351 = $97;
  $96 = $351;
  $352 = $96;
  $95 = $352;
  $353 = $95;
  $354 = ((($353)) + 1|0);
  $94 = $354;
  $355 = $94;
  $93 = $355;
  $356 = $93;
  $357 = $356;
 }
 $89 = $357;
 $358 = $89;
 $359 = ((($134)) + 32|0);
 $112 = $359;
 $360 = $112;
 $111 = $360;
 $361 = $111;
 $110 = $361;
 $362 = $110;
 $109 = $362;
 $363 = $109;
 $364 = HEAP8[$363>>0]|0;
 $365 = $364&255;
 $366 = $365 & 1;
 $367 = ($366|0)!=(0);
 if ($367) {
  $105 = $360;
  $368 = $105;
  $104 = $368;
  $369 = $104;
  $103 = $369;
  $370 = $103;
  $371 = ((($370)) + 4|0);
  $372 = HEAP32[$371>>2]|0;
  $380 = $372;
 } else {
  $108 = $360;
  $373 = $108;
  $107 = $373;
  $374 = $107;
  $106 = $374;
  $375 = $106;
  $376 = HEAP8[$375>>0]|0;
  $377 = $376&255;
  $378 = $377 >> 1;
  $380 = $378;
 }
 $379 = (($358) + ($380)|0);
 $113 = $134;
 $114 = $335;
 $115 = $379;
 $381 = $113;
 $382 = $114;
 $383 = ((($381)) + 24|0);
 HEAP32[$383>>2] = $382;
 $384 = ((($381)) + 20|0);
 HEAP32[$384>>2] = $382;
 $385 = $115;
 $386 = ((($381)) + 28|0);
 HEAP32[$386>>2] = $385;
 $387 = ((($134)) + 48|0);
 $388 = HEAP32[$387>>2]|0;
 $389 = $388 & 3;
 $390 = ($389|0)!=(0);
 if (!($390)) {
  STACKTOP = sp;return;
 }
 $391 = $__sz;
 $116 = $134;
 $117 = $391;
 $392 = $116;
 $393 = $117;
 $394 = ((($392)) + 24|0);
 $395 = HEAP32[$394>>2]|0;
 $396 = (($395) + ($393)|0);
 HEAP32[$394>>2] = $396;
 STACKTOP = sp;return;
}
function __ZNSt3__1rsIcNS_11char_traitsIcEEEERNS_13basic_istreamIT_T0_EES7_RS4_($__is,$__c) {
 $__is = $__is|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $__i = 0, $__sen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sen = sp + 56|0;
 $9 = $__is;
 $10 = $__c;
 $13 = $9;
 __THREW__ = 0;
 invoke_viii(566,($__sen|0),($13|0),0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 do {
  if (!($15)) {
   $8 = $__sen;
   $16 = $8;
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&1;
   if (!($18)) {
    $73 = $9;
    STACKTOP = sp;return ($73|0);
   }
   $19 = $9;
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($20)) + -12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($19) + ($22)|0);
   $7 = $23;
   $24 = $7;
   $6 = $24;
   $25 = $6;
   $26 = ((($25)) + 24|0);
   $27 = HEAP32[$26>>2]|0;
   $5 = $27;
   $28 = $5;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 40|0);
    $36 = HEAP32[$35>>2]|0;
    __THREW__ = 0;
    $37 = (invoke_ii($36|0,($28|0))|0);
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    if ($39) {
     break;
    }
    $4 = $37;
   } else {
    $40 = ((($28)) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ((($41)) + 1|0);
    HEAP32[$40>>2] = $42;
    $43 = HEAP8[$41>>0]|0;
    $44 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($43)|0);
    $4 = $44;
   }
   $45 = $4;
   $__i = $45;
   $46 = $__i;
   $47 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $48 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($46,$47)|0);
   if ($48) {
    $49 = $9;
    $50 = HEAP32[$49>>2]|0;
    $51 = ((($50)) + -12|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (($49) + ($52)|0);
    $2 = $53;
    $3 = 6;
    $54 = $2;
    $55 = $3;
    $0 = $54;
    $1 = $55;
    $56 = $0;
    $57 = ((($56)) + 16|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = $1;
    $60 = $58 | $59;
    __THREW__ = 0;
    invoke_vii(493,($56|0),($60|0));
    $61 = __THREW__; __THREW__ = 0;
    $62 = $61&1;
    if ($62) {
     break;
    }
    $73 = $9;
    STACKTOP = sp;return ($73|0);
   } else {
    $74 = $__i;
    $75 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($74)|0);
    $76 = $10;
    HEAP8[$76>>0] = $75;
    $73 = $9;
    STACKTOP = sp;return ($73|0);
   }
  }
 } while(0);
 $63 = ___cxa_find_matching_catch(0|0)|0;
 $64 = tempRet0;
 $11 = $63;
 $12 = $64;
 $65 = $11;
 (___cxa_begin_catch(($65|0))|0);
 $66 = $9;
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($67)) + -12|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($66) + ($69)|0);
 __THREW__ = 0;
 invoke_vi(542,($70|0));
 $71 = __THREW__; __THREW__ = 0;
 $72 = $71&1;
 if (!($72)) {
  ___cxa_end_catch();
  $73 = $9;
  STACKTOP = sp;return ($73|0);
 }
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $11 = $77;
 $12 = $78;
 __THREW__ = 0;
 invoke_v(543);
 $79 = __THREW__; __THREW__ = 0;
 $80 = $79&1;
 if ($80) {
  $83 = ___cxa_find_matching_catch(0|0)|0;
  $84 = tempRet0;
  ___clang_call_terminate($83);
  // unreachable;
 } else {
  $81 = $11;
  $82 = $12;
  ___resumeException($81|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh9PolyMeshTINS_13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS3_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEEE10add_vertexERKS6_($this,$_p) {
 $this = $this|0;
 $_p = $_p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $1 = $this;
 $2 = $_p;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN8OpenMesh9PolyMeshTINS_13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS3_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEEE10new_vertexERKS6_($3,$4)|0);
 HEAP32[$0>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__16vectorIN8OpenMesh12VertexHandleENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh12VertexHandleENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh12VertexHandleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 72|0;
 $23 = sp + 60|0;
 $__v = sp + 12|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = ((($33)) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 4)&-1;
 $45 = (($44) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $45;
 $46 = $21;
 $47 = (__ZNKSt3__16vectorIN8OpenMesh12VertexHandleENS_9allocatorIS2_EEE8max_sizeEv($46)|0);
 $__ms$i = $47;
 $48 = HEAP32[$22>>2]|0;
 $49 = $__ms$i;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($46);
 }
 $19 = $46;
 $51 = $19;
 $18 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = ((($53)) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$52>>2]|0;
 $59 = $57;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 4)&-1;
 $__cap$i = $62;
 $63 = $__cap$i;
 $64 = $__ms$i;
 $65 = (($64>>>0) / 2)&-1;
 $66 = ($63>>>0)>=($65>>>0);
 if ($66) {
  $67 = $__ms$i;
  $20 = $67;
 } else {
  $68 = $__cap$i;
  $69 = $68<<1;
  HEAP32[$23>>2] = $69;
  $12 = $23;
  $13 = $22;
  $70 = $12;
  $71 = $13;
  ;HEAP8[$11>>0]=HEAP8[$14>>0]|0;
  $9 = $70;
  $10 = $71;
  $72 = $9;
  $73 = $10;
  $6 = $11;
  $7 = $72;
  $8 = $73;
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75>>>0)<($77>>>0);
  $79 = $10;
  $80 = $9;
  $81 = $78 ? $79 : $80;
  $82 = HEAP32[$81>>2]|0;
  $20 = $82;
 }
 $83 = $20;
 $5 = $32;
 $84 = $5;
 $85 = ((($84)) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$84>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 4)&-1;
 $92 = $__a;
 __ZNSt3__114__split_bufferIN8OpenMesh12VertexHandleERNS_9allocatorIS2_EEEC2EjjS5_($__v,$83,$91,$92);
 $93 = $__a;
 $94 = ((($__v)) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $4 = $95;
 $96 = $4;
 $97 = $29;
 $3 = $97;
 $98 = $3;
 $0 = $93;
 $1 = $96;
 $2 = $98;
 $99 = $1;
 $100 = $2;
 ;HEAP32[$99>>2]=HEAP32[$100>>2]|0;
 $101 = ((($__v)) + 8|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ((($102)) + 4|0);
 HEAP32[$101>>2] = $103;
 __THREW__ = 0;
 invoke_vii(568,($32|0),($__v|0));
 $104 = __THREW__; __THREW__ = 0;
 $105 = $104&1;
 if (!($105)) {
  __ZNSt3__114__split_bufferIN8OpenMesh12VertexHandleERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $106 = ___cxa_find_matching_catch()|0;
 $107 = tempRet0;
 $30 = $106;
 $31 = $107;
 __THREW__ = 0;
 invoke_vi(569,($__v|0));
 $108 = __THREW__; __THREW__ = 0;
 $109 = $108&1;
 if ($109) {
  $112 = ___cxa_find_matching_catch(0|0)|0;
  $113 = tempRet0;
  ___clang_call_terminate($112);
  // unreachable;
 } else {
  $110 = $30;
  $111 = $31;
  ___resumeException($110|0);
  // unreachable;
 }
}
function __ZNSt3__16vectorIN8OpenMesh12VertexHandleENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN8OpenMesh12VertexHandleENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vii(570,($3|0),(2992|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = ((($3)) + 60|0);
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($6);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 $9 = ((($3)) + 60|0);
 __THREW__ = 0;
 invoke_vi(210,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__rt = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $32 = sp + 60|0;
 $33 = sp + 56|0;
 $36 = sp + 44|0;
 $37 = sp + 40|0;
 $40 = sp + 28|0;
 $41 = sp + 24|0;
 $__h = sp + 8|0;
 $42 = $this;
 $45 = $42;
 $__rt = 0;
 $46 = ((($45)) + 64|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0|0);
 if (!($48)) {
  $128 = $__rt;
  STACKTOP = sp;return ($128|0);
 }
 $__rt = $45;
 $49 = ((($45)) + 64|0);
 $50 = HEAP32[$49>>2]|0;
 $39 = $__h;
 HEAP32[$40>>2] = $50;
 HEAP32[$41>>2] = 571;
 $51 = $39;
 $38 = $40;
 $52 = $38;
 $53 = HEAP32[$52>>2]|0;
 $27 = $41;
 $54 = $27;
 $55 = HEAP32[$54>>2]|0;
 $35 = $51;
 HEAP32[$36>>2] = $53;
 HEAP32[$37>>2] = $55;
 $56 = $35;
 $34 = $36;
 $57 = $34;
 $58 = HEAP32[$57>>2]|0;
 $28 = $37;
 $59 = $28;
 $60 = HEAP32[$59>>2]|0;
 $31 = $56;
 HEAP32[$32>>2] = $58;
 HEAP32[$33>>2] = $60;
 $61 = $31;
 $30 = $32;
 $62 = $30;
 $63 = HEAP32[$62>>2]|0;
 HEAP32[$61>>2] = $63;
 $64 = ((($61)) + 4|0);
 $29 = $33;
 $65 = $29;
 $66 = HEAP32[$65>>2]|0;
 HEAP32[$64>>2] = $66;
 $67 = HEAP32[$45>>2]|0;
 $68 = ((($67)) + 24|0);
 $69 = HEAP32[$68>>2]|0;
 __THREW__ = 0;
 $70 = (invoke_ii($69|0,($45|0))|0);
 $71 = __THREW__; __THREW__ = 0;
 $72 = $71&1;
 if (!($72)) {
  $73 = ($70|0)!=(0);
  if ($73) {
   $__rt = 0;
  }
  $15 = $__h;
  $96 = $15;
  $14 = $96;
  $97 = $14;
  $13 = $97;
  $98 = $13;
  $99 = HEAP32[$98>>2]|0;
  $__t$i = $99;
  $12 = $96;
  $100 = $12;
  $11 = $100;
  $101 = $11;
  HEAP32[$101>>2] = 0;
  $102 = $__t$i;
  __THREW__ = 0;
  $103 = (invoke_ii(571,($102|0))|0);
  $104 = __THREW__; __THREW__ = 0;
  $105 = $104&1;
  if (!($105)) {
   $106 = ($103|0)==(0);
   if ($106) {
    $107 = ((($45)) + 64|0);
    HEAP32[$107>>2] = 0;
   } else {
    $__rt = 0;
   }
   $10 = $__h;
   $108 = $10;
   $6 = $108;
   $7 = 0;
   $109 = $6;
   $5 = $109;
   $110 = $5;
   $4 = $110;
   $111 = $4;
   $112 = HEAP32[$111>>2]|0;
   $__tmp$i$i1 = $112;
   $113 = $7;
   $3 = $109;
   $114 = $3;
   $2 = $114;
   $115 = $2;
   HEAP32[$115>>2] = $113;
   $116 = $__tmp$i$i1;
   $117 = ($116|0)!=(0|0);
   if (!($117)) {
    $128 = $__rt;
    STACKTOP = sp;return ($128|0);
   }
   $1 = $109;
   $118 = $1;
   $0 = $118;
   $119 = $0;
   $120 = ((($119)) + 4|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $__tmp$i$i1;
   __THREW__ = 0;
   (invoke_ii($121|0,($122|0))|0);
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    $125 = ___cxa_find_matching_catch()|0;
    $126 = tempRet0;
    $8 = $125;
    $9 = $126;
    $127 = $8;
    ___cxa_call_unexpected(($127|0));
    // unreachable;
   } else {
    $128 = $__rt;
    STACKTOP = sp;return ($128|0);
   }
  }
 }
 $74 = ___cxa_find_matching_catch()|0;
 $75 = tempRet0;
 $43 = $74;
 $44 = $75;
 $26 = $__h;
 $76 = $26;
 $22 = $76;
 $23 = 0;
 $77 = $22;
 $21 = $77;
 $78 = $21;
 $20 = $78;
 $79 = $20;
 $80 = HEAP32[$79>>2]|0;
 $__tmp$i$i = $80;
 $81 = $23;
 $19 = $77;
 $82 = $19;
 $18 = $82;
 $83 = $18;
 HEAP32[$83>>2] = $81;
 $84 = $__tmp$i$i;
 $85 = ($84|0)!=(0|0);
 if (!($85)) {
  $129 = $43;
  $130 = $44;
  ___resumeException($129|0);
  // unreachable;
 }
 $17 = $77;
 $86 = $17;
 $16 = $86;
 $87 = $16;
 $88 = ((($87)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $__tmp$i$i;
 __THREW__ = 0;
 (invoke_ii($89|0,($90|0))|0);
 $91 = __THREW__; __THREW__ = 0;
 $92 = $91&1;
 if ($92) {
  $93 = ___cxa_find_matching_catch(0|0)|0;
  $94 = tempRet0;
  $24 = $93;
  $25 = $94;
  $95 = $24;
  ___cxa_call_unexpected(($95|0));
  // unreachable;
 } else {
  $129 = $43;
  $130 = $44;
  ___resumeException($129|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vii(572,($3|0),(2936|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = ((($3)) + 108|0);
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($6);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 $9 = ((($3)) + 108|0);
 __THREW__ = 0;
 invoke_vi(210,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $vtt;
 $4 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = ((($5)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$4>>2]|0;
 $10 = ((($9)) + -12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($4) + ($11)|0);
 HEAP32[$12>>2] = $8;
 $13 = ((($4)) + 8|0);
 __THREW__ = 0;
 invoke_vi(33,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $2 = $16;
 $3 = $17;
 __THREW__ = 0;
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $22 = ___cxa_find_matching_catch(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  $20 = $2;
  $21 = $3;
  ___resumeException($20|0);
  // unreachable;
 }
}
function __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $vtt;
 $4 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = ((($5)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$4>>2]|0;
 $10 = ((($9)) + -12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($4) + ($11)|0);
 HEAP32[$12>>2] = $8;
 $13 = ((($4)) + 8|0);
 __THREW__ = 0;
 invoke_vi(15,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $2 = $16;
 $3 = $17;
 __THREW__ = 0;
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $22 = ___cxa_find_matching_catch(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  $20 = $2;
  $21 = $3;
  ___resumeException($20|0);
  // unreachable;
 }
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 3016;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 32|0);
 __THREW__ = 0;
 invoke_vi(502,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(194,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZNSt3__113__vector_baseIN8OpenMesh12VertexHandleENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 12|0;
 $32 = sp + 4|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = ((($40)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = ((($45)) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = ((($40)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -4|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = ((($55)) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = ((($61)) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $70 = (($69|0) / 4)&-1;
 $25 = $58;
 $26 = $59;
 $27 = $70;
 $71 = $25;
 $72 = $26;
 $73 = $27;
 $22 = $71;
 $23 = $72;
 $24 = $73;
 $74 = $23;
 $21 = $74;
 $75 = $21;
 __ZdlPv($75);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh12VertexHandleENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 77|0;
 $10 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $3 = $24;
 $25 = $3;
 ;HEAP8[$2>>0]=HEAP8[$4>>0]|0;
 $1 = $25;
 $26 = $1;
 $0 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $11 = $18;
 $12 = $19;
 $28 = $11;
 $29 = $12;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $8 = $28;
 $9 = $29;
 $30 = $9;
 $31 = $8;
 $5 = $10;
 $6 = $30;
 $7 = $31;
 $32 = $6;
 $33 = HEAP32[$32>>2]|0;
 $34 = $7;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $9;
 $38 = $8;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIN8OpenMesh12VertexHandleERNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 124|0;
 $8 = sp + 108|0;
 $22 = sp + 52|0;
 $29 = sp + 24|0;
 $34 = sp + 4|0;
 $35 = sp;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = ((($36)) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = ((($46)) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = ((($54)) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $64 = $63<<2;
  $14 = $64;
  $65 = $14;
  $66 = (__Znwj($65)|0);
  $69 = $66;
 } else {
  $20 = $22;
  $21 = -1;
  $67 = $20;
  HEAP32[$67>>2] = 0;
  $68 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $68;
  $23 = $35;
  $69 = 0;
 }
 HEAP32[$36>>2] = $69;
 $70 = HEAP32[$36>>2]|0;
 $71 = $32;
 $72 = (($70) + ($71<<2)|0);
 $73 = ((($36)) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = ((($36)) + 4|0);
 HEAP32[$74>>2] = $72;
 $75 = HEAP32[$36>>2]|0;
 $76 = $31;
 $77 = (($75) + ($76<<2)|0);
 $26 = $36;
 $78 = $26;
 $79 = ((($78)) + 12|0);
 $25 = $79;
 $80 = $25;
 $24 = $80;
 $81 = $24;
 HEAP32[$81>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh12VertexHandleENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN8OpenMesh12VertexHandleENS_9allocatorIS2_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIN8OpenMesh12VertexHandleENS_9allocatorIS2_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN8OpenMesh12VertexHandleERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 8|0;
 $20 = sp + 125|0;
 $26 = sp;
 $29 = sp + 124|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26>>0]=HEAP8[$29>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = ((($38)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = ((($43)) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($38)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -4|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17>>0]=HEAP8[$20>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = ((($57)) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = ((($65)) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 4)&-1;
 $11 = $62;
 $12 = $63;
 $13 = $74;
 $75 = $11;
 $76 = $12;
 $77 = $13;
 $8 = $75;
 $9 = $76;
 $10 = $77;
 $78 = $9;
 $7 = $78;
 $79 = $7;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh12VertexHandleENS_9allocatorIS2_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIN8OpenMesh12VertexHandleENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh12VertexHandleENS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIN8OpenMesh12VertexHandleENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh12VertexHandleENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PolyMeshTINS_13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS3_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEEE10new_vertexERKS6_($this,$_p) {
 $this = $this|0;
 $_p = $_p|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $0 = sp + 12|0;
 $3 = sp;
 $1 = $this;
 $2 = $_p;
 $4 = $1;
 $5 = (__ZN8OpenMesh11ArrayKernel10new_vertexEv($4)|0);
 HEAP32[$0>>2] = $5;
 ;HEAP32[$3>>2]=HEAP32[$0>>2]|0;
 $6 = $2;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
 __ZN8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEE9set_pointENS_12VertexHandleERKS5_($4,$$byval_copy,$6);
 $7 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN8OpenMesh11ArrayKernel10new_vertexEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__annotator$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator$i = sp + 64|0;
 $13 = sp + 8|0;
 $15 = sp;
 $14 = $this;
 $16 = $14;
 $17 = ((($16)) + 84|0);
 ;HEAP32[$15>>2]=0|0;
 __ZN8OpenMesh10ArrayItems6VertexC2Ev($15);
 $11 = $17;
 $12 = $15;
 $18 = $11;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $10 = $18;
 $21 = $10;
 $22 = ((($21)) + 8|0);
 $9 = $22;
 $23 = $9;
 $8 = $23;
 $24 = $8;
 $25 = HEAP32[$24>>2]|0;
 $26 = ($20|0)!=($25|0);
 if ($26) {
  __ZNSt3__16vectorIN8OpenMesh10ArrayItems6VertexENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i,$18,1);
  $7 = $18;
  $27 = $7;
  $28 = ((($27)) + 8|0);
  $6 = $28;
  $29 = $6;
  $5 = $29;
  $30 = $5;
  $31 = ((($18)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $4 = $32;
  $33 = $4;
  $34 = $12;
  $1 = $30;
  $2 = $33;
  $3 = $34;
  $35 = $2;
  $36 = $3;
  ;HEAP32[$35>>2]=HEAP32[$36>>2]|0;
  __ZNSt3__16vectorIN8OpenMesh10ArrayItems6VertexENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $37 = ((($18)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($38)) + 4|0);
  HEAP32[$37>>2] = $39;
 } else {
  $40 = $12;
  __ZNSt3__16vectorIN8OpenMesh10ArrayItems6VertexENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($18,$40);
 }
 $41 = HEAP32[$16>>2]|0;
 $42 = ((($41)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (FUNCTION_TABLE_ii[$43 & 1023]($16)|0);
 __ZNK8OpenMesh10BaseKernel13vprops_resizeEj($16,$44);
 $45 = ((($16)) + 84|0);
 $0 = $45;
 $46 = $0;
 $47 = ((($46)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($48)) + -4|0);
 $50 = (__ZNK8OpenMesh11ArrayKernel6handleERKNS_10ArrayItems6VertexE(($16|0),($49|0))|0);
 HEAP32[$13>>2] = $50;
 $51 = HEAP32[$13>>2]|0;
 STACKTOP = sp;return ($51|0);
}
function __ZN8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEE9set_pointENS_12VertexHandleERKS5_($this,$_vh,$_p) {
 $this = $this|0;
 $_vh = $_vh|0;
 $_p = $_p|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 16|0;
 $2 = sp + 4|0;
 $3 = sp;
 $0 = $this;
 $1 = $_p;
 $4 = $0;
 $5 = ((($4)) + 228|0);
 ;HEAP32[$2>>2]=HEAP32[$5>>2]|0;
 ;HEAP32[$3>>2]=HEAP32[$_vh>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;
 $6 = (__ZN8OpenMesh10BaseKernel8propertyIN4DGPC7Vector3IdEEEENS_12VPropHandleTIT_E9referenceES7_NS_12VertexHandleE($4,$$byval_copy,$$byval_copy1)|0);
 $7 = $1;
 (__ZN4DGPC7Vector3IdEaSERKS1_($6,$7)|0);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh10BaseKernel8propertyIN4DGPC7Vector3IdEEEENS_12VPropHandleTIT_E9referenceES7_NS_12VertexHandleE($this,$_ph,$_vh) {
 $this = $this|0;
 $_ph = $_ph|0;
 $_vh = $_vh|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $1 = sp;
 $0 = $this;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 ;HEAP32[$1>>2]=HEAP32[$_ph>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZN8OpenMesh17PropertyContainer8propertyIN4DGPC7Vector3IdEEEERNS_9PropertyTIT_EENS_15BasePropHandleTIS6_EE($3,$$byval_copy)|0);
 $5 = (__ZNK8OpenMesh10BaseHandle3idxEv($_vh)|0);
 $6 = (__ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEEixEi($4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN4DGPC7Vector3IdEaSERKS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK4DGPC7Vector3IdE1xEv($3)|0);
 $5 = +HEAPF64[$4>>3];
 $6 = $1;
 $7 = (__ZNK4DGPC7Vector3IdE1yEv($6)|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $1;
 $10 = (__ZNK4DGPC7Vector3IdE1zEv($9)|0);
 $11 = +HEAPF64[$10>>3];
 __ZN4DGPC7Vector3IdE3setEddd($2,$5,$8,$11);
 STACKTOP = sp;return ($2|0);
}
function __ZN8OpenMesh17PropertyContainer8propertyIN4DGPC7Vector3IdEEEERNS_9PropertyTIT_EENS_15BasePropHandleTIS6_EE($this,$_h) {
 $this = $this|0;
 $_h = $_h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = $this;
 $6 = $5;
 $7 = (__ZNK8OpenMesh10BaseHandle3idxEv($_h)|0);
 $8 = ($7|0)>=(0);
 if (!($8)) {
  ___assert_fail((11956|0),(12008|0),152,(12082|0));
  // unreachable;
 }
 $9 = (__ZNK8OpenMesh10BaseHandle3idxEv($_h)|0);
 $10 = ((($6)) + 4|0);
 $4 = $10;
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$11>>2]|0;
 $15 = $13;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = (($17|0) / 4)&-1;
 $19 = ($9|0)<($18|0);
 if (!($19)) {
  ___assert_fail((11956|0),(12008|0),152,(12082|0));
  // unreachable;
 }
 $20 = ((($6)) + 4|0);
 $21 = (__ZNK8OpenMesh10BaseHandle3idxEv($_h)|0);
 $0 = $20;
 $1 = $21;
 $22 = $0;
 $23 = $1;
 $24 = HEAP32[$22>>2]|0;
 $25 = (($24) + ($23<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  ___assert_fail((12091|0),(12008|0),153,(12082|0));
  // unreachable;
 }
 $28 = ((($6)) + 4|0);
 $29 = (__ZNK8OpenMesh10BaseHandle3idxEv($_h)|0);
 $2 = $28;
 $3 = $29;
 $30 = $2;
 $31 = $3;
 $32 = HEAP32[$30>>2]|0;
 $33 = (($32) + ($31<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0|0);
 if ($35) {
  $37 = 0;
 } else {
  $36 = (___dynamic_cast($34,__ZTIN8OpenMesh12BasePropertyE,24,0)|0);
  $37 = $36;
 }
 $p = $37;
 $38 = $p;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = $p;
  STACKTOP = sp;return ($40|0);
 } else {
  ___assert_fail((12121|0),(12008|0),158,(12082|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEEixEi($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $_idx;
 $5 = $3;
 $6 = $4;
 $7 = ((($5)) + 20|0);
 $2 = $7;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$8>>2]|0;
 $12 = $10;
 $13 = $11;
 $14 = (($12) - ($13))|0;
 $15 = (($14|0) / 24)&-1;
 $16 = ($6>>>0)<($15>>>0);
 if ($16) {
  $17 = ((($5)) + 20|0);
  $18 = $4;
  $0 = $17;
  $1 = $18;
  $19 = $0;
  $20 = $1;
  $21 = HEAP32[$19>>2]|0;
  $22 = (($21) + (($20*24)|0)|0);
  STACKTOP = sp;return ($22|0);
 } else {
  ___assert_fail((11852|0),(11880|0),195,(11945|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh10ArrayItems6VertexC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8OpenMesh14HalfedgeHandleC2Ei($1,-1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh10ArrayItems6VertexENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh10ArrayItems6VertexENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh10ArrayItems6VertexENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 72|0;
 $23 = sp + 60|0;
 $__v = sp + 12|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = ((($33)) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 4)&-1;
 $45 = (($44) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $45;
 $46 = $21;
 $47 = (__ZNKSt3__16vectorIN8OpenMesh10ArrayItems6VertexENS_9allocatorIS3_EEE8max_sizeEv($46)|0);
 $__ms$i = $47;
 $48 = HEAP32[$22>>2]|0;
 $49 = $__ms$i;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($46);
 }
 $19 = $46;
 $51 = $19;
 $18 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = ((($53)) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$52>>2]|0;
 $59 = $57;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 4)&-1;
 $__cap$i = $62;
 $63 = $__cap$i;
 $64 = $__ms$i;
 $65 = (($64>>>0) / 2)&-1;
 $66 = ($63>>>0)>=($65>>>0);
 if ($66) {
  $67 = $__ms$i;
  $20 = $67;
 } else {
  $68 = $__cap$i;
  $69 = $68<<1;
  HEAP32[$23>>2] = $69;
  $12 = $23;
  $13 = $22;
  $70 = $12;
  $71 = $13;
  ;HEAP8[$11>>0]=HEAP8[$14>>0]|0;
  $9 = $70;
  $10 = $71;
  $72 = $9;
  $73 = $10;
  $6 = $11;
  $7 = $72;
  $8 = $73;
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75>>>0)<($77>>>0);
  $79 = $10;
  $80 = $9;
  $81 = $78 ? $79 : $80;
  $82 = HEAP32[$81>>2]|0;
  $20 = $82;
 }
 $83 = $20;
 $5 = $32;
 $84 = $5;
 $85 = ((($84)) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$84>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 4)&-1;
 $92 = $__a;
 __ZNSt3__114__split_bufferIN8OpenMesh10ArrayItems6VertexERNS_9allocatorIS3_EEEC2EjjS6_($__v,$83,$91,$92);
 $93 = $__a;
 $94 = ((($__v)) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $4 = $95;
 $96 = $4;
 $97 = $29;
 $3 = $97;
 $98 = $3;
 $0 = $93;
 $1 = $96;
 $2 = $98;
 $99 = $1;
 $100 = $2;
 ;HEAP32[$99>>2]=HEAP32[$100>>2]|0;
 $101 = ((($__v)) + 8|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ((($102)) + 4|0);
 HEAP32[$101>>2] = $103;
 __THREW__ = 0;
 invoke_vii(573,($32|0),($__v|0));
 $104 = __THREW__; __THREW__ = 0;
 $105 = $104&1;
 if (!($105)) {
  __ZNSt3__114__split_bufferIN8OpenMesh10ArrayItems6VertexERNS_9allocatorIS3_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $106 = ___cxa_find_matching_catch()|0;
 $107 = tempRet0;
 $30 = $106;
 $31 = $107;
 __THREW__ = 0;
 invoke_vi(574,($__v|0));
 $108 = __THREW__; __THREW__ = 0;
 $109 = $108&1;
 if ($109) {
  $112 = ___cxa_find_matching_catch(0|0)|0;
  $113 = tempRet0;
  ___clang_call_terminate($112);
  // unreachable;
 } else {
  $110 = $30;
  $111 = $31;
  ___resumeException($110|0);
  // unreachable;
 }
}
function __ZNK8OpenMesh10BaseKernel13vprops_resizeEj($this,$_n) {
 $this = $this|0;
 $_n = $_n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_n;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = $1;
 __ZNK8OpenMesh17PropertyContainer6resizeEj($3,$4);
 STACKTOP = sp;return;
}
function __ZNK8OpenMesh17PropertyContainer6resizeEj($this,$_n) {
 $this = $this|0;
 $_n = $_n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 128|0;
 $5 = sp + 116|0;
 $16 = sp + 72|0;
 $17 = sp + 16|0;
 $18 = sp + 8|0;
 $19 = sp;
 $22 = sp + 60|0;
 $25 = sp + 48|0;
 $29 = sp + 32|0;
 $30 = sp + 28|0;
 $31 = sp + 24|0;
 $32 = sp + 20|0;
 $27 = $this;
 $28 = $_n;
 $33 = $27;
 $34 = ((($33)) + 4|0);
 $26 = $34;
 $35 = $26;
 $36 = HEAP32[$35>>2]|0;
 $23 = $35;
 $24 = $36;
 $37 = $24;
 $20 = $22;
 $21 = $37;
 $38 = $20;
 $39 = $21;
 HEAP32[$38>>2] = $39;
 $40 = HEAP32[$22>>2]|0;
 HEAP32[$25>>2] = $40;
 $41 = HEAP32[$25>>2]|0;
 HEAP32[$29>>2] = $41;
 $42 = ((($33)) + 4|0);
 $6 = $42;
 $43 = $6;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $3 = $43;
 $4 = $45;
 $46 = $4;
 $0 = $2;
 $1 = $46;
 $47 = $0;
 $48 = $1;
 HEAP32[$47>>2] = $48;
 $49 = HEAP32[$2>>2]|0;
 HEAP32[$5>>2] = $49;
 $50 = HEAP32[$5>>2]|0;
 HEAP32[$30>>2] = $50;
 $51 = $28;
 __ZN8OpenMesh17PropertyContainer6ResizeC2Ej($31,$51);
 ;HEAP8[$17>>0]=HEAP8[$31>>0]|0;HEAP8[$17+1>>0]=HEAP8[$31+1>>0]|0;HEAP8[$17+2>>0]=HEAP8[$31+2>>0]|0;HEAP8[$17+3>>0]=HEAP8[$31+3>>0]|0;
 ;HEAP8[$18>>0]=HEAP8[$30>>0]|0;HEAP8[$18+1>>0]=HEAP8[$30+1>>0]|0;HEAP8[$18+2>>0]=HEAP8[$30+2>>0]|0;HEAP8[$18+3>>0]=HEAP8[$30+3>>0]|0;
 ;HEAP8[$19>>0]=HEAP8[$29>>0]|0;HEAP8[$19+1>>0]=HEAP8[$29+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$29+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$29+3>>0]|0;
 while(1) {
  $14 = $19;
  $15 = $18;
  $52 = $14;
  $53 = $15;
  $12 = $52;
  $13 = $53;
  $54 = $12;
  $11 = $54;
  $55 = $11;
  $56 = HEAP32[$55>>2]|0;
  $57 = $13;
  $10 = $57;
  $58 = $10;
  $59 = HEAP32[$58>>2]|0;
  $60 = ($56|0)==($59|0);
  $61 = $60 ^ 1;
  if (!($61)) {
   break;
  }
  $7 = $19;
  $62 = $7;
  $63 = HEAP32[$62>>2]|0;
  $64 = HEAP32[$63>>2]|0;
  __ZNK8OpenMesh17PropertyContainer6ResizeclEPNS_12BasePropertyE($17,$64);
  $8 = $19;
  $65 = $8;
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($66)) + 4|0);
  HEAP32[$65>>2] = $67;
 }
 $9 = $17;
 $68 = $9;
 ;HEAP32[$16>>2]=HEAP32[$68>>2]|0;
 $69 = HEAP32[$16>>2]|0;
 HEAP32[$32>>2] = $69;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh17PropertyContainer6ResizeC2Ej($this,$_n) {
 $this = $this|0;
 $_n = $_n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_n;
 $2 = $0;
 $3 = $1;
 HEAP32[$2>>2] = $3;
 STACKTOP = sp;return;
}
function __ZNK8OpenMesh17PropertyContainer6ResizeclEPNS_12BasePropertyE($this,$_p) {
 $this = $this|0;
 $_p = $_p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_p;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vii[$8 & 1023]($5,$9);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh10ArrayItems6VertexENS_9allocatorIS3_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 77|0;
 $10 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $3 = $24;
 $25 = $3;
 ;HEAP8[$2>>0]=HEAP8[$4>>0]|0;
 $1 = $25;
 $26 = $1;
 $0 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $11 = $18;
 $12 = $19;
 $28 = $11;
 $29 = $12;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $8 = $28;
 $9 = $29;
 $30 = $9;
 $31 = $8;
 $5 = $10;
 $6 = $30;
 $7 = $31;
 $32 = $6;
 $33 = HEAP32[$32>>2]|0;
 $34 = $7;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $9;
 $38 = $8;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIN8OpenMesh10ArrayItems6VertexERNS_9allocatorIS3_EEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 124|0;
 $8 = sp + 108|0;
 $22 = sp + 52|0;
 $29 = sp + 24|0;
 $34 = sp + 4|0;
 $35 = sp;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = ((($36)) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = ((($46)) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = ((($54)) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $64 = $63<<2;
  $14 = $64;
  $65 = $14;
  $66 = (__Znwj($65)|0);
  $69 = $66;
 } else {
  $20 = $22;
  $21 = -1;
  $67 = $20;
  HEAP32[$67>>2] = 0;
  $68 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $68;
  $23 = $35;
  $69 = 0;
 }
 HEAP32[$36>>2] = $69;
 $70 = HEAP32[$36>>2]|0;
 $71 = $32;
 $72 = (($70) + ($71<<2)|0);
 $73 = ((($36)) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = ((($36)) + 4|0);
 HEAP32[$74>>2] = $72;
 $75 = HEAP32[$36>>2]|0;
 $76 = $31;
 $77 = (($75) + ($76<<2)|0);
 $26 = $36;
 $78 = $26;
 $79 = ((($78)) + 12|0);
 $25 = $79;
 $80 = $25;
 $24 = $80;
 $81 = $24;
 HEAP32[$81>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh10ArrayItems6VertexENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN8OpenMesh10ArrayItems6VertexENS_9allocatorIS3_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIN8OpenMesh10ArrayItems6VertexENS_9allocatorIS3_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN8OpenMesh10ArrayItems6VertexERNS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 8|0;
 $20 = sp + 125|0;
 $26 = sp;
 $29 = sp + 124|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26>>0]=HEAP8[$29>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = ((($38)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = ((($43)) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($38)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -4|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17>>0]=HEAP8[$20>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = ((($57)) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = ((($65)) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 4)&-1;
 $11 = $62;
 $12 = $63;
 $13 = $74;
 $75 = $11;
 $76 = $12;
 $77 = $13;
 $8 = $75;
 $9 = $76;
 $10 = $77;
 $78 = $9;
 $7 = $78;
 $79 = $7;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh10ArrayItems6VertexENS_9allocatorIS3_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIN8OpenMesh10ArrayItems6VertexENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh10ArrayItems6VertexENS_9allocatorIS3_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIN8OpenMesh10ArrayItems6VertexENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh10ArrayItems6VertexENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE11to_int_typeEc($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = $1&255;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__111char_traitsIcE12to_char_typeEi($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = $1&255;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(15,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$__way,$__wch) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $__way = $__way|0;
 $__wch = $__wch|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__noff = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 64|0;
 $6 = sp + 56|0;
 $26 = sp + 48|0;
 $42 = sp + 40|0;
 $45 = sp + 32|0;
 $48 = sp + 24|0;
 $63 = sp + 16|0;
 $66 = sp + 8|0;
 $__noff = sp;
 $65 = $this;
 $69 = $66;
 $70 = $69;
 HEAP32[$70>>2] = $0;
 $71 = (($69) + 4)|0;
 $72 = $71;
 HEAP32[$72>>2] = $1;
 $67 = $__way;
 $68 = $__wch;
 $73 = $65;
 $74 = ((($73)) + 44|0);
 $75 = HEAP32[$74>>2]|0;
 $64 = $73;
 $76 = $64;
 $77 = ((($76)) + 24|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($75>>>0)<($78>>>0);
 if ($79) {
  $2 = $73;
  $80 = $2;
  $81 = ((($80)) + 24|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ((($73)) + 44|0);
  HEAP32[$83>>2] = $82;
 }
 $84 = $68;
 $85 = $84 & 24;
 $86 = ($85|0)==(0);
 if ($86) {
  $3 = $agg$result;
  $87 = $4;
  $88 = $87;
  HEAP32[$88>>2] = -1;
  $89 = (($87) + 4)|0;
  $90 = $89;
  HEAP32[$90>>2] = -1;
  $91 = $3;
  ;HEAP32[$91>>2]=0|0;HEAP32[$91+4>>2]=0|0;
  $92 = ((($91)) + 8|0);
  $93 = $4;
  $94 = $93;
  $95 = HEAP32[$94>>2]|0;
  $96 = (($93) + 4)|0;
  $97 = $96;
  $98 = HEAP32[$97>>2]|0;
  $99 = $92;
  $100 = $99;
  HEAP32[$100>>2] = $95;
  $101 = (($99) + 4)|0;
  $102 = $101;
  HEAP32[$102>>2] = $98;
  STACKTOP = sp;return;
 }
 $103 = $68;
 $104 = $103 & 24;
 $105 = ($104|0)==(24);
 $106 = $67;
 $107 = ($106|0)==(1);
 $or$cond = $105 & $107;
 if ($or$cond) {
  $5 = $agg$result;
  $108 = $6;
  $109 = $108;
  HEAP32[$109>>2] = -1;
  $110 = (($108) + 4)|0;
  $111 = $110;
  HEAP32[$111>>2] = -1;
  $112 = $5;
  ;HEAP32[$112>>2]=0|0;HEAP32[$112+4>>2]=0|0;
  $113 = ((($112)) + 8|0);
  $114 = $6;
  $115 = $114;
  $116 = HEAP32[$115>>2]|0;
  $117 = (($114) + 4)|0;
  $118 = $117;
  $119 = HEAP32[$118>>2]|0;
  $120 = $113;
  $121 = $120;
  HEAP32[$121>>2] = $116;
  $122 = (($120) + 4)|0;
  $123 = $122;
  HEAP32[$123>>2] = $119;
  STACKTOP = sp;return;
 }
 $124 = $67;
 L12: do {
  switch ($124|0) {
  case 0:  {
   $125 = $__noff;
   $126 = $125;
   HEAP32[$126>>2] = 0;
   $127 = (($125) + 4)|0;
   $128 = $127;
   HEAP32[$128>>2] = 0;
   break;
  }
  case 1:  {
   $129 = $68;
   $130 = $129 & 8;
   $131 = ($130|0)!=(0);
   if ($131) {
    $7 = $73;
    $132 = $7;
    $133 = ((($132)) + 12|0);
    $134 = HEAP32[$133>>2]|0;
    $8 = $73;
    $135 = $8;
    $136 = ((($135)) + 8|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $134;
    $139 = $137;
    $140 = (($138) - ($139))|0;
    $141 = ($140|0)<(0);
    $142 = $141 << 31 >> 31;
    $143 = $__noff;
    $144 = $143;
    HEAP32[$144>>2] = $140;
    $145 = (($143) + 4)|0;
    $146 = $145;
    HEAP32[$146>>2] = $142;
    break L12;
   } else {
    $9 = $73;
    $147 = $9;
    $148 = ((($147)) + 24|0);
    $149 = HEAP32[$148>>2]|0;
    $10 = $73;
    $150 = $10;
    $151 = ((($150)) + 20|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = $149;
    $154 = $152;
    $155 = (($153) - ($154))|0;
    $156 = ($155|0)<(0);
    $157 = $156 << 31 >> 31;
    $158 = $__noff;
    $159 = $158;
    HEAP32[$159>>2] = $155;
    $160 = (($158) + 4)|0;
    $161 = $160;
    HEAP32[$161>>2] = $157;
    break L12;
   }
   break;
  }
  case 2:  {
   $162 = ((($73)) + 44|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = ((($73)) + 32|0);
   $24 = $164;
   $165 = $24;
   $23 = $165;
   $166 = $23;
   $22 = $166;
   $167 = $22;
   $21 = $167;
   $168 = $21;
   $20 = $168;
   $169 = $20;
   $170 = HEAP8[$169>>0]|0;
   $171 = $170&255;
   $172 = $171 & 1;
   $173 = ($172|0)!=(0);
   if ($173) {
    $14 = $166;
    $174 = $14;
    $13 = $174;
    $175 = $13;
    $12 = $175;
    $176 = $12;
    $177 = ((($176)) + 8|0);
    $178 = HEAP32[$177>>2]|0;
    $185 = $178;
   } else {
    $19 = $166;
    $179 = $19;
    $18 = $179;
    $180 = $18;
    $17 = $180;
    $181 = $17;
    $182 = ((($181)) + 1|0);
    $16 = $182;
    $183 = $16;
    $15 = $183;
    $184 = $15;
    $185 = $184;
   }
   $11 = $185;
   $186 = $11;
   $187 = $163;
   $188 = $186;
   $189 = (($187) - ($188))|0;
   $190 = ($189|0)<(0);
   $191 = $190 << 31 >> 31;
   $192 = $__noff;
   $193 = $192;
   HEAP32[$193>>2] = $189;
   $194 = (($192) + 4)|0;
   $195 = $194;
   HEAP32[$195>>2] = $191;
   break;
  }
  default: {
   $25 = $agg$result;
   $196 = $26;
   $197 = $196;
   HEAP32[$197>>2] = -1;
   $198 = (($196) + 4)|0;
   $199 = $198;
   HEAP32[$199>>2] = -1;
   $200 = $25;
   ;HEAP32[$200>>2]=0|0;HEAP32[$200+4>>2]=0|0;
   $201 = ((($200)) + 8|0);
   $202 = $26;
   $203 = $202;
   $204 = HEAP32[$203>>2]|0;
   $205 = (($202) + 4)|0;
   $206 = $205;
   $207 = HEAP32[$206>>2]|0;
   $208 = $201;
   $209 = $208;
   HEAP32[$209>>2] = $204;
   $210 = (($208) + 4)|0;
   $211 = $210;
   HEAP32[$211>>2] = $207;
   STACKTOP = sp;return;
  }
  }
 } while(0);
 $212 = $66;
 $213 = $212;
 $214 = HEAP32[$213>>2]|0;
 $215 = (($212) + 4)|0;
 $216 = $215;
 $217 = HEAP32[$216>>2]|0;
 $218 = $__noff;
 $219 = $218;
 $220 = HEAP32[$219>>2]|0;
 $221 = (($218) + 4)|0;
 $222 = $221;
 $223 = HEAP32[$222>>2]|0;
 $224 = (_i64Add(($220|0),($223|0),($214|0),($217|0))|0);
 $225 = tempRet0;
 $226 = $__noff;
 $227 = $226;
 HEAP32[$227>>2] = $224;
 $228 = (($226) + 4)|0;
 $229 = $228;
 HEAP32[$229>>2] = $225;
 $230 = $__noff;
 $231 = $230;
 $232 = HEAP32[$231>>2]|0;
 $233 = (($230) + 4)|0;
 $234 = $233;
 $235 = HEAP32[$234>>2]|0;
 $236 = ($235|0)<(0);
 if (!($236)) {
  $237 = ((($73)) + 44|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = ((($73)) + 32|0);
  $40 = $239;
  $240 = $40;
  $39 = $240;
  $241 = $39;
  $38 = $241;
  $242 = $38;
  $37 = $242;
  $243 = $37;
  $36 = $243;
  $244 = $36;
  $245 = HEAP8[$244>>0]|0;
  $246 = $245&255;
  $247 = $246 & 1;
  $248 = ($247|0)!=(0);
  if ($248) {
   $30 = $241;
   $249 = $30;
   $29 = $249;
   $250 = $29;
   $28 = $250;
   $251 = $28;
   $252 = ((($251)) + 8|0);
   $253 = HEAP32[$252>>2]|0;
   $260 = $253;
  } else {
   $35 = $241;
   $254 = $35;
   $34 = $254;
   $255 = $34;
   $33 = $255;
   $256 = $33;
   $257 = ((($256)) + 1|0);
   $32 = $257;
   $258 = $32;
   $31 = $258;
   $259 = $31;
   $260 = $259;
  }
  $27 = $260;
  $261 = $27;
  $262 = $238;
  $263 = $261;
  $264 = (($262) - ($263))|0;
  $265 = ($264|0)<(0);
  $266 = $265 << 31 >> 31;
  $267 = $__noff;
  $268 = $267;
  $269 = HEAP32[$268>>2]|0;
  $270 = (($267) + 4)|0;
  $271 = $270;
  $272 = HEAP32[$271>>2]|0;
  $273 = ($266|0)<($272|0);
  $274 = ($264>>>0)<($269>>>0);
  $275 = ($266|0)==($272|0);
  $276 = $275 & $274;
  $277 = $273 | $276;
  if (!($277)) {
   $294 = $__noff;
   $295 = $294;
   $296 = HEAP32[$295>>2]|0;
   $297 = (($294) + 4)|0;
   $298 = $297;
   $299 = HEAP32[$298>>2]|0;
   $300 = ($296|0)!=(0);
   $301 = ($299|0)!=(0);
   $302 = $300 | $301;
   if ($302) {
    $303 = $68;
    $304 = $303 & 8;
    $305 = ($304|0)!=(0);
    if ($305) {
     $43 = $73;
     $306 = $43;
     $307 = ((($306)) + 12|0);
     $308 = HEAP32[$307>>2]|0;
     $309 = ($308|0)==(0|0);
     if ($309) {
      $44 = $agg$result;
      $310 = $45;
      $311 = $310;
      HEAP32[$311>>2] = -1;
      $312 = (($310) + 4)|0;
      $313 = $312;
      HEAP32[$313>>2] = -1;
      $314 = $44;
      ;HEAP32[$314>>2]=0|0;HEAP32[$314+4>>2]=0|0;
      $315 = ((($314)) + 8|0);
      $316 = $45;
      $317 = $316;
      $318 = HEAP32[$317>>2]|0;
      $319 = (($316) + 4)|0;
      $320 = $319;
      $321 = HEAP32[$320>>2]|0;
      $322 = $315;
      $323 = $322;
      HEAP32[$323>>2] = $318;
      $324 = (($322) + 4)|0;
      $325 = $324;
      HEAP32[$325>>2] = $321;
      STACKTOP = sp;return;
     }
    }
    $326 = $68;
    $327 = $326 & 16;
    $328 = ($327|0)!=(0);
    if ($328) {
     $46 = $73;
     $329 = $46;
     $330 = ((($329)) + 24|0);
     $331 = HEAP32[$330>>2]|0;
     $332 = ($331|0)==(0|0);
     if ($332) {
      $47 = $agg$result;
      $333 = $48;
      $334 = $333;
      HEAP32[$334>>2] = -1;
      $335 = (($333) + 4)|0;
      $336 = $335;
      HEAP32[$336>>2] = -1;
      $337 = $47;
      ;HEAP32[$337>>2]=0|0;HEAP32[$337+4>>2]=0|0;
      $338 = ((($337)) + 8|0);
      $339 = $48;
      $340 = $339;
      $341 = HEAP32[$340>>2]|0;
      $342 = (($339) + 4)|0;
      $343 = $342;
      $344 = HEAP32[$343>>2]|0;
      $345 = $338;
      $346 = $345;
      HEAP32[$346>>2] = $341;
      $347 = (($345) + 4)|0;
      $348 = $347;
      HEAP32[$348>>2] = $344;
      STACKTOP = sp;return;
     }
    }
   }
   $349 = $68;
   $350 = $349 & 8;
   $351 = ($350|0)!=(0);
   if ($351) {
    $49 = $73;
    $352 = $49;
    $353 = ((($352)) + 8|0);
    $354 = HEAP32[$353>>2]|0;
    $50 = $73;
    $355 = $50;
    $356 = ((($355)) + 8|0);
    $357 = HEAP32[$356>>2]|0;
    $358 = $__noff;
    $359 = $358;
    $360 = HEAP32[$359>>2]|0;
    $361 = (($358) + 4)|0;
    $362 = $361;
    $363 = HEAP32[$362>>2]|0;
    $364 = (($357) + ($360)|0);
    $365 = ((($73)) + 44|0);
    $366 = HEAP32[$365>>2]|0;
    $51 = $73;
    $52 = $354;
    $53 = $364;
    $54 = $366;
    $367 = $51;
    $368 = $52;
    $369 = ((($367)) + 8|0);
    HEAP32[$369>>2] = $368;
    $370 = $53;
    $371 = ((($367)) + 12|0);
    HEAP32[$371>>2] = $370;
    $372 = $54;
    $373 = ((($367)) + 16|0);
    HEAP32[$373>>2] = $372;
   }
   $374 = $68;
   $375 = $374 & 16;
   $376 = ($375|0)!=(0);
   if ($376) {
    $55 = $73;
    $377 = $55;
    $378 = ((($377)) + 20|0);
    $379 = HEAP32[$378>>2]|0;
    $56 = $73;
    $380 = $56;
    $381 = ((($380)) + 28|0);
    $382 = HEAP32[$381>>2]|0;
    $57 = $73;
    $58 = $379;
    $59 = $382;
    $383 = $57;
    $384 = $58;
    $385 = ((($383)) + 24|0);
    HEAP32[$385>>2] = $384;
    $386 = ((($383)) + 20|0);
    HEAP32[$386>>2] = $384;
    $387 = $59;
    $388 = ((($383)) + 28|0);
    HEAP32[$388>>2] = $387;
    $389 = $__noff;
    $390 = $389;
    $391 = HEAP32[$390>>2]|0;
    $392 = (($389) + 4)|0;
    $393 = $392;
    $394 = HEAP32[$393>>2]|0;
    $60 = $73;
    $61 = $391;
    $395 = $60;
    $396 = $61;
    $397 = ((($395)) + 24|0);
    $398 = HEAP32[$397>>2]|0;
    $399 = (($398) + ($396)|0);
    HEAP32[$397>>2] = $399;
   }
   $400 = $__noff;
   $401 = $400;
   $402 = HEAP32[$401>>2]|0;
   $403 = (($400) + 4)|0;
   $404 = $403;
   $405 = HEAP32[$404>>2]|0;
   $62 = $agg$result;
   $406 = $63;
   $407 = $406;
   HEAP32[$407>>2] = $402;
   $408 = (($406) + 4)|0;
   $409 = $408;
   HEAP32[$409>>2] = $405;
   $410 = $62;
   ;HEAP32[$410>>2]=0|0;HEAP32[$410+4>>2]=0|0;
   $411 = ((($410)) + 8|0);
   $412 = $63;
   $413 = $412;
   $414 = HEAP32[$413>>2]|0;
   $415 = (($412) + 4)|0;
   $416 = $415;
   $417 = HEAP32[$416>>2]|0;
   $418 = $411;
   $419 = $418;
   HEAP32[$419>>2] = $414;
   $420 = (($418) + 4)|0;
   $421 = $420;
   HEAP32[$421>>2] = $417;
   STACKTOP = sp;return;
  }
 }
 $41 = $agg$result;
 $278 = $42;
 $279 = $278;
 HEAP32[$279>>2] = -1;
 $280 = (($278) + 4)|0;
 $281 = $280;
 HEAP32[$281>>2] = -1;
 $282 = $41;
 ;HEAP32[$282>>2]=0|0;HEAP32[$282+4>>2]=0|0;
 $283 = ((($282)) + 8|0);
 $284 = $42;
 $285 = $284;
 $286 = HEAP32[$285>>2]|0;
 $287 = (($284) + 4)|0;
 $288 = $287;
 $289 = HEAP32[$288>>2]|0;
 $290 = $283;
 $291 = $290;
 HEAP32[$291>>2] = $286;
 $292 = (($290) + 4)|0;
 $293 = $292;
 HEAP32[$293>>2] = $289;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$__sp,$__wch) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__sp = $__sp|0;
 $__wch = $__wch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $__wch;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $0 = $__sp;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 FUNCTION_TABLE_viiiiii[$6 & 511]($agg$result,$3,$11,$14,0,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = $this;
 $14 = $13;
 $15 = ((($14)) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 $11 = $14;
 $17 = $11;
 $18 = ((($17)) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16>>>0)<($19>>>0);
 if ($20) {
  $10 = $14;
  $21 = $10;
  $22 = ((($21)) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($14)) + 44|0);
  HEAP32[$24>>2] = $23;
 }
 $25 = ((($14)) + 48|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 & 8;
 $28 = ($27|0)!=(0);
 if ($28) {
  $9 = $14;
  $29 = $9;
  $30 = ((($29)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($14)) + 44|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($31>>>0)<($33>>>0);
  if ($34) {
   $0 = $14;
   $35 = $0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $1 = $14;
   $38 = $1;
   $39 = ((($38)) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($14)) + 44|0);
   $42 = HEAP32[$41>>2]|0;
   $2 = $14;
   $3 = $37;
   $4 = $40;
   $5 = $42;
   $43 = $2;
   $44 = $3;
   $45 = ((($43)) + 8|0);
   HEAP32[$45>>2] = $44;
   $46 = $4;
   $47 = ((($43)) + 12|0);
   HEAP32[$47>>2] = $46;
   $48 = $5;
   $49 = ((($43)) + 16|0);
   HEAP32[$49>>2] = $48;
  }
  $6 = $14;
  $50 = $6;
  $51 = ((($50)) + 12|0);
  $52 = HEAP32[$51>>2]|0;
  $7 = $14;
  $53 = $7;
  $54 = ((($53)) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($52>>>0)<($55>>>0);
  if ($56) {
   $8 = $14;
   $57 = $8;
   $58 = ((($57)) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP8[$59>>0]|0;
   $61 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($60)|0);
   $12 = $61;
   $63 = $12;
   STACKTOP = sp;return ($63|0);
  }
 }
 $62 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $12 = $62;
 $63 = $12;
 STACKTOP = sp;return ($63|0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $__c;
 $21 = $19;
 $22 = ((($21)) + 44|0);
 $23 = HEAP32[$22>>2]|0;
 $17 = $21;
 $24 = $17;
 $25 = ((($24)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($23>>>0)<($26>>>0);
 if ($27) {
  $16 = $21;
  $28 = $16;
  $29 = ((($28)) + 24|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($21)) + 44|0);
  HEAP32[$31>>2] = $30;
 }
 $14 = $21;
 $32 = $14;
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $7 = $21;
 $35 = $7;
 $36 = ((($35)) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($34>>>0)<($37>>>0);
 do {
  if ($38) {
   $39 = $20;
   $40 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $41 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($39,$40)|0);
   if ($41) {
    $5 = $21;
    $42 = $5;
    $43 = ((($42)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $4 = $21;
    $45 = $4;
    $46 = ((($45)) + 12|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ((($47)) + -1|0);
    $49 = ((($21)) + 44|0);
    $50 = HEAP32[$49>>2]|0;
    $0 = $21;
    $1 = $44;
    $2 = $48;
    $3 = $50;
    $51 = $0;
    $52 = $1;
    $53 = ((($51)) + 8|0);
    HEAP32[$53>>2] = $52;
    $54 = $2;
    $55 = ((($51)) + 12|0);
    HEAP32[$55>>2] = $54;
    $56 = $3;
    $57 = ((($51)) + 16|0);
    HEAP32[$57>>2] = $56;
    $58 = $20;
    $59 = (__ZNSt3__111char_traitsIcE7not_eofEi($58)|0);
    $18 = $59;
    $95 = $18;
    STACKTOP = sp;return ($95|0);
   }
   $60 = ((($21)) + 48|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & 16;
   $63 = ($62|0)!=(0);
   if (!($63)) {
    $64 = $20;
    $65 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($64)|0);
    $6 = $21;
    $66 = $6;
    $67 = ((($66)) + 12|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((($68)) + -1|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = (__ZNSt3__111char_traitsIcE2eqEcc($65,$70)|0);
    if (!($71)) {
     break;
    }
   }
   $8 = $21;
   $72 = $8;
   $73 = ((($72)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $9 = $21;
   $75 = $9;
   $76 = ((($75)) + 12|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ((($77)) + -1|0);
   $79 = ((($21)) + 44|0);
   $80 = HEAP32[$79>>2]|0;
   $10 = $21;
   $11 = $74;
   $12 = $78;
   $13 = $80;
   $81 = $10;
   $82 = $11;
   $83 = ((($81)) + 8|0);
   HEAP32[$83>>2] = $82;
   $84 = $12;
   $85 = ((($81)) + 12|0);
   HEAP32[$85>>2] = $84;
   $86 = $13;
   $87 = ((($81)) + 16|0);
   HEAP32[$87>>2] = $86;
   $88 = $20;
   $89 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($88)|0);
   $15 = $21;
   $90 = $15;
   $91 = ((($90)) + 12|0);
   $92 = HEAP32[$91>>2]|0;
   HEAP8[$92>>0] = $89;
   $93 = $20;
   $18 = $93;
   $95 = $18;
   STACKTOP = sp;return ($95|0);
  }
 } while(0);
 $94 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $18 = $94;
 $95 = $18;
 STACKTOP = sp;return ($95|0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__hm = 0, $__ninp = 0, $__nout = 0, $__p = 0, $__p1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $47 = sp;
 $50 = sp + 349|0;
 $83 = sp + 8|0;
 $78 = $this;
 $79 = $__c;
 $84 = $78;
 $85 = $79;
 $86 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $87 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($85,$86)|0);
 if ($87) {
  $299 = $79;
  $300 = (__ZNSt3__111char_traitsIcE7not_eofEi($299)|0);
  $77 = $300;
  $301 = $77;
  STACKTOP = sp;return ($301|0);
 }
 $76 = $84;
 $88 = $76;
 $89 = ((($88)) + 12|0);
 $90 = HEAP32[$89>>2]|0;
 $75 = $84;
 $91 = $75;
 $92 = ((($91)) + 8|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = $90;
 $95 = $93;
 $96 = (($94) - ($95))|0;
 $__ninp = $96;
 $71 = $84;
 $97 = $71;
 $98 = ((($97)) + 24|0);
 $99 = HEAP32[$98>>2]|0;
 $70 = $84;
 $100 = $70;
 $101 = ((($100)) + 28|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($99|0)==($102|0);
 do {
  if ($103) {
   $104 = ((($84)) + 48|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $105 & 16;
   $107 = ($106|0)!=(0);
   if (!($107)) {
    $108 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
    $77 = $108;
    $301 = $77;
    STACKTOP = sp;return ($301|0);
   }
   $69 = $84;
   $109 = $69;
   $110 = ((($109)) + 24|0);
   $111 = HEAP32[$110>>2]|0;
   $40 = $84;
   $112 = $40;
   $113 = ((($112)) + 20|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = $111;
   $116 = $114;
   $117 = (($115) - ($116))|0;
   $__nout = $117;
   $118 = ((($84)) + 44|0);
   $119 = HEAP32[$118>>2]|0;
   $7 = $84;
   $120 = $7;
   $121 = ((($120)) + 20|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $119;
   $124 = $122;
   $125 = (($123) - ($124))|0;
   $__hm = $125;
   $126 = ((($84)) + 32|0);
   __THREW__ = 0;
   invoke_vii(567,($126|0),0);
   $127 = __THREW__; __THREW__ = 0;
   $128 = $127&1;
   if (!($128)) {
    $129 = ((($84)) + 32|0);
    $130 = ((($84)) + 32|0);
    $6 = $130;
    $131 = $6;
    $5 = $131;
    $132 = $5;
    $4 = $132;
    $133 = $4;
    $3 = $133;
    $134 = $3;
    $135 = HEAP8[$134>>0]|0;
    $136 = $135&255;
    $137 = $136 & 1;
    $138 = ($137|0)!=(0);
    if ($138) {
     $2 = $131;
     $139 = $2;
     $1 = $139;
     $140 = $1;
     $0 = $140;
     $141 = $0;
     $142 = HEAP32[$141>>2]|0;
     $143 = $142 & -2;
     $145 = $143;
    } else {
     $145 = 11;
    }
    $144 = (($145) - 1)|0;
    $8 = $129;
    $9 = $144;
    $146 = $8;
    $147 = $9;
    __THREW__ = 0;
    invoke_viii(575,($146|0),($147|0),0);
    $148 = __THREW__; __THREW__ = 0;
    $149 = $148&1;
    if (!($149)) {
     $150 = ((($84)) + 32|0);
     $23 = $150;
     $151 = $23;
     $22 = $151;
     $152 = $22;
     $21 = $152;
     $153 = $21;
     $20 = $153;
     $154 = $20;
     $19 = $154;
     $155 = $19;
     $156 = HEAP8[$155>>0]|0;
     $157 = $156&255;
     $158 = $157 & 1;
     $159 = ($158|0)!=(0);
     if ($159) {
      $13 = $152;
      $160 = $13;
      $12 = $160;
      $161 = $12;
      $11 = $161;
      $162 = $11;
      $163 = ((($162)) + 8|0);
      $164 = HEAP32[$163>>2]|0;
      $171 = $164;
     } else {
      $18 = $152;
      $165 = $18;
      $17 = $165;
      $166 = $17;
      $16 = $166;
      $167 = $16;
      $168 = ((($167)) + 1|0);
      $15 = $168;
      $169 = $15;
      $14 = $169;
      $170 = $14;
      $171 = $170;
     }
     $10 = $171;
     $172 = $10;
     $__p = $172;
     $173 = $__p;
     $174 = $__p;
     $175 = ((($84)) + 32|0);
     $33 = $175;
     $176 = $33;
     $32 = $176;
     $177 = $32;
     $31 = $177;
     $178 = $31;
     $30 = $178;
     $179 = $30;
     $180 = HEAP8[$179>>0]|0;
     $181 = $180&255;
     $182 = $181 & 1;
     $183 = ($182|0)!=(0);
     if ($183) {
      $26 = $176;
      $184 = $26;
      $25 = $184;
      $185 = $25;
      $24 = $185;
      $186 = $24;
      $187 = ((($186)) + 4|0);
      $188 = HEAP32[$187>>2]|0;
      $196 = $188;
     } else {
      $29 = $176;
      $189 = $29;
      $28 = $189;
      $190 = $28;
      $27 = $190;
      $191 = $27;
      $192 = HEAP8[$191>>0]|0;
      $193 = $192&255;
      $194 = $193 >> 1;
      $196 = $194;
     }
     $195 = (($174) + ($196)|0);
     $34 = $84;
     $35 = $173;
     $36 = $195;
     $197 = $34;
     $198 = $35;
     $199 = ((($197)) + 24|0);
     HEAP32[$199>>2] = $198;
     $200 = ((($197)) + 20|0);
     HEAP32[$200>>2] = $198;
     $201 = $36;
     $202 = ((($197)) + 28|0);
     HEAP32[$202>>2] = $201;
     $203 = $__nout;
     $37 = $84;
     $38 = $203;
     $204 = $37;
     $205 = $38;
     $206 = ((($204)) + 24|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = (($207) + ($205)|0);
     HEAP32[$206>>2] = $208;
     $39 = $84;
     $209 = $39;
     $210 = ((($209)) + 20|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = $__hm;
     $213 = (($211) + ($212)|0);
     $214 = ((($84)) + 44|0);
     HEAP32[$214>>2] = $213;
     break;
    }
   }
   $215 = ___cxa_find_matching_catch(0|0)|0;
   $216 = tempRet0;
   $80 = $215;
   $81 = $216;
   $217 = $80;
   (___cxa_begin_catch(($217|0))|0);
   $218 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $77 = $218;
   $82 = 1;
   ___cxa_end_catch();
   $301 = $77;
   STACKTOP = sp;return ($301|0);
  }
 } while(0);
 $41 = $84;
 $219 = $41;
 $220 = ((($219)) + 24|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = ((($221)) + 1|0);
 HEAP32[$83>>2] = $222;
 $223 = ((($84)) + 44|0);
 $48 = $83;
 $49 = $223;
 $224 = $48;
 $225 = $49;
 ;HEAP8[$47>>0]=HEAP8[$50>>0]|0;
 $45 = $224;
 $46 = $225;
 $226 = $45;
 $227 = $46;
 $42 = $47;
 $43 = $226;
 $44 = $227;
 $228 = $43;
 $229 = HEAP32[$228>>2]|0;
 $230 = $44;
 $231 = HEAP32[$230>>2]|0;
 $232 = ($229>>>0)<($231>>>0);
 $233 = $46;
 $234 = $45;
 $235 = $232 ? $233 : $234;
 $236 = HEAP32[$235>>2]|0;
 $237 = ((($84)) + 44|0);
 HEAP32[$237>>2] = $236;
 $238 = ((($84)) + 48|0);
 $239 = HEAP32[$238>>2]|0;
 $240 = $239 & 8;
 $241 = ($240|0)!=(0);
 if ($241) {
  $242 = ((($84)) + 32|0);
  $64 = $242;
  $243 = $64;
  $63 = $243;
  $244 = $63;
  $62 = $244;
  $245 = $62;
  $61 = $245;
  $246 = $61;
  $60 = $246;
  $247 = $60;
  $248 = HEAP8[$247>>0]|0;
  $249 = $248&255;
  $250 = $249 & 1;
  $251 = ($250|0)!=(0);
  if ($251) {
   $54 = $244;
   $252 = $54;
   $53 = $252;
   $253 = $53;
   $52 = $253;
   $254 = $52;
   $255 = ((($254)) + 8|0);
   $256 = HEAP32[$255>>2]|0;
   $263 = $256;
  } else {
   $59 = $244;
   $257 = $59;
   $58 = $257;
   $258 = $58;
   $57 = $258;
   $259 = $57;
   $260 = ((($259)) + 1|0);
   $56 = $260;
   $261 = $56;
   $55 = $261;
   $262 = $55;
   $263 = $262;
  }
  $51 = $263;
  $264 = $51;
  $__p1 = $264;
  $265 = $__p1;
  $266 = $__p1;
  $267 = $__ninp;
  $268 = (($266) + ($267)|0);
  $269 = ((($84)) + 44|0);
  $270 = HEAP32[$269>>2]|0;
  $65 = $84;
  $66 = $265;
  $67 = $268;
  $68 = $270;
  $271 = $65;
  $272 = $66;
  $273 = ((($271)) + 8|0);
  HEAP32[$273>>2] = $272;
  $274 = $67;
  $275 = ((($271)) + 12|0);
  HEAP32[$275>>2] = $274;
  $276 = $68;
  $277 = ((($271)) + 16|0);
  HEAP32[$277>>2] = $276;
 }
 $278 = $79;
 $279 = $278&255;
 $73 = $84;
 $74 = $279;
 $280 = $73;
 $281 = ((($280)) + 24|0);
 $282 = HEAP32[$281>>2]|0;
 $283 = ((($280)) + 28|0);
 $284 = HEAP32[$283>>2]|0;
 $285 = ($282|0)==($284|0);
 if ($285) {
  $286 = HEAP32[$280>>2]|0;
  $287 = ((($286)) + 52|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = $74;
  $290 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($289)|0);
  $291 = (FUNCTION_TABLE_iii[$288 & 1023]($280,$290)|0);
  $72 = $291;
 } else {
  $292 = $74;
  $293 = ((($280)) + 24|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = ((($294)) + 1|0);
  HEAP32[$293>>2] = $295;
  HEAP8[$294>>0] = $292;
  $296 = $74;
  $297 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($296)|0);
  $72 = $297;
 }
 $298 = $72;
 $77 = $298;
 $301 = $77;
 STACKTOP = sp;return ($301|0);
}
function __ZNSt3__111char_traitsIcE7not_eofEi($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $3 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($1,$2)|0);
 if ($3) {
  $4 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $5 = $4 ^ -1;
  $7 = $5;
  STACKTOP = sp;return ($7|0);
 } else {
  $6 = $0;
  $7 = $6;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZNSt3__111char_traitsIcE2eqEcc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $2 << 24 >> 24;
 $4 = $1;
 $5 = $4 << 24 >> 24;
 $6 = ($3|0)==($5|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(11,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($5);
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE6assignERcRKc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $0;
 HEAP8[$4>>0] = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(33,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__old_anc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = $this;
 $10 = $__loc;
 $11 = $9;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 (FUNCTION_TABLE_ii[$14 & 1023]($11)|0);
 $15 = $10;
 $8 = $15;
 $16 = $8;
 $17 = (__ZNKSt3__16locale9use_facetERNS0_2idE($16,7748)|0);
 $18 = ((($11)) + 68|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($11)) + 98|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&1;
 $22 = $21&1;
 $__old_anc = $22;
 $23 = ((($11)) + 68|0);
 $24 = HEAP32[$23>>2]|0;
 $7 = $24;
 $25 = $7;
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (FUNCTION_TABLE_ii[$28 & 1023]($25)|0);
 $30 = ((($11)) + 98|0);
 $31 = $29&1;
 HEAP8[$30>>0] = $31;
 $32 = $__old_anc;
 $33 = $32&1;
 $34 = $33&1;
 $35 = ((($11)) + 98|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&1;
 $38 = $37&1;
 $39 = ($34|0)!=($38|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $3 = $11;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 $40 = $3;
 $41 = $4;
 $42 = ((($40)) + 8|0);
 HEAP32[$42>>2] = $41;
 $43 = $5;
 $44 = ((($40)) + 12|0);
 HEAP32[$44>>2] = $43;
 $45 = $6;
 $46 = ((($40)) + 16|0);
 HEAP32[$46>>2] = $45;
 $0 = $11;
 $1 = 0;
 $2 = 0;
 $47 = $0;
 $48 = $1;
 $49 = ((($47)) + 24|0);
 HEAP32[$49>>2] = $48;
 $50 = ((($47)) + 20|0);
 HEAP32[$50>>2] = $48;
 $51 = $2;
 $52 = ((($47)) + 28|0);
 HEAP32[$52>>2] = $51;
 $53 = ((($11)) + 98|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&1;
 $56 = ((($11)) + 96|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57&1;
 if ($55) {
  if ($58) {
   $59 = ((($11)) + 32|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)==(0|0);
   if (!($61)) {
    __ZdaPv($60);
   }
  }
  $62 = ((($11)) + 97|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&1;
  $65 = ((($11)) + 96|0);
  $66 = $64&1;
  HEAP8[$65>>0] = $66;
  $67 = ((($11)) + 60|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($11)) + 52|0);
  HEAP32[$69>>2] = $68;
  $70 = ((($11)) + 56|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ((($11)) + 32|0);
  HEAP32[$72>>2] = $71;
  $73 = ((($11)) + 60|0);
  HEAP32[$73>>2] = 0;
  $74 = ((($11)) + 56|0);
  HEAP32[$74>>2] = 0;
  $75 = ((($11)) + 97|0);
  HEAP8[$75>>0] = 0;
  STACKTOP = sp;return;
 }
 if (!($58)) {
  $76 = ((($11)) + 32|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($11)) + 44|0);
  $79 = ($77|0)!=($78|0);
  if ($79) {
   $80 = ((($11)) + 52|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ((($11)) + 60|0);
   HEAP32[$82>>2] = $81;
   $83 = ((($11)) + 32|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ((($11)) + 56|0);
   HEAP32[$85>>2] = $84;
   $86 = ((($11)) + 97|0);
   HEAP8[$86>>0] = 0;
   $87 = ((($11)) + 52|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (__Znaj($88)|0);
   $90 = ((($11)) + 32|0);
   HEAP32[$90>>2] = $89;
   $91 = ((($11)) + 96|0);
   HEAP8[$91>>0] = 1;
   STACKTOP = sp;return;
  }
 }
 $92 = ((($11)) + 52|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ((($11)) + 60|0);
 HEAP32[$94>>2] = $93;
 $95 = ((($11)) + 60|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (__Znaj($96)|0);
 $98 = ((($11)) + 56|0);
 HEAP32[$98>>2] = $97;
 $99 = ((($11)) + 97|0);
 HEAP8[$99>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $11 = sp + 76|0;
 $18 = sp + 8|0;
 $19 = sp + 4|0;
 $16 = $this;
 $17 = $__s;
 HEAP32[$18>>2] = $__n;
 $20 = $16;
 $12 = $20;
 $13 = 0;
 $14 = 0;
 $15 = 0;
 $21 = $12;
 $22 = $13;
 $23 = ((($21)) + 8|0);
 HEAP32[$23>>2] = $22;
 $24 = $14;
 $25 = ((($21)) + 12|0);
 HEAP32[$25>>2] = $24;
 $26 = $15;
 $27 = ((($21)) + 16|0);
 HEAP32[$27>>2] = $26;
 $0 = $20;
 $1 = 0;
 $2 = 0;
 $28 = $0;
 $29 = $1;
 $30 = ((($28)) + 24|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($28)) + 20|0);
 HEAP32[$31>>2] = $29;
 $32 = $2;
 $33 = ((($28)) + 28|0);
 HEAP32[$33>>2] = $32;
 $34 = ((($20)) + 96|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&1;
 if ($36) {
  $37 = ((($20)) + 32|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0|0);
  if (!($39)) {
   __ZdaPv($38);
  }
 }
 $40 = ((($20)) + 97|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&1;
 if ($42) {
  $43 = ((($20)) + 56|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(0|0);
  if (!($45)) {
   __ZdaPv($44);
  }
 }
 $46 = HEAP32[$18>>2]|0;
 $47 = ((($20)) + 52|0);
 HEAP32[$47>>2] = $46;
 $48 = ((($20)) + 52|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49>>>0)>(8);
 do {
  if ($50) {
   $51 = ((($20)) + 98|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&1;
   $54 = $17;
   $55 = ($54|0)!=(0|0);
   $or$cond = $53 & $55;
   if ($or$cond) {
    $56 = $17;
    $57 = ((($20)) + 32|0);
    HEAP32[$57>>2] = $56;
    $58 = ((($20)) + 96|0);
    HEAP8[$58>>0] = 0;
    break;
   } else {
    $59 = ((($20)) + 52|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (__Znaj($60)|0);
    $62 = ((($20)) + 32|0);
    HEAP32[$62>>2] = $61;
    $63 = ((($20)) + 96|0);
    HEAP8[$63>>0] = 1;
    break;
   }
  } else {
   $64 = ((($20)) + 44|0);
   $65 = ((($20)) + 32|0);
   HEAP32[$65>>2] = $64;
   $66 = ((($20)) + 52|0);
   HEAP32[$66>>2] = 8;
   $67 = ((($20)) + 96|0);
   HEAP8[$67>>0] = 0;
  }
 } while(0);
 $68 = ((($20)) + 98|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&1;
 if ($70) {
  $98 = ((($20)) + 60|0);
  HEAP32[$98>>2] = 0;
  $99 = ((($20)) + 56|0);
  HEAP32[$99>>2] = 0;
  $100 = ((($20)) + 97|0);
  HEAP8[$100>>0] = 0;
  STACKTOP = sp;return ($20|0);
 }
 HEAP32[$19>>2] = 8;
 $9 = $18;
 $10 = $19;
 $71 = $9;
 $72 = $10;
 ;HEAP8[$8>>0]=HEAP8[$11>>0]|0;
 $6 = $71;
 $7 = $72;
 $73 = $6;
 $74 = $7;
 $3 = $8;
 $4 = $73;
 $5 = $74;
 $75 = $4;
 $76 = HEAP32[$75>>2]|0;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = ($76|0)<($78|0);
 $80 = $7;
 $81 = $6;
 $82 = $79 ? $80 : $81;
 $83 = HEAP32[$82>>2]|0;
 $84 = ((($20)) + 60|0);
 HEAP32[$84>>2] = $83;
 $85 = $17;
 $86 = ($85|0)!=(0|0);
 if ($86) {
  $87 = ((($20)) + 60|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ($88>>>0)>=(8);
  if ($89) {
   $90 = $17;
   $91 = ((($20)) + 56|0);
   HEAP32[$91>>2] = $90;
   $92 = ((($20)) + 97|0);
   HEAP8[$92>>0] = 0;
   STACKTOP = sp;return ($20|0);
  }
 }
 $93 = ((($20)) + 60|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (__Znaj($94)|0);
 $96 = ((($20)) + 56|0);
 HEAP32[$96>>2] = $95;
 $97 = ((($20)) + 97|0);
 HEAP8[$97>>0] = 1;
 STACKTOP = sp;return ($20|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$__way,$2) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $__way = $__way|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__r = 0, $__whence = 0, $__width = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 56|0;
 $6 = sp + 48|0;
 $8 = sp + 40|0;
 $10 = sp + 32|0;
 $12 = sp + 24|0;
 $15 = sp + 16|0;
 $__r = sp;
 $18 = sp + 64|0;
 $14 = $this;
 $19 = $15;
 $20 = $19;
 HEAP32[$20>>2] = $0;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $1;
 $16 = $__way;
 $17 = $2;
 $23 = $14;
 $24 = ((($23)) + 68|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  $27 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($27);
  ___cxa_throw(($27|0),(672|0),(152|0));
  // unreachable;
 }
 $28 = ((($23)) + 68|0);
 $29 = HEAP32[$28>>2]|0;
 $13 = $29;
 $30 = $13;
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 24|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (FUNCTION_TABLE_ii[$33 & 1023]($30)|0);
 $__width = $34;
 $35 = ((($23)) + 64|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  $38 = $__width;
  $39 = ($38|0)<=(0);
  $40 = $15;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = (($40) + 4)|0;
  $44 = $43;
  $45 = HEAP32[$44>>2]|0;
  $46 = ($42|0)!=(0);
  $47 = ($45|0)!=(0);
  $48 = $46 | $47;
  $or$cond = $39 & $48;
  if (!($or$cond)) {
   $49 = HEAP32[$23>>2]|0;
   $50 = ((($49)) + 24|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (FUNCTION_TABLE_ii[$51 & 1023]($23)|0);
   $53 = ($52|0)!=(0);
   if (!($53)) {
    $70 = $16;
    switch ($70|0) {
    case 0:  {
     $__whence = 0;
     break;
    }
    case 1:  {
     $__whence = 1;
     break;
    }
    case 2:  {
     $__whence = 2;
     break;
    }
    default: {
     $3 = $agg$result;
     $71 = $4;
     $72 = $71;
     HEAP32[$72>>2] = -1;
     $73 = (($71) + 4)|0;
     $74 = $73;
     HEAP32[$74>>2] = -1;
     $75 = $3;
     ;HEAP32[$75>>2]=0|0;HEAP32[$75+4>>2]=0|0;
     $76 = ((($75)) + 8|0);
     $77 = $4;
     $78 = $77;
     $79 = HEAP32[$78>>2]|0;
     $80 = (($77) + 4)|0;
     $81 = $80;
     $82 = HEAP32[$81>>2]|0;
     $83 = $76;
     $84 = $83;
     HEAP32[$84>>2] = $79;
     $85 = (($83) + 4)|0;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     STACKTOP = sp;return;
    }
    }
    $87 = ((($23)) + 64|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $__width;
    $90 = ($89|0)>(0);
    if ($90) {
     $91 = $__width;
     $92 = ($91|0)<(0);
     $93 = $92 << 31 >> 31;
     $94 = $15;
     $95 = $94;
     $96 = HEAP32[$95>>2]|0;
     $97 = (($94) + 4)|0;
     $98 = $97;
     $99 = HEAP32[$98>>2]|0;
     $100 = (___muldi3(($91|0),($93|0),($96|0),($99|0))|0);
     $101 = tempRet0;
     $103 = $100;$145 = $101;
    } else {
     $103 = 0;$145 = 0;
    }
    $102 = $__whence;
    $104 = (_fseeko(($88|0),($103|0),($102|0))|0);
    $105 = ($104|0)!=(0);
    if ($105) {
     $5 = $agg$result;
     $106 = $6;
     $107 = $106;
     HEAP32[$107>>2] = -1;
     $108 = (($106) + 4)|0;
     $109 = $108;
     HEAP32[$109>>2] = -1;
     $110 = $5;
     ;HEAP32[$110>>2]=0|0;HEAP32[$110+4>>2]=0|0;
     $111 = ((($110)) + 8|0);
     $112 = $6;
     $113 = $112;
     $114 = HEAP32[$113>>2]|0;
     $115 = (($112) + 4)|0;
     $116 = $115;
     $117 = HEAP32[$116>>2]|0;
     $118 = $111;
     $119 = $118;
     HEAP32[$119>>2] = $114;
     $120 = (($118) + 4)|0;
     $121 = $120;
     HEAP32[$121>>2] = $117;
     STACKTOP = sp;return;
    } else {
     $122 = ((($23)) + 64|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = (_ftello(($123|0))|0);
     $125 = ($124|0)<(0);
     $126 = $125 << 31 >> 31;
     $7 = $__r;
     $127 = $8;
     $128 = $127;
     HEAP32[$128>>2] = $124;
     $129 = (($127) + 4)|0;
     $130 = $129;
     HEAP32[$130>>2] = $126;
     $131 = $7;
     ;HEAP32[$131>>2]=0|0;HEAP32[$131+4>>2]=0|0;
     $132 = ((($131)) + 8|0);
     $133 = $8;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $136 = (($133) + 4)|0;
     $137 = $136;
     $138 = HEAP32[$137>>2]|0;
     $139 = $132;
     $140 = $139;
     HEAP32[$140>>2] = $135;
     $141 = (($139) + 4)|0;
     $142 = $141;
     HEAP32[$142>>2] = $138;
     $143 = ((($23)) + 72|0);
     ;HEAP32[$18>>2]=HEAP32[$143>>2]|0;HEAP32[$18+4>>2]=HEAP32[$143+4>>2]|0;
     ;HEAP8[$10>>0]=HEAP8[$18>>0]|0;HEAP8[$10+1>>0]=HEAP8[$18+1>>0]|0;HEAP8[$10+2>>0]=HEAP8[$18+2>>0]|0;HEAP8[$10+3>>0]=HEAP8[$18+3>>0]|0;HEAP8[$10+4>>0]=HEAP8[$18+4>>0]|0;HEAP8[$10+5>>0]=HEAP8[$18+5>>0]|0;HEAP8[$10+6>>0]=HEAP8[$18+6>>0]|0;HEAP8[$10+7>>0]=HEAP8[$18+7>>0]|0;
     $9 = $__r;
     $144 = $9;
     ;HEAP32[$144>>2]=HEAP32[$10>>2]|0;HEAP32[$144+4>>2]=HEAP32[$10+4>>2]|0;
     ;HEAP32[$agg$result>>2]=HEAP32[$__r>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$__r+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$__r+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$__r+12>>2]|0;
     STACKTOP = sp;return;
    }
   }
  }
 }
 $11 = $agg$result;
 $54 = $12;
 $55 = $54;
 HEAP32[$55>>2] = -1;
 $56 = (($54) + 4)|0;
 $57 = $56;
 HEAP32[$57>>2] = -1;
 $58 = $11;
 ;HEAP32[$58>>2]=0|0;HEAP32[$58+4>>2]=0|0;
 $59 = ((($58)) + 8|0);
 $60 = $12;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = (($60) + 4)|0;
 $64 = $63;
 $65 = HEAP32[$64>>2]|0;
 $66 = $59;
 $67 = $66;
 HEAP32[$67>>2] = $62;
 $68 = (($66) + 4)|0;
 $69 = $68;
 HEAP32[$69>>2] = $65;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$__sp,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__sp = $__sp|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $6 = sp;
 $9 = sp + 16|0;
 $7 = $this;
 $8 = $0;
 $10 = $7;
 $11 = ((($10)) + 64|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $14 = HEAP32[$10>>2]|0;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_ii[$16 & 1023]($10)|0);
  $18 = ($17|0)!=(0);
  if (!($18)) {
   $35 = ((($10)) + 64|0);
   $36 = HEAP32[$35>>2]|0;
   $1 = $__sp;
   $37 = $1;
   $38 = ((($37)) + 8|0);
   $39 = $38;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($39) + 4)|0;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = (_fseeko(($36|0),($41|0),0)|0);
   $46 = ($45|0)!=(0);
   if ($46) {
    $2 = $agg$result;
    $47 = $3;
    $48 = $47;
    HEAP32[$48>>2] = -1;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = -1;
    $51 = $2;
    ;HEAP32[$51>>2]=0|0;HEAP32[$51+4>>2]=0|0;
    $52 = ((($51)) + 8|0);
    $53 = $3;
    $54 = $53;
    $55 = HEAP32[$54>>2]|0;
    $56 = (($53) + 4)|0;
    $57 = $56;
    $58 = HEAP32[$57>>2]|0;
    $59 = $52;
    $60 = $59;
    HEAP32[$60>>2] = $55;
    $61 = (($59) + 4)|0;
    $62 = $61;
    HEAP32[$62>>2] = $58;
    STACKTOP = sp;return;
   } else {
    $63 = ((($10)) + 72|0);
    $4 = $__sp;
    $64 = $4;
    ;HEAP32[$9>>2]=HEAP32[$64>>2]|0;HEAP32[$9+4>>2]=HEAP32[$64+4>>2]|0;
    ;HEAP32[$63>>2]=HEAP32[$9>>2]|0;HEAP32[$63+4>>2]=HEAP32[$9+4>>2]|0;
    ;HEAP32[$agg$result>>2]=HEAP32[$__sp>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$__sp+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$__sp+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$__sp+12>>2]|0;
    STACKTOP = sp;return;
   }
  }
 }
 $5 = $agg$result;
 $19 = $6;
 $20 = $19;
 HEAP32[$20>>2] = -1;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = -1;
 $23 = $5;
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;
 $24 = ((($23)) + 8|0);
 $25 = $6;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = $24;
 $32 = $31;
 HEAP32[$32>>2] = $27;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $30;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__extbe = 0, $__nmemb = 0, $__off = 0, $__r = 0, $__state = 0, $__update_st = 0, $__width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbe = sp + 28|0;
 $__c = sp;
 $__state = sp + 16|0;
 $26 = $this;
 $27 = $26;
 $28 = ((($27)) + 64|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $25 = 0;
  $245 = $25;
  STACKTOP = sp;return ($245|0);
 }
 $31 = ((($27)) + 68|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  $34 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($34);
  ___cxa_throw(($34|0),(672|0),(152|0));
  // unreachable;
 }
 $35 = ((($27)) + 92|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 & 16;
 $38 = ($37|0)!=(0);
 if ($38) {
  $24 = $27;
  $39 = $24;
  $40 = ((($39)) + 24|0);
  $41 = HEAP32[$40>>2]|0;
  $14 = $27;
  $42 = $14;
  $43 = ((($42)) + 20|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($41|0)!=($44|0);
  if ($45) {
   $46 = HEAP32[$27>>2]|0;
   $47 = ((($46)) + 52|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $50 = (FUNCTION_TABLE_iii[$48 & 1023]($27,$49)|0);
   $51 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $52 = ($50|0)==($51|0);
   if ($52) {
    $25 = -1;
    $245 = $25;
    STACKTOP = sp;return ($245|0);
   }
  }
  while(1) {
   $53 = ((($27)) + 68|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($27)) + 72|0);
   $56 = ((($27)) + 32|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($27)) + 32|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($27)) + 52|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($59) + ($61)|0);
   $2 = $54;
   $3 = $55;
   $4 = $57;
   $5 = $62;
   $6 = $__extbe;
   $63 = $2;
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($64)) + 20|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $3;
   $68 = $4;
   $69 = $5;
   $70 = $6;
   $71 = (FUNCTION_TABLE_iiiiii[$66 & 1023]($63,$67,$68,$69,$70)|0);
   $__r = $71;
   $72 = HEAP32[$__extbe>>2]|0;
   $73 = ((($27)) + 32|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $72;
   $76 = $74;
   $77 = (($75) - ($76))|0;
   $__nmemb = $77;
   $78 = ((($27)) + 32|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $__nmemb;
   $81 = ((($27)) + 64|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (_fwrite(($79|0),1,($80|0),($82|0))|0);
   $84 = $__nmemb;
   $85 = ($83|0)!=($84|0);
   if ($85) {
    label = 10;
    break;
   }
   $86 = $__r;
   $87 = ($86|0)==(1);
   if (!($87)) {
    break;
   }
  }
  if ((label|0) == 10) {
   $25 = -1;
   $245 = $25;
   STACKTOP = sp;return ($245|0);
  }
  $88 = $__r;
  $89 = ($88|0)==(2);
  if ($89) {
   $25 = -1;
   $245 = $25;
   STACKTOP = sp;return ($245|0);
  }
  $90 = ((($27)) + 64|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (_fflush(($91|0))|0);
  $93 = ($92|0)!=(0);
  if ($93) {
   $25 = -1;
   $245 = $25;
   STACKTOP = sp;return ($245|0);
  }
 } else {
  $94 = ((($27)) + 92|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $95 & 8;
  $97 = ($96|0)!=(0);
  if ($97) {
   $98 = ((($27)) + 80|0);
   ;HEAP32[$__state>>2]=HEAP32[$98>>2]|0;HEAP32[$__state+4>>2]=HEAP32[$98+4>>2]|0;
   $__update_st = 0;
   $99 = ((($27)) + 98|0);
   $100 = HEAP8[$99>>0]|0;
   $101 = $100&1;
   do {
    if ($101) {
     $1 = $27;
     $102 = $1;
     $103 = ((($102)) + 16|0);
     $104 = HEAP32[$103>>2]|0;
     $0 = $27;
     $105 = $0;
     $106 = ((($105)) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $104;
     $109 = $107;
     $110 = (($108) - ($109))|0;
     $111 = ($110|0)<(0);
     $112 = $111 << 31 >> 31;
     $113 = $__c;
     $114 = $113;
     HEAP32[$114>>2] = $110;
     $115 = (($113) + 4)|0;
     $116 = $115;
     HEAP32[$116>>2] = $112;
    } else {
     $117 = ((($27)) + 68|0);
     $118 = HEAP32[$117>>2]|0;
     $7 = $118;
     $119 = $7;
     $120 = HEAP32[$119>>2]|0;
     $121 = ((($120)) + 24|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = (FUNCTION_TABLE_ii[$122 & 1023]($119)|0);
     $__width = $123;
     $124 = ((($27)) + 40|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ((($27)) + 36|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = $125;
     $129 = $127;
     $130 = (($128) - ($129))|0;
     $131 = ($130|0)<(0);
     $132 = $131 << 31 >> 31;
     $133 = $__c;
     $134 = $133;
     HEAP32[$134>>2] = $130;
     $135 = (($133) + 4)|0;
     $136 = $135;
     HEAP32[$136>>2] = $132;
     $137 = $__width;
     $138 = ($137|0)>(0);
     if ($138) {
      $139 = $__width;
      $8 = $27;
      $140 = $8;
      $141 = ((($140)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $9 = $27;
      $143 = $9;
      $144 = ((($143)) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = $142;
      $147 = $145;
      $148 = (($146) - ($147))|0;
      $149 = Math_imul($139, $148)|0;
      $150 = ($149|0)<(0);
      $151 = $150 << 31 >> 31;
      $152 = $__c;
      $153 = $152;
      $154 = HEAP32[$153>>2]|0;
      $155 = (($152) + 4)|0;
      $156 = $155;
      $157 = HEAP32[$156>>2]|0;
      $158 = (_i64Add(($154|0),($157|0),($149|0),($151|0))|0);
      $159 = tempRet0;
      $160 = $__c;
      $161 = $160;
      HEAP32[$161>>2] = $158;
      $162 = (($160) + 4)|0;
      $163 = $162;
      HEAP32[$163>>2] = $159;
      break;
     }
     $10 = $27;
     $164 = $10;
     $165 = ((($164)) + 12|0);
     $166 = HEAP32[$165>>2]|0;
     $11 = $27;
     $167 = $11;
     $168 = ((($167)) + 16|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = ($166|0)!=($169|0);
     if ($170) {
      $171 = ((($27)) + 68|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ((($27)) + 32|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = ((($27)) + 36|0);
      $176 = HEAP32[$175>>2]|0;
      $12 = $27;
      $177 = $12;
      $178 = ((($177)) + 12|0);
      $179 = HEAP32[$178>>2]|0;
      $13 = $27;
      $180 = $13;
      $181 = ((($180)) + 8|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = $179;
      $184 = $182;
      $185 = (($183) - ($184))|0;
      $15 = $172;
      $16 = $__state;
      $17 = $174;
      $18 = $176;
      $19 = $185;
      $186 = $15;
      $187 = HEAP32[$186>>2]|0;
      $188 = ((($187)) + 32|0);
      $189 = HEAP32[$188>>2]|0;
      $190 = $16;
      $191 = $17;
      $192 = $18;
      $193 = $19;
      $194 = (FUNCTION_TABLE_iiiiii[$189 & 1023]($186,$190,$191,$192,$193)|0);
      $__off = $194;
      $195 = ((($27)) + 36|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ((($27)) + 32|0);
      $198 = HEAP32[$197>>2]|0;
      $199 = $196;
      $200 = $198;
      $201 = (($199) - ($200))|0;
      $202 = $__off;
      $203 = (($201) - ($202))|0;
      $204 = ($203|0)<(0);
      $205 = $204 << 31 >> 31;
      $206 = $__c;
      $207 = $206;
      $208 = HEAP32[$207>>2]|0;
      $209 = (($206) + 4)|0;
      $210 = $209;
      $211 = HEAP32[$210>>2]|0;
      $212 = (_i64Add(($208|0),($211|0),($203|0),($205|0))|0);
      $213 = tempRet0;
      $214 = $__c;
      $215 = $214;
      HEAP32[$215>>2] = $212;
      $216 = (($214) + 4)|0;
      $217 = $216;
      HEAP32[$217>>2] = $213;
      $__update_st = 1;
     }
    }
   } while(0);
   $218 = ((($27)) + 64|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = $__c;
   $221 = $220;
   $222 = HEAP32[$221>>2]|0;
   $223 = (($220) + 4)|0;
   $224 = $223;
   $225 = HEAP32[$224>>2]|0;
   $226 = (_i64Subtract(0,0,($222|0),($225|0))|0);
   $227 = tempRet0;
   $228 = (_fseeko(($219|0),($226|0),1)|0);
   $229 = ($228|0)!=(0);
   if ($229) {
    $25 = -1;
    $245 = $25;
    STACKTOP = sp;return ($245|0);
   }
   $230 = $__update_st;
   $231 = $230&1;
   if ($231) {
    $232 = ((($27)) + 72|0);
    ;HEAP32[$232>>2]=HEAP32[$__state>>2]|0;HEAP32[$232+4>>2]=HEAP32[$__state+4>>2]|0;
   }
   $233 = ((($27)) + 32|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = ((($27)) + 40|0);
   HEAP32[$235>>2] = $234;
   $236 = ((($27)) + 36|0);
   HEAP32[$236>>2] = $234;
   $20 = $27;
   $21 = 0;
   $22 = 0;
   $23 = 0;
   $237 = $20;
   $238 = $21;
   $239 = ((($237)) + 8|0);
   HEAP32[$239>>2] = $238;
   $240 = $22;
   $241 = ((($237)) + 12|0);
   HEAP32[$241>>2] = $240;
   $242 = $23;
   $243 = ((($237)) + 16|0);
   HEAP32[$243>>2] = $242;
   $244 = ((($27)) + 92|0);
   HEAP32[$244>>2] = 0;
  }
 }
 $25 = 0;
 $245 = $25;
 STACKTOP = sp;return ($245|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__1buf = 0, $__c = 0, $__inext = 0, $__initial = 0, $__nmemb = 0, $__nmemb1 = 0, $__nr = 0, $__r = 0, $__unget_sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $20 = sp + 8|0;
 $23 = sp + 327|0;
 $31 = sp;
 $34 = sp + 326|0;
 $__1buf = sp + 324|0;
 $71 = sp + 48|0;
 $72 = sp + 44|0;
 $73 = sp + 28|0;
 $74 = sp + 24|0;
 $__inext = sp + 12|0;
 $70 = $this;
 $75 = $70;
 $76 = ((($75)) + 64|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)==(0|0);
 if ($78) {
  $79 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $69 = $79;
  $364 = $69;
  STACKTOP = sp;return ($364|0);
 }
 $80 = (__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($75)|0);
 $81 = $80&1;
 $__initial = $81;
 $68 = $75;
 $82 = $68;
 $83 = ((($82)) + 12|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($84|0)==(0|0);
 if ($85) {
  $86 = ((($__1buf)) + 1|0);
  $87 = ((($__1buf)) + 1|0);
  $59 = $75;
  $60 = $__1buf;
  $61 = $86;
  $62 = $87;
  $88 = $59;
  $89 = $60;
  $90 = ((($88)) + 8|0);
  HEAP32[$90>>2] = $89;
  $91 = $61;
  $92 = ((($88)) + 12|0);
  HEAP32[$92>>2] = $91;
  $93 = $62;
  $94 = ((($88)) + 16|0);
  HEAP32[$94>>2] = $93;
 }
 $95 = $__initial;
 $96 = $95&1;
 if ($96) {
  $120 = 0;
 } else {
  $57 = $75;
  $97 = $57;
  $98 = ((($97)) + 16|0);
  $99 = HEAP32[$98>>2]|0;
  $48 = $75;
  $100 = $48;
  $101 = ((($100)) + 8|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $99;
  $104 = $102;
  $105 = (($103) - ($104))|0;
  $106 = (($105|0) / 2)&-1;
  HEAP32[$71>>2] = $106;
  HEAP32[$72>>2] = 4;
  $32 = $71;
  $33 = $72;
  $107 = $32;
  $108 = $33;
  ;HEAP8[$31>>0]=HEAP8[$34>>0]|0;
  $29 = $107;
  $30 = $108;
  $109 = $30;
  $110 = $29;
  $26 = $31;
  $27 = $109;
  $28 = $110;
  $111 = $27;
  $112 = HEAP32[$111>>2]|0;
  $113 = $28;
  $114 = HEAP32[$113>>2]|0;
  $115 = ($112>>>0)<($114>>>0);
  $116 = $30;
  $117 = $29;
  $118 = $115 ? $116 : $117;
  $119 = HEAP32[$118>>2]|0;
  $120 = $119;
 }
 $__unget_sz = $120;
 $121 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $__c = $121;
 $14 = $75;
 $122 = $14;
 $123 = ((($122)) + 12|0);
 $124 = HEAP32[$123>>2]|0;
 $0 = $75;
 $125 = $0;
 $126 = ((($125)) + 16|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($124|0)==($127|0);
 do {
  if ($128) {
   $1 = $75;
   $129 = $1;
   $130 = ((($129)) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   $2 = $75;
   $132 = $2;
   $133 = ((($132)) + 16|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $__unget_sz;
   $136 = (0 - ($135))|0;
   $137 = (($134) + ($136)|0);
   $138 = $__unget_sz;
   $139 = $138;
   _memmove(($131|0),($137|0),($139|0))|0;
   $140 = ((($75)) + 98|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&1;
   if ($142) {
    $3 = $75;
    $143 = $3;
    $144 = ((($143)) + 16|0);
    $145 = HEAP32[$144>>2]|0;
    $4 = $75;
    $146 = $4;
    $147 = ((($146)) + 8|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = $145;
    $150 = $148;
    $151 = (($149) - ($150))|0;
    $152 = $__unget_sz;
    $153 = (($151) - ($152))|0;
    $__nmemb = $153;
    $5 = $75;
    $154 = $5;
    $155 = ((($154)) + 8|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = $__unget_sz;
    $158 = (($156) + ($157)|0);
    $159 = $__nmemb;
    $160 = ((($75)) + 64|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = (_fread(($158|0),1,($159|0),($161|0))|0);
    $__nmemb = $162;
    $163 = $__nmemb;
    $164 = ($163|0)!=(0);
    if (!($164)) {
     break;
    }
    $6 = $75;
    $165 = $6;
    $166 = ((($165)) + 8|0);
    $167 = HEAP32[$166>>2]|0;
    $7 = $75;
    $168 = $7;
    $169 = ((($168)) + 8|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = $__unget_sz;
    $172 = (($170) + ($171)|0);
    $8 = $75;
    $173 = $8;
    $174 = ((($173)) + 8|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = $__unget_sz;
    $177 = (($175) + ($176)|0);
    $178 = $__nmemb;
    $179 = (($177) + ($178)|0);
    $9 = $75;
    $10 = $167;
    $11 = $172;
    $12 = $179;
    $180 = $9;
    $181 = $10;
    $182 = ((($180)) + 8|0);
    HEAP32[$182>>2] = $181;
    $183 = $11;
    $184 = ((($180)) + 12|0);
    HEAP32[$184>>2] = $183;
    $185 = $12;
    $186 = ((($180)) + 16|0);
    HEAP32[$186>>2] = $185;
    $13 = $75;
    $187 = $13;
    $188 = ((($187)) + 12|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = HEAP8[$189>>0]|0;
    $191 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($190)|0);
    $__c = $191;
    break;
   }
   $192 = ((($75)) + 32|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = ((($75)) + 36|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = ((($75)) + 40|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = ((($75)) + 36|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = $197;
   $201 = $199;
   $202 = (($200) - ($201))|0;
   _memmove(($193|0),($195|0),($202|0))|0;
   $203 = ((($75)) + 32|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = ((($75)) + 40|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = ((($75)) + 36|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = $206;
   $210 = $208;
   $211 = (($209) - ($210))|0;
   $212 = (($204) + ($211)|0);
   $213 = ((($75)) + 36|0);
   HEAP32[$213>>2] = $212;
   $214 = ((($75)) + 32|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = ((($75)) + 32|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = ((($75)) + 44|0);
   $219 = ($217|0)==($218|0);
   if ($219) {
    $223 = 8;
   } else {
    $220 = ((($75)) + 52|0);
    $221 = HEAP32[$220>>2]|0;
    $223 = $221;
   }
   $222 = (($215) + ($223)|0);
   $224 = ((($75)) + 40|0);
   HEAP32[$224>>2] = $222;
   $225 = ((($75)) + 60|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = $__unget_sz;
   $228 = (($226) - ($227))|0;
   HEAP32[$73>>2] = $228;
   $229 = ((($75)) + 40|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = ((($75)) + 36|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = $230;
   $234 = $232;
   $235 = (($233) - ($234))|0;
   HEAP32[$74>>2] = $235;
   $21 = $73;
   $22 = $74;
   $236 = $21;
   $237 = $22;
   ;HEAP8[$20>>0]=HEAP8[$23>>0]|0;
   $18 = $236;
   $19 = $237;
   $238 = $19;
   $239 = $18;
   $15 = $20;
   $16 = $238;
   $17 = $239;
   $240 = $16;
   $241 = HEAP32[$240>>2]|0;
   $242 = $17;
   $243 = HEAP32[$242>>2]|0;
   $244 = ($241>>>0)<($243>>>0);
   $245 = $19;
   $246 = $18;
   $247 = $244 ? $245 : $246;
   $248 = HEAP32[$247>>2]|0;
   $__nmemb1 = $248;
   $249 = ((($75)) + 80|0);
   $250 = ((($75)) + 72|0);
   ;HEAP32[$249>>2]=HEAP32[$250>>2]|0;HEAP32[$249+4>>2]=HEAP32[$250+4>>2]|0;
   $251 = ((($75)) + 36|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = $__nmemb1;
   $254 = ((($75)) + 64|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = (_fread(($252|0),1,($253|0),($255|0))|0);
   $__nr = $256;
   $257 = $__nr;
   $258 = ($257|0)!=(0);
   if ($258) {
    $259 = ((($75)) + 68|0);
    $260 = HEAP32[$259>>2]|0;
    $261 = ($260|0)!=(0|0);
    if (!($261)) {
     $262 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($262);
     ___cxa_throw(($262|0),(672|0),(152|0));
     // unreachable;
    }
    $263 = ((($75)) + 36|0);
    $264 = HEAP32[$263>>2]|0;
    $265 = $__nr;
    $266 = (($264) + ($265)|0);
    $267 = ((($75)) + 40|0);
    HEAP32[$267>>2] = $266;
    $268 = ((($75)) + 68|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = ((($75)) + 72|0);
    $271 = ((($75)) + 32|0);
    $272 = HEAP32[$271>>2]|0;
    $273 = ((($75)) + 40|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = ((($75)) + 36|0);
    $24 = $75;
    $276 = $24;
    $277 = ((($276)) + 8|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = $__unget_sz;
    $280 = (($278) + ($279)|0);
    $25 = $75;
    $281 = $25;
    $282 = ((($281)) + 8|0);
    $283 = HEAP32[$282>>2]|0;
    $284 = ((($75)) + 60|0);
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + ($285)|0);
    $35 = $269;
    $36 = $270;
    $37 = $272;
    $38 = $274;
    $39 = $275;
    $40 = $280;
    $41 = $286;
    $42 = $__inext;
    $287 = $35;
    $288 = HEAP32[$287>>2]|0;
    $289 = ((($288)) + 16|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = $36;
    $292 = $37;
    $293 = $38;
    $294 = $39;
    $295 = $40;
    $296 = $41;
    $297 = $42;
    $298 = (FUNCTION_TABLE_iiiiiiiii[$290 & 511]($287,$291,$292,$293,$294,$295,$296,$297)|0);
    $__r = $298;
    $299 = $__r;
    $300 = ($299|0)==(3);
    if ($300) {
     $301 = ((($75)) + 32|0);
     $302 = HEAP32[$301>>2]|0;
     $303 = ((($75)) + 32|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = ((($75)) + 40|0);
     $306 = HEAP32[$305>>2]|0;
     $43 = $75;
     $44 = $302;
     $45 = $304;
     $46 = $306;
     $307 = $43;
     $308 = $44;
     $309 = ((($307)) + 8|0);
     HEAP32[$309>>2] = $308;
     $310 = $45;
     $311 = ((($307)) + 12|0);
     HEAP32[$311>>2] = $310;
     $312 = $46;
     $313 = ((($307)) + 16|0);
     HEAP32[$313>>2] = $312;
     $47 = $75;
     $314 = $47;
     $315 = ((($314)) + 12|0);
     $316 = HEAP32[$315>>2]|0;
     $317 = HEAP8[$316>>0]|0;
     $318 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($317)|0);
     $__c = $318;
     break;
    }
    $319 = HEAP32[$__inext>>2]|0;
    $49 = $75;
    $320 = $49;
    $321 = ((($320)) + 8|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = $__unget_sz;
    $324 = (($322) + ($323)|0);
    $325 = ($319|0)!=($324|0);
    if ($325) {
     $50 = $75;
     $326 = $50;
     $327 = ((($326)) + 8|0);
     $328 = HEAP32[$327>>2]|0;
     $51 = $75;
     $329 = $51;
     $330 = ((($329)) + 8|0);
     $331 = HEAP32[$330>>2]|0;
     $332 = $__unget_sz;
     $333 = (($331) + ($332)|0);
     $334 = HEAP32[$__inext>>2]|0;
     $52 = $75;
     $53 = $328;
     $54 = $333;
     $55 = $334;
     $335 = $52;
     $336 = $53;
     $337 = ((($335)) + 8|0);
     HEAP32[$337>>2] = $336;
     $338 = $54;
     $339 = ((($335)) + 12|0);
     HEAP32[$339>>2] = $338;
     $340 = $55;
     $341 = ((($335)) + 16|0);
     HEAP32[$341>>2] = $340;
     $56 = $75;
     $342 = $56;
     $343 = ((($342)) + 12|0);
     $344 = HEAP32[$343>>2]|0;
     $345 = HEAP8[$344>>0]|0;
     $346 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($345)|0);
     $__c = $346;
    }
   }
  } else {
   $58 = $75;
   $347 = $58;
   $348 = ((($347)) + 12|0);
   $349 = HEAP32[$348>>2]|0;
   $350 = HEAP8[$349>>0]|0;
   $351 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($350)|0);
   $__c = $351;
  }
 } while(0);
 $63 = $75;
 $352 = $63;
 $353 = ((($352)) + 8|0);
 $354 = HEAP32[$353>>2]|0;
 $355 = ($354|0)==($__1buf|0);
 if ($355) {
  $64 = $75;
  $65 = 0;
  $66 = 0;
  $67 = 0;
  $356 = $64;
  $357 = $65;
  $358 = ((($356)) + 8|0);
  HEAP32[$358>>2] = $357;
  $359 = $66;
  $360 = ((($356)) + 12|0);
  HEAP32[$360>>2] = $359;
  $361 = $67;
  $362 = ((($356)) + 16|0);
  HEAP32[$362>>2] = $361;
 }
 $363 = $__c;
 $69 = $363;
 $364 = $69;
 STACKTOP = sp;return ($364|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = $this;
 $10 = $__c;
 $11 = $9;
 $12 = ((($11)) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 do {
  if ($14) {
   $7 = $11;
   $15 = $7;
   $16 = ((($15)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $6 = $11;
   $18 = $6;
   $19 = ((($18)) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($17>>>0)<($20>>>0);
   if ($21) {
    $22 = $10;
    $23 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
    $24 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($22,$23)|0);
    if ($24) {
     $3 = $11;
     $4 = -1;
     $25 = $3;
     $26 = $4;
     $27 = ((($25)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (($28) + ($26)|0);
     HEAP32[$27>>2] = $29;
     $30 = $10;
     $31 = (__ZNSt3__111char_traitsIcE7not_eofEi($30)|0);
     $8 = $31;
     $56 = $8;
     STACKTOP = sp;return ($56|0);
    }
    $32 = ((($11)) + 88|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 & 16;
    $35 = ($34|0)!=(0);
    if (!($35)) {
     $36 = $10;
     $37 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($36)|0);
     $0 = $11;
     $38 = $0;
     $39 = ((($38)) + 12|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ((($40)) + -1|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = (__ZNSt3__111char_traitsIcE2eqEcc($37,$42)|0);
     if (!($43)) {
      break;
     }
    }
    $1 = $11;
    $2 = -1;
    $44 = $1;
    $45 = $2;
    $46 = ((($44)) + 12|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + ($45)|0);
    HEAP32[$46>>2] = $48;
    $49 = $10;
    $50 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($49)|0);
    $5 = $11;
    $51 = $5;
    $52 = ((($51)) + 12|0);
    $53 = HEAP32[$52>>2]|0;
    HEAP8[$53>>0] = $50;
    $54 = $10;
    $8 = $54;
    $56 = $8;
    STACKTOP = sp;return ($56|0);
   }
  }
 } while(0);
 $55 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $8 = $55;
 $56 = $8;
 STACKTOP = sp;return ($56|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__1buf = 0, $__e = 0, $__epb_save = 0, $__extbe = 0, $__nmemb = 0, $__nmemb1 = 0, $__nmemb2 = 0, $__pb_save = 0, $__r = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__1buf = sp + 200|0;
 $__extbe = sp + 16|0;
 $__e = sp + 8|0;
 $40 = $this;
 $41 = $__c;
 $42 = $40;
 $43 = ((($42)) + 64|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0|0);
 if ($45) {
  $46 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $39 = $46;
  $225 = $39;
  STACKTOP = sp;return ($225|0);
 }
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($42);
 $38 = $42;
 $47 = $38;
 $48 = ((($47)) + 20|0);
 $49 = HEAP32[$48>>2]|0;
 $__pb_save = $49;
 $37 = $42;
 $50 = $37;
 $51 = ((($50)) + 28|0);
 $52 = HEAP32[$51>>2]|0;
 $__epb_save = $52;
 $53 = $41;
 $54 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $55 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($53,$54)|0);
 if (!($55)) {
  $33 = $42;
  $56 = $33;
  $57 = ((($56)) + 24|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)==(0|0);
  if ($59) {
   $60 = ((($__1buf)) + 1|0);
   $22 = $42;
   $23 = $__1buf;
   $24 = $60;
   $61 = $22;
   $62 = $23;
   $63 = ((($61)) + 24|0);
   HEAP32[$63>>2] = $62;
   $64 = ((($61)) + 20|0);
   HEAP32[$64>>2] = $62;
   $65 = $24;
   $66 = ((($61)) + 28|0);
   HEAP32[$66>>2] = $65;
  }
  $67 = $41;
  $68 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($67)|0);
  $21 = $42;
  $69 = $21;
  $70 = ((($69)) + 24|0);
  $71 = HEAP32[$70>>2]|0;
  HEAP8[$71>>0] = $68;
  $16 = $42;
  $17 = 1;
  $72 = $16;
  $73 = $17;
  $74 = ((($72)) + 24|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) + ($73)|0);
  HEAP32[$74>>2] = $76;
 }
 $6 = $42;
 $77 = $6;
 $78 = ((($77)) + 24|0);
 $79 = HEAP32[$78>>2]|0;
 $3 = $42;
 $80 = $3;
 $81 = ((($80)) + 20|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($79|0)!=($82|0);
 if ($83) {
  $84 = ((($42)) + 98|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&1;
  L13: do {
   if ($86) {
    $0 = $42;
    $87 = $0;
    $88 = ((($87)) + 24|0);
    $89 = HEAP32[$88>>2]|0;
    $1 = $42;
    $90 = $1;
    $91 = ((($90)) + 20|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = $89;
    $94 = $92;
    $95 = (($93) - ($94))|0;
    $__nmemb = $95;
    $2 = $42;
    $96 = $2;
    $97 = ((($96)) + 20|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = $__nmemb;
    $100 = ((($42)) + 64|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (_fwrite(($98|0),1,($99|0),($101|0))|0);
    $103 = $__nmemb;
    $104 = ($102|0)!=($103|0);
    if ($104) {
     $105 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $105;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
   } else {
    $106 = ((($42)) + 32|0);
    $107 = HEAP32[$106>>2]|0;
    HEAP32[$__extbe>>2] = $107;
    while(1) {
     $108 = ((($42)) + 68|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)!=(0|0);
     if (!($110)) {
      label = 13;
      break;
     }
     $112 = ((($42)) + 68|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = ((($42)) + 72|0);
     $4 = $42;
     $115 = $4;
     $116 = ((($115)) + 20|0);
     $117 = HEAP32[$116>>2]|0;
     $5 = $42;
     $118 = $5;
     $119 = ((($118)) + 24|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = ((($42)) + 32|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = ((($42)) + 32|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($42)) + 52|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($124) + ($126)|0);
     $7 = $113;
     $8 = $114;
     $9 = $117;
     $10 = $120;
     $11 = $__e;
     $12 = $122;
     $13 = $127;
     $14 = $__extbe;
     $128 = $7;
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($129)) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = $8;
     $133 = $9;
     $134 = $10;
     $135 = $11;
     $136 = $12;
     $137 = $13;
     $138 = $14;
     $139 = (FUNCTION_TABLE_iiiiiiiii[$131 & 511]($128,$132,$133,$134,$135,$136,$137,$138)|0);
     $__r = $139;
     $140 = HEAP32[$__e>>2]|0;
     $15 = $42;
     $141 = $15;
     $142 = ((($141)) + 20|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($140|0)==($143|0);
     if ($144) {
      label = 15;
      break;
     }
     $146 = $__r;
     $147 = ($146|0)==(3);
     if ($147) {
      $18 = $42;
      $148 = $18;
      $149 = ((($148)) + 24|0);
      $150 = HEAP32[$149>>2]|0;
      $19 = $42;
      $151 = $19;
      $152 = ((($151)) + 20|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = $150;
      $155 = $153;
      $156 = (($154) - ($155))|0;
      $__nmemb1 = $156;
      $20 = $42;
      $157 = $20;
      $158 = ((($157)) + 20|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = $__nmemb1;
      $161 = ((($42)) + 64|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = (_fwrite(($159|0),1,($160|0),($162|0))|0);
      $164 = $__nmemb1;
      $165 = ($163|0)!=($164|0);
      if ($165) {
       label = 18;
       break;
      }
     } else {
      $167 = $__r;
      $168 = ($167|0)==(0);
      $169 = $__r;
      $170 = ($169|0)==(1);
      $or$cond = $168 | $170;
      if (!($or$cond)) {
       label = 24;
       break;
      }
      $171 = HEAP32[$__extbe>>2]|0;
      $172 = ((($42)) + 32|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = $171;
      $175 = $173;
      $176 = (($174) - ($175))|0;
      $__nmemb2 = $176;
      $177 = ((($42)) + 32|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = $__nmemb2;
      $180 = ((($42)) + 64|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = (_fwrite(($178|0),1,($179|0),($181|0))|0);
      $183 = $__nmemb2;
      $184 = ($182|0)!=($183|0);
      if ($184) {
       label = 21;
       break;
      }
      $186 = $__r;
      $187 = ($186|0)==(1);
      if ($187) {
       $188 = HEAP32[$__e>>2]|0;
       $25 = $42;
       $189 = $25;
       $190 = ((($189)) + 24|0);
       $191 = HEAP32[$190>>2]|0;
       $26 = $42;
       $27 = $188;
       $28 = $191;
       $192 = $26;
       $193 = $27;
       $194 = ((($192)) + 24|0);
       HEAP32[$194>>2] = $193;
       $195 = ((($192)) + 20|0);
       HEAP32[$195>>2] = $193;
       $196 = $28;
       $197 = ((($192)) + 28|0);
       HEAP32[$197>>2] = $196;
       $29 = $42;
       $198 = $29;
       $199 = ((($198)) + 28|0);
       $200 = HEAP32[$199>>2]|0;
       $30 = $42;
       $201 = $30;
       $202 = ((($201)) + 20|0);
       $203 = HEAP32[$202>>2]|0;
       $204 = $200;
       $205 = $203;
       $206 = (($204) - ($205))|0;
       $31 = $42;
       $32 = $206;
       $207 = $31;
       $208 = $32;
       $209 = ((($207)) + 24|0);
       $210 = HEAP32[$209>>2]|0;
       $211 = (($210) + ($208)|0);
       HEAP32[$209>>2] = $211;
      }
     }
     $213 = $__r;
     $214 = ($213|0)==(1);
     if (!($214)) {
      break L13;
     }
    }
    if ((label|0) == 13) {
     $111 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($111);
     ___cxa_throw(($111|0),(672|0),(152|0));
     // unreachable;
    }
    else if ((label|0) == 15) {
     $145 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $145;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
    else if ((label|0) == 18) {
     $166 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $166;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
    else if ((label|0) == 21) {
     $185 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $185;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
    else if ((label|0) == 24) {
     $212 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $212;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
   }
  } while(0);
  $215 = $__pb_save;
  $216 = $__epb_save;
  $34 = $42;
  $35 = $215;
  $36 = $216;
  $217 = $34;
  $218 = $35;
  $219 = ((($217)) + 24|0);
  HEAP32[$219>>2] = $218;
  $220 = ((($217)) + 20|0);
  HEAP32[$220>>2] = $218;
  $221 = $36;
  $222 = ((($217)) + 28|0);
  HEAP32[$222>>2] = $221;
 }
 $223 = $41;
 $224 = (__ZNSt3__111char_traitsIcE7not_eofEi($223)|0);
 $39 = $224;
 $225 = $39;
 STACKTOP = sp;return ($225|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = $this;
 $14 = $13;
 $15 = ((($14)) + 92|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 16;
 $18 = ($17|0)!=(0);
 if ($18) {
  STACKTOP = sp;return;
 }
 $9 = $14;
 $10 = 0;
 $11 = 0;
 $12 = 0;
 $19 = $9;
 $20 = $10;
 $21 = ((($19)) + 8|0);
 HEAP32[$21>>2] = $20;
 $22 = $11;
 $23 = ((($19)) + 12|0);
 HEAP32[$23>>2] = $22;
 $24 = $12;
 $25 = ((($19)) + 16|0);
 HEAP32[$25>>2] = $24;
 $26 = ((($14)) + 52|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27>>>0)>(8);
 do {
  if ($28) {
   $29 = ((($14)) + 98|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&1;
   if ($31) {
    $32 = ((($14)) + 32|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($14)) + 32|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ((($14)) + 52|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) - 1)|0;
    $39 = (($35) + ($38)|0);
    $0 = $14;
    $1 = $33;
    $2 = $39;
    $40 = $0;
    $41 = $1;
    $42 = ((($40)) + 24|0);
    HEAP32[$42>>2] = $41;
    $43 = ((($40)) + 20|0);
    HEAP32[$43>>2] = $41;
    $44 = $2;
    $45 = ((($40)) + 28|0);
    HEAP32[$45>>2] = $44;
    break;
   } else {
    $46 = ((($14)) + 56|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ((($14)) + 56|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($14)) + 60|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($51) - 1)|0;
    $53 = (($49) + ($52)|0);
    $3 = $14;
    $4 = $47;
    $5 = $53;
    $54 = $3;
    $55 = $4;
    $56 = ((($54)) + 24|0);
    HEAP32[$56>>2] = $55;
    $57 = ((($54)) + 20|0);
    HEAP32[$57>>2] = $55;
    $58 = $5;
    $59 = ((($54)) + 28|0);
    HEAP32[$59>>2] = $58;
    break;
   }
  } else {
   $6 = $14;
   $7 = 0;
   $8 = 0;
   $60 = $6;
   $61 = $7;
   $62 = ((($60)) + 24|0);
   HEAP32[$62>>2] = $61;
   $63 = ((($60)) + 20|0);
   HEAP32[$63>>2] = $61;
   $64 = $8;
   $65 = ((($60)) + 28|0);
   HEAP32[$65>>2] = $64;
  }
 } while(0);
 $66 = ((($14)) + 92|0);
 HEAP32[$66>>2] = 16;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp + 48|0;
 $12 = $this;
 $13 = $12;
 $14 = ((($13)) + 92|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 8;
 $17 = ($16|0)!=(0);
 if ($17) {
  $$expand_i1_val2 = 0;
  HEAP8[$11>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$11>>0]|0;
  $66 = $$pre_trunc&1;
  STACKTOP = sp;return ($66|0);
 }
 $8 = $13;
 $9 = 0;
 $10 = 0;
 $18 = $8;
 $19 = $9;
 $20 = ((($18)) + 24|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($18)) + 20|0);
 HEAP32[$21>>2] = $19;
 $22 = $10;
 $23 = ((($18)) + 28|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($13)) + 98|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&1;
 if ($26) {
  $27 = ((($13)) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($13)) + 32|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($13)) + 52|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + ($32)|0);
  $34 = ((($13)) + 32|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($13)) + 52|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + ($37)|0);
  $0 = $13;
  $1 = $28;
  $2 = $33;
  $3 = $38;
  $39 = $0;
  $40 = $1;
  $41 = ((($39)) + 8|0);
  HEAP32[$41>>2] = $40;
  $42 = $2;
  $43 = ((($39)) + 12|0);
  HEAP32[$43>>2] = $42;
  $44 = $3;
  $45 = ((($39)) + 16|0);
  HEAP32[$45>>2] = $44;
 } else {
  $46 = ((($13)) + 56|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($13)) + 56|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($13)) + 60|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + ($51)|0);
  $53 = ((($13)) + 56|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ((($13)) + 60|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($54) + ($56)|0);
  $4 = $13;
  $5 = $47;
  $6 = $52;
  $7 = $57;
  $58 = $4;
  $59 = $5;
  $60 = ((($58)) + 8|0);
  HEAP32[$60>>2] = $59;
  $61 = $6;
  $62 = ((($58)) + 12|0);
  HEAP32[$62>>2] = $61;
  $63 = $7;
  $64 = ((($58)) + 16|0);
  HEAP32[$64>>2] = $63;
 }
 $65 = ((($13)) + 92|0);
 HEAP32[$65>>2] = 8;
 $$expand_i1_val = 1;
 HEAP8[$11>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$11>>0]|0;
 $66 = $$pre_trunc&1;
 STACKTOP = sp;return ($66|0);
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(7,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($5);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($5);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh21PolyMesh_ArrayKernelTIN4DGPC14OpenMeshTraitsINS1_7Vector3IdEEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8OpenMesh9PolyMeshTINS_13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS3_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEEEC2Ev($1);
 $2 = 3264;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN4DGPC6MeshOMINS_7Vector3IdEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(43,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZNK8OpenMesh9PolyMeshTINS_13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS3_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEEE16calc_face_normalENS_10FaceHandleE($agg$result,$this,$_fh) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $_fh = $_fh|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fv_it = 0, $n = 0;
 var $norm = 0.0, $p0 = 0, $p0i = 0, $p1 = 0, $p1i = 0, $p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy4 = sp + 240|0;
 $$byval_copy3 = sp + 236|0;
 $$byval_copy2 = sp + 232|0;
 $$byval_copy1 = sp + 228|0;
 $$byval_copy = sp + 224|0;
 $1 = sp + 216|0;
 $2 = sp + 212|0;
 $fv_it = sp + 192|0;
 $3 = sp + 188|0;
 $p0 = sp + 96|0;
 $4 = sp + 184|0;
 $p0i = sp + 72|0;
 $p1 = sp + 48|0;
 $5 = sp + 180|0;
 $p1i = sp + 24|0;
 $n = sp + 168|0;
 $p2 = sp;
 $6 = sp + 164|0;
 $7 = sp + 152|0;
 $8 = sp + 140|0;
 $9 = sp + 128|0;
 $10 = sp + 120|0;
 $0 = $this;
 $11 = $0;
 ;HEAP32[$1>>2]=HEAP32[$_fh>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
 $12 = (__ZNK8OpenMesh11ArrayKernel15halfedge_handleENS_10FaceHandleE($11,$$byval_copy)|0);
 HEAP32[$2>>2] = $12;
 $13 = (__ZNK8OpenMesh10BaseHandle8is_validEv($2)|0);
 if (!($13)) {
  ___assert_fail((12824|0),(12862|0),103,(12927|0));
  // unreachable;
 }
 ;HEAP32[$3>>2]=HEAP32[$_fh>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;
 __ZNK8OpenMesh16PolyConnectivity8cfv_iterENS_10FaceHandleE($fv_it,$11,$$byval_copy1);
 $14 = (__ZNK8OpenMesh9Iterators29GenericCirculatorT_DEPRECATEDINS_16PolyConnectivityENS_10FaceHandleENS_12VertexHandleEXadL_ZNKS0_22GenericCirculatorBaseTIS2_E14toVertexHandleEvEEEdeEv($fv_it)|0);
 HEAP32[$4>>2] = $14;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
 $15 = (__ZNK8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEE5pointENS_12VertexHandleE($11,$$byval_copy2)|0);
 __ZN4DGPC7Vector3IdEC2ERKS1_($p0,$15);
 __ZN4DGPC7Vector3IdEC2ERKS1_($p0i,$p0);
 $16 = (__ZN8OpenMesh9Iterators29GenericCirculatorT_DEPRECATEDINS_16PolyConnectivityENS_10FaceHandleENS_12VertexHandleEXadL_ZNKS0_22GenericCirculatorBaseTIS2_E14toVertexHandleEvEEEppEv($fv_it)|0);
 $17 = (__ZNK8OpenMesh9Iterators29GenericCirculatorT_DEPRECATEDINS_16PolyConnectivityENS_10FaceHandleENS_12VertexHandleEXadL_ZNKS0_22GenericCirculatorBaseTIS2_E14toVertexHandleEvEEE8is_validEv($16)|0);
 if (!($17)) {
  __ZN8OpenMesh7VectorTIfLi3EEC2Efff($agg$result,0.0,0.0,0.0);
  STACKTOP = sp;return;
 }
 $18 = (__ZNK8OpenMesh9Iterators29GenericCirculatorT_DEPRECATEDINS_16PolyConnectivityENS_10FaceHandleENS_12VertexHandleEXadL_ZNKS0_22GenericCirculatorBaseTIS2_E14toVertexHandleEvEEEdeEv($fv_it)|0);
 HEAP32[$5>>2] = $18;
 ;HEAP32[$$byval_copy3>>2]=HEAP32[$5>>2]|0;
 $19 = (__ZNK8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEE5pointENS_12VertexHandleE($11,$$byval_copy3)|0);
 __ZN4DGPC7Vector3IdEC2ERKS1_($p1,$19);
 __ZN4DGPC7Vector3IdEC2ERKS1_($p1i,$p1);
 $20 = (__ZN8OpenMesh9Iterators29GenericCirculatorT_DEPRECATEDINS_16PolyConnectivityENS_10FaceHandleENS_12VertexHandleEXadL_ZNKS0_22GenericCirculatorBaseTIS2_E14toVertexHandleEvEEEppEv($fv_it)|0);
 $21 = (__ZNK8OpenMesh9Iterators29GenericCirculatorT_DEPRECATEDINS_16PolyConnectivityENS_10FaceHandleENS_12VertexHandleEXadL_ZNKS0_22GenericCirculatorBaseTIS2_E14toVertexHandleEvEEE8is_validEv($20)|0);
 if (!($21)) {
  __ZN8OpenMesh7VectorTIfLi3EEC2Efff($agg$result,0.0,0.0,0.0);
  STACKTOP = sp;return;
 }
 __ZN8OpenMesh7VectorTIfLi3EEC2Efff($n,0.0,0.0,0.0);
 while(1) {
  $22 = (__ZNK8OpenMesh9Iterators29GenericCirculatorT_DEPRECATEDINS_16PolyConnectivityENS_10FaceHandleENS_12VertexHandleEXadL_ZNKS0_22GenericCirculatorBaseTIS2_E14toVertexHandleEvEEE8is_validEv($fv_it)|0);
  if (!($22)) {
   break;
  }
  $23 = (__ZNK8OpenMesh9Iterators29GenericCirculatorT_DEPRECATEDINS_16PolyConnectivityENS_10FaceHandleENS_12VertexHandleEXadL_ZNKS0_22GenericCirculatorBaseTIS2_E14toVertexHandleEvEEEdeEv($fv_it)|0);
  HEAP32[$6>>2] = $23;
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$6>>2]|0;
  $24 = (__ZNK8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEE5pointENS_12VertexHandleE($11,$$byval_copy4)|0);
  __ZN4DGPC7Vector3IdEC2ERKS1_($p2,$24);
  __ZNK8OpenMesh9PolyMeshTINS_13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS3_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEEE16calc_face_normalERKS6_SD_SD_($7,$11,$p0,$p1,$p2);
  $25 = (__ZN8OpenMesh11vector_castINS_7VectorTIfLi3EEES2_EENS_13vector_casterIT_T0_E11return_typeERKS5_($7)|0);
  (__ZN8OpenMesh7VectorTIfLi3EEpLERKS1_($n,$25)|0);
  (__ZN4DGPC7Vector3IdEaSERKS1_($p0,$p1)|0);
  (__ZN4DGPC7Vector3IdEaSERKS1_($p1,$p2)|0);
  (__ZN8OpenMesh9Iterators29GenericCirculatorT_DEPRECATEDINS_16PolyConnectivityENS_10FaceHandleENS_12VertexHandleEXadL_ZNKS0_22GenericCirculatorBaseTIS2_E14toVertexHandleEvEEEppEv($fv_it)|0);
 }
 __ZNK8OpenMesh9PolyMeshTINS_13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS3_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEEE16calc_face_normalERKS6_SD_SD_($8,$11,$p0,$p1,$p0i);
 $26 = (__ZN8OpenMesh11vector_castINS_7VectorTIfLi3EEES2_EENS_13vector_casterIT_T0_E11return_typeERKS5_($8)|0);
 (__ZN8OpenMesh7VectorTIfLi3EEpLERKS1_($n,$26)|0);
 __ZNK8OpenMesh9PolyMeshTINS_13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS3_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEEE16calc_face_normalERKS6_SD_SD_($9,$11,$p1,$p0i,$p1i);
 $27 = (__ZN8OpenMesh11vector_castINS_7VectorTIfLi3EEES2_EENS_13vector_casterIT_T0_E11return_typeERKS5_($9)|0);
 (__ZN8OpenMesh7VectorTIfLi3EEpLERKS1_($n,$27)|0);
 $28 = (+__ZNK8OpenMesh7VectorTIfLi3EE6lengthEv($n));
 $norm = $28;
 $29 = $norm;
 $30 = $29 != 0.0;
 if ($30) {
  $31 = $norm;
  $32 = 1.0 / $31;
  HEAPF32[$10>>2] = $32;
  (__ZN8OpenMesh7VectorTIfLi3EEmLERKf($n,$10)|0);
  ;HEAP32[$agg$result>>2]=HEAP32[$n>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$n+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$n+8>>2]|0;
  STACKTOP = sp;return;
 } else {
  __ZN8OpenMesh7VectorTIfLi3EEC2Efff($agg$result,0.0,0.0,0.0);
  STACKTOP = sp;return;
 }
}
function __ZNK8OpenMesh9PolyMeshTINS_13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS3_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEEE20calc_halfedge_normalENS_14HalfedgeHandleEd($agg$result,$this,$_heh,$_feature_angle) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $_heh = $_heh|0;
 $_feature_angle = +$_feature_angle;
 var $$byval_copy = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $__annotator$i1 = 0, $fhs = 0, $heh = 0, $i = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy16 = sp + 408|0;
 $$byval_copy15 = sp + 404|0;
 $$byval_copy14 = sp + 400|0;
 $$byval_copy13 = sp + 396|0;
 $$byval_copy12 = sp + 392|0;
 $$byval_copy11 = sp + 388|0;
 $$byval_copy10 = sp + 384|0;
 $$byval_copy9 = sp + 380|0;
 $$byval_copy8 = sp + 376|0;
 $$byval_copy7 = sp + 372|0;
 $$byval_copy6 = sp + 368|0;
 $$byval_copy5 = sp + 364|0;
 $$byval_copy4 = sp + 360|0;
 $$byval_copy3 = sp + 356|0;
 $$byval_copy = sp + 352|0;
 $__annotator$i1 = sp + 413|0;
 $__annotator$i = sp + 412|0;
 $29 = sp + 232|0;
 $33 = sp + 216|0;
 $37 = sp + 200|0;
 $42 = sp + 180|0;
 $45 = sp + 168|0;
 $48 = sp + 156|0;
 $49 = sp + 152|0;
 $50 = sp + 148|0;
 $54 = sp + 136|0;
 $fhs = sp + 124|0;
 $heh = sp + 112|0;
 $57 = sp + 108|0;
 $58 = sp + 104|0;
 $59 = sp + 100|0;
 $60 = sp + 96|0;
 $61 = sp + 92|0;
 $62 = sp + 88|0;
 $63 = sp + 84|0;
 $64 = sp + 80|0;
 $65 = sp + 76|0;
 $66 = sp + 72|0;
 $67 = sp + 68|0;
 $68 = sp + 64|0;
 $69 = sp + 60|0;
 $70 = sp + 56|0;
 $71 = sp + 52|0;
 $72 = sp + 48|0;
 $73 = sp + 44|0;
 $74 = sp + 40|0;
 $75 = sp + 36|0;
 $76 = sp + 32|0;
 $n = sp + 20|0;
 $77 = sp + 12|0;
 $52 = $this;
 $53 = $_feature_angle;
 $79 = $52;
 ;HEAP32[$54>>2]=HEAP32[$_heh>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$54>>2]|0;
 $80 = (__ZNK8OpenMesh16PolyConnectivity11is_boundaryENS_14HalfedgeHandleE($79,$$byval_copy)|0);
 if ($80) {
  __ZN8OpenMesh7VectorTIfLi3EEC2Efff($agg$result,0.0,0.0,0.0);
  STACKTOP = sp;return;
 }
 $51 = $fhs;
 $81 = $51;
 $47 = $81;
 $82 = $47;
 $46 = $82;
 $27 = $29;
 $28 = -1;
 $83 = $27;
 HEAP32[$83>>2] = 0;
 $84 = HEAP32[$29>>2]|0;
 HEAP32[$48>>2] = $84;
 $30 = $48;
 HEAP32[$82>>2] = 0;
 $85 = ((($82)) + 4|0);
 $31 = $33;
 $32 = -1;
 $86 = $31;
 HEAP32[$86>>2] = 0;
 $87 = HEAP32[$33>>2]|0;
 HEAP32[$49>>2] = $87;
 $34 = $49;
 HEAP32[$85>>2] = 0;
 $88 = ((($82)) + 8|0);
 $35 = $37;
 $36 = -1;
 $89 = $35;
 HEAP32[$89>>2] = 0;
 $90 = HEAP32[$37>>2]|0;
 HEAP32[$50>>2] = $90;
 $38 = $50;
 $44 = $88;
 HEAP32[$45>>2] = 0;
 $91 = $44;
 $43 = $45;
 $92 = $43;
 $93 = HEAP32[$92>>2]|0;
 $41 = $91;
 HEAP32[$42>>2] = $93;
 $94 = $41;
 $40 = $94;
 $39 = $42;
 $95 = $39;
 $96 = HEAP32[$95>>2]|0;
 HEAP32[$94>>2] = $96;
 __THREW__ = 0;
 invoke_vii(576,($fhs|0),10);
 $97 = __THREW__; __THREW__ = 0;
 $98 = $97&1;
 L5: do {
  if (!($98)) {
   ;HEAP32[$heh>>2]=HEAP32[$_heh>>2]|0;
   while(1) {
    ;HEAP32[$58>>2]=HEAP32[$heh>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy3>>2]=HEAP32[$58>>2]|0;
    $99 = (invoke_iii(577,($79|0),($$byval_copy3|0))|0);
    $100 = __THREW__; __THREW__ = 0;
    $101 = $100&1;
    if ($101) {
     break L5;
    }
    HEAP32[$57>>2] = $99;
    $25 = $fhs;
    $26 = $57;
    $102 = $25;
    $103 = ((($102)) + 4|0);
    $104 = HEAP32[$103>>2]|0;
    $24 = $102;
    $105 = $24;
    $106 = ((($105)) + 8|0);
    $23 = $106;
    $107 = $23;
    $22 = $107;
    $108 = $22;
    $109 = HEAP32[$108>>2]|0;
    $110 = ($104|0)!=($109|0);
    if ($110) {
     __ZNSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator$i,$102,1);
     $21 = $102;
     $111 = $21;
     $112 = ((($111)) + 8|0);
     $20 = $112;
     $113 = $20;
     $19 = $113;
     $114 = $19;
     $115 = ((($102)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $18 = $116;
     $117 = $18;
     $118 = $26;
     $15 = $114;
     $16 = $117;
     $17 = $118;
     $119 = $16;
     $120 = $17;
     ;HEAP32[$119>>2]=HEAP32[$120>>2]|0;
     __ZNSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
     $121 = ((($102)) + 4|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = ((($122)) + 4|0);
     HEAP32[$121>>2] = $123;
    } else {
     $124 = $26;
     __THREW__ = 0;
     invoke_vii(578,($102|0),($124|0));
     $125 = __THREW__; __THREW__ = 0;
     $126 = $125&1;
     if ($126) {
      break L5;
     }
    }
    ;HEAP32[$60>>2]=HEAP32[$heh>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy4>>2]=HEAP32[$60>>2]|0;
    $127 = (invoke_iii(530,($79|0),($$byval_copy4|0))|0);
    $128 = __THREW__; __THREW__ = 0;
    $129 = $128&1;
    if ($129) {
     break L5;
    }
    HEAP32[$59>>2] = $127;
    ;HEAP32[$heh>>2]=HEAP32[$59>>2]|0;
    ;HEAP32[$62>>2]=HEAP32[$heh>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy5>>2]=HEAP32[$62>>2]|0;
    $130 = (invoke_iii(525,($79|0),($$byval_copy5|0))|0);
    $131 = __THREW__; __THREW__ = 0;
    $132 = $131&1;
    if ($132) {
     break L5;
    }
    HEAP32[$61>>2] = $130;
    ;HEAP32[$heh>>2]=HEAP32[$61>>2]|0;
    __THREW__ = 0;
    $133 = (invoke_iii(534,($heh|0),($_heh|0))|0);
    $134 = __THREW__; __THREW__ = 0;
    $135 = $134&1;
    if ($135) {
     break L5;
    }
    if (!($133)) {
     break;
    }
    ;HEAP32[$63>>2]=HEAP32[$heh>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy6>>2]=HEAP32[$63>>2]|0;
    $136 = (invoke_iii(526,($79|0),($$byval_copy6|0))|0);
    $137 = __THREW__; __THREW__ = 0;
    $138 = $137&1;
    if ($138) {
     break L5;
    }
    if ($136) {
     break;
    }
    ;HEAP32[$64>>2]=HEAP32[$heh>>2]|0;
    $139 = $53;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy7>>2]=HEAP32[$64>>2]|0;
    $140 = (invoke_iiid(579,($79|0),($$byval_copy7|0),(+$139))|0);
    $141 = __THREW__; __THREW__ = 0;
    $142 = $141&1;
    if ($142) {
     break L5;
    }
    $143 = $140 ^ 1;
    if (!($143)) {
     break;
    }
   }
   __THREW__ = 0;
   $144 = (invoke_iii(534,($heh|0),($_heh|0))|0);
   $145 = __THREW__; __THREW__ = 0;
   $146 = $145&1;
   if (!($146)) {
    L23: do {
     if ($144) {
      ;HEAP32[$65>>2]=HEAP32[$_heh>>2]|0;
      $147 = $53;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy8>>2]=HEAP32[$65>>2]|0;
      $148 = (invoke_iiid(579,($79|0),($$byval_copy8|0),(+$147))|0);
      $149 = __THREW__; __THREW__ = 0;
      $150 = $149&1;
      if ($150) {
       break L5;
      }
      if (!($148)) {
       ;HEAP32[$67>>2]=HEAP32[$_heh>>2]|0;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy9>>2]=HEAP32[$67>>2]|0;
       $151 = (invoke_iii(525,($79|0),($$byval_copy9|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break L5;
       }
       HEAP32[$66>>2] = $151;
       ;HEAP32[$heh>>2]=HEAP32[$66>>2]|0;
       ;HEAP32[$68>>2]=HEAP32[$heh>>2]|0;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy10>>2]=HEAP32[$68>>2]|0;
       $154 = (invoke_iii(526,($79|0),($$byval_copy10|0))|0);
       $155 = __THREW__; __THREW__ = 0;
       $156 = $155&1;
       if ($156) {
        break L5;
       }
       if (!($154)) {
        while(1) {
         ;HEAP32[$70>>2]=HEAP32[$heh>>2]|0;
         __THREW__ = 0;
         ;HEAP32[$$byval_copy11>>2]=HEAP32[$70>>2]|0;
         $157 = (invoke_iii(577,($79|0),($$byval_copy11|0))|0);
         $158 = __THREW__; __THREW__ = 0;
         $159 = $158&1;
         if ($159) {
          break L5;
         }
         HEAP32[$69>>2] = $157;
         $13 = $fhs;
         $14 = $69;
         $160 = $13;
         $161 = ((($160)) + 4|0);
         $162 = HEAP32[$161>>2]|0;
         $12 = $160;
         $163 = $12;
         $164 = ((($163)) + 8|0);
         $11 = $164;
         $165 = $11;
         $10 = $165;
         $166 = $10;
         $167 = HEAP32[$166>>2]|0;
         $168 = ($162|0)!=($167|0);
         if ($168) {
          __ZNSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator$i1,$160,1);
          $9 = $160;
          $169 = $9;
          $170 = ((($169)) + 8|0);
          $8 = $170;
          $171 = $8;
          $7 = $171;
          $172 = $7;
          $173 = ((($160)) + 4|0);
          $174 = HEAP32[$173>>2]|0;
          $6 = $174;
          $175 = $6;
          $176 = $14;
          $3 = $172;
          $4 = $175;
          $5 = $176;
          $177 = $4;
          $178 = $5;
          ;HEAP32[$177>>2]=HEAP32[$178>>2]|0;
          __ZNSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i1);
          $179 = ((($160)) + 4|0);
          $180 = HEAP32[$179>>2]|0;
          $181 = ((($180)) + 4|0);
          HEAP32[$179>>2] = $181;
         } else {
          $182 = $14;
          __THREW__ = 0;
          invoke_vii(578,($160|0),($182|0));
          $183 = __THREW__; __THREW__ = 0;
          $184 = $183&1;
          if ($184) {
           break L5;
          }
         }
         ;HEAP32[$72>>2]=HEAP32[$heh>>2]|0;
         __THREW__ = 0;
         ;HEAP32[$$byval_copy12>>2]=HEAP32[$72>>2]|0;
         $185 = (invoke_iii(527,($79|0),($$byval_copy12|0))|0);
         $186 = __THREW__; __THREW__ = 0;
         $187 = $186&1;
         if ($187) {
          break L5;
         }
         HEAP32[$71>>2] = $185;
         ;HEAP32[$heh>>2]=HEAP32[$71>>2]|0;
         ;HEAP32[$74>>2]=HEAP32[$heh>>2]|0;
         __THREW__ = 0;
         ;HEAP32[$$byval_copy13>>2]=HEAP32[$74>>2]|0;
         $188 = (invoke_iii(525,($79|0),($$byval_copy13|0))|0);
         $189 = __THREW__; __THREW__ = 0;
         $190 = $189&1;
         if ($190) {
          break L5;
         }
         HEAP32[$73>>2] = $188;
         ;HEAP32[$heh>>2]=HEAP32[$73>>2]|0;
         ;HEAP32[$75>>2]=HEAP32[$heh>>2]|0;
         __THREW__ = 0;
         ;HEAP32[$$byval_copy14>>2]=HEAP32[$75>>2]|0;
         $191 = (invoke_iii(526,($79|0),($$byval_copy14|0))|0);
         $192 = __THREW__; __THREW__ = 0;
         $193 = $192&1;
         if ($193) {
          break L5;
         }
         if ($191) {
          break L23;
         }
         ;HEAP32[$76>>2]=HEAP32[$heh>>2]|0;
         $194 = $53;
         __THREW__ = 0;
         ;HEAP32[$$byval_copy15>>2]=HEAP32[$76>>2]|0;
         $195 = (invoke_iiid(579,($79|0),($$byval_copy15|0),(+$194))|0);
         $196 = __THREW__; __THREW__ = 0;
         $197 = $196&1;
         if ($197) {
          break L5;
         }
         $198 = $195 ^ 1;
         if (!($198)) {
          break;
         }
        }
       }
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_viddd(581,($n|0),0.0,0.0,0.0);
    $203 = __THREW__; __THREW__ = 0;
    $204 = $203&1;
    if (!($204)) {
     $i = 0;
     while(1) {
      $205 = $i;
      $2 = $fhs;
      $206 = $2;
      $207 = ((($206)) + 4|0);
      $208 = HEAP32[$207>>2]|0;
      $209 = HEAP32[$206>>2]|0;
      $210 = $208;
      $211 = $209;
      $212 = (($210) - ($211))|0;
      $213 = (($212|0) / 4)&-1;
      $214 = ($205>>>0)<($213>>>0);
      if (!($214)) {
       break;
      }
      $215 = $i;
      $0 = $fhs;
      $1 = $215;
      $216 = $0;
      $217 = $1;
      $218 = HEAP32[$216>>2]|0;
      $219 = (($218) + ($217<<2)|0);
      ;HEAP32[$77>>2]=HEAP32[$219>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy16>>2]=HEAP32[$77>>2]|0;
      $220 = (invoke_iii(582,($79|0),($$byval_copy16|0))|0);
      $221 = __THREW__; __THREW__ = 0;
      $222 = $221&1;
      if ($222) {
       break L5;
      }
      __THREW__ = 0;
      (invoke_iii(583,($n|0),($220|0))|0);
      $223 = __THREW__; __THREW__ = 0;
      $224 = $223&1;
      if ($224) {
       break L5;
      }
      $225 = $i;
      $226 = (($225) + 1)|0;
      $i = $226;
     }
     __THREW__ = 0;
     $227 = (invoke_ii(584,($n|0))|0);
     $228 = __THREW__; __THREW__ = 0;
     $229 = $228&1;
     if (!($229)) {
      ;HEAP32[$agg$result>>2]=HEAP32[$227>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$227+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$227+8>>2]|0;
      $78 = 1;
      __ZNSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEED2Ev($fhs);
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 $199 = ___cxa_find_matching_catch()|0;
 $200 = tempRet0;
 $55 = $199;
 $56 = $200;
 __THREW__ = 0;
 invoke_vi(580,($fhs|0));
 $201 = __THREW__; __THREW__ = 0;
 $202 = $201&1;
 if ($202) {
  $232 = ___cxa_find_matching_catch(0|0)|0;
  $233 = tempRet0;
  ___clang_call_terminate($232);
  // unreachable;
 } else {
  $230 = $55;
  $231 = $56;
  ___resumeException($230|0);
  // unreachable;
 }
}
function __ZN8OpenMesh7VectorTIfLi3EEC2Efff($this,$v0,$v1,$v2) {
 $this = $this|0;
 $v0 = +$v0;
 $v1 = +$v1;
 $v2 = +$v2;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v0;
 $2 = $v1;
 $3 = $v2;
 $4 = $0;
 $5 = $1;
 HEAPF32[$4>>2] = $5;
 $6 = $2;
 $7 = ((($4)) + 4|0);
 HEAPF32[$7>>2] = $6;
 $8 = $3;
 $9 = ((($4)) + 8|0);
 HEAPF32[$9>>2] = $8;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp + 8|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $14 = $10;
 $8 = $13;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = ((($17)) + 8|0);
 $5 = $18;
 $19 = $5;
 $4 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$16>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 4)&-1;
 $27 = ($14>>>0)>($26>>>0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $3 = $13;
 $28 = $3;
 $29 = ((($28)) + 8|0);
 $2 = $29;
 $30 = $2;
 $1 = $30;
 $31 = $1;
 $__a = $31;
 $32 = $10;
 $0 = $13;
 $33 = $0;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$33>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 4)&-1;
 $41 = $__a;
 __ZNSt3__114__split_bufferIN8OpenMesh10FaceHandleERNS_9allocatorIS2_EEEC2EjjS5_($__v,$32,$40,$41);
 __THREW__ = 0;
 invoke_vii(585,($13|0),($__v|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if (!($43)) {
  __ZNSt3__114__split_bufferIN8OpenMesh10FaceHandleERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $44 = ___cxa_find_matching_catch()|0;
 $45 = tempRet0;
 $11 = $44;
 $12 = $45;
 __THREW__ = 0;
 invoke_vi(586,($__v|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $50 = ___cxa_find_matching_catch(0|0)|0;
  $51 = tempRet0;
  ___clang_call_terminate($50);
  // unreachable;
 } else {
  $48 = $11;
  $49 = $12;
  ___resumeException($48|0);
  // unreachable;
 }
}
function __ZNSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 72|0;
 $23 = sp + 60|0;
 $__v = sp + 12|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = ((($33)) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 4)&-1;
 $45 = (($44) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $45;
 $46 = $21;
 $47 = (__ZNKSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEE8max_sizeEv($46)|0);
 $__ms$i = $47;
 $48 = HEAP32[$22>>2]|0;
 $49 = $__ms$i;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($46);
 }
 $19 = $46;
 $51 = $19;
 $18 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = ((($53)) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$52>>2]|0;
 $59 = $57;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 4)&-1;
 $__cap$i = $62;
 $63 = $__cap$i;
 $64 = $__ms$i;
 $65 = (($64>>>0) / 2)&-1;
 $66 = ($63>>>0)>=($65>>>0);
 if ($66) {
  $67 = $__ms$i;
  $20 = $67;
 } else {
  $68 = $__cap$i;
  $69 = $68<<1;
  HEAP32[$23>>2] = $69;
  $12 = $23;
  $13 = $22;
  $70 = $12;
  $71 = $13;
  ;HEAP8[$11>>0]=HEAP8[$14>>0]|0;
  $9 = $70;
  $10 = $71;
  $72 = $9;
  $73 = $10;
  $6 = $11;
  $7 = $72;
  $8 = $73;
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75>>>0)<($77>>>0);
  $79 = $10;
  $80 = $9;
  $81 = $78 ? $79 : $80;
  $82 = HEAP32[$81>>2]|0;
  $20 = $82;
 }
 $83 = $20;
 $5 = $32;
 $84 = $5;
 $85 = ((($84)) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$84>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 4)&-1;
 $92 = $__a;
 __ZNSt3__114__split_bufferIN8OpenMesh10FaceHandleERNS_9allocatorIS2_EEEC2EjjS5_($__v,$83,$91,$92);
 $93 = $__a;
 $94 = ((($__v)) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $4 = $95;
 $96 = $4;
 $97 = $29;
 $3 = $97;
 $98 = $3;
 $0 = $93;
 $1 = $96;
 $2 = $98;
 $99 = $1;
 $100 = $2;
 ;HEAP32[$99>>2]=HEAP32[$100>>2]|0;
 $101 = ((($__v)) + 8|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ((($102)) + 4|0);
 HEAP32[$101>>2] = $103;
 __THREW__ = 0;
 invoke_vii(585,($32|0),($__v|0));
 $104 = __THREW__; __THREW__ = 0;
 $105 = $104&1;
 if (!($105)) {
  __ZNSt3__114__split_bufferIN8OpenMesh10FaceHandleERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $106 = ___cxa_find_matching_catch()|0;
 $107 = tempRet0;
 $30 = $106;
 $31 = $107;
 __THREW__ = 0;
 invoke_vi(586,($__v|0));
 $108 = __THREW__; __THREW__ = 0;
 $109 = $108&1;
 if ($109) {
  $112 = ___cxa_find_matching_catch(0|0)|0;
  $113 = tempRet0;
  ___clang_call_terminate($112);
  // unreachable;
 } else {
  $110 = $30;
  $111 = $31;
  ___resumeException($110|0);
  // unreachable;
 }
}
function __ZNK8OpenMesh9PolyMeshTINS_13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS3_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEEE25is_estimated_feature_edgeENS_14HalfedgeHandleEd($this,$_heh,$_feature_angle) {
 $this = $this|0;
 $_heh = $_heh|0;
 $_feature_angle = +$_feature_angle;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val9 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $eh = 0, $fh0 = 0, $fh1 = 0, $fn0 = 0, $fn1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy7 = sp + 108|0;
 $$byval_copy6 = sp + 104|0;
 $$byval_copy5 = sp + 100|0;
 $$byval_copy4 = sp + 96|0;
 $$byval_copy3 = sp + 92|0;
 $$byval_copy2 = sp + 88|0;
 $$byval_copy1 = sp + 84|0;
 $$byval_copy = sp + 80|0;
 $0 = sp + 112|0;
 $eh = sp + 72|0;
 $3 = sp + 68|0;
 $4 = sp + 64|0;
 $5 = sp + 60|0;
 $fh0 = sp + 56|0;
 $6 = sp + 52|0;
 $fh1 = sp + 48|0;
 $7 = sp + 44|0;
 $8 = sp + 40|0;
 $fn0 = sp + 28|0;
 $9 = sp + 24|0;
 $fn1 = sp + 12|0;
 $10 = sp + 8|0;
 $1 = $this;
 $2 = $_feature_angle;
 $11 = $1;
 ;HEAP32[$3>>2]=HEAP32[$_heh>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
 $12 = (__ZNK8OpenMesh11ArrayKernel11edge_handleENS_14HalfedgeHandleE($11,$$byval_copy)|0);
 HEAP32[$eh>>2] = $12;
 $13 = (__ZNK8OpenMesh11ArrayKernel15has_edge_statusEv($11)|0);
 if ($13) {
  ;HEAP32[$4>>2]=HEAP32[$eh>>2]|0;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$4>>2]|0;
  $14 = (__ZNK8OpenMesh11ArrayKernel6statusENS_10EdgeHandleE($11,$$byval_copy1)|0);
  $15 = (__ZNK8OpenMesh10Attributes10StatusInfo7featureEv($14)|0);
  if ($15) {
   $$expand_i1_val = 1;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $27 = $$pre_trunc&1;
   STACKTOP = sp;return ($27|0);
  }
 }
 ;HEAP32[$5>>2]=HEAP32[$eh>>2]|0;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$5>>2]|0;
 $16 = (__ZNK8OpenMesh16PolyConnectivity11is_boundaryENS_10EdgeHandleE($11,$$byval_copy2)|0);
 if ($16) {
  $$expand_i1_val9 = 0;
  HEAP8[$0>>0] = $$expand_i1_val9;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $27 = $$pre_trunc&1;
  STACKTOP = sp;return ($27|0);
 } else {
  ;HEAP32[$6>>2]=HEAP32[$_heh>>2]|0;
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$6>>2]|0;
  $17 = (__ZNK8OpenMesh11ArrayKernel11face_handleENS_14HalfedgeHandleE($11,$$byval_copy3)|0);
  HEAP32[$fh0>>2] = $17;
  ;HEAP32[$8>>2]=HEAP32[$_heh>>2]|0;
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$8>>2]|0;
  $18 = (__ZNK8OpenMesh11ArrayKernel24opposite_halfedge_handleENS_14HalfedgeHandleE($11,$$byval_copy4)|0);
  HEAP32[$7>>2] = $18;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$7>>2]|0;
  $19 = (__ZNK8OpenMesh11ArrayKernel11face_handleENS_14HalfedgeHandleE($11,$$byval_copy5)|0);
  HEAP32[$fh1>>2] = $19;
  ;HEAP32[$9>>2]=HEAP32[$fh0>>2]|0;
  ;HEAP32[$$byval_copy6>>2]=HEAP32[$9>>2]|0;
  $20 = (__ZNK8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEE6normalENS_10FaceHandleE($11,$$byval_copy6)|0);
  ;HEAP32[$fn0>>2]=HEAP32[$20>>2]|0;HEAP32[$fn0+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$fn0+8>>2]=HEAP32[$20+8>>2]|0;
  ;HEAP32[$10>>2]=HEAP32[$fh1>>2]|0;
  ;HEAP32[$$byval_copy7>>2]=HEAP32[$10>>2]|0;
  $21 = (__ZNK8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEE6normalENS_10FaceHandleE($11,$$byval_copy7)|0);
  ;HEAP32[$fn1>>2]=HEAP32[$21>>2]|0;HEAP32[$fn1+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$fn1+8>>2]=HEAP32[$21+8>>2]|0;
  $22 = (+__ZN8OpenMesh3dotIfLi3EEET_RKNS_7VectorTIS1_XT0_EEES5_($fn0,$fn1));
  $23 = $22;
  $24 = $2;
  $25 = (+Math_cos((+$24)));
  $26 = $23 < $25;
  $$expand_i1_val11 = $26&1;
  HEAP8[$0>>0] = $$expand_i1_val11;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $27 = $$pre_trunc&1;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function __ZNSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNK8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEE6normalENS_10FaceHandleE($this,$_fh) {
 $this = $this|0;
 $_fh = $_fh|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $1 = sp + 4|0;
 $2 = sp;
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 276|0);
 ;HEAP32[$1>>2]=HEAP32[$4>>2]|0;
 ;HEAP32[$2>>2]=HEAP32[$_fh>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;
 $5 = (__ZNK8OpenMesh10BaseKernel8propertyINS_7VectorTIfLi3EEEEENS_12FPropHandleTIT_E15const_referenceES6_NS_10FaceHandleE($3,$$byval_copy,$$byval_copy1)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN8OpenMesh7VectorTIfLi3EEpLERKS1_($this,$_rhs) {
 $this = $this|0;
 $_rhs = $_rhs|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_rhs;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8OpenMesh7VectorTIfLi3EEixEj($3,0)|0);
 $5 = +HEAPF32[$4>>2];
 $6 = +HEAPF32[$2>>2];
 $7 = $6 + $5;
 HEAPF32[$2>>2] = $7;
 $8 = $1;
 $9 = (__ZNK8OpenMesh7VectorTIfLi3EEixEj($8,1)|0);
 $10 = +HEAPF32[$9>>2];
 $11 = ((($2)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $12 + $10;
 HEAPF32[$11>>2] = $13;
 $14 = $1;
 $15 = (__ZNK8OpenMesh7VectorTIfLi3EEixEj($14,2)|0);
 $16 = +HEAPF32[$15>>2];
 $17 = ((($2)) + 8|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $18 + $16;
 HEAPF32[$17>>2] = $19;
 STACKTOP = sp;return ($2|0);
}
function __ZN8OpenMesh7VectorTIfLi3EE9normalizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $this;
 $2 = $0;
 $3 = (+__ZNK8OpenMesh7VectorTIfLi3EE4normEv($2));
 HEAPF32[$1>>2] = $3;
 (__ZN8OpenMesh7VectorTIfLi3EEdVERKf($2,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK8OpenMesh7VectorTIfLi3EE4normEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (+__ZNK8OpenMesh7VectorTIfLi3EE7sqrnormEv($1));
 $3 = $2;
 $4 = (+Math_sqrt((+$3)));
 $5 = $4;
 STACKTOP = sp;return (+$5);
}
function __ZN8OpenMesh7VectorTIfLi3EEdVERKf($this,$_s) {
 $this = $this|0;
 $_s = $_s|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_s;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 $5 = +HEAPF32[$2>>2];
 $6 = $5 / $4;
 HEAPF32[$2>>2] = $6;
 $7 = $1;
 $8 = +HEAPF32[$7>>2];
 $9 = ((($2)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $10 / $8;
 HEAPF32[$9>>2] = $11;
 $12 = $1;
 $13 = +HEAPF32[$12>>2];
 $14 = ((($2)) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $15 / $13;
 HEAPF32[$14>>2] = $16;
 STACKTOP = sp;return ($2|0);
}
function __ZNK8OpenMesh7VectorTIfLi3EE7sqrnormEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 $3 = +HEAPF32[$1>>2];
 $4 = $2 * $3;
 $5 = ((($1)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = ((($1)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $6 * $8;
 $10 = $4 + $9;
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $12 * $14;
 $16 = $10 + $15;
 STACKTOP = sp;return (+$16);
}
function __ZNK8OpenMesh7VectorTIfLi3EEixEj($this,$_i) {
 $this = $this|0;
 $_i = $_i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_i;
 $2 = $0;
 $3 = $1;
 $4 = ($3>>>0)<(3);
 if ($4) {
  $5 = $1;
  $6 = (($2) + ($5<<2)|0);
  STACKTOP = sp;return ($6|0);
 } else {
  ___assert_fail((12629|0),(12636|0),216,(11945|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNK8OpenMesh10BaseKernel8propertyINS_7VectorTIfLi3EEEEENS_12FPropHandleTIT_E15const_referenceES6_NS_10FaceHandleE($this,$_ph,$_fh) {
 $this = $this|0;
 $_ph = $_ph|0;
 $_fh = $_fh|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $1 = sp;
 $0 = $this;
 $2 = $0;
 $3 = ((($2)) + 52|0);
 ;HEAP32[$1>>2]=HEAP32[$_ph>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNK8OpenMesh17PropertyContainer8propertyINS_7VectorTIfLi3EEEEERKNS_9PropertyTIT_EENS_15BasePropHandleTIS5_EE($3,$$byval_copy)|0);
 $5 = (__ZNK8OpenMesh10BaseHandle3idxEv($_fh)|0);
 $6 = (__ZNK8OpenMesh9PropertyTINS_7VectorTIfLi3EEEEixEi($4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK8OpenMesh17PropertyContainer8propertyINS_7VectorTIfLi3EEEEERKNS_9PropertyTIT_EENS_15BasePropHandleTIS5_EE($this,$_h) {
 $this = $this|0;
 $_h = $_h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = $this;
 $6 = $5;
 $7 = (__ZNK8OpenMesh10BaseHandle3idxEv($_h)|0);
 $8 = ($7|0)>=(0);
 if (!($8)) {
  ___assert_fail((11956|0),(12008|0),166,(12082|0));
  // unreachable;
 }
 $9 = (__ZNK8OpenMesh10BaseHandle3idxEv($_h)|0);
 $10 = ((($6)) + 4|0);
 $4 = $10;
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$11>>2]|0;
 $15 = $13;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = (($17|0) / 4)&-1;
 $19 = ($9|0)<($18|0);
 if (!($19)) {
  ___assert_fail((11956|0),(12008|0),166,(12082|0));
  // unreachable;
 }
 $20 = ((($6)) + 4|0);
 $21 = (__ZNK8OpenMesh10BaseHandle3idxEv($_h)|0);
 $0 = $20;
 $1 = $21;
 $22 = $0;
 $23 = $1;
 $24 = HEAP32[$22>>2]|0;
 $25 = (($24) + ($23<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  ___assert_fail((12091|0),(12008|0),167,(12082|0));
  // unreachable;
 }
 $28 = ((($6)) + 4|0);
 $29 = (__ZNK8OpenMesh10BaseHandle3idxEv($_h)|0);
 $2 = $28;
 $3 = $29;
 $30 = $2;
 $31 = $3;
 $32 = HEAP32[$30>>2]|0;
 $33 = (($32) + ($31<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0|0);
 if ($35) {
  $37 = 0;
 } else {
  $36 = (___dynamic_cast($34,__ZTIN8OpenMesh12BasePropertyE,120,0)|0);
  $37 = $36;
 }
 $p = $37;
 $38 = $p;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = $p;
  STACKTOP = sp;return ($40|0);
 } else {
  ___assert_fail((12121|0),(12008|0),172,(12082|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNK8OpenMesh9PropertyTINS_7VectorTIfLi3EEEEixEi($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $_idx;
 $5 = $3;
 $6 = $4;
 $7 = ((($5)) + 20|0);
 $2 = $7;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$8>>2]|0;
 $12 = $10;
 $13 = $11;
 $14 = (($12) - ($13))|0;
 $15 = (($14|0) / 12)&-1;
 $16 = ($6>>>0)<($15>>>0);
 if ($16) {
  $17 = ((($5)) + 20|0);
  $18 = $4;
  $0 = $17;
  $1 = $18;
  $19 = $0;
  $20 = $1;
  $21 = HEAP32[$19>>2]|0;
  $22 = (($21) + (($20*12)|0)|0);
  STACKTOP = sp;return ($22|0);
 } else {
  ___assert_fail((11852|0),(11880|0),202,(11945|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__113__vector_baseIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 12|0;
 $32 = sp + 4|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = ((($40)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = ((($45)) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = ((($40)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -4|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = ((($55)) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = ((($61)) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $70 = (($69|0) / 4)&-1;
 $25 = $58;
 $26 = $59;
 $27 = $70;
 $71 = $25;
 $72 = $26;
 $73 = $27;
 $22 = $71;
 $23 = $72;
 $24 = $73;
 $74 = $23;
 $21 = $74;
 $75 = $21;
 __ZdlPv($75);
 STACKTOP = sp;return;
}
function __ZNK8OpenMesh11ArrayKernel11edge_handleENS_14HalfedgeHandleE($this,$_heh) {
 $this = $this|0;
 $_heh = $_heh|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = $this;
 $2 = (__ZNK8OpenMesh10BaseHandle3idxEv($_heh)|0);
 $3 = $2 >> 1;
 __ZN8OpenMesh10EdgeHandleC2Ei($0,$3);
 $4 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZNK8OpenMesh11ArrayKernel15has_edge_statusEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 128|0);
 $3 = (__ZNK8OpenMesh10BaseHandle8is_validEv($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK8OpenMesh11ArrayKernel6statusENS_10EdgeHandleE($this,$_eh) {
 $this = $this|0;
 $_eh = $_eh|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $1 = sp + 4|0;
 $2 = sp;
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 128|0);
 ;HEAP32[$1>>2]=HEAP32[$4>>2]|0;
 ;HEAP32[$2>>2]=HEAP32[$_eh>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;
 $5 = (__ZNK8OpenMesh10BaseKernel8propertyINS_10Attributes10StatusInfoEEENS_12EPropHandleTIT_E15const_referenceES6_NS_10EdgeHandleE($3,$$byval_copy,$$byval_copy1)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZNK8OpenMesh10Attributes10StatusInfo7featureEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZNK8OpenMesh10Attributes10StatusInfo10is_bit_setEj($1,16)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK8OpenMesh16PolyConnectivity11is_boundaryENS_10EdgeHandleE($this,$_eh) {
 $this = $this|0;
 $_eh = $_eh|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy3 = sp + 32|0;
 $$byval_copy2 = sp + 28|0;
 $$byval_copy1 = sp + 24|0;
 $$byval_copy = sp + 20|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $0 = $this;
 $5 = $0;
 ;HEAP32[$2>>2]=HEAP32[$_eh>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
 $6 = (__ZNK8OpenMesh11ArrayKernel15halfedge_handleENS_10EdgeHandleEj($5,$$byval_copy,0)|0);
 HEAP32[$1>>2] = $6;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $7 = (__ZNK8OpenMesh16PolyConnectivity11is_boundaryENS_14HalfedgeHandleE($5,$$byval_copy1)|0);
 if ($7) {
  $10 = 1;
  STACKTOP = sp;return ($10|0);
 }
 ;HEAP32[$4>>2]=HEAP32[$_eh>>2]|0;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
 $8 = (__ZNK8OpenMesh11ArrayKernel15halfedge_handleENS_10EdgeHandleEj($5,$$byval_copy2,1)|0);
 HEAP32[$3>>2] = $8;
 ;HEAP32[$$byval_copy3>>2]=HEAP32[$3>>2]|0;
 $9 = (__ZNK8OpenMesh16PolyConnectivity11is_boundaryENS_14HalfedgeHandleE($5,$$byval_copy3)|0);
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function __ZN8OpenMesh3dotIfLi3EEET_RKNS_7VectorTIS1_XT0_EEES5_($_v1,$_v2) {
 $_v1 = $_v1|0;
 $_v2 = $_v2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_v1;
 $1 = $_v2;
 $2 = $0;
 $3 = $1;
 $4 = (+__ZNK8OpenMesh7VectorTIfLi3EEorERKS1_($2,$3));
 STACKTOP = sp;return (+$4);
}
function __ZNK8OpenMesh7VectorTIfLi3EEorERKS1_($this,$_rhs) {
 $this = $this|0;
 $_rhs = $_rhs|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $3 = 0.0;
 var $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $p = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_rhs;
 $2 = $0;
 $p = 0.0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = $p;
 $8 = $7 + $6;
 $p = $8;
 $9 = ((($2)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $10 * $13;
 $15 = $p;
 $16 = $15 + $14;
 $p = $16;
 $17 = ((($2)) + 8|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $1;
 $20 = ((($19)) + 8|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $18 * $21;
 $23 = $p;
 $24 = $23 + $22;
 $p = $24;
 $25 = $p;
 STACKTOP = sp;return (+$25);
}
function __ZNK8OpenMesh11ArrayKernel15halfedge_handleENS_10EdgeHandleEj($this,$_eh,$_i) {
 $this = $this|0;
 $_eh = $_eh|0;
 $_i = $_i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $1 = $this;
 $2 = $_i;
 $3 = $2;
 $4 = ($3>>>0)<=(1);
 if ($4) {
  $5 = (__ZNK8OpenMesh10BaseHandle3idxEv($_eh)|0);
  $6 = $5 << 1;
  $7 = $2;
  $8 = (($6) + ($7))|0;
  __ZN8OpenMesh14HalfedgeHandleC2Ei($0,$8);
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  ___assert_fail((12750|0),(12195|0),441,(12756|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNK8OpenMesh10Attributes10StatusInfo10is_bit_setEj($this,$_s) {
 $this = $this|0;
 $_s = $_s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_s;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3 & $4;
 $6 = ($5>>>0)>(0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK8OpenMesh10BaseKernel8propertyINS_10Attributes10StatusInfoEEENS_12EPropHandleTIT_E15const_referenceES6_NS_10EdgeHandleE($this,$_ph,$_eh) {
 $this = $this|0;
 $_ph = $_ph|0;
 $_eh = $_eh|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $1 = sp;
 $0 = $this;
 $2 = $0;
 $3 = ((($2)) + 36|0);
 ;HEAP32[$1>>2]=HEAP32[$_ph>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNK8OpenMesh17PropertyContainer8propertyINS_10Attributes10StatusInfoEEERKNS_9PropertyTIT_EENS_15BasePropHandleTIS5_EE($3,$$byval_copy)|0);
 $5 = (__ZNK8OpenMesh10BaseHandle3idxEv($_eh)|0);
 $6 = (__ZNK8OpenMesh9PropertyTINS_10Attributes10StatusInfoEEixEi($4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK8OpenMesh17PropertyContainer8propertyINS_10Attributes10StatusInfoEEERKNS_9PropertyTIT_EENS_15BasePropHandleTIS5_EE($this,$_h) {
 $this = $this|0;
 $_h = $_h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = $this;
 $6 = $5;
 $7 = (__ZNK8OpenMesh10BaseHandle3idxEv($_h)|0);
 $8 = ($7|0)>=(0);
 if (!($8)) {
  ___assert_fail((11956|0),(12008|0),166,(12082|0));
  // unreachable;
 }
 $9 = (__ZNK8OpenMesh10BaseHandle3idxEv($_h)|0);
 $10 = ((($6)) + 4|0);
 $4 = $10;
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$11>>2]|0;
 $15 = $13;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = (($17|0) / 4)&-1;
 $19 = ($9|0)<($18|0);
 if (!($19)) {
  ___assert_fail((11956|0),(12008|0),166,(12082|0));
  // unreachable;
 }
 $20 = ((($6)) + 4|0);
 $21 = (__ZNK8OpenMesh10BaseHandle3idxEv($_h)|0);
 $0 = $20;
 $1 = $21;
 $22 = $0;
 $23 = $1;
 $24 = HEAP32[$22>>2]|0;
 $25 = (($24) + ($23<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  ___assert_fail((12091|0),(12008|0),167,(12082|0));
  // unreachable;
 }
 $28 = ((($6)) + 4|0);
 $29 = (__ZNK8OpenMesh10BaseHandle3idxEv($_h)|0);
 $2 = $28;
 $3 = $29;
 $30 = $2;
 $31 = $3;
 $32 = HEAP32[$30>>2]|0;
 $33 = (($32) + ($31<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0|0);
 if ($35) {
  $37 = 0;
 } else {
  $36 = (___dynamic_cast($34,__ZTIN8OpenMesh12BasePropertyE,136,0)|0);
  $37 = $36;
 }
 $p = $37;
 $38 = $p;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = $p;
  STACKTOP = sp;return ($40|0);
 } else {
  ___assert_fail((12121|0),(12008|0),172,(12082|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNK8OpenMesh9PropertyTINS_10Attributes10StatusInfoEEixEi($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $_idx;
 $5 = $3;
 $6 = $4;
 $7 = ((($5)) + 20|0);
 $2 = $7;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$8>>2]|0;
 $12 = $10;
 $13 = $11;
 $14 = (($12) - ($13))|0;
 $15 = (($14|0) / 4)&-1;
 $16 = ($6>>>0)<($15>>>0);
 if ($16) {
  $17 = ((($5)) + 20|0);
  $18 = $4;
  $0 = $17;
  $1 = $18;
  $19 = $0;
  $20 = $1;
  $21 = HEAP32[$19>>2]|0;
  $22 = (($21) + ($20<<2)|0);
  STACKTOP = sp;return ($22|0);
 } else {
  ___assert_fail((11852|0),(11880|0),202,(11945|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh10EdgeHandleC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh10BaseHandleC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 77|0;
 $10 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $3 = $24;
 $25 = $3;
 ;HEAP8[$2>>0]=HEAP8[$4>>0]|0;
 $1 = $25;
 $26 = $1;
 $0 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $11 = $18;
 $12 = $19;
 $28 = $11;
 $29 = $12;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $8 = $28;
 $9 = $29;
 $30 = $9;
 $31 = $8;
 $5 = $10;
 $6 = $30;
 $7 = $31;
 $32 = $6;
 $33 = HEAP32[$32>>2]|0;
 $34 = $7;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $9;
 $38 = $8;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIN8OpenMesh10FaceHandleERNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 124|0;
 $8 = sp + 108|0;
 $22 = sp + 52|0;
 $29 = sp + 24|0;
 $34 = sp + 4|0;
 $35 = sp;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = ((($36)) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = ((($46)) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = ((($54)) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $64 = $63<<2;
  $14 = $64;
  $65 = $14;
  $66 = (__Znwj($65)|0);
  $69 = $66;
 } else {
  $20 = $22;
  $21 = -1;
  $67 = $20;
  HEAP32[$67>>2] = 0;
  $68 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $68;
  $23 = $35;
  $69 = 0;
 }
 HEAP32[$36>>2] = $69;
 $70 = HEAP32[$36>>2]|0;
 $71 = $32;
 $72 = (($70) + ($71<<2)|0);
 $73 = ((($36)) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = ((($36)) + 4|0);
 HEAP32[$74>>2] = $72;
 $75 = HEAP32[$36>>2]|0;
 $76 = $31;
 $77 = (($75) + ($76<<2)|0);
 $26 = $36;
 $78 = $26;
 $79 = ((($78)) + 12|0);
 $25 = $79;
 $80 = $25;
 $24 = $80;
 $81 = $24;
 HEAP32[$81>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN8OpenMesh10FaceHandleERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 8|0;
 $20 = sp + 125|0;
 $26 = sp;
 $29 = sp + 124|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26>>0]=HEAP8[$29>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = ((($38)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = ((($43)) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($38)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -4|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17>>0]=HEAP8[$20>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = ((($57)) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = ((($65)) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 4)&-1;
 $11 = $62;
 $12 = $63;
 $13 = $74;
 $75 = $11;
 $76 = $12;
 $77 = $13;
 $8 = $75;
 $9 = $76;
 $10 = $77;
 $78 = $9;
 $7 = $78;
 $79 = $7;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNK8OpenMesh11ArrayKernel15halfedge_handleENS_10FaceHandleE($this,$_fh) {
 $this = $this|0;
 $_fh = $_fh|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 12|0;
 $0 = sp + 8|0;
 $2 = sp;
 $1 = $this;
 $3 = $1;
 ;HEAP32[$2>>2]=HEAP32[$_fh>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
 $4 = (__ZNK8OpenMesh11ArrayKernel4faceENS_10FaceHandleE($3,$$byval_copy)|0);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function __ZNK8OpenMesh16PolyConnectivity8cfv_iterENS_10FaceHandleE($agg$result,$this,$_fh) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $_fh = $_fh|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $1 = sp;
 $0 = $this;
 $2 = $0;
 ;HEAP32[$1>>2]=HEAP32[$_fh>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
 __ZN8OpenMesh9Iterators29GenericCirculatorT_DEPRECATEDINS_16PolyConnectivityENS_10FaceHandleENS_12VertexHandleEXadL_ZNKS0_22GenericCirculatorBaseTIS2_E14toVertexHandleEvEEEC2ERKS2_S3_b($agg$result,$2,$$byval_copy,0);
 STACKTOP = sp;return;
}
function __ZNK8OpenMesh9Iterators29GenericCirculatorT_DEPRECATEDINS_16PolyConnectivityENS_10FaceHandleENS_12VertexHandleEXadL_ZNKS0_22GenericCirculatorBaseTIS2_E14toVertexHandleEvEEEdeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = (__ZNK8OpenMesh10BaseHandle8is_validEv($3)|0);
 if (!($4)) {
  ___assert_fail((13035|0),(12956|0),502,(13057|0));
  // unreachable;
 }
 $5 = (FUNCTION_TABLE_ii[((587)) & 1023]($2)|0);
 HEAP32[$0>>2] = $5;
 $6 = (__ZNK8OpenMesh10BaseHandle8is_validEv($0)|0);
 if ($6) {
  $7 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($7|0);
 } else {
  ___assert_fail((13067|0),(12956|0),504,(13057|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh9Iterators29GenericCirculatorT_DEPRECATEDINS_16PolyConnectivityENS_10FaceHandleENS_12VertexHandleEXadL_ZNKS0_22GenericCirculatorBaseTIS2_E14toVertexHandleEvEEEppEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($1)) + 8|0);
  $6 = ((($1)) + 4|0);
  $7 = ((($1)) + 12|0);
  __ZN8OpenMesh9Iterators44GenericCirculator_ValueHandleFnsT_DEPRECATEDINS_16PolyConnectivityENS_10FaceHandleENS_12VertexHandleEE9incrementEPKS2_RNS_14HalfedgeHandleES9_Ri($4,$5,$6,$7);
  STACKTOP = sp;return ($1|0);
 } else {
  ___assert_fail((12944|0),(12956|0),455,(13024|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNK8OpenMesh9Iterators29GenericCirculatorT_DEPRECATEDINS_16PolyConnectivityENS_10FaceHandleENS_12VertexHandleEXadL_ZNKS0_22GenericCirculatorBaseTIS2_E14toVertexHandleEvEEE8is_validEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = ((($1)) + 4|0);
 $4 = ((($1)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN8OpenMesh9Iterators44GenericCirculator_ValueHandleFnsT_DEPRECATEDINS_16PolyConnectivityENS_10FaceHandleENS_12VertexHandleEE8is_validERKNS_14HalfedgeHandleES8_i($2,$3,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK8OpenMesh9PolyMeshTINS_13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS3_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEEE16calc_face_normalERKS6_SD_SD_($agg$result,$this,$_p0,$_p1,$_p2) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $_p0 = $_p0|0;
 $_p1 = $_p1|0;
 $_p2 = $_p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, $norm = 0.0, $p1p0 = 0, $p1p2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p1p0 = sp + 56|0;
 $4 = sp + 44|0;
 $p1p2 = sp + 32|0;
 $5 = sp + 20|0;
 $n = sp + 8|0;
 $6 = sp;
 $0 = $this;
 $1 = $_p0;
 $2 = $_p1;
 $3 = $_p2;
 $7 = $1;
 __ZN8OpenMesh11vector_castINS_7VectorTIfLi3EEEN4DGPC7Vector3IdEEEENS_13vector_casterIT_T0_E11return_typeERKS8_($p1p0,$7);
 $8 = $2;
 __ZN8OpenMesh11vector_castINS_7VectorTIfLi3EEEN4DGPC7Vector3IdEEEENS_13vector_casterIT_T0_E11return_typeERKS8_($4,$8);
 (__ZN8OpenMesh7VectorTIfLi3EEmIERKS1_($p1p0,$4)|0);
 $9 = $3;
 __ZN8OpenMesh11vector_castINS_7VectorTIfLi3EEEN4DGPC7Vector3IdEEEENS_13vector_casterIT_T0_E11return_typeERKS8_($p1p2,$9);
 $10 = $2;
 __ZN8OpenMesh11vector_castINS_7VectorTIfLi3EEEN4DGPC7Vector3IdEEEENS_13vector_casterIT_T0_E11return_typeERKS8_($5,$10);
 (__ZN8OpenMesh7VectorTIfLi3EEmIERKS1_($p1p2,$5)|0);
 __ZN8OpenMesh5crossIfLi3EEENS_7VectorTIT_XT0_EEERKS3_S5_($n,$p1p2,$p1p0);
 $11 = (+__ZNK8OpenMesh7VectorTIfLi3EE6lengthEv($n));
 $norm = $11;
 $12 = $norm;
 $13 = $12 != 0.0;
 if ($13) {
  $14 = $norm;
  $15 = 1.0 / $14;
  HEAPF32[$6>>2] = $15;
  (__ZN8OpenMesh7VectorTIfLi3EEmLERKf($n,$6)|0);
  ;HEAP32[$agg$result>>2]=HEAP32[$n>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$n+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$n+8>>2]|0;
  STACKTOP = sp;return;
 } else {
  __ZN8OpenMesh7VectorTIfLi3EEC2Efff($agg$result,0.0,0.0,0.0);
  STACKTOP = sp;return;
 }
}
function __ZN8OpenMesh11vector_castINS_7VectorTIfLi3EEES2_EENS_13vector_casterIT_T0_E11return_typeERKS5_($_src) {
 $_src = $_src|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_src;
 $1 = $0;
 $2 = (__ZN8OpenMesh13vector_casterINS_7VectorTIfLi3EEES2_E4castERKS2_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK8OpenMesh7VectorTIfLi3EE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (+__ZNK8OpenMesh7VectorTIfLi3EE4normEv($1));
 STACKTOP = sp;return (+$2);
}
function __ZN8OpenMesh7VectorTIfLi3EEmLERKf($this,$_s) {
 $this = $this|0;
 $_s = $_s|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_s;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 $5 = +HEAPF32[$2>>2];
 $6 = $5 * $4;
 HEAPF32[$2>>2] = $6;
 $7 = $1;
 $8 = +HEAPF32[$7>>2];
 $9 = ((($2)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $10 * $8;
 HEAPF32[$9>>2] = $11;
 $12 = $1;
 $13 = +HEAPF32[$12>>2];
 $14 = ((($2)) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $15 * $13;
 HEAPF32[$14>>2] = $16;
 STACKTOP = sp;return ($2|0);
}
function __ZN8OpenMesh13vector_casterINS_7VectorTIfLi3EEES2_E4castERKS2_($_src) {
 $_src = $_src|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_src;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN8OpenMesh11vector_castINS_7VectorTIfLi3EEEN4DGPC7Vector3IdEEEENS_13vector_casterIT_T0_E11return_typeERKS8_($agg$result,$_src) {
 $agg$result = $agg$result|0;
 $_src = $_src|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_src;
 $1 = $0;
 __ZN8OpenMesh13vector_casterINS_7VectorTIfLi3EEEN4DGPC7Vector3IdEEE4castERKS5_($agg$result,$1);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh7VectorTIfLi3EEmIERKS1_($this,$_rhs) {
 $this = $this|0;
 $_rhs = $_rhs|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_rhs;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8OpenMesh7VectorTIfLi3EEixEj($3,0)|0);
 $5 = +HEAPF32[$4>>2];
 $6 = +HEAPF32[$2>>2];
 $7 = $6 - $5;
 HEAPF32[$2>>2] = $7;
 $8 = $1;
 $9 = (__ZNK8OpenMesh7VectorTIfLi3EEixEj($8,1)|0);
 $10 = +HEAPF32[$9>>2];
 $11 = ((($2)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $12 - $10;
 HEAPF32[$11>>2] = $13;
 $14 = $1;
 $15 = (__ZNK8OpenMesh7VectorTIfLi3EEixEj($14,2)|0);
 $16 = +HEAPF32[$15>>2];
 $17 = ((($2)) + 8|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $18 - $16;
 HEAPF32[$17>>2] = $19;
 STACKTOP = sp;return ($2|0);
}
function __ZN8OpenMesh5crossIfLi3EEENS_7VectorTIT_XT0_EEERKS3_S5_($agg$result,$_v1,$_v2) {
 $agg$result = $agg$result|0;
 $_v1 = $_v1|0;
 $_v2 = $_v2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_v1;
 $1 = $_v2;
 $2 = $0;
 $3 = $1;
 __ZNK8OpenMesh7VectorTIfLi3EErmERKS1_($agg$result,$2,$3);
 STACKTOP = sp;return;
}
function __ZNK8OpenMesh7VectorTIfLi3EErmERKS1_($agg$result,$this,$_rhs) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $_rhs = $_rhs|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_rhs;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $1;
 $6 = ((($5)) + 8|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $4 * $7;
 $9 = ((($2)) + 8|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $10 * $13;
 $15 = $8 - $14;
 $16 = ((($2)) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = +HEAPF32[$18>>2];
 $20 = $17 * $19;
 $21 = +HEAPF32[$2>>2];
 $22 = $1;
 $23 = ((($22)) + 8|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $21 * $24;
 $26 = $20 - $25;
 $27 = +HEAPF32[$2>>2];
 $28 = $1;
 $29 = ((($28)) + 4|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $27 * $30;
 $32 = ((($2)) + 4|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $1;
 $35 = +HEAPF32[$34>>2];
 $36 = $33 * $35;
 $37 = $31 - $36;
 __ZN8OpenMesh7VectorTIfLi3EEC2Efff($agg$result,$15,$26,$37);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh13vector_casterINS_7VectorTIfLi3EEEN4DGPC7Vector3IdEEE4castERKS5_($agg$result,$_src) {
 $agg$result = $agg$result|0;
 $_src = $_src|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 5|0;
 $1 = sp + 4|0;
 $0 = $_src;
 __ZN8OpenMesh7VectorTIfLi3EEC2Ev($agg$result);
 $2 = $0;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$1>>0]|0;
 __ZN8OpenMesh11vector_castIN4DGPC7Vector3IdEENS_7VectorTIfLi3EEELi3EEEvRKT_RT0_NS_7GenProg8Int2TypeIXT1_EEE($2,$agg$result,$$byval_copy);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh7VectorTIfLi3EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh11vector_castIN4DGPC7Vector3IdEENS_7VectorTIfLi3EEELi3EEEvRKT_RT0_NS_7GenProg8Int2TypeIXT1_EEE($_src,$_dst,$0) {
 $_src = $_src|0;
 $_dst = $_dst|0;
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 9|0;
 $3 = sp + 8|0;
 $1 = $_src;
 $2 = $_dst;
 $4 = $1;
 $5 = $2;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$3>>0]|0;
 __ZN8OpenMesh11vector_castIN4DGPC7Vector3IdEENS_7VectorTIfLi3EEELi2EEEvRKT_RT0_NS_7GenProg8Int2TypeIXT1_EEE($4,$5,$$byval_copy);
 $6 = $1;
 $7 = (__ZNK4DGPC7Vector3IdEixEi($6,2)|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $8;
 $10 = $2;
 $11 = (__ZN8OpenMesh7VectorTIfLi3EEixEj($10,2)|0);
 HEAPF32[$11>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh11vector_castIN4DGPC7Vector3IdEENS_7VectorTIfLi3EEELi2EEEvRKT_RT0_NS_7GenProg8Int2TypeIXT1_EEE($_src,$_dst,$0) {
 $_src = $_src|0;
 $_dst = $_dst|0;
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 9|0;
 $3 = sp + 8|0;
 $1 = $_src;
 $2 = $_dst;
 $4 = $1;
 $5 = $2;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$3>>0]|0;
 __ZN8OpenMesh11vector_castIN4DGPC7Vector3IdEENS_7VectorTIfLi3EEELi1EEEvRKT_RT0_NS_7GenProg8Int2TypeIXT1_EEE($4,$5,$$byval_copy);
 $6 = $1;
 $7 = (__ZNK4DGPC7Vector3IdEixEi($6,1)|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $8;
 $10 = $2;
 $11 = (__ZN8OpenMesh7VectorTIfLi3EEixEj($10,1)|0);
 HEAPF32[$11>>2] = $9;
 STACKTOP = sp;return;
}
function __ZNK4DGPC7Vector3IdEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = (($2) + ($3<<3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN8OpenMesh7VectorTIfLi3EEixEj($this,$_i) {
 $this = $this|0;
 $_i = $_i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_i;
 $2 = $0;
 $3 = $1;
 $4 = ($3>>>0)<(3);
 if ($4) {
  $5 = $1;
  $6 = (($2) + ($5<<2)|0);
  STACKTOP = sp;return ($6|0);
 } else {
  ___assert_fail((12629|0),(12636|0),211,(11945|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh11vector_castIN4DGPC7Vector3IdEENS_7VectorTIfLi3EEELi1EEEvRKT_RT0_NS_7GenProg8Int2TypeIXT1_EEE($_src,$_dst,$0) {
 $_src = $_src|0;
 $_dst = $_dst|0;
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 9|0;
 $3 = sp + 8|0;
 $1 = $_src;
 $2 = $_dst;
 $4 = $1;
 $5 = $2;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$3>>0]|0;
 __ZN8OpenMesh11vector_castIN4DGPC7Vector3IdEENS_7VectorTIfLi3EEEEEvRKT_RT0_NS_7GenProg8Int2TypeILi0EEE($4,$5,$$byval_copy);
 $6 = $1;
 $7 = (__ZNK4DGPC7Vector3IdEixEi($6,0)|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $8;
 $10 = $2;
 $11 = (__ZN8OpenMesh7VectorTIfLi3EEixEj($10,0)|0);
 HEAPF32[$11>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh11vector_castIN4DGPC7Vector3IdEENS_7VectorTIfLi3EEEEEvRKT_RT0_NS_7GenProg8Int2TypeILi0EEE($_src,$_dst,$0) {
 $_src = $_src|0;
 $_dst = $_dst|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $_src;
 $2 = $_dst;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9Iterators44GenericCirculator_ValueHandleFnsT_DEPRECATEDINS_16PolyConnectivityENS_10FaceHandleENS_12VertexHandleEE8is_validERKNS_14HalfedgeHandleES8_i($heh,$start,$lap_counter) {
 $heh = $heh|0;
 $start = $start|0;
 $lap_counter = $lap_counter|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $heh;
 $1 = $start;
 $2 = $lap_counter;
 $3 = $0;
 $4 = (__ZNK8OpenMesh10BaseHandle8is_validEv($3)|0);
 if (!($4)) {
  $11 = 0;
  STACKTOP = sp;return ($11|0);
 }
 $5 = $1;
 $6 = $0;
 $7 = (__ZNK8OpenMesh10BaseHandleneERKS0_($5,$6)|0);
 $8 = $2;
 $9 = ($8|0)==(0);
 $10 = $7 ? 1 : $9;
 $11 = $10;
 STACKTOP = sp;return ($11|0);
}
function __ZN8OpenMesh9Iterators44GenericCirculator_ValueHandleFnsT_DEPRECATEDINS_16PolyConnectivityENS_10FaceHandleENS_12VertexHandleEE9incrementEPKS2_RNS_14HalfedgeHandleES9_Ri($mesh,$heh,$start,$lap_counter) {
 $mesh = $mesh|0;
 $heh = $heh|0;
 $start = $start|0;
 $lap_counter = $lap_counter|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mesh;
 $1 = $heh;
 $2 = $start;
 $3 = $lap_counter;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZN8OpenMesh9Iterators34GenericCirculator_CenterEntityFnsTINS_16PolyConnectivityENS_10FaceHandleELb1EE9incrementEPKS2_RNS_14HalfedgeHandleES8_Ri($4,$5,$6,$7);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9Iterators34GenericCirculator_CenterEntityFnsTINS_16PolyConnectivityENS_10FaceHandleELb1EE9incrementEPKS2_RNS_14HalfedgeHandleES8_Ri($mesh,$heh,$start,$lap_counter) {
 $mesh = $mesh|0;
 $heh = $heh|0;
 $start = $start|0;
 $lap_counter = $lap_counter|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $4 = sp + 4|0;
 $5 = sp;
 $0 = $mesh;
 $1 = $heh;
 $2 = $start;
 $3 = $lap_counter;
 $6 = $1;
 $7 = $0;
 $8 = $1;
 ;HEAP32[$5>>2]=HEAP32[$8>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;
 $9 = (__ZNK8OpenMesh11ArrayKernel20next_halfedge_handleENS_14HalfedgeHandleE($7,$$byval_copy)|0);
 HEAP32[$4>>2] = $9;
 ;HEAP32[$6>>2]=HEAP32[$4>>2]|0;
 $10 = $1;
 $11 = $2;
 $12 = (__ZNK8OpenMesh10BaseHandleeqERKS0_($10,$11)|0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 1)|0;
 HEAP32[$13>>2] = $15;
 STACKTOP = sp;return;
}
function __ZNK8OpenMesh10BaseHandleeqERKS0_($this,$_rhs) {
 $this = $this|0;
 $_rhs = $_rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_rhs;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK8OpenMesh9Iterators22GenericCirculatorBaseTINS_16PolyConnectivityEE14toVertexHandleEv($this) {
 $this = $this|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 12|0;
 $0 = sp + 8|0;
 $2 = sp;
 $1 = $this;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($3)) + 8|0);
 ;HEAP32[$2>>2]=HEAP32[$5>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
 $6 = (__ZNK8OpenMesh11ArrayKernel16to_vertex_handleENS_14HalfedgeHandleE($4,$$byval_copy)|0);
 HEAP32[$0>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN8OpenMesh9Iterators29GenericCirculatorT_DEPRECATEDINS_16PolyConnectivityENS_10FaceHandleENS_12VertexHandleEXadL_ZNKS0_22GenericCirculatorBaseTIS2_E14toVertexHandleEvEEEC2ERKS2_S3_b($this,$mesh,$start,$end) {
 $this = $this|0;
 $mesh = $mesh|0;
 $start = $start|0;
 $end = $end|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 16|0;
 $3 = sp + 4|0;
 $4 = sp;
 $0 = $this;
 $1 = $mesh;
 $5 = $end&1;
 $2 = $5;
 $6 = $0;
 $7 = $1;
 $8 = $1;
 ;HEAP32[$4>>2]=HEAP32[$start>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
 $9 = (__ZNK8OpenMesh11ArrayKernel15halfedge_handleENS_10FaceHandleE($8,$$byval_copy)|0);
 HEAP32[$3>>2] = $9;
 $10 = $2;
 $11 = $10&1;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;
 __ZN8OpenMesh9Iterators22GenericCirculatorBaseTINS_16PolyConnectivityEEC2ERKS2_NS_14HalfedgeHandleEb($6,$7,$$byval_copy1,$11);
 $12 = ((($6)) + 16|0);
 __ZN8OpenMesh12VertexHandleC2Ei($12,-1);
 $13 = HEAP32[$6>>2]|0;
 $14 = ((($6)) + 8|0);
 $15 = ((($6)) + 4|0);
 $16 = ((($6)) + 12|0);
 __ZN8OpenMesh9Iterators44GenericCirculator_ValueHandleFnsT_DEPRECATEDINS_16PolyConnectivityENS_10FaceHandleENS_12VertexHandleEE4initEPKS2_RNS_14HalfedgeHandleES9_Ri($13,$14,$15,$16);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9Iterators22GenericCirculatorBaseTINS_16PolyConnectivityEEC2ERKS2_NS_14HalfedgeHandleEb($this,$mesh,$heh,$end) {
 $this = $this|0;
 $mesh = $mesh|0;
 $heh = $heh|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $mesh;
 $3 = $end&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = ((($4)) + 4|0);
 ;HEAP32[$6>>2]=HEAP32[$heh>>2]|0;
 $7 = ((($4)) + 8|0);
 ;HEAP32[$7>>2]=HEAP32[$heh>>2]|0;
 $8 = ((($4)) + 12|0);
 $9 = $2;
 $10 = $9&1;
 $11 = $10&1;
 HEAP32[$8>>2] = $11;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9Iterators44GenericCirculator_ValueHandleFnsT_DEPRECATEDINS_16PolyConnectivityENS_10FaceHandleENS_12VertexHandleEE4initEPKS2_RNS_14HalfedgeHandleES9_Ri($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 STACKTOP = sp;return;
}
function __ZNK8OpenMesh11ArrayKernel4faceENS_10FaceHandleE($this,$_fh) {
 $this = $this|0;
 $_fh = $_fh|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $3 = sp;
 $2 = $this;
 $4 = $2;
 ;HEAP32[$3>>2]=HEAP32[$_fh>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
 $5 = (__ZNK8OpenMesh11ArrayKernel15is_valid_handleENS_10FaceHandleE(($4|0),($$byval_copy|0))|0);
 if ($5) {
  $6 = ((($4)) + 108|0);
  $7 = (__ZNK8OpenMesh10BaseHandle3idxEv($_fh)|0);
  $0 = $6;
  $1 = $7;
  $8 = $0;
  $9 = $1;
  $10 = HEAP32[$8>>2]|0;
  $11 = (($10) + ($9<<2)|0);
  STACKTOP = sp;return ($11|0);
 } else {
  ___assert_fail((13082|0),(12195|0),183,(13103|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh9PolyMeshTINS_13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS3_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEC2Ev($1);
 $2 = 3304;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh21PolyMesh_ArrayKernelTIN4DGPC14OpenMeshTraitsINS1_7Vector3IdEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(47,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $28 = sp + 48|0;
 $29 = sp + 36|0;
 $30 = sp + 24|0;
 $31 = sp + 12|0;
 $32 = sp;
 $25 = $this;
 $33 = $25;
 __ZN8OpenMesh16PolyConnectivityC2Ev($33);
 $34 = 3344;
 HEAP32[$33>>2] = $34;
 $35 = ((($33)) + 228|0);
 __THREW__ = 0;
 invoke_vii(588,($35|0),-1);
 $36 = __THREW__; __THREW__ = 0;
 $37 = $36&1;
 do {
  if ($37) {
   label = 41;
  } else {
   $38 = ((($33)) + 232|0);
   __THREW__ = 0;
   invoke_vii(589,($38|0),-1);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    label = 41;
   } else {
    $41 = ((($33)) + 236|0);
    __THREW__ = 0;
    invoke_vii(590,($41|0),-1);
    $42 = __THREW__; __THREW__ = 0;
    $43 = $42&1;
    if ($43) {
     label = 41;
    } else {
     $44 = ((($33)) + 240|0);
     __THREW__ = 0;
     invoke_vii(591,($44|0),-1);
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     if ($46) {
      label = 41;
     } else {
      $47 = ((($33)) + 244|0);
      __THREW__ = 0;
      invoke_vii(592,($47|0),-1);
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if ($49) {
       label = 41;
      } else {
       $50 = ((($33)) + 248|0);
       __THREW__ = 0;
       invoke_vii(589,($50|0),-1);
       $51 = __THREW__; __THREW__ = 0;
       $52 = $51&1;
       if ($52) {
        label = 41;
       } else {
        $53 = ((($33)) + 252|0);
        __THREW__ = 0;
        invoke_vii(593,($53|0),-1);
        $54 = __THREW__; __THREW__ = 0;
        $55 = $54&1;
        if ($55) {
         label = 41;
        } else {
         $56 = ((($33)) + 256|0);
         __THREW__ = 0;
         invoke_vii(594,($56|0),-1);
         $57 = __THREW__; __THREW__ = 0;
         $58 = $57&1;
         if ($58) {
          label = 41;
         } else {
          $59 = ((($33)) + 260|0);
          __THREW__ = 0;
          invoke_vii(595,($59|0),-1);
          $60 = __THREW__; __THREW__ = 0;
          $61 = $60&1;
          if ($61) {
           label = 41;
          } else {
           $62 = ((($33)) + 264|0);
           __THREW__ = 0;
           invoke_vii(595,($62|0),-1);
           $63 = __THREW__; __THREW__ = 0;
           $64 = $63&1;
           if ($64) {
            label = 41;
           } else {
            $65 = ((($33)) + 268|0);
            __THREW__ = 0;
            invoke_vii(596,($65|0),-1);
            $66 = __THREW__; __THREW__ = 0;
            $67 = $66&1;
            if ($67) {
             label = 41;
            } else {
             $68 = ((($33)) + 272|0);
             __THREW__ = 0;
             invoke_vii(597,($68|0),-1);
             $69 = __THREW__; __THREW__ = 0;
             $70 = $69&1;
             if ($70) {
              label = 41;
             } else {
              $71 = ((($33)) + 276|0);
              __THREW__ = 0;
              invoke_vii(598,($71|0),-1);
              $72 = __THREW__; __THREW__ = 0;
              $73 = $72&1;
              if ($73) {
               label = 41;
              } else {
               $74 = ((($33)) + 280|0);
               __THREW__ = 0;
               invoke_vii(599,($74|0),-1);
               $75 = __THREW__; __THREW__ = 0;
               $76 = $75&1;
               if ($76) {
                label = 41;
               } else {
                $77 = ((($33)) + 284|0);
                __THREW__ = 0;
                invoke_vii(600,($77|0),-1);
                $78 = __THREW__; __THREW__ = 0;
                $79 = $78&1;
                if ($79) {
                 label = 41;
                } else {
                 $80 = ((($33)) + 288|0);
                 __THREW__ = 0;
                 invoke_vii(601,($80|0),-1);
                 $81 = __THREW__; __THREW__ = 0;
                 $82 = $81&1;
                 if ($82) {
                  label = 41;
                 } else {
                  $83 = ((($33)) + 292|0);
                  __THREW__ = 0;
                  invoke_vii(602,($83|0),-1);
                  $84 = __THREW__; __THREW__ = 0;
                  $85 = $84&1;
                  if ($85) {
                   label = 41;
                  } else {
                   $86 = ((($33)) + 296|0);
                   __THREW__ = 0;
                   invoke_vii(603,($86|0),-1);
                   $87 = __THREW__; __THREW__ = 0;
                   $88 = $87&1;
                   if ($88) {
                    label = 41;
                   } else {
                    $89 = ((($33)) + 300|0);
                    __THREW__ = 0;
                    invoke_vii(604,($89|0),-1);
                    $90 = __THREW__; __THREW__ = 0;
                    $91 = $90&1;
                    if ($91) {
                     label = 41;
                    } else {
                     $92 = ((($33)) + 304|0);
                     HEAP32[$92>>2] = 0;
                     $93 = ((($33)) + 308|0);
                     HEAP32[$93>>2] = 0;
                     $94 = ((($33)) + 312|0);
                     HEAP32[$94>>2] = 0;
                     $95 = ((($33)) + 316|0);
                     HEAP32[$95>>2] = 0;
                     $96 = ((($33)) + 320|0);
                     HEAP32[$96>>2] = 0;
                     $97 = ((($33)) + 324|0);
                     HEAP32[$97>>2] = 0;
                     $98 = ((($33)) + 328|0);
                     HEAP32[$98>>2] = 0;
                     $99 = ((($33)) + 332|0);
                     HEAP32[$99>>2] = 0;
                     $100 = ((($33)) + 336|0);
                     HEAP32[$100>>2] = 0;
                     $101 = ((($33)) + 340|0);
                     HEAP32[$101>>2] = 0;
                     $102 = ((($33)) + 344|0);
                     HEAP32[$102>>2] = 0;
                     $103 = ((($33)) + 348|0);
                     HEAP32[$103>>2] = 0;
                     $104 = ((($33)) + 352|0);
                     HEAP32[$104>>2] = 0;
                     $105 = ((($33)) + 356|0);
                     HEAP32[$105>>2] = 0;
                     $106 = ((($33)) + 228|0);
                     $23 = $28;
                     $24 = 13472;
                     $107 = $23;
                     $22 = $107;
                     $108 = $22;
                     $21 = $108;
                     $109 = $21;
                     $20 = $109;
                     $110 = $24;
                     $111 = $24;
                     __THREW__ = 0;
                     $112 = (invoke_ii(498,($111|0))|0);
                     $113 = __THREW__; __THREW__ = 0;
                     $114 = $113&1;
                     if ($114) {
                      label = 41;
                      break;
                     }
                     __THREW__ = 0;
                     invoke_viii(499,($107|0),($110|0),($112|0));
                     $115 = __THREW__; __THREW__ = 0;
                     $116 = $115&1;
                     if ($116) {
                      label = 41;
                      break;
                     }
                     __THREW__ = 0;
                     invoke_viii(605,($33|0),($106|0),($28|0));
                     $117 = __THREW__; __THREW__ = 0;
                     $118 = $117&1;
                     if ($118) {
                      $183 = ___cxa_find_matching_catch()|0;
                      $184 = tempRet0;
                      $26 = $183;
                      $27 = $184;
                      __THREW__ = 0;
                      invoke_vi(502,($28|0));
                      $185 = __THREW__; __THREW__ = 0;
                      $186 = $185&1;
                      if (!($186)) {
                       break;
                      }
                      $207 = ___cxa_find_matching_catch(0|0)|0;
                      $208 = tempRet0;
                      ___clang_call_terminate($207);
                      // unreachable;
                     }
                     __THREW__ = 0;
                     invoke_vi(502,($28|0));
                     $119 = __THREW__; __THREW__ = 0;
                     $120 = $119&1;
                     if ($120) {
                      label = 41;
                      break;
                     }
                     $121 = ((($33)) + 288|0);
                     $18 = $29;
                     $19 = 13481;
                     $122 = $18;
                     $17 = $122;
                     $123 = $17;
                     $16 = $123;
                     $124 = $16;
                     $15 = $124;
                     $125 = $19;
                     $126 = $19;
                     __THREW__ = 0;
                     $127 = (invoke_ii(498,($126|0))|0);
                     $128 = __THREW__; __THREW__ = 0;
                     $129 = $128&1;
                     if ($129) {
                      label = 41;
                      break;
                     }
                     __THREW__ = 0;
                     invoke_viii(499,($122|0),($125|0),($127|0));
                     $130 = __THREW__; __THREW__ = 0;
                     $131 = $130&1;
                     if ($131) {
                      label = 41;
                      break;
                     }
                     __THREW__ = 0;
                     invoke_viii(606,($33|0),($121|0),($29|0));
                     $132 = __THREW__; __THREW__ = 0;
                     $133 = $132&1;
                     if ($133) {
                      $187 = ___cxa_find_matching_catch()|0;
                      $188 = tempRet0;
                      $26 = $187;
                      $27 = $188;
                      __THREW__ = 0;
                      invoke_vi(502,($29|0));
                      $189 = __THREW__; __THREW__ = 0;
                      $190 = $189&1;
                      if (!($190)) {
                       break;
                      }
                      $207 = ___cxa_find_matching_catch(0|0)|0;
                      $208 = tempRet0;
                      ___clang_call_terminate($207);
                      // unreachable;
                     }
                     __THREW__ = 0;
                     invoke_vi(502,($29|0));
                     $134 = __THREW__; __THREW__ = 0;
                     $135 = $134&1;
                     if ($135) {
                      label = 41;
                      break;
                     }
                     $136 = ((($33)) + 300|0);
                     $13 = $30;
                     $14 = 13489;
                     $137 = $13;
                     $12 = $137;
                     $138 = $12;
                     $11 = $138;
                     $139 = $11;
                     $10 = $139;
                     $140 = $14;
                     $141 = $14;
                     __THREW__ = 0;
                     $142 = (invoke_ii(498,($141|0))|0);
                     $143 = __THREW__; __THREW__ = 0;
                     $144 = $143&1;
                     if ($144) {
                      label = 41;
                      break;
                     }
                     __THREW__ = 0;
                     invoke_viii(499,($137|0),($140|0),($142|0));
                     $145 = __THREW__; __THREW__ = 0;
                     $146 = $145&1;
                     if ($146) {
                      label = 41;
                      break;
                     }
                     __THREW__ = 0;
                     invoke_viii(607,($33|0),($136|0),($30|0));
                     $147 = __THREW__; __THREW__ = 0;
                     $148 = $147&1;
                     if ($148) {
                      $191 = ___cxa_find_matching_catch()|0;
                      $192 = tempRet0;
                      $26 = $191;
                      $27 = $192;
                      __THREW__ = 0;
                      invoke_vi(502,($30|0));
                      $193 = __THREW__; __THREW__ = 0;
                      $194 = $193&1;
                      if (!($194)) {
                       break;
                      }
                      $207 = ___cxa_find_matching_catch(0|0)|0;
                      $208 = tempRet0;
                      ___clang_call_terminate($207);
                      // unreachable;
                     }
                     __THREW__ = 0;
                     invoke_vi(502,($30|0));
                     $149 = __THREW__; __THREW__ = 0;
                     $150 = $149&1;
                     if ($150) {
                      label = 41;
                      break;
                     }
                     $151 = ((($33)) + 292|0);
                     $8 = $31;
                     $9 = 13497;
                     $152 = $8;
                     $7 = $152;
                     $153 = $7;
                     $6 = $153;
                     $154 = $6;
                     $5 = $154;
                     $155 = $9;
                     $156 = $9;
                     __THREW__ = 0;
                     $157 = (invoke_ii(498,($156|0))|0);
                     $158 = __THREW__; __THREW__ = 0;
                     $159 = $158&1;
                     if ($159) {
                      label = 41;
                      break;
                     }
                     __THREW__ = 0;
                     invoke_viii(499,($152|0),($155|0),($157|0));
                     $160 = __THREW__; __THREW__ = 0;
                     $161 = $160&1;
                     if ($161) {
                      label = 41;
                      break;
                     }
                     __THREW__ = 0;
                     invoke_viii(608,($33|0),($151|0),($31|0));
                     $162 = __THREW__; __THREW__ = 0;
                     $163 = $162&1;
                     if ($163) {
                      $195 = ___cxa_find_matching_catch()|0;
                      $196 = tempRet0;
                      $26 = $195;
                      $27 = $196;
                      __THREW__ = 0;
                      invoke_vi(502,($31|0));
                      $197 = __THREW__; __THREW__ = 0;
                      $198 = $197&1;
                      if (!($198)) {
                       break;
                      }
                      $207 = ___cxa_find_matching_catch(0|0)|0;
                      $208 = tempRet0;
                      ___clang_call_terminate($207);
                      // unreachable;
                     }
                     __THREW__ = 0;
                     invoke_vi(502,($31|0));
                     $164 = __THREW__; __THREW__ = 0;
                     $165 = $164&1;
                     if ($165) {
                      label = 41;
                      break;
                     }
                     $166 = ((($33)) + 296|0);
                     $3 = $32;
                     $4 = 13505;
                     $167 = $3;
                     $2 = $167;
                     $168 = $2;
                     $1 = $168;
                     $169 = $1;
                     $0 = $169;
                     $170 = $4;
                     $171 = $4;
                     __THREW__ = 0;
                     $172 = (invoke_ii(498,($171|0))|0);
                     $173 = __THREW__; __THREW__ = 0;
                     $174 = $173&1;
                     if ($174) {
                      label = 41;
                      break;
                     }
                     __THREW__ = 0;
                     invoke_viii(499,($167|0),($170|0),($172|0));
                     $175 = __THREW__; __THREW__ = 0;
                     $176 = $175&1;
                     if ($176) {
                      label = 41;
                      break;
                     }
                     __THREW__ = 0;
                     invoke_viii(609,($33|0),($166|0),($32|0));
                     $177 = __THREW__; __THREW__ = 0;
                     $178 = $177&1;
                     if ($178) {
                      $199 = ___cxa_find_matching_catch()|0;
                      $200 = tempRet0;
                      $26 = $199;
                      $27 = $200;
                      __THREW__ = 0;
                      invoke_vi(502,($32|0));
                      $201 = __THREW__; __THREW__ = 0;
                      $202 = $201&1;
                      if (!($202)) {
                       break;
                      }
                      $207 = ___cxa_find_matching_catch(0|0)|0;
                      $208 = tempRet0;
                      ___clang_call_terminate($207);
                      // unreachable;
                     } else {
                      __THREW__ = 0;
                      invoke_vi(502,($32|0));
                      $179 = __THREW__; __THREW__ = 0;
                      $180 = $179&1;
                      if ($180) {
                       label = 41;
                       break;
                      }
                      STACKTOP = sp;return;
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 41) {
  $181 = ___cxa_find_matching_catch()|0;
  $182 = tempRet0;
  $26 = $181;
  $27 = $182;
 }
 __THREW__ = 0;
 invoke_vi(1,($33|0));
 $203 = __THREW__; __THREW__ = 0;
 $204 = $203&1;
 if ($204) {
  $207 = ___cxa_find_matching_catch(0|0)|0;
  $208 = tempRet0;
  ___clang_call_terminate($207);
  // unreachable;
 } else {
  $205 = $26;
  $206 = $27;
  ___resumeException($205|0);
  // unreachable;
 }
}
function __ZN8OpenMesh9PolyMeshTINS_13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS3_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(49,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8OpenMesh16PolyConnectivityC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 192|0;
 $6 = sp + 176|0;
 $10 = sp + 160|0;
 $15 = sp + 140|0;
 $18 = sp + 128|0;
 $21 = sp + 116|0;
 $22 = sp + 112|0;
 $23 = sp + 108|0;
 $27 = sp + 92|0;
 $31 = sp + 76|0;
 $35 = sp + 60|0;
 $40 = sp + 40|0;
 $43 = sp + 28|0;
 $46 = sp + 16|0;
 $47 = sp + 12|0;
 $48 = sp + 8|0;
 $50 = $this;
 $51 = $50;
 __ZN8OpenMesh11ArrayKernelC2Ev(($51|0));
 $52 = 2872;
 HEAP32[$51>>2] = $52;
 $53 = ((($51)) + 200|0);
 $49 = $53;
 $54 = $49;
 $45 = $54;
 $55 = $45;
 $44 = $55;
 $25 = $27;
 $26 = -1;
 $56 = $25;
 HEAP32[$56>>2] = 0;
 $57 = HEAP32[$27>>2]|0;
 HEAP32[$46>>2] = $57;
 $28 = $46;
 HEAP32[$55>>2] = 0;
 $58 = ((($55)) + 4|0);
 $29 = $31;
 $30 = -1;
 $59 = $29;
 HEAP32[$59>>2] = 0;
 $60 = HEAP32[$31>>2]|0;
 HEAP32[$47>>2] = $60;
 $32 = $47;
 HEAP32[$58>>2] = 0;
 $61 = ((($55)) + 8|0);
 $33 = $35;
 $34 = -1;
 $62 = $33;
 HEAP32[$62>>2] = 0;
 $63 = HEAP32[$35>>2]|0;
 HEAP32[$48>>2] = $63;
 $36 = $48;
 $42 = $61;
 HEAP32[$43>>2] = 0;
 $64 = $42;
 $41 = $43;
 $65 = $41;
 $66 = HEAP32[$65>>2]|0;
 $39 = $64;
 HEAP32[$40>>2] = $66;
 $67 = $39;
 $38 = $67;
 $37 = $40;
 $68 = $37;
 $69 = HEAP32[$68>>2]|0;
 HEAP32[$67>>2] = $69;
 $70 = ((($51)) + 212|0);
 $24 = $70;
 $71 = $24;
 $20 = $71;
 $72 = $20;
 $19 = $72;
 $0 = $2;
 $1 = -1;
 $73 = $0;
 HEAP32[$73>>2] = 0;
 $74 = HEAP32[$2>>2]|0;
 HEAP32[$21>>2] = $74;
 $3 = $21;
 HEAP32[$72>>2] = 0;
 $75 = ((($72)) + 4|0);
 $4 = $6;
 $5 = -1;
 $76 = $4;
 HEAP32[$76>>2] = 0;
 $77 = HEAP32[$6>>2]|0;
 HEAP32[$22>>2] = $77;
 $7 = $22;
 HEAP32[$75>>2] = 0;
 $78 = ((($72)) + 8|0);
 $8 = $10;
 $9 = -1;
 $79 = $8;
 HEAP32[$79>>2] = 0;
 $80 = HEAP32[$10>>2]|0;
 HEAP32[$23>>2] = $80;
 $11 = $23;
 $17 = $78;
 HEAP32[$18>>2] = 0;
 $81 = $17;
 $16 = $18;
 $82 = $16;
 $83 = HEAP32[$82>>2]|0;
 $14 = $81;
 HEAP32[$15>>2] = $83;
 $84 = $14;
 $13 = $84;
 $12 = $15;
 $85 = $12;
 $86 = HEAP32[$85>>2]|0;
 HEAP32[$84>>2] = $86;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh12VPropHandleTIN4DGPC7Vector3IdEEEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh15BasePropHandleTIN4DGPC7Vector3IdEEEC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh12VPropHandleTINS_7VectorTIfLi3EEEEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh15BasePropHandleTINS_7VectorTIfLi3EEEEC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh12VPropHandleTINS_7VectorTIhLi3EEEEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh15BasePropHandleTINS_7VectorTIhLi3EEEEC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh12VPropHandleTIfEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh15BasePropHandleTIfEC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh12VPropHandleTINS_7VectorTIfLi2EEEEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh15BasePropHandleTINS_7VectorTIfLi2EEEEC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh12HPropHandleTIfEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh15BasePropHandleTIfEC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh12HPropHandleTINS_7VectorTIfLi2EEEEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh15BasePropHandleTINS_7VectorTIfLi2EEEEC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh12HPropHandleTINS_7VectorTIfLi3EEEEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh15BasePropHandleTINS_7VectorTIfLi3EEEEC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh12HPropHandleTINS_7VectorTIhLi3EEEEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh15BasePropHandleTINS_7VectorTIhLi3EEEEC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh12EPropHandleTINS_7VectorTIhLi3EEEEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh15BasePropHandleTINS_7VectorTIhLi3EEEEC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh12FPropHandleTINS_7VectorTIfLi3EEEEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh15BasePropHandleTINS_7VectorTIfLi3EEEEC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh12FPropHandleTINS_7VectorTIhLi3EEEEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh15BasePropHandleTINS_7VectorTIhLi3EEEEC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh12FPropHandleTIiEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh15BasePropHandleTIiEC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh12VPropHandleTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh15BasePropHandleTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh12HPropHandleTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh15BasePropHandleTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh12EPropHandleTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh15BasePropHandleTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh12FPropHandleTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh15BasePropHandleTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh10BaseKernel12add_propertyIN4DGPC7Vector3IdEEEEvRNS_12VPropHandleTIT_EERKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEE($this,$_ph,$_name) {
 $this = $this|0;
 $_ph = $_ph|0;
 $_name = $_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $5 = sp;
 $0 = $this;
 $1 = $_ph;
 $2 = $_name;
 $6 = $0;
 $7 = $1;
 $8 = ((($6)) + 4|0);
 __ZN4DGPC7Vector3IdEC2Ev($5);
 $9 = $2;
 $10 = (__ZN8OpenMesh17PropertyContainer3addIN4DGPC7Vector3IdEEEENS_15BasePropHandleTIT_EERKS6_RKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEE($8,$5,$9)|0);
 HEAP32[$4>>2] = $10;
 __ZN8OpenMesh12VPropHandleTIN4DGPC7Vector3IdEEEC2ERKNS_15BasePropHandleTIS3_EE($3,$4);
 ;HEAP32[$7>>2]=HEAP32[$3>>2]|0;
 $11 = ((($6)) + 4|0);
 $12 = HEAP32[$6>>2]|0;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($6)|0);
 __ZNK8OpenMesh17PropertyContainer6resizeEj($11,$15);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh10BaseKernel12add_propertyINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEvRNS_12VPropHandleTIT_EERKNSt3__112basic_stringIcNSI_11char_traitsIcEENSI_9allocatorIcEEEE($this,$_ph,$_name) {
 $this = $this|0;
 $_ph = $_ph|0;
 $_name = $_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 4|0;
 $4 = sp;
 $5 = sp + 20|0;
 $0 = $this;
 $1 = $_ph;
 $2 = $_name;
 $6 = $0;
 $7 = $1;
 $8 = ((($6)) + 4|0);
 $9 = $2;
 $10 = (__ZN8OpenMesh17PropertyContainer3addINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEENS_15BasePropHandleTIT_EERKSF_RKNSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEE($8,$5,$9)|0);
 HEAP32[$4>>2] = $10;
 __ZN8OpenMesh12VPropHandleTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKNS_15BasePropHandleTISC_EE($3,$4);
 ;HEAP32[$7>>2]=HEAP32[$3>>2]|0;
 $11 = ((($6)) + 4|0);
 $12 = HEAP32[$6>>2]|0;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($6)|0);
 __ZNK8OpenMesh17PropertyContainer6resizeEj($11,$15);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh10BaseKernel12add_propertyINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEvRNS_12FPropHandleTIT_EERKNSt3__112basic_stringIcNSI_11char_traitsIcEENSI_9allocatorIcEEEE($this,$_ph,$_name) {
 $this = $this|0;
 $_ph = $_ph|0;
 $_name = $_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 4|0;
 $4 = sp;
 $5 = sp + 20|0;
 $0 = $this;
 $1 = $_ph;
 $2 = $_name;
 $6 = $0;
 $7 = $1;
 $8 = ((($6)) + 52|0);
 $9 = $2;
 $10 = (__ZN8OpenMesh17PropertyContainer3addINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEENS_15BasePropHandleTIT_EERKSF_RKNSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEE($8,$5,$9)|0);
 HEAP32[$4>>2] = $10;
 __ZN8OpenMesh12FPropHandleTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKNS_15BasePropHandleTISC_EE($3,$4);
 ;HEAP32[$7>>2]=HEAP32[$3>>2]|0;
 $11 = ((($6)) + 52|0);
 $12 = HEAP32[$6>>2]|0;
 $13 = ((($12)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($6)|0);
 __ZNK8OpenMesh17PropertyContainer6resizeEj($11,$15);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh10BaseKernel12add_propertyINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEvRNS_12HPropHandleTIT_EERKNSt3__112basic_stringIcNSI_11char_traitsIcEENSI_9allocatorIcEEEE($this,$_ph,$_name) {
 $this = $this|0;
 $_ph = $_ph|0;
 $_name = $_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 4|0;
 $4 = sp;
 $5 = sp + 20|0;
 $0 = $this;
 $1 = $_ph;
 $2 = $_name;
 $6 = $0;
 $7 = $1;
 $8 = ((($6)) + 20|0);
 $9 = $2;
 $10 = (__ZN8OpenMesh17PropertyContainer3addINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEENS_15BasePropHandleTIT_EERKSF_RKNSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEE($8,$5,$9)|0);
 HEAP32[$4>>2] = $10;
 __ZN8OpenMesh12HPropHandleTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKNS_15BasePropHandleTISC_EE($3,$4);
 ;HEAP32[$7>>2]=HEAP32[$3>>2]|0;
 $11 = ((($6)) + 20|0);
 $12 = HEAP32[$6>>2]|0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($6)|0);
 __ZNK8OpenMesh17PropertyContainer6resizeEj($11,$15);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh10BaseKernel12add_propertyINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEvRNS_12EPropHandleTIT_EERKNSt3__112basic_stringIcNSI_11char_traitsIcEENSI_9allocatorIcEEEE($this,$_ph,$_name) {
 $this = $this|0;
 $_ph = $_ph|0;
 $_name = $_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 4|0;
 $4 = sp;
 $5 = sp + 20|0;
 $0 = $this;
 $1 = $_ph;
 $2 = $_name;
 $6 = $0;
 $7 = $1;
 $8 = ((($6)) + 36|0);
 $9 = $2;
 $10 = (__ZN8OpenMesh17PropertyContainer3addINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEENS_15BasePropHandleTIT_EERKSF_RKNSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEE($8,$5,$9)|0);
 HEAP32[$4>>2] = $10;
 __ZN8OpenMesh12EPropHandleTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKNS_15BasePropHandleTISC_EE($3,$4);
 ;HEAP32[$7>>2]=HEAP32[$3>>2]|0;
 $11 = ((($6)) + 36|0);
 $12 = HEAP32[$6>>2]|0;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($6)|0);
 __ZNK8OpenMesh17PropertyContainer6resizeEj($11,$15);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh17PropertyContainer3addINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEENS_15BasePropHandleTIT_EERKSF_RKNSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEE($this,$0,$_name) {
 $this = $this|0;
 $0 = $0|0;
 $_name = $_name|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $idx = 0, $p_end = 0, $p_it = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator$i = sp + 200|0;
 $29 = sp + 84|0;
 $32 = sp + 72|0;
 $36 = sp + 56|0;
 $39 = sp + 44|0;
 $41 = sp + 36|0;
 $p_it = sp + 20|0;
 $p_end = sp + 16|0;
 $45 = sp + 8|0;
 $42 = $this;
 $43 = $0;
 $44 = $_name;
 $48 = $42;
 $49 = ((($48)) + 4|0);
 $40 = $49;
 $50 = $40;
 $51 = HEAP32[$50>>2]|0;
 $37 = $50;
 $38 = $51;
 $52 = $38;
 $34 = $36;
 $35 = $52;
 $53 = $34;
 $54 = $35;
 HEAP32[$53>>2] = $54;
 $55 = HEAP32[$36>>2]|0;
 HEAP32[$39>>2] = $55;
 $56 = HEAP32[$39>>2]|0;
 HEAP32[$p_it>>2] = $56;
 $57 = ((($48)) + 4|0);
 $33 = $57;
 $58 = $33;
 $59 = ((($58)) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 $30 = $58;
 $31 = $60;
 $61 = $31;
 $27 = $29;
 $28 = $61;
 $62 = $27;
 $63 = $28;
 HEAP32[$62>>2] = $63;
 $64 = HEAP32[$29>>2]|0;
 HEAP32[$32>>2] = $64;
 $65 = HEAP32[$32>>2]|0;
 HEAP32[$p_end>>2] = $65;
 $idx = 0;
 while(1) {
  $23 = $p_it;
  $24 = $p_end;
  $66 = $23;
  $67 = $24;
  $21 = $66;
  $22 = $67;
  $68 = $21;
  $20 = $68;
  $69 = $20;
  $70 = HEAP32[$69>>2]|0;
  $71 = $22;
  $19 = $71;
  $72 = $19;
  $73 = HEAP32[$72>>2]|0;
  $74 = ($70|0)==($73|0);
  $75 = $74 ^ 1;
  if (!($75)) {
   break;
  }
  $6 = $p_it;
  $76 = $6;
  $77 = HEAP32[$76>>2]|0;
  $78 = HEAP32[$77>>2]|0;
  $79 = ($78|0)!=(0|0);
  if (!($79)) {
   break;
  }
  $5 = $p_it;
  $80 = $5;
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($81)) + 4|0);
  HEAP32[$80>>2] = $82;
  $83 = $idx;
  $84 = (($83) + 1)|0;
  $idx = $84;
 }
 $3 = $p_it;
 $4 = $p_end;
 $85 = $3;
 $2 = $85;
 $86 = $2;
 $87 = HEAP32[$86>>2]|0;
 $88 = $4;
 $1 = $88;
 $89 = $1;
 $90 = HEAP32[$89>>2]|0;
 $91 = ($87|0)==($90|0);
 do {
  if ($91) {
   $92 = ((($48)) + 4|0);
   HEAP32[$45>>2] = 0;
   $17 = $92;
   $18 = $45;
   $93 = $17;
   $94 = ((($93)) + 4|0);
   $95 = HEAP32[$94>>2]|0;
   $16 = $93;
   $96 = $16;
   $97 = ((($96)) + 8|0);
   $15 = $97;
   $98 = $15;
   $14 = $98;
   $99 = $14;
   $100 = HEAP32[$99>>2]|0;
   $101 = ($95|0)!=($100|0);
   if ($101) {
    __ZNSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i,$93,1);
    $13 = $93;
    $102 = $13;
    $103 = ((($102)) + 8|0);
    $12 = $103;
    $104 = $12;
    $11 = $104;
    $105 = $11;
    $106 = ((($93)) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $10 = $107;
    $108 = $10;
    $109 = $18;
    $7 = $105;
    $8 = $108;
    $9 = $109;
    $110 = $8;
    $111 = $9;
    $112 = HEAP32[$111>>2]|0;
    HEAP32[$110>>2] = $112;
    __ZNSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
    $113 = ((($93)) + 4|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((($114)) + 4|0);
    HEAP32[$113>>2] = $115;
    break;
   } else {
    $116 = $18;
    __ZNSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($93,$116);
    break;
   }
  }
 } while(0);
 $117 = (__Znwj(32)|0);
 $118 = $44;
 __THREW__ = 0;
 invoke_vii(610,($117|0),($118|0));
 $119 = __THREW__; __THREW__ = 0;
 $120 = $119&1;
 if ($120) {
  $129 = ___cxa_find_matching_catch()|0;
  $130 = tempRet0;
  $46 = $129;
  $47 = $130;
  __ZdlPv($117);
  $131 = $46;
  $132 = $47;
  ___resumeException($131|0);
  // unreachable;
 } else {
  $121 = ((($48)) + 4|0);
  $122 = $idx;
  $25 = $121;
  $26 = $122;
  $123 = $25;
  $124 = $26;
  $125 = HEAP32[$123>>2]|0;
  $126 = (($125) + ($124<<2)|0);
  HEAP32[$126>>2] = $117;
  $127 = $idx;
  __ZN8OpenMesh15BasePropHandleTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2Ei($41,$127);
  $128 = HEAP32[$41>>2]|0;
  STACKTOP = sp;return ($128|0);
 }
 return (0)|0;
}
function __ZN8OpenMesh12EPropHandleTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKNS_15BasePropHandleTISC_EE($this,$_b) {
 $this = $this|0;
 $_b = $_b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_b;
 $2 = $0;
 $3 = $1;
 ;HEAP32[$2>>2]=HEAP32[$3>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 72|0;
 $23 = sp + 60|0;
 $__v = sp + 12|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = ((($33)) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 4)&-1;
 $45 = (($44) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $45;
 $46 = $21;
 $47 = (__ZNKSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE8max_sizeEv($46)|0);
 $__ms$i = $47;
 $48 = HEAP32[$22>>2]|0;
 $49 = $__ms$i;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($46);
 }
 $19 = $46;
 $51 = $19;
 $18 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = ((($53)) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$52>>2]|0;
 $59 = $57;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 4)&-1;
 $__cap$i = $62;
 $63 = $__cap$i;
 $64 = $__ms$i;
 $65 = (($64>>>0) / 2)&-1;
 $66 = ($63>>>0)>=($65>>>0);
 if ($66) {
  $67 = $__ms$i;
  $20 = $67;
 } else {
  $68 = $__cap$i;
  $69 = $68<<1;
  HEAP32[$23>>2] = $69;
  $12 = $23;
  $13 = $22;
  $70 = $12;
  $71 = $13;
  ;HEAP8[$11>>0]=HEAP8[$14>>0]|0;
  $9 = $70;
  $10 = $71;
  $72 = $9;
  $73 = $10;
  $6 = $11;
  $7 = $72;
  $8 = $73;
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75>>>0)<($77>>>0);
  $79 = $10;
  $80 = $9;
  $81 = $78 ? $79 : $80;
  $82 = HEAP32[$81>>2]|0;
  $20 = $82;
 }
 $83 = $20;
 $5 = $32;
 $84 = $5;
 $85 = ((($84)) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$84>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 4)&-1;
 $92 = $__a;
 __ZNSt3__114__split_bufferIPN8OpenMesh12BasePropertyERNS_9allocatorIS3_EEEC2EjjS6_($__v,$83,$91,$92);
 $93 = $__a;
 $94 = ((($__v)) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $4 = $95;
 $96 = $4;
 $97 = $29;
 $3 = $97;
 $98 = $3;
 $0 = $93;
 $1 = $96;
 $2 = $98;
 $99 = $1;
 $100 = $2;
 $101 = HEAP32[$100>>2]|0;
 HEAP32[$99>>2] = $101;
 $102 = ((($__v)) + 8|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ((($103)) + 4|0);
 HEAP32[$102>>2] = $104;
 __THREW__ = 0;
 invoke_vii(611,($32|0),($__v|0));
 $105 = __THREW__; __THREW__ = 0;
 $106 = $105&1;
 if (!($106)) {
  __ZNSt3__114__split_bufferIPN8OpenMesh12BasePropertyERNS_9allocatorIS3_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $107 = ___cxa_find_matching_catch()|0;
 $108 = tempRet0;
 $30 = $107;
 $31 = $108;
 __THREW__ = 0;
 invoke_vi(612,($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $113 = ___cxa_find_matching_catch(0|0)|0;
  $114 = tempRet0;
  ___clang_call_terminate($113);
  // unreachable;
 } else {
  $111 = $30;
  $112 = $31;
  ___resumeException($111|0);
  // unreachable;
 }
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEE($this,$_name) {
 $this = $this|0;
 $_name = $_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 96|0;
 $6 = sp + 80|0;
 $10 = sp + 64|0;
 $15 = sp + 44|0;
 $18 = sp + 32|0;
 $21 = sp + 20|0;
 $22 = sp + 16|0;
 $23 = sp + 12|0;
 $25 = $this;
 $26 = $_name;
 $27 = $25;
 $28 = $26;
 __ZN8OpenMesh12BasePropertyC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($27,$28);
 $29 = 3376;
 HEAP32[$27>>2] = $29;
 $30 = ((($27)) + 20|0);
 $24 = $30;
 $31 = $24;
 $20 = $31;
 $32 = $20;
 $19 = $32;
 $0 = $2;
 $1 = -1;
 $33 = $0;
 HEAP32[$33>>2] = 0;
 $34 = HEAP32[$2>>2]|0;
 HEAP32[$21>>2] = $34;
 $3 = $21;
 HEAP32[$32>>2] = 0;
 $35 = ((($32)) + 4|0);
 $4 = $6;
 $5 = -1;
 $36 = $4;
 HEAP32[$36>>2] = 0;
 $37 = HEAP32[$6>>2]|0;
 HEAP32[$22>>2] = $37;
 $7 = $22;
 HEAP32[$35>>2] = 0;
 $38 = ((($32)) + 8|0);
 $8 = $10;
 $9 = -1;
 $39 = $8;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$10>>2]|0;
 HEAP32[$23>>2] = $40;
 $11 = $23;
 $17 = $38;
 HEAP32[$18>>2] = 0;
 $41 = $17;
 $16 = $18;
 $42 = $16;
 $43 = HEAP32[$42>>2]|0;
 $14 = $41;
 HEAP32[$15>>2] = $43;
 $44 = $14;
 $13 = $44;
 $12 = $15;
 $45 = $12;
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$44>>2] = $46;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh15BasePropHandleTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh10BaseHandleC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh12BasePropertyC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($this,$_name) {
 $this = $this|0;
 $_name = $_name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_name;
 $2 = $0;
 $3 = ((__ZTVN8OpenMesh12BasePropertyE) + 8|0);
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 $5 = $1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($4,$5);
 $6 = ((($2)) + 16|0);
 HEAP8[$6>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh12BasePropertyD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((__ZTVN8OpenMesh12BasePropertyE) + 8|0);
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 3376;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 20|0);
 __THREW__ = 0;
 invoke_vi(613,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8OpenMesh12BasePropertyD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(614,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(53,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7reserveEj($this,$_n) {
 $this = $this|0;
 $_n = $_n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_n;
 $2 = $0;
 $3 = ((($2)) + 20|0);
 $4 = $1;
 __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE7reserveEj($3,$4);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE6resizeEj($this,$_n) {
 $this = $this|0;
 $_n = $_n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_n;
 $2 = $0;
 $3 = ((($2)) + 20|0);
 $4 = $1;
 __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE6resizeEj($3,$4);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 184|0;
 $6 = sp + 168|0;
 $10 = sp + 152|0;
 $15 = sp + 132|0;
 $18 = sp + 120|0;
 $21 = sp + 108|0;
 $22 = sp + 104|0;
 $23 = sp + 100|0;
 $28 = sp;
 $31 = sp + 196|0;
 $44 = sp + 12|0;
 $43 = $this;
 $47 = $43;
 $48 = ((($47)) + 20|0);
 $40 = $48;
 $49 = $40;
 $39 = $49;
 $50 = $39;
 $51 = ((($50)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = HEAP32[$50>>2]|0;
 $54 = $52;
 $55 = $53;
 $56 = (($54) - ($55))|0;
 $__old_size$i = $56;
 $37 = $49;
 $57 = $37;
 $58 = HEAP32[$57>>2]|0;
 $35 = $57;
 $36 = $58;
 $59 = $35;
 while(1) {
  $60 = $36;
  $61 = ((($59)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($60|0)!=($62|0);
  if (!($63)) {
   break;
  }
  $34 = $59;
  $64 = $34;
  $65 = ((($64)) + 8|0);
  $33 = $65;
  $66 = $33;
  $32 = $66;
  $67 = $32;
  $68 = ((($59)) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($69)) + -1|0);
  HEAP32[$68>>2] = $70;
  $25 = $70;
  $71 = $25;
  $29 = $67;
  $30 = $71;
  $72 = $29;
  $73 = $30;
  ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
  $26 = $72;
  $27 = $73;
 }
 $74 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(615,($49|0),($74|0));
 $75 = __THREW__; __THREW__ = 0;
 $76 = $75&1;
 if ($76) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $41 = $77;
  $42 = $78;
  $79 = $41;
  ___cxa_call_unexpected(($79|0));
  // unreachable;
 }
 $38 = $49;
 $24 = $44;
 $80 = $24;
 $20 = $80;
 $81 = $20;
 $19 = $81;
 $0 = $2;
 $1 = -1;
 $82 = $0;
 HEAP32[$82>>2] = 0;
 $83 = HEAP32[$2>>2]|0;
 HEAP32[$21>>2] = $83;
 $3 = $21;
 HEAP32[$81>>2] = 0;
 $84 = ((($81)) + 4|0);
 $4 = $6;
 $5 = -1;
 $85 = $4;
 HEAP32[$85>>2] = 0;
 $86 = HEAP32[$6>>2]|0;
 HEAP32[$22>>2] = $86;
 $7 = $22;
 HEAP32[$84>>2] = 0;
 $87 = ((($81)) + 8|0);
 $8 = $10;
 $9 = -1;
 $88 = $8;
 HEAP32[$88>>2] = 0;
 $89 = HEAP32[$10>>2]|0;
 HEAP32[$23>>2] = $89;
 $11 = $23;
 $17 = $87;
 HEAP32[$18>>2] = 0;
 $90 = $17;
 $16 = $18;
 $91 = $16;
 $92 = HEAP32[$91>>2]|0;
 $14 = $90;
 HEAP32[$15>>2] = $92;
 $93 = $14;
 $13 = $93;
 $12 = $15;
 $94 = $12;
 $95 = HEAP32[$94>>2]|0;
 HEAP32[$93>>2] = $95;
 $96 = ((($47)) + 20|0);
 __THREW__ = 0;
 invoke_vii(616,($44|0),($96|0));
 $97 = __THREW__; __THREW__ = 0;
 $98 = $97&1;
 if (!($98)) {
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev($44);
  STACKTOP = sp;return;
 }
 $99 = ___cxa_find_matching_catch()|0;
 $100 = tempRet0;
 $45 = $99;
 $46 = $100;
 __THREW__ = 0;
 invoke_vi(613,($44|0));
 $101 = __THREW__; __THREW__ = 0;
 $102 = $101&1;
 if ($102) {
  $105 = ___cxa_find_matching_catch(0|0)|0;
  $106 = tempRet0;
  ___clang_call_terminate($105);
  // unreachable;
 } else {
  $103 = $45;
  $104 = $46;
  ___resumeException($103|0);
  // unreachable;
 }
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE9push_backEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__annotator$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator$i = sp + 53|0;
 $13 = sp + 52|0;
 $12 = $this;
 $14 = $12;
 $15 = ((($14)) + 20|0);
 $10 = $15;
 $11 = $13;
 $16 = $10;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $9 = $16;
 $19 = $9;
 $20 = ((($19)) + 8|0);
 $8 = $20;
 $21 = $8;
 $7 = $21;
 $22 = $7;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($18|0)!=($23|0);
 if ($24) {
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotatorC2ERKSG_j($__annotator$i,$16,1);
  $6 = $16;
  $25 = $6;
  $26 = ((($25)) + 8|0);
  $5 = $26;
  $27 = $5;
  $4 = $27;
  $28 = $4;
  $29 = ((($16)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $3 = $30;
  $31 = $3;
  $32 = $11;
  $0 = $28;
  $1 = $31;
  $2 = $32;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $33 = ((($16)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 1|0);
  HEAP32[$33>>2] = $35;
  STACKTOP = sp;return;
 } else {
  $36 = $11;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE21__push_back_slow_pathIKSD_EEvRT_($16,$36);
  STACKTOP = sp;return;
 }
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4swapEjj($this,$_i0,$_i1) {
 $this = $this|0;
 $_i0 = $_i0|0;
 $_i1 = $_i1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i = sp + 48|0;
 $9 = $this;
 $10 = $_i0;
 $11 = $_i1;
 $12 = $9;
 $13 = ((($12)) + 20|0);
 $14 = $10;
 $7 = $13;
 $8 = $14;
 $15 = $7;
 $16 = $8;
 $17 = HEAP32[$15>>2]|0;
 $18 = (($17) + ($16)|0);
 $19 = ((($12)) + 20|0);
 $20 = $11;
 $0 = $19;
 $1 = $20;
 $21 = $0;
 $22 = $1;
 $23 = HEAP32[$21>>2]|0;
 $24 = (($23) + ($22)|0);
 $5 = $18;
 $6 = $24;
 $25 = $5;
 $4 = $25;
 $26 = $6;
 $2 = $26;
 $3 = $__t$i;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4copyEjj($this,$_i0,$_i1) {
 $this = $this|0;
 $_i0 = $_i0|0;
 $_i1 = $_i1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $this;
 $5 = $_i0;
 $6 = $_i1;
 $7 = $4;
 $8 = ((($7)) + 20|0);
 $9 = $6;
 $2 = $8;
 $3 = $9;
 $10 = ((($7)) + 20|0);
 $11 = $5;
 $0 = $10;
 $1 = $11;
 STACKTOP = sp;return;
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5cloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(32)|0);
 __THREW__ = 0;
 invoke_vii(617,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $1 = $8;
  $2 = $9;
  __ZdlPv($4);
  $10 = $1;
  $11 = $2;
  ___resumeException($10|0);
  // unreachable;
 } else {
  $p = $4;
  $7 = $p;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE14set_persistentEb($this,$_yn) {
 $this = $this|0;
 $_yn = $_yn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $_yn&1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4&1;
 __ZN8OpenMesh12BaseProperty24check_and_set_persistentINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEvb($3,$5);
 STACKTOP = sp;return;
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE10n_elementsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 STACKTOP = sp;return ($10|0);
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE12element_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN8OpenMesh2IO7size_ofINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7size_ofEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 116|0;
 $5 = sp + 104|0;
 $16 = sp + 16|0;
 $17 = sp + 8|0;
 $18 = sp;
 $21 = sp + 52|0;
 $24 = sp + 40|0;
 $28 = sp + 24|0;
 $29 = sp + 20|0;
 $30 = sp + 128|0;
 $27 = $this;
 $31 = $27;
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 48|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (FUNCTION_TABLE_ii[$34 & 1023]($31)|0);
 $36 = ($35|0)!=(-1);
 if ($36) {
  $37 = HEAP32[$31>>2]|0;
  $38 = ((($37)) + 44|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_ii[$39 & 1023]($31)|0);
  $41 = (__ZNK8OpenMesh12BaseProperty7size_ofEj($31,$40)|0);
  $26 = $41;
  $76 = $26;
  STACKTOP = sp;return ($76|0);
 }
 $42 = ((($31)) + 20|0);
 $25 = $42;
 $43 = $25;
 $44 = HEAP32[$43>>2]|0;
 $22 = $43;
 $23 = $44;
 $45 = $23;
 $19 = $21;
 $20 = $45;
 $46 = $19;
 $47 = $20;
 HEAP32[$46>>2] = $47;
 $48 = HEAP32[$21>>2]|0;
 HEAP32[$24>>2] = $48;
 $49 = HEAP32[$24>>2]|0;
 HEAP32[$28>>2] = $49;
 $50 = ((($31)) + 20|0);
 $6 = $50;
 $51 = $6;
 $52 = ((($51)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $3 = $51;
 $4 = $53;
 $54 = $4;
 $0 = $2;
 $1 = $54;
 $55 = $0;
 $56 = $1;
 HEAP32[$55>>2] = $56;
 $57 = HEAP32[$2>>2]|0;
 HEAP32[$5>>2] = $57;
 $58 = HEAP32[$5>>2]|0;
 HEAP32[$29>>2] = $58;
 ;HEAP8[$16>>0]=HEAP8[$30>>0]|0;
 ;HEAP8[$17>>0]=HEAP8[$29>>0]|0;HEAP8[$17+1>>0]=HEAP8[$29+1>>0]|0;HEAP8[$17+2>>0]=HEAP8[$29+2>>0]|0;HEAP8[$17+3>>0]=HEAP8[$29+3>>0]|0;
 ;HEAP8[$18>>0]=HEAP8[$28>>0]|0;HEAP8[$18+1>>0]=HEAP8[$28+1>>0]|0;HEAP8[$18+2>>0]=HEAP8[$28+2>>0]|0;HEAP8[$18+3>>0]=HEAP8[$28+3>>0]|0;
 $15 = 0;
 while(1) {
  $13 = $18;
  $14 = $17;
  $59 = $13;
  $60 = $14;
  $11 = $59;
  $12 = $60;
  $61 = $11;
  $10 = $61;
  $62 = $10;
  $63 = HEAP32[$62>>2]|0;
  $64 = $12;
  $9 = $64;
  $65 = $9;
  $66 = HEAP32[$65>>2]|0;
  $67 = ($63|0)==($66|0);
  $68 = $67 ^ 1;
  $69 = $15;
  if (!($68)) {
   break;
  }
  $7 = $18;
  $70 = $7;
  $71 = HEAP32[$70>>2]|0;
  $72 = (__ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4plusclEjRKSC_($16,$69,$71)|0);
  $15 = $72;
  $8 = $18;
  $73 = $8;
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($74)) + 1|0);
  HEAP32[$73>>2] = $75;
 }
 $26 = $69;
 $76 = $26;
 STACKTOP = sp;return ($76|0);
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7size_ofEj($this,$_n_elem) {
 $this = $this|0;
 $_n_elem = $_n_elem|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_n_elem;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8OpenMesh12BaseProperty7size_ofEj($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5storeERNSt3__113basic_ostreamIcNSE_11char_traitsIcEEEEb($this,$_ostr,$_swap) {
 $this = $this|0;
 $_ostr = $_ostr|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $_ostr;
 $6 = $_swap&1;
 $5 = $6;
 $7 = $3;
 $8 = (__ZN8OpenMesh2IO13is_streamableINSt3__16vectorINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEbv()|0);
 if ($8) {
  $9 = $4;
  $10 = ((($7)) + 20|0);
  $11 = $5;
  $12 = $11&1;
  $13 = (__ZN8OpenMesh2IO5storeINSt3__16vectorINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEjRNS2_13basic_ostreamIcNS2_11char_traitsIcEEEERKT_b($9,$10,$12)|0);
  $2 = $13;
  $35 = $2;
  STACKTOP = sp;return ($35|0);
 }
 $bytes = 0;
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = HEAP32[$7>>2]|0;
  $16 = ((($15)) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_ii[$17 & 1023]($7)|0);
  $19 = ($14>>>0)<($18>>>0);
  if (!($19)) {
   break;
  }
  $20 = $4;
  $21 = ((($7)) + 20|0);
  $22 = $i;
  $0 = $21;
  $1 = $22;
  $23 = $0;
  $24 = $1;
  $25 = HEAP32[$23>>2]|0;
  $26 = (($25) + ($24)|0);
  $27 = $5;
  $28 = $27&1;
  $29 = (__ZN8OpenMesh2IO5storeINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRNSt3__113basic_ostreamIcNSE_11char_traitsIcEEEERKT_b($20,$26,$28)|0);
  $30 = $bytes;
  $31 = (($30) + ($29))|0;
  $bytes = $31;
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
 }
 $34 = $bytes;
 $2 = $34;
 $35 = $2;
 STACKTOP = sp;return ($35|0);
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7restoreERNSt3__113basic_istreamIcNSE_11char_traitsIcEEEEb($this,$_istr,$_swap) {
 $this = $this|0;
 $_istr = $_istr|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $_istr;
 $6 = $_swap&1;
 $5 = $6;
 $7 = $3;
 $8 = (__ZN8OpenMesh2IO13is_streamableINSt3__16vectorINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEbv()|0);
 if ($8) {
  $9 = $4;
  $10 = ((($7)) + 20|0);
  $11 = $5;
  $12 = $11&1;
  $13 = (__ZN8OpenMesh2IO7restoreINSt3__16vectorINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEjRNS2_13basic_istreamIcNS2_11char_traitsIcEEEERT_b($9,$10,$12)|0);
  $2 = $13;
  $35 = $2;
  STACKTOP = sp;return ($35|0);
 }
 $bytes = 0;
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = HEAP32[$7>>2]|0;
  $16 = ((($15)) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_ii[$17 & 1023]($7)|0);
  $19 = ($14>>>0)<($18>>>0);
  if (!($19)) {
   break;
  }
  $20 = $4;
  $21 = ((($7)) + 20|0);
  $22 = $i;
  $0 = $21;
  $1 = $22;
  $23 = $0;
  $24 = $1;
  $25 = HEAP32[$23>>2]|0;
  $26 = (($25) + ($24)|0);
  $27 = $5;
  $28 = $27&1;
  $29 = (__ZN8OpenMesh2IO7restoreINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRNSt3__113basic_istreamIcNSE_11char_traitsIcEEEERT_b($20,$26,$28)|0);
  $30 = $bytes;
  $31 = (($30) + ($29))|0;
  $bytes = $31;
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
 }
 $34 = $bytes;
 $2 = $34;
 $35 = $2;
 STACKTOP = sp;return ($35|0);
}
function __ZN8OpenMesh2IO13is_streamableINSt3__16vectorINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEbv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN8OpenMesh2IO7restoreINSt3__16vectorINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEjRNS2_13basic_istreamIcNS2_11char_traitsIcEEEERT_b($_is,$_v,$_swap) {
 $_is = $_is|0;
 $_v = $_v|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_is;
 $1 = $_v;
 $3 = $_swap&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 $8 = (__ZN8OpenMesh2IO6binaryINSt3__16vectorINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEE7restoreERNS2_13basic_istreamIcNS2_11char_traitsIcEEEERSI_b($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN8OpenMesh2IO7restoreINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRNSt3__113basic_istreamIcNSE_11char_traitsIcEEEERT_b($_is,$_v,$_swap) {
 $_is = $_is|0;
 $_v = $_v|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_is;
 $1 = $_v;
 $3 = $_swap&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 $8 = (__ZN8OpenMesh2IO6binaryINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7restoreERNSt3__113basic_istreamIcNSF_11char_traitsIcEEEERSD_b($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN8OpenMesh2IO6binaryINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7restoreERNSt3__113basic_istreamIcNSF_11char_traitsIcEEEERSD_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0;
 var $__i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp + 212|0;
 $msg = sp + 24|0;
 $40 = sp;
 $41 = sp + 320|0;
 $35 = $0;
 $36 = $1;
 $42 = $2&1;
 $37 = $42;
 $31 = $msg;
 $32 = 16;
 $43 = $31;
 $44 = ((($43)) + 56|0);
 $30 = $44;
 $45 = $30;
 $29 = $45;
 $46 = $29;
 $47 = 6536;
 HEAP32[$46>>2] = $47;
 $48 = 6212;
 HEAP32[$45>>2] = $48;
 $49 = 3456;
 HEAP32[$43>>2] = $49;
 $50 = ((($43)) + 56|0);
 $51 = 3476;
 HEAP32[$50>>2] = $51;
 $52 = ((($43)) + 4|0);
 $26 = $43;
 $53 = 3488;
 $27 = $53;
 $28 = $52;
 $54 = $26;
 $55 = $27;
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = ((($55)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$54>>2]|0;
 $60 = ((($59)) + -12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($54) + ($61)|0);
 HEAP32[$62>>2] = $58;
 $63 = HEAP32[$54>>2]|0;
 $64 = ((($63)) + -12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($54) + ($65)|0);
 $67 = $28;
 $24 = $66;
 $25 = $67;
 $68 = $24;
 $69 = $25;
 __THREW__ = 0;
 invoke_vii(490,($68|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $133 = ___cxa_find_matching_catch()|0;
  $134 = tempRet0;
  $33 = $133;
  $34 = $134;
 } else {
  $72 = ((($68)) + 72|0);
  HEAP32[$72>>2] = 0;
  $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $74 = ((($68)) + 76|0);
  HEAP32[$74>>2] = $73;
  $75 = 3456;
  HEAP32[$43>>2] = $75;
  $76 = ((($43)) + 56|0);
  $77 = 3476;
  HEAP32[$76>>2] = $77;
  $78 = ((($43)) + 4|0);
  $79 = $32;
  $80 = $79 | 16;
  $19 = $78;
  $20 = $80;
  $81 = $19;
  __THREW__ = 0;
  invoke_vi(500,($81|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  do {
   if ($83) {
    $135 = ___cxa_find_matching_catch()|0;
    $136 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $136;$eh$lpad$body$i$indexZ2D = $135;
   } else {
    $84 = 3016;
    HEAP32[$81>>2] = $84;
    $85 = ((($81)) + 32|0);
    $18 = $85;
    $86 = $18;
    $17 = $86;
    $87 = $17;
    $16 = $87;
    $88 = $16;
    $15 = $88;
    $14 = $86;
    $89 = $14;
    $13 = $89;
    $90 = $13;
    $12 = $90;
    $91 = $12;
    $__a$i$i$i$i = $91;
    $__i$i$i$i$i = 0;
    while(1) {
     $92 = $__i$i$i$i$i;
     $93 = ($92>>>0)<(3);
     if (!($93)) {
      break;
     }
     $94 = $__i$i$i$i$i;
     $95 = $__a$i$i$i$i;
     $96 = (($95) + ($94<<2)|0);
     HEAP32[$96>>2] = 0;
     $97 = $__i$i$i$i$i;
     $98 = (($97) + 1)|0;
     $__i$i$i$i$i = $98;
    }
    $99 = ((($81)) + 44|0);
    HEAP32[$99>>2] = 0;
    $100 = ((($81)) + 48|0);
    $101 = $20;
    HEAP32[$100>>2] = $101;
    $11 = $23;
    $102 = $11;
    $10 = $102;
    $103 = $10;
    $9 = $103;
    $104 = $9;
    $8 = $104;
    $7 = $102;
    $105 = $7;
    $6 = $105;
    $106 = $6;
    $5 = $106;
    $107 = $5;
    $__a$i$i1$i$i = $107;
    $__i$i$i2$i$i = 0;
    while(1) {
     $108 = $__i$i$i2$i$i;
     $109 = ($108>>>0)<(3);
     if (!($109)) {
      break;
     }
     $110 = $__i$i$i2$i$i;
     $111 = $__a$i$i1$i$i;
     $112 = (($111) + ($110<<2)|0);
     HEAP32[$112>>2] = 0;
     $113 = $__i$i$i2$i$i;
     $114 = (($113) + 1)|0;
     $__i$i$i2$i$i = $114;
    }
    __THREW__ = 0;
    invoke_vii(501,($81|0),($23|0));
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    do {
     if ($116) {
      $121 = ___cxa_find_matching_catch()|0;
      $122 = tempRet0;
      $21 = $121;
      $22 = $122;
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $131 = ___cxa_find_matching_catch(0|0)|0;
       $132 = tempRet0;
       ___clang_call_terminate($131);
       // unreachable;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       $119 = ___cxa_find_matching_catch()|0;
       $120 = tempRet0;
       $21 = $119;
       $22 = $120;
       break;
      }
      __THREW__ = 0;
      $146 = (invoke_iii(484,($msg|0),(13513|0))|0);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      if ($148) {
       label = 28;
      } else {
       $4 = 216;
       $149 = $4;
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       (invoke_iii(484,($146|0),($151|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
       } else {
        $154 = (___cxa_allocate_exception(8)|0);
        $$expand_i1_val = 1;
        HEAP8[$41>>0] = $$expand_i1_val;
        $3 = $msg;
        $155 = $3;
        $156 = ((($155)) + 4|0);
        __THREW__ = 0;
        invoke_vii(618,($40|0),($156|0));
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         $164 = ___cxa_find_matching_catch()|0;
         $165 = tempRet0;
         $38 = $164;
         $39 = $165;
        } else {
         __THREW__ = 0;
         invoke_vii(619,($154|0),($40|0));
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if (!($160)) {
          $$expand_i1_val7 = 0;
          HEAP8[$41>>0] = $$expand_i1_val7;
          __THREW__ = 0;
          invoke_viii(620,($154|0),(632|0),(146|0));
          $161 = __THREW__; __THREW__ = 0;
         }
         $166 = ___cxa_find_matching_catch()|0;
         $167 = tempRet0;
         $38 = $166;
         $39 = $167;
         __THREW__ = 0;
         invoke_vi(502,($40|0));
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          $175 = ___cxa_find_matching_catch(0|0)|0;
          $176 = tempRet0;
          ___clang_call_terminate($175);
          // unreachable;
         }
        }
        $$pre_trunc = HEAP8[$41>>0]|0;
        $170 = $$pre_trunc&1;
        if ($170) {
         ___cxa_free_exception(($154|0));
        }
       }
      }
      if ((label|0) == 28) {
       $162 = ___cxa_find_matching_catch()|0;
       $163 = tempRet0;
       $38 = $162;
       $39 = $163;
      }
      __THREW__ = 0;
      invoke_vi(70,($msg|0));
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       $175 = ___cxa_find_matching_catch(0|0)|0;
       $176 = tempRet0;
       ___clang_call_terminate($175);
       // unreachable;
      } else {
       $173 = $38;
       $174 = $39;
       ___resumeException($173|0);
       // unreachable;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(502,($85|0));
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(194,($81|0));
    $127 = __THREW__; __THREW__ = 0;
    $128 = $127&1;
    if ($128) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    } else {
     $129 = $21;
     $130 = $22;
     $eh$lpad$body$i$index2Z2D = $130;$eh$lpad$body$i$indexZ2D = $129;
     break;
    }
   }
  } while(0);
  $33 = $eh$lpad$body$i$indexZ2D;
  $34 = $eh$lpad$body$i$index2Z2D;
  __THREW__ = 0;
  $137 = __THREW__; __THREW__ = 0;
  $138 = $137&1;
  if ($138) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
 }
 $139 = ((($43)) + 56|0);
 __THREW__ = 0;
 invoke_vi(210,($139|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if ($141) {
  $144 = ___cxa_find_matching_catch(0|0)|0;
  $145 = tempRet0;
  ___clang_call_terminate($144);
  // unreachable;
 } else {
  $142 = $33;
  $143 = $34;
  ___resumeException($142|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$i$i = 0, $__i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = sp + 40|0;
 $10 = sp + 232|0;
 $11 = sp + 32|0;
 $16 = sp + 231|0;
 $26 = sp + 24|0;
 $29 = sp + 230|0;
 $30 = sp + 16|0;
 $35 = sp + 229|0;
 $45 = sp + 8|0;
 $48 = sp + 228|0;
 $49 = sp;
 $52 = sp + 227|0;
 $55 = sp + 226|0;
 $56 = sp + 225|0;
 $57 = sp + 224|0;
 $54 = $this;
 $58 = $54;
 $59 = ((($58)) + 48|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $60 & 16;
 $62 = ($61|0)!=(0);
 if ($62) {
  $63 = ((($58)) + 44|0);
  $64 = HEAP32[$63>>2]|0;
  $53 = $58;
  $65 = $53;
  $66 = ((($65)) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($64>>>0)<($67>>>0);
  if ($68) {
   $23 = $58;
   $69 = $23;
   $70 = ((($69)) + 24|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ((($58)) + 44|0);
   HEAP32[$72>>2] = $71;
  }
  $4 = $58;
  $73 = $4;
  $74 = ((($73)) + 20|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ((($58)) + 44|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($58)) + 32|0);
  $3 = $78;
  $79 = $3;
  $2 = $79;
  $80 = $2;
  $1 = $80;
  $81 = $1;
  $0 = $81;
  $12 = $agg$result;
  $13 = $75;
  $14 = $77;
  $15 = $55;
  $82 = $12;
  ;HEAP8[$11>>0]=HEAP8[$16>>0]|0;
  $9 = $82;
  $83 = $9;
  $8 = $11;
  ;HEAP8[$7>>0]=HEAP8[$10>>0]|0;
  $6 = $83;
  $5 = $7;
  $84 = $13;
  $85 = $14;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($82,$84,$85);
  STACKTOP = sp;return;
 }
 $86 = ((($58)) + 48|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $87 & 8;
 $89 = ($88|0)!=(0);
 if ($89) {
  $17 = $58;
  $90 = $17;
  $91 = ((($90)) + 8|0);
  $92 = HEAP32[$91>>2]|0;
  $18 = $58;
  $93 = $18;
  $94 = ((($93)) + 16|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ((($58)) + 32|0);
  $22 = $96;
  $97 = $22;
  $21 = $97;
  $98 = $21;
  $20 = $98;
  $99 = $20;
  $19 = $99;
  $31 = $agg$result;
  $32 = $92;
  $33 = $95;
  $34 = $56;
  $100 = $31;
  ;HEAP8[$30>>0]=HEAP8[$35>>0]|0;
  $28 = $100;
  $101 = $28;
  $27 = $30;
  ;HEAP8[$26>>0]=HEAP8[$29>>0]|0;
  $25 = $101;
  $24 = $26;
  $102 = $32;
  $103 = $33;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($100,$102,$103);
  STACKTOP = sp;return;
 }
 $104 = ((($58)) + 32|0);
 $39 = $104;
 $105 = $39;
 $38 = $105;
 $106 = $38;
 $37 = $106;
 $107 = $37;
 $36 = $107;
 $50 = $agg$result;
 $51 = $57;
 $108 = $50;
 ;HEAP8[$49>>0]=HEAP8[$52>>0]|0;
 $47 = $108;
 $109 = $47;
 $46 = $49;
 ;HEAP8[$45>>0]=HEAP8[$48>>0]|0;
 $44 = $109;
 $43 = $45;
 $42 = $108;
 $110 = $42;
 $41 = $110;
 $111 = $41;
 $40 = $111;
 $112 = $40;
 $__a$i$i = $112;
 $__i$i$i = 0;
 while(1) {
  $113 = $__i$i$i;
  $114 = ($113>>>0)<(3);
  if (!($114)) {
   break;
  }
  $115 = $__i$i$i;
  $116 = $__a$i$i;
  $117 = (($116) + ($115<<2)|0);
  HEAP32[$117>>2] = 0;
  $118 = $__i$i$i;
  $119 = (($118) + 1)|0;
  $__i$i$i = $119;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vii(621,($3|0),(3484|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = ((($3)) + 56|0);
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($6);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 $9 = ((($3)) + 56|0);
 __THREW__ = 0;
 invoke_vi(210,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $vtt;
 $4 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = ((($5)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$4>>2]|0;
 $10 = ((($9)) + -12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($4) + ($11)|0);
 HEAP32[$12>>2] = $8;
 $13 = ((($4)) + 4|0);
 __THREW__ = 0;
 invoke_vi(15,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $2 = $16;
 $3 = $17;
 __THREW__ = 0;
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $22 = ___cxa_find_matching_catch(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  $20 = $2;
  $21 = $3;
  ___resumeException($20|0);
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cap = 0, $__m$i = 0, $__p = 0, $__sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $34 = sp + 8|0;
 $36 = sp + 214|0;
 $43 = sp;
 $46 = sp + 213|0;
 $50 = sp + 212|0;
 $47 = $this;
 $48 = $__first;
 $49 = $__last;
 $51 = $47;
 $52 = $48;
 $53 = $49;
 $44 = $52;
 $45 = $53;
 $54 = $44;
 $55 = $45;
 ;HEAP8[$43>>0]=HEAP8[$46>>0]|0;
 $41 = $54;
 $42 = $55;
 $56 = $42;
 $57 = $41;
 $58 = $56;
 $59 = $57;
 $60 = (($58) - ($59))|0;
 $__sz = $60;
 $61 = $__sz;
 $40 = $51;
 $62 = $40;
 $39 = $62;
 $63 = $39;
 $38 = $63;
 $64 = $38;
 $37 = $64;
 $65 = $37;
 $35 = $65;
 $66 = $35;
 ;HEAP8[$34>>0]=HEAP8[$36>>0]|0;
 $33 = $66;
 $67 = $33;
 $32 = $67;
 $__m$i = -1;
 $68 = $__m$i;
 $69 = (($68) - 16)|0;
 $70 = ($61>>>0)>($69>>>0);
 if ($70) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($51);
  // unreachable;
 }
 $71 = $__sz;
 $72 = ($71>>>0)<(11);
 $73 = $__sz;
 if ($72) {
  $30 = $51;
  $31 = $73;
  $74 = $30;
  $75 = $31;
  $76 = $75 << 1;
  $77 = $76&255;
  $29 = $74;
  $78 = $29;
  $28 = $78;
  $79 = $28;
  HEAP8[$79>>0] = $77;
  $9 = $51;
  $80 = $9;
  $8 = $80;
  $81 = $8;
  $7 = $81;
  $82 = $7;
  $83 = ((($82)) + 1|0);
  $6 = $83;
  $84 = $6;
  $5 = $84;
  $85 = $5;
  $__p = $85;
 } else {
  $1 = $73;
  $86 = $1;
  $87 = ($86>>>0)<(11);
  if ($87) {
   $94 = 11;
  } else {
   $88 = $1;
   $89 = (($88) + 1)|0;
   $0 = $89;
   $90 = $0;
   $91 = (($90) + 15)|0;
   $92 = $91 & -16;
   $94 = $92;
  }
  $93 = (($94) - 1)|0;
  $__cap = $93;
  $4 = $51;
  $95 = $4;
  $3 = $95;
  $96 = $3;
  $2 = $96;
  $97 = $2;
  $98 = $__cap;
  $99 = (($98) + 1)|0;
  $14 = $97;
  $15 = $99;
  $100 = $14;
  $101 = $15;
  $11 = $100;
  $12 = $101;
  $13 = 0;
  $102 = $12;
  $10 = $102;
  $103 = $10;
  $104 = (__Znwj($103)|0);
  $__p = $104;
  $105 = $__p;
  $18 = $51;
  $19 = $105;
  $106 = $18;
  $107 = $19;
  $17 = $106;
  $108 = $17;
  $16 = $108;
  $109 = $16;
  $110 = ((($109)) + 8|0);
  HEAP32[$110>>2] = $107;
  $111 = $__cap;
  $112 = (($111) + 1)|0;
  $22 = $51;
  $23 = $112;
  $113 = $22;
  $114 = $23;
  $115 = 1 | $114;
  $21 = $113;
  $116 = $21;
  $20 = $116;
  $117 = $20;
  HEAP32[$117>>2] = $115;
  $118 = $__sz;
  $26 = $51;
  $27 = $118;
  $119 = $26;
  $120 = $27;
  $25 = $119;
  $121 = $25;
  $24 = $121;
  $122 = $24;
  $123 = ((($122)) + 4|0);
  HEAP32[$123>>2] = $120;
 }
 while(1) {
  $124 = $48;
  $125 = $49;
  $126 = ($124|0)!=($125|0);
  $127 = $__p;
  if (!($126)) {
   break;
  }
  $128 = $48;
  __ZNSt3__111char_traitsIcE6assignERcRKc($127,$128);
  $129 = $48;
  $130 = ((($129)) + 1|0);
  $48 = $130;
  $131 = $__p;
  $132 = ((($131)) + 1|0);
  $__p = $132;
 }
 HEAP8[$50>>0] = 0;
 __ZNSt3__111char_traitsIcE6assignERcRKc($127,$50);
 STACKTOP = sp;return;
}
function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(70,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($5);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh2IO6binaryINSt3__16vectorINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEE7restoreERNS2_13basic_istreamIcNS2_11char_traitsIcEEEERSI_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0;
 var $__i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp + 212|0;
 $msg = sp + 24|0;
 $40 = sp;
 $41 = sp + 320|0;
 $35 = $0;
 $36 = $1;
 $42 = $2&1;
 $37 = $42;
 $31 = $msg;
 $32 = 16;
 $43 = $31;
 $44 = ((($43)) + 56|0);
 $30 = $44;
 $45 = $30;
 $29 = $45;
 $46 = $29;
 $47 = 6536;
 HEAP32[$46>>2] = $47;
 $48 = 6212;
 HEAP32[$45>>2] = $48;
 $49 = 3456;
 HEAP32[$43>>2] = $49;
 $50 = ((($43)) + 56|0);
 $51 = 3476;
 HEAP32[$50>>2] = $51;
 $52 = ((($43)) + 4|0);
 $26 = $43;
 $53 = 3488;
 $27 = $53;
 $28 = $52;
 $54 = $26;
 $55 = $27;
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = ((($55)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$54>>2]|0;
 $60 = ((($59)) + -12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($54) + ($61)|0);
 HEAP32[$62>>2] = $58;
 $63 = HEAP32[$54>>2]|0;
 $64 = ((($63)) + -12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($54) + ($65)|0);
 $67 = $28;
 $24 = $66;
 $25 = $67;
 $68 = $24;
 $69 = $25;
 __THREW__ = 0;
 invoke_vii(490,($68|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $133 = ___cxa_find_matching_catch()|0;
  $134 = tempRet0;
  $33 = $133;
  $34 = $134;
 } else {
  $72 = ((($68)) + 72|0);
  HEAP32[$72>>2] = 0;
  $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $74 = ((($68)) + 76|0);
  HEAP32[$74>>2] = $73;
  $75 = 3456;
  HEAP32[$43>>2] = $75;
  $76 = ((($43)) + 56|0);
  $77 = 3476;
  HEAP32[$76>>2] = $77;
  $78 = ((($43)) + 4|0);
  $79 = $32;
  $80 = $79 | 16;
  $19 = $78;
  $20 = $80;
  $81 = $19;
  __THREW__ = 0;
  invoke_vi(500,($81|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  do {
   if ($83) {
    $135 = ___cxa_find_matching_catch()|0;
    $136 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $136;$eh$lpad$body$i$indexZ2D = $135;
   } else {
    $84 = 3016;
    HEAP32[$81>>2] = $84;
    $85 = ((($81)) + 32|0);
    $18 = $85;
    $86 = $18;
    $17 = $86;
    $87 = $17;
    $16 = $87;
    $88 = $16;
    $15 = $88;
    $14 = $86;
    $89 = $14;
    $13 = $89;
    $90 = $13;
    $12 = $90;
    $91 = $12;
    $__a$i$i$i$i = $91;
    $__i$i$i$i$i = 0;
    while(1) {
     $92 = $__i$i$i$i$i;
     $93 = ($92>>>0)<(3);
     if (!($93)) {
      break;
     }
     $94 = $__i$i$i$i$i;
     $95 = $__a$i$i$i$i;
     $96 = (($95) + ($94<<2)|0);
     HEAP32[$96>>2] = 0;
     $97 = $__i$i$i$i$i;
     $98 = (($97) + 1)|0;
     $__i$i$i$i$i = $98;
    }
    $99 = ((($81)) + 44|0);
    HEAP32[$99>>2] = 0;
    $100 = ((($81)) + 48|0);
    $101 = $20;
    HEAP32[$100>>2] = $101;
    $11 = $23;
    $102 = $11;
    $10 = $102;
    $103 = $10;
    $9 = $103;
    $104 = $9;
    $8 = $104;
    $7 = $102;
    $105 = $7;
    $6 = $105;
    $106 = $6;
    $5 = $106;
    $107 = $5;
    $__a$i$i1$i$i = $107;
    $__i$i$i2$i$i = 0;
    while(1) {
     $108 = $__i$i$i2$i$i;
     $109 = ($108>>>0)<(3);
     if (!($109)) {
      break;
     }
     $110 = $__i$i$i2$i$i;
     $111 = $__a$i$i1$i$i;
     $112 = (($111) + ($110<<2)|0);
     HEAP32[$112>>2] = 0;
     $113 = $__i$i$i2$i$i;
     $114 = (($113) + 1)|0;
     $__i$i$i2$i$i = $114;
    }
    __THREW__ = 0;
    invoke_vii(501,($81|0),($23|0));
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    do {
     if ($116) {
      $121 = ___cxa_find_matching_catch()|0;
      $122 = tempRet0;
      $21 = $121;
      $22 = $122;
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $131 = ___cxa_find_matching_catch(0|0)|0;
       $132 = tempRet0;
       ___clang_call_terminate($131);
       // unreachable;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       $119 = ___cxa_find_matching_catch()|0;
       $120 = tempRet0;
       $21 = $119;
       $22 = $120;
       break;
      }
      __THREW__ = 0;
      $146 = (invoke_iii(484,($msg|0),(13513|0))|0);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      if ($148) {
       label = 28;
      } else {
       $4 = 256;
       $149 = $4;
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       (invoke_iii(484,($146|0),($151|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
       } else {
        $154 = (___cxa_allocate_exception(8)|0);
        $$expand_i1_val = 1;
        HEAP8[$41>>0] = $$expand_i1_val;
        $3 = $msg;
        $155 = $3;
        $156 = ((($155)) + 4|0);
        __THREW__ = 0;
        invoke_vii(618,($40|0),($156|0));
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         $164 = ___cxa_find_matching_catch()|0;
         $165 = tempRet0;
         $38 = $164;
         $39 = $165;
        } else {
         __THREW__ = 0;
         invoke_vii(619,($154|0),($40|0));
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if (!($160)) {
          $$expand_i1_val7 = 0;
          HEAP8[$41>>0] = $$expand_i1_val7;
          __THREW__ = 0;
          invoke_viii(620,($154|0),(632|0),(146|0));
          $161 = __THREW__; __THREW__ = 0;
         }
         $166 = ___cxa_find_matching_catch()|0;
         $167 = tempRet0;
         $38 = $166;
         $39 = $167;
         __THREW__ = 0;
         invoke_vi(502,($40|0));
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          $175 = ___cxa_find_matching_catch(0|0)|0;
          $176 = tempRet0;
          ___clang_call_terminate($175);
          // unreachable;
         }
        }
        $$pre_trunc = HEAP8[$41>>0]|0;
        $170 = $$pre_trunc&1;
        if ($170) {
         ___cxa_free_exception(($154|0));
        }
       }
      }
      if ((label|0) == 28) {
       $162 = ___cxa_find_matching_catch()|0;
       $163 = tempRet0;
       $38 = $162;
       $39 = $163;
      }
      __THREW__ = 0;
      invoke_vi(70,($msg|0));
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       $175 = ___cxa_find_matching_catch(0|0)|0;
       $176 = tempRet0;
       ___clang_call_terminate($175);
       // unreachable;
      } else {
       $173 = $38;
       $174 = $39;
       ___resumeException($173|0);
       // unreachable;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(502,($85|0));
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(194,($81|0));
    $127 = __THREW__; __THREW__ = 0;
    $128 = $127&1;
    if ($128) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    } else {
     $129 = $21;
     $130 = $22;
     $eh$lpad$body$i$index2Z2D = $130;$eh$lpad$body$i$indexZ2D = $129;
     break;
    }
   }
  } while(0);
  $33 = $eh$lpad$body$i$indexZ2D;
  $34 = $eh$lpad$body$i$index2Z2D;
  __THREW__ = 0;
  $137 = __THREW__; __THREW__ = 0;
  $138 = $137&1;
  if ($138) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
 }
 $139 = ((($43)) + 56|0);
 __THREW__ = 0;
 invoke_vi(210,($139|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if ($141) {
  $144 = ___cxa_find_matching_catch(0|0)|0;
  $145 = tempRet0;
  ___clang_call_terminate($144);
  // unreachable;
 } else {
  $142 = $33;
  $143 = $34;
  ___resumeException($142|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh2IO5storeINSt3__16vectorINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEjRNS2_13basic_ostreamIcNS2_11char_traitsIcEEEERKT_b($_os,$_v,$_swap) {
 $_os = $_os|0;
 $_v = $_v|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_os;
 $1 = $_v;
 $3 = $_swap&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 $8 = (__ZN8OpenMesh2IO6binaryINSt3__16vectorINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEE5storeERNS2_13basic_ostreamIcNS2_11char_traitsIcEEEERKSI_b($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN8OpenMesh2IO5storeINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRNSt3__113basic_ostreamIcNSE_11char_traitsIcEEEERKT_b($_os,$_v,$_swap) {
 $_os = $_os|0;
 $_v = $_v|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_os;
 $1 = $_v;
 $3 = $_swap&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 $8 = (__ZN8OpenMesh2IO6binaryINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE5storeERNSt3__113basic_ostreamIcNSF_11char_traitsIcEEEERKSD_b($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN8OpenMesh2IO6binaryINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE5storeERNSt3__113basic_ostreamIcNSF_11char_traitsIcEEEERKSD_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0;
 var $__i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp + 212|0;
 $msg = sp + 24|0;
 $40 = sp;
 $41 = sp + 320|0;
 $35 = $0;
 $36 = $1;
 $42 = $2&1;
 $37 = $42;
 $31 = $msg;
 $32 = 16;
 $43 = $31;
 $44 = ((($43)) + 56|0);
 $30 = $44;
 $45 = $30;
 $29 = $45;
 $46 = $29;
 $47 = 6536;
 HEAP32[$46>>2] = $47;
 $48 = 6212;
 HEAP32[$45>>2] = $48;
 $49 = 3456;
 HEAP32[$43>>2] = $49;
 $50 = ((($43)) + 56|0);
 $51 = 3476;
 HEAP32[$50>>2] = $51;
 $52 = ((($43)) + 4|0);
 $26 = $43;
 $53 = 3488;
 $27 = $53;
 $28 = $52;
 $54 = $26;
 $55 = $27;
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = ((($55)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$54>>2]|0;
 $60 = ((($59)) + -12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($54) + ($61)|0);
 HEAP32[$62>>2] = $58;
 $63 = HEAP32[$54>>2]|0;
 $64 = ((($63)) + -12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($54) + ($65)|0);
 $67 = $28;
 $24 = $66;
 $25 = $67;
 $68 = $24;
 $69 = $25;
 __THREW__ = 0;
 invoke_vii(490,($68|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $133 = ___cxa_find_matching_catch()|0;
  $134 = tempRet0;
  $33 = $133;
  $34 = $134;
 } else {
  $72 = ((($68)) + 72|0);
  HEAP32[$72>>2] = 0;
  $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $74 = ((($68)) + 76|0);
  HEAP32[$74>>2] = $73;
  $75 = 3456;
  HEAP32[$43>>2] = $75;
  $76 = ((($43)) + 56|0);
  $77 = 3476;
  HEAP32[$76>>2] = $77;
  $78 = ((($43)) + 4|0);
  $79 = $32;
  $80 = $79 | 16;
  $19 = $78;
  $20 = $80;
  $81 = $19;
  __THREW__ = 0;
  invoke_vi(500,($81|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  do {
   if ($83) {
    $135 = ___cxa_find_matching_catch()|0;
    $136 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $136;$eh$lpad$body$i$indexZ2D = $135;
   } else {
    $84 = 3016;
    HEAP32[$81>>2] = $84;
    $85 = ((($81)) + 32|0);
    $18 = $85;
    $86 = $18;
    $17 = $86;
    $87 = $17;
    $16 = $87;
    $88 = $16;
    $15 = $88;
    $14 = $86;
    $89 = $14;
    $13 = $89;
    $90 = $13;
    $12 = $90;
    $91 = $12;
    $__a$i$i$i$i = $91;
    $__i$i$i$i$i = 0;
    while(1) {
     $92 = $__i$i$i$i$i;
     $93 = ($92>>>0)<(3);
     if (!($93)) {
      break;
     }
     $94 = $__i$i$i$i$i;
     $95 = $__a$i$i$i$i;
     $96 = (($95) + ($94<<2)|0);
     HEAP32[$96>>2] = 0;
     $97 = $__i$i$i$i$i;
     $98 = (($97) + 1)|0;
     $__i$i$i$i$i = $98;
    }
    $99 = ((($81)) + 44|0);
    HEAP32[$99>>2] = 0;
    $100 = ((($81)) + 48|0);
    $101 = $20;
    HEAP32[$100>>2] = $101;
    $11 = $23;
    $102 = $11;
    $10 = $102;
    $103 = $10;
    $9 = $103;
    $104 = $9;
    $8 = $104;
    $7 = $102;
    $105 = $7;
    $6 = $105;
    $106 = $6;
    $5 = $106;
    $107 = $5;
    $__a$i$i1$i$i = $107;
    $__i$i$i2$i$i = 0;
    while(1) {
     $108 = $__i$i$i2$i$i;
     $109 = ($108>>>0)<(3);
     if (!($109)) {
      break;
     }
     $110 = $__i$i$i2$i$i;
     $111 = $__a$i$i1$i$i;
     $112 = (($111) + ($110<<2)|0);
     HEAP32[$112>>2] = 0;
     $113 = $__i$i$i2$i$i;
     $114 = (($113) + 1)|0;
     $__i$i$i2$i$i = $114;
    }
    __THREW__ = 0;
    invoke_vii(501,($81|0),($23|0));
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    do {
     if ($116) {
      $121 = ___cxa_find_matching_catch()|0;
      $122 = tempRet0;
      $21 = $121;
      $22 = $122;
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $131 = ___cxa_find_matching_catch(0|0)|0;
       $132 = tempRet0;
       ___clang_call_terminate($131);
       // unreachable;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       $119 = ___cxa_find_matching_catch()|0;
       $120 = tempRet0;
       $21 = $119;
       $22 = $120;
       break;
      }
      __THREW__ = 0;
      $146 = (invoke_iii(484,($msg|0),(13513|0))|0);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      if ($148) {
       label = 28;
      } else {
       $4 = 216;
       $149 = $4;
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       (invoke_iii(484,($146|0),($151|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
       } else {
        $154 = (___cxa_allocate_exception(8)|0);
        $$expand_i1_val = 1;
        HEAP8[$41>>0] = $$expand_i1_val;
        $3 = $msg;
        $155 = $3;
        $156 = ((($155)) + 4|0);
        __THREW__ = 0;
        invoke_vii(618,($40|0),($156|0));
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         $164 = ___cxa_find_matching_catch()|0;
         $165 = tempRet0;
         $38 = $164;
         $39 = $165;
        } else {
         __THREW__ = 0;
         invoke_vii(619,($154|0),($40|0));
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if (!($160)) {
          $$expand_i1_val7 = 0;
          HEAP8[$41>>0] = $$expand_i1_val7;
          __THREW__ = 0;
          invoke_viii(620,($154|0),(632|0),(146|0));
          $161 = __THREW__; __THREW__ = 0;
         }
         $166 = ___cxa_find_matching_catch()|0;
         $167 = tempRet0;
         $38 = $166;
         $39 = $167;
         __THREW__ = 0;
         invoke_vi(502,($40|0));
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          $175 = ___cxa_find_matching_catch(0|0)|0;
          $176 = tempRet0;
          ___clang_call_terminate($175);
          // unreachable;
         }
        }
        $$pre_trunc = HEAP8[$41>>0]|0;
        $170 = $$pre_trunc&1;
        if ($170) {
         ___cxa_free_exception(($154|0));
        }
       }
      }
      if ((label|0) == 28) {
       $162 = ___cxa_find_matching_catch()|0;
       $163 = tempRet0;
       $38 = $162;
       $39 = $163;
      }
      __THREW__ = 0;
      invoke_vi(70,($msg|0));
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       $175 = ___cxa_find_matching_catch(0|0)|0;
       $176 = tempRet0;
       ___clang_call_terminate($175);
       // unreachable;
      } else {
       $173 = $38;
       $174 = $39;
       ___resumeException($173|0);
       // unreachable;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(502,($85|0));
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(194,($81|0));
    $127 = __THREW__; __THREW__ = 0;
    $128 = $127&1;
    if ($128) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    } else {
     $129 = $21;
     $130 = $22;
     $eh$lpad$body$i$index2Z2D = $130;$eh$lpad$body$i$indexZ2D = $129;
     break;
    }
   }
  } while(0);
  $33 = $eh$lpad$body$i$indexZ2D;
  $34 = $eh$lpad$body$i$index2Z2D;
  __THREW__ = 0;
  $137 = __THREW__; __THREW__ = 0;
  $138 = $137&1;
  if ($138) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
 }
 $139 = ((($43)) + 56|0);
 __THREW__ = 0;
 invoke_vi(210,($139|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if ($141) {
  $144 = ___cxa_find_matching_catch(0|0)|0;
  $145 = tempRet0;
  ___clang_call_terminate($144);
  // unreachable;
 } else {
  $142 = $33;
  $143 = $34;
  ___resumeException($142|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh2IO6binaryINSt3__16vectorINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEE5storeERNS2_13basic_ostreamIcNS2_11char_traitsIcEEEERKSI_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0;
 var $__i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp + 212|0;
 $msg = sp + 24|0;
 $40 = sp;
 $41 = sp + 320|0;
 $35 = $0;
 $36 = $1;
 $42 = $2&1;
 $37 = $42;
 $31 = $msg;
 $32 = 16;
 $43 = $31;
 $44 = ((($43)) + 56|0);
 $30 = $44;
 $45 = $30;
 $29 = $45;
 $46 = $29;
 $47 = 6536;
 HEAP32[$46>>2] = $47;
 $48 = 6212;
 HEAP32[$45>>2] = $48;
 $49 = 3456;
 HEAP32[$43>>2] = $49;
 $50 = ((($43)) + 56|0);
 $51 = 3476;
 HEAP32[$50>>2] = $51;
 $52 = ((($43)) + 4|0);
 $26 = $43;
 $53 = 3488;
 $27 = $53;
 $28 = $52;
 $54 = $26;
 $55 = $27;
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = ((($55)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$54>>2]|0;
 $60 = ((($59)) + -12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($54) + ($61)|0);
 HEAP32[$62>>2] = $58;
 $63 = HEAP32[$54>>2]|0;
 $64 = ((($63)) + -12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($54) + ($65)|0);
 $67 = $28;
 $24 = $66;
 $25 = $67;
 $68 = $24;
 $69 = $25;
 __THREW__ = 0;
 invoke_vii(490,($68|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $133 = ___cxa_find_matching_catch()|0;
  $134 = tempRet0;
  $33 = $133;
  $34 = $134;
 } else {
  $72 = ((($68)) + 72|0);
  HEAP32[$72>>2] = 0;
  $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $74 = ((($68)) + 76|0);
  HEAP32[$74>>2] = $73;
  $75 = 3456;
  HEAP32[$43>>2] = $75;
  $76 = ((($43)) + 56|0);
  $77 = 3476;
  HEAP32[$76>>2] = $77;
  $78 = ((($43)) + 4|0);
  $79 = $32;
  $80 = $79 | 16;
  $19 = $78;
  $20 = $80;
  $81 = $19;
  __THREW__ = 0;
  invoke_vi(500,($81|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  do {
   if ($83) {
    $135 = ___cxa_find_matching_catch()|0;
    $136 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $136;$eh$lpad$body$i$indexZ2D = $135;
   } else {
    $84 = 3016;
    HEAP32[$81>>2] = $84;
    $85 = ((($81)) + 32|0);
    $18 = $85;
    $86 = $18;
    $17 = $86;
    $87 = $17;
    $16 = $87;
    $88 = $16;
    $15 = $88;
    $14 = $86;
    $89 = $14;
    $13 = $89;
    $90 = $13;
    $12 = $90;
    $91 = $12;
    $__a$i$i$i$i = $91;
    $__i$i$i$i$i = 0;
    while(1) {
     $92 = $__i$i$i$i$i;
     $93 = ($92>>>0)<(3);
     if (!($93)) {
      break;
     }
     $94 = $__i$i$i$i$i;
     $95 = $__a$i$i$i$i;
     $96 = (($95) + ($94<<2)|0);
     HEAP32[$96>>2] = 0;
     $97 = $__i$i$i$i$i;
     $98 = (($97) + 1)|0;
     $__i$i$i$i$i = $98;
    }
    $99 = ((($81)) + 44|0);
    HEAP32[$99>>2] = 0;
    $100 = ((($81)) + 48|0);
    $101 = $20;
    HEAP32[$100>>2] = $101;
    $11 = $23;
    $102 = $11;
    $10 = $102;
    $103 = $10;
    $9 = $103;
    $104 = $9;
    $8 = $104;
    $7 = $102;
    $105 = $7;
    $6 = $105;
    $106 = $6;
    $5 = $106;
    $107 = $5;
    $__a$i$i1$i$i = $107;
    $__i$i$i2$i$i = 0;
    while(1) {
     $108 = $__i$i$i2$i$i;
     $109 = ($108>>>0)<(3);
     if (!($109)) {
      break;
     }
     $110 = $__i$i$i2$i$i;
     $111 = $__a$i$i1$i$i;
     $112 = (($111) + ($110<<2)|0);
     HEAP32[$112>>2] = 0;
     $113 = $__i$i$i2$i$i;
     $114 = (($113) + 1)|0;
     $__i$i$i2$i$i = $114;
    }
    __THREW__ = 0;
    invoke_vii(501,($81|0),($23|0));
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    do {
     if ($116) {
      $121 = ___cxa_find_matching_catch()|0;
      $122 = tempRet0;
      $21 = $121;
      $22 = $122;
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $131 = ___cxa_find_matching_catch(0|0)|0;
       $132 = tempRet0;
       ___clang_call_terminate($131);
       // unreachable;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       $119 = ___cxa_find_matching_catch()|0;
       $120 = tempRet0;
       $21 = $119;
       $22 = $120;
       break;
      }
      __THREW__ = 0;
      $146 = (invoke_iii(484,($msg|0),(13513|0))|0);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      if ($148) {
       label = 28;
      } else {
       $4 = 256;
       $149 = $4;
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       (invoke_iii(484,($146|0),($151|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
       } else {
        $154 = (___cxa_allocate_exception(8)|0);
        $$expand_i1_val = 1;
        HEAP8[$41>>0] = $$expand_i1_val;
        $3 = $msg;
        $155 = $3;
        $156 = ((($155)) + 4|0);
        __THREW__ = 0;
        invoke_vii(618,($40|0),($156|0));
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         $164 = ___cxa_find_matching_catch()|0;
         $165 = tempRet0;
         $38 = $164;
         $39 = $165;
        } else {
         __THREW__ = 0;
         invoke_vii(619,($154|0),($40|0));
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if (!($160)) {
          $$expand_i1_val7 = 0;
          HEAP8[$41>>0] = $$expand_i1_val7;
          __THREW__ = 0;
          invoke_viii(620,($154|0),(632|0),(146|0));
          $161 = __THREW__; __THREW__ = 0;
         }
         $166 = ___cxa_find_matching_catch()|0;
         $167 = tempRet0;
         $38 = $166;
         $39 = $167;
         __THREW__ = 0;
         invoke_vi(502,($40|0));
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          $175 = ___cxa_find_matching_catch(0|0)|0;
          $176 = tempRet0;
          ___clang_call_terminate($175);
          // unreachable;
         }
        }
        $$pre_trunc = HEAP8[$41>>0]|0;
        $170 = $$pre_trunc&1;
        if ($170) {
         ___cxa_free_exception(($154|0));
        }
       }
      }
      if ((label|0) == 28) {
       $162 = ___cxa_find_matching_catch()|0;
       $163 = tempRet0;
       $38 = $162;
       $39 = $163;
      }
      __THREW__ = 0;
      invoke_vi(70,($msg|0));
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       $175 = ___cxa_find_matching_catch(0|0)|0;
       $176 = tempRet0;
       ___clang_call_terminate($175);
       // unreachable;
      } else {
       $173 = $38;
       $174 = $39;
       ___resumeException($173|0);
       // unreachable;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(502,($85|0));
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(194,($81|0));
    $127 = __THREW__; __THREW__ = 0;
    $128 = $127&1;
    if ($128) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    } else {
     $129 = $21;
     $130 = $22;
     $eh$lpad$body$i$index2Z2D = $130;$eh$lpad$body$i$indexZ2D = $129;
     break;
    }
   }
  } while(0);
  $33 = $eh$lpad$body$i$indexZ2D;
  $34 = $eh$lpad$body$i$index2Z2D;
  __THREW__ = 0;
  $137 = __THREW__; __THREW__ = 0;
  $138 = $137&1;
  if ($138) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
 }
 $139 = ((($43)) + 56|0);
 __THREW__ = 0;
 invoke_vi(210,($139|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if ($141) {
  $144 = ___cxa_find_matching_catch(0|0)|0;
  $145 = tempRet0;
  ___clang_call_terminate($144);
  // unreachable;
 } else {
  $142 = $33;
  $143 = $34;
  ___resumeException($142|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNK8OpenMesh12BaseProperty7size_ofEj($this,$_n_elem) {
 $this = $this|0;
 $_n_elem = $_n_elem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_n_elem;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = ($6|0)!=(-1);
 if (!($7)) {
  $14 = -1;
  STACKTOP = sp;return ($14|0);
 }
 $8 = $1;
 $9 = HEAP32[$2>>2]|0;
 $10 = ((($9)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 1023]($2)|0);
 $13 = Math_imul($8, $12)|0;
 $14 = $13;
 STACKTOP = sp;return ($14|0);
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4plusclEjRKSC_($this,$_b,$_v) {
 $this = $this|0;
 $_b = $_b|0;
 $_v = $_v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_b;
 $2 = $_v;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN8OpenMesh2IO7size_ofINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRKT_($4)|0);
 $6 = (($3) + ($5))|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN8OpenMesh2IO7size_ofINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRKT_($_v) {
 $_v = $_v|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_v;
 $1 = $0;
 $2 = (__ZN8OpenMesh2IO6binaryINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7size_ofERKSD_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN8OpenMesh2IO6binaryINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7size_ofERKSD_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return -1;
}
function __ZN8OpenMesh2IO7size_ofINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8OpenMesh2IO6binaryINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7size_ofEv()|0);
 return ($0|0);
}
function __ZN8OpenMesh2IO6binaryINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7size_ofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZN8OpenMesh12BaseProperty24check_and_set_persistentINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEvb($this,$_yn) {
 $this = $this|0;
 $_yn = $_yn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $_yn&1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4&1;
 if ($5) {
  $6 = (__ZN8OpenMesh2IO13is_streamableINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEbv()|0);
  if (!($6)) {
   $7 = (__Z5omerrv()|0);
   (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($7,14170)|0);
  }
 }
 $8 = (__ZN8OpenMesh2IO13is_streamableINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEbv()|0);
 $9 = $1;
 $10 = $9&1;
 $11 = $8 ? $10 : 0;
 $12 = ((($3)) + 16|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh2IO13is_streamableINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEbv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKSD_($this,$_rhs) {
 $this = $this|0;
 $_rhs = $_rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_rhs;
 $4 = $0;
 $5 = $1;
 __ZN8OpenMesh12BasePropertyC2ERKS0_($4,$5);
 $6 = 3376;
 HEAP32[$4>>2] = $6;
 $7 = ((($4)) + 20|0);
 $8 = $1;
 $9 = ((($8)) + 20|0);
 __THREW__ = 0;
 invoke_vii(622,($7|0),($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = ___cxa_find_matching_catch()|0;
 $13 = tempRet0;
 $2 = $12;
 $3 = $13;
 __THREW__ = 0;
 invoke_vi(614,($4|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $18 = ___cxa_find_matching_catch(0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 } else {
  $16 = $2;
  $17 = $3;
  ___resumeException($16|0);
  // unreachable;
 }
}
function __ZN8OpenMesh12BasePropertyC2ERKS0_($this,$_rhs) {
 $this = $this|0;
 $_rhs = $_rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_rhs;
 $2 = $0;
 $3 = ((__ZTVN8OpenMesh12BasePropertyE) + 8|0);
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 $5 = $1;
 $6 = ((($5)) + 4|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($4,$6);
 $7 = ((($2)) + 16|0);
 $8 = $1;
 $9 = ((($8)) + 16|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&1;
 $12 = $11&1;
 HEAP8[$7>>0] = $12;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEEC2ERKSG_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 152|0;
 $7 = sp + 136|0;
 $11 = sp + 120|0;
 $17 = sp + 96|0;
 $18 = sp + 16|0;
 $21 = sp + 84|0;
 $22 = sp + 171|0;
 $23 = sp + 8|0;
 $27 = sp + 68|0;
 $28 = sp + 64|0;
 $29 = sp + 60|0;
 $30 = sp + 170|0;
 $32 = sp;
 $34 = sp + 169|0;
 $40 = sp + 168|0;
 $38 = $this;
 $39 = $__x;
 $43 = $38;
 $44 = $39;
 $37 = $44;
 $45 = $37;
 $46 = ((($45)) + 8|0);
 $36 = $46;
 $47 = $36;
 $35 = $47;
 $48 = $35;
 $33 = $48;
 $49 = $33;
 ;HEAP8[$32>>0]=HEAP8[$34>>0]|0;
 $31 = $49;
 $25 = $43;
 $26 = $40;
 $50 = $25;
 $24 = $50;
 $1 = $3;
 $2 = -1;
 $51 = $1;
 HEAP32[$51>>2] = 0;
 $52 = HEAP32[$3>>2]|0;
 HEAP32[$27>>2] = $52;
 $4 = $27;
 HEAP32[$50>>2] = 0;
 $53 = ((($50)) + 4|0);
 $5 = $7;
 $6 = -1;
 $54 = $5;
 HEAP32[$54>>2] = 0;
 $55 = HEAP32[$7>>2]|0;
 HEAP32[$28>>2] = $55;
 $8 = $28;
 HEAP32[$53>>2] = 0;
 $56 = ((($50)) + 8|0);
 $9 = $11;
 $10 = -1;
 $57 = $9;
 HEAP32[$57>>2] = 0;
 $58 = HEAP32[$11>>2]|0;
 HEAP32[$29>>2] = $58;
 $12 = $29;
 ;HEAP8[$23>>0]=HEAP8[$30>>0]|0;
 $20 = $56;
 HEAP32[$21>>2] = 0;
 $59 = $20;
 $19 = $21;
 $60 = $19;
 $61 = HEAP32[$60>>2]|0;
 $13 = $23;
 ;HEAP8[$18>>0]=HEAP8[$22>>0]|0;
 $16 = $59;
 HEAP32[$17>>2] = $61;
 $62 = $16;
 $15 = $18;
 $14 = $17;
 $63 = $14;
 $64 = HEAP32[$63>>2]|0;
 HEAP32[$62>>2] = $64;
 $65 = $39;
 $0 = $65;
 $66 = $0;
 $67 = ((($66)) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$66>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $__n = $72;
 $73 = $__n;
 $74 = ($73>>>0)>(0);
 if (!($74)) {
  STACKTOP = sp;return;
 }
 $75 = $__n;
 __THREW__ = 0;
 invoke_vii(623,($43|0),($75|0));
 $76 = __THREW__; __THREW__ = 0;
 $77 = $76&1;
 if (!($77)) {
  $78 = $39;
  $79 = HEAP32[$78>>2]|0;
  $80 = $39;
  $81 = ((($80)) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  __THREW__ = 0;
  invoke_viii(624,($43|0),($79|0),($82|0));
  $83 = __THREW__; __THREW__ = 0;
  $84 = $83&1;
  if (!($84)) {
   STACKTOP = sp;return;
  }
 }
 $85 = ___cxa_find_matching_catch()|0;
 $86 = tempRet0;
 $41 = $85;
 $42 = $86;
 __THREW__ = 0;
 invoke_vi(625,($43|0));
 $87 = __THREW__; __THREW__ = 0;
 $88 = $87&1;
 if ($88) {
  $91 = ___cxa_find_matching_catch(0|0)|0;
  $92 = tempRet0;
  ___clang_call_terminate($91);
  // unreachable;
 } else {
  $89 = $41;
  $90 = $42;
  ___resumeException($89|0);
  // unreachable;
 }
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
 }
 $11 = $14;
 $18 = $11;
 $19 = ((($18)) + 8|0);
 $10 = $19;
 $20 = $10;
 $9 = $20;
 $21 = $9;
 $22 = $13;
 $7 = $21;
 $8 = $22;
 $23 = $7;
 $24 = $8;
 $4 = $23;
 $5 = $24;
 $6 = 0;
 $25 = $5;
 $3 = $25;
 $26 = $3;
 $27 = (__Znwj($26)|0);
 $28 = ((($14)) + 4|0);
 HEAP32[$28>>2] = $27;
 HEAP32[$14>>2] = $27;
 $29 = HEAP32[$14>>2]|0;
 $30 = $13;
 $31 = (($29) + ($30)|0);
 $2 = $14;
 $32 = $2;
 $33 = ((($32)) + 8|0);
 $1 = $33;
 $34 = $1;
 $0 = $34;
 $35 = $0;
 HEAP32[$35>>2] = $31;
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE14__annotate_newEj($14,0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE18__construct_at_endIPSD_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESK_SK_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 44|0;
 $7 = $this;
 $8 = $__first;
 $9 = $__last;
 $10 = $7;
 $6 = $10;
 $11 = $6;
 $12 = ((($11)) + 8|0);
 $5 = $12;
 $13 = $5;
 $4 = $13;
 $14 = $4;
 $__a = $14;
 while(1) {
  $15 = $8;
  $16 = $9;
  $17 = ($15|0)!=($16|0);
  if (!($17)) {
   break;
  }
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotatorC2ERKSG_j($__annotator,$10,1);
  $18 = $__a;
  $19 = ((($10)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $3 = $20;
  $21 = $3;
  $22 = $8;
  $0 = $18;
  $1 = $21;
  $2 = $22;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $23 = ((($10)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 1|0);
  HEAP32[$23>>2] = $25;
  $26 = $8;
  $27 = ((($26)) + 1|0);
  $8 = $27;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 12|0;
 $32 = sp + 4|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = ((($40)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = ((($45)) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = ((($40)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -1|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = ((($55)) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = ((($61)) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $25 = $58;
 $26 = $59;
 $27 = $69;
 $70 = $25;
 $71 = $26;
 $72 = $27;
 $22 = $70;
 $23 = $71;
 $24 = $72;
 $73 = $23;
 $21 = $73;
 $74 = $21;
 __ZdlPv($74);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotatorC2ERKSG_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 77|0;
 $10 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $3 = $24;
 $25 = $3;
 ;HEAP8[$2>>0]=HEAP8[$4>>0]|0;
 $1 = $25;
 $26 = $1;
 $0 = $26;
 HEAP32[$18>>2] = -1;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $11 = $18;
 $12 = $19;
 $28 = $11;
 $29 = $12;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $8 = $28;
 $9 = $29;
 $30 = $9;
 $31 = $8;
 $5 = $10;
 $6 = $30;
 $7 = $31;
 $32 = $6;
 $33 = HEAP32[$32>>2]|0;
 $34 = $7;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $9;
 $38 = $8;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($26) + ($37)|0);
 $6 = $20;
 $39 = $6;
 $40 = HEAP32[$39>>2]|0;
 $5 = $40;
 $41 = $5;
 $11 = $20;
 $42 = $11;
 $10 = $42;
 $43 = $10;
 $9 = $43;
 $44 = $9;
 $45 = ((($44)) + 8|0);
 $8 = $45;
 $46 = $8;
 $7 = $46;
 $47 = $7;
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$43>>2]|0;
 $50 = $48;
 $51 = $49;
 $52 = (($50) - ($51))|0;
 $53 = (($41) + ($52)|0);
 $13 = $20;
 $54 = $13;
 $55 = HEAP32[$54>>2]|0;
 $12 = $55;
 $56 = $12;
 $57 = $19;
 $58 = (($56) + ($57)|0);
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE31__annotate_contiguous_containerEPKvSI_SI_SI_($20,$23,$38,$53,$58);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE31__annotate_contiguous_containerEPKvSI_SI_SI_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE21__push_back_slow_pathIKSD_EEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 72|0;
 $23 = sp + 60|0;
 $__v = sp + 12|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = ((($33)) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $44;
 $45 = $21;
 $46 = (__ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8max_sizeEv($45)|0);
 $__ms$i = $46;
 $47 = HEAP32[$22>>2]|0;
 $48 = $__ms$i;
 $49 = ($47>>>0)>($48>>>0);
 if ($49) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($45);
 }
 $19 = $45;
 $50 = $19;
 $18 = $50;
 $51 = $18;
 $17 = $51;
 $52 = $17;
 $53 = ((($52)) + 8|0);
 $16 = $53;
 $54 = $16;
 $15 = $54;
 $55 = $15;
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$51>>2]|0;
 $58 = $56;
 $59 = $57;
 $60 = (($58) - ($59))|0;
 $__cap$i = $60;
 $61 = $__cap$i;
 $62 = $__ms$i;
 $63 = (($62>>>0) / 2)&-1;
 $64 = ($61>>>0)>=($63>>>0);
 if ($64) {
  $65 = $__ms$i;
  $20 = $65;
 } else {
  $66 = $__cap$i;
  $67 = $66<<1;
  HEAP32[$23>>2] = $67;
  $12 = $23;
  $13 = $22;
  $68 = $12;
  $69 = $13;
  ;HEAP8[$11>>0]=HEAP8[$14>>0]|0;
  $9 = $68;
  $10 = $69;
  $70 = $9;
  $71 = $10;
  $6 = $11;
  $7 = $70;
  $8 = $71;
  $72 = $7;
  $73 = HEAP32[$72>>2]|0;
  $74 = $8;
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73>>>0)<($75>>>0);
  $77 = $10;
  $78 = $9;
  $79 = $76 ? $77 : $78;
  $80 = HEAP32[$79>>2]|0;
  $20 = $80;
 }
 $81 = $20;
 $5 = $32;
 $82 = $5;
 $83 = ((($82)) + 4|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$82>>2]|0;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = $__a;
 __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEEC2EjjSG_($__v,$81,$88,$89);
 $90 = $__a;
 $91 = ((($__v)) + 8|0);
 $92 = HEAP32[$91>>2]|0;
 $4 = $92;
 $93 = $4;
 $94 = $29;
 $3 = $94;
 $95 = $3;
 $0 = $90;
 $1 = $93;
 $2 = $95;
 $96 = ((($__v)) + 8|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ((($97)) + 1|0);
 HEAP32[$96>>2] = $98;
 __THREW__ = 0;
 invoke_vii(626,($32|0),($__v|0));
 $99 = __THREW__; __THREW__ = 0;
 $100 = $99&1;
 if (!($100)) {
  __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $101 = ___cxa_find_matching_catch()|0;
 $102 = tempRet0;
 $30 = $101;
 $31 = $102;
 __THREW__ = 0;
 invoke_vi(627,($__v|0));
 $103 = __THREW__; __THREW__ = 0;
 $104 = $103&1;
 if ($104) {
  $107 = ___cxa_find_matching_catch(0|0)|0;
  $108 = tempRet0;
  ___clang_call_terminate($107);
  // unreachable;
 } else {
  $105 = $30;
  $106 = $31;
  ___resumeException($105|0);
  // unreachable;
 }
}
function __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEEC2EjjSG_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 124|0;
 $8 = sp + 108|0;
 $22 = sp + 52|0;
 $29 = sp + 24|0;
 $34 = sp + 4|0;
 $35 = sp;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = ((($36)) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = ((($46)) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = ((($54)) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $14 = $63;
  $64 = $14;
  $65 = (__Znwj($64)|0);
  $68 = $65;
 } else {
  $20 = $22;
  $21 = -1;
  $66 = $20;
  HEAP32[$66>>2] = 0;
  $67 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $67;
  $23 = $35;
  $68 = 0;
 }
 HEAP32[$36>>2] = $68;
 $69 = HEAP32[$36>>2]|0;
 $70 = $32;
 $71 = (($69) + ($70)|0);
 $72 = ((($36)) + 8|0);
 HEAP32[$72>>2] = $71;
 $73 = ((($36)) + 4|0);
 HEAP32[$73>>2] = $71;
 $74 = HEAP32[$36>>2]|0;
 $75 = $31;
 $76 = (($74) + ($75)|0);
 $26 = $36;
 $77 = $26;
 $78 = ((($77)) + 12|0);
 $25 = $78;
 $79 = $25;
 $24 = $79;
 $80 = $24;
 HEAP32[$80>>2] = $76;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE26__swap_out_circular_bufferERNS_14__split_bufferISD_RSF_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $_Np$i = $46;
 $47 = $_Np$i;
 $48 = $25;
 $49 = HEAP32[$48>>2]|0;
 $50 = (0 - ($47))|0;
 $51 = (($49) + ($50)|0);
 HEAP32[$48>>2] = $51;
 $52 = $25;
 $53 = HEAP32[$52>>2]|0;
 $54 = $23;
 $55 = $_Np$i;
 _memcpy(($53|0),($54|0),($55|0))|0;
 $56 = $31;
 $57 = ((($56)) + 4|0);
 $3 = $32;
 $4 = $57;
 $58 = $3;
 $2 = $58;
 $59 = $2;
 $60 = HEAP32[$59>>2]|0;
 HEAP32[$__t$i2>>2] = $60;
 $61 = $4;
 $0 = $61;
 $62 = $0;
 $63 = HEAP32[$62>>2]|0;
 $64 = $3;
 HEAP32[$64>>2] = $63;
 $1 = $__t$i2;
 $65 = $1;
 $66 = HEAP32[$65>>2]|0;
 $67 = $4;
 HEAP32[$67>>2] = $66;
 $68 = ((($32)) + 4|0);
 $69 = $31;
 $70 = ((($69)) + 8|0);
 $8 = $68;
 $9 = $70;
 $71 = $8;
 $7 = $71;
 $72 = $7;
 $73 = HEAP32[$72>>2]|0;
 HEAP32[$__t$i1>>2] = $73;
 $74 = $9;
 $5 = $74;
 $75 = $5;
 $76 = HEAP32[$75>>2]|0;
 $77 = $8;
 HEAP32[$77>>2] = $76;
 $6 = $__t$i1;
 $78 = $6;
 $79 = HEAP32[$78>>2]|0;
 $80 = $9;
 HEAP32[$80>>2] = $79;
 $12 = $32;
 $81 = $12;
 $82 = ((($81)) + 8|0);
 $11 = $82;
 $83 = $11;
 $10 = $83;
 $84 = $10;
 $85 = $31;
 $15 = $85;
 $86 = $15;
 $87 = ((($86)) + 12|0);
 $14 = $87;
 $88 = $14;
 $13 = $88;
 $89 = $13;
 $19 = $84;
 $20 = $89;
 $90 = $19;
 $18 = $90;
 $91 = $18;
 $92 = HEAP32[$91>>2]|0;
 HEAP32[$__t$i>>2] = $92;
 $93 = $20;
 $16 = $93;
 $94 = $16;
 $95 = HEAP32[$94>>2]|0;
 $96 = $19;
 HEAP32[$96>>2] = $95;
 $17 = $__t$i;
 $97 = $17;
 $98 = HEAP32[$97>>2]|0;
 $99 = $20;
 HEAP32[$99>>2] = $98;
 $100 = $31;
 $101 = ((($100)) + 4|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = $31;
 HEAP32[$103>>2] = $102;
 $21 = $32;
 $104 = $21;
 $105 = ((($104)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = HEAP32[$104>>2]|0;
 $108 = $106;
 $109 = $107;
 $110 = (($108) - ($109))|0;
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE14__annotate_newEj($32,$110);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 8|0;
 $20 = sp + 125|0;
 $26 = sp;
 $29 = sp + 124|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26>>0]=HEAP8[$29>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = ((($38)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = ((($43)) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($38)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -1|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17>>0]=HEAP8[$20>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = ((($57)) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = ((($65)) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $11 = $62;
 $12 = $63;
 $13 = $73;
 $74 = $11;
 $75 = $12;
 $76 = $13;
 $8 = $74;
 $9 = $75;
 $10 = $76;
 $77 = $9;
 $7 = $77;
 $78 = $7;
 __ZdlPv($78);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($26) + ($37)|0);
 $6 = $20;
 $39 = $6;
 $40 = HEAP32[$39>>2]|0;
 $5 = $40;
 $41 = $5;
 $7 = $20;
 $42 = $7;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($41) + ($48)|0);
 $9 = $20;
 $50 = $9;
 $51 = HEAP32[$50>>2]|0;
 $8 = $51;
 $52 = $8;
 $14 = $20;
 $53 = $14;
 $13 = $53;
 $54 = $13;
 $12 = $54;
 $55 = $12;
 $56 = ((($55)) + 8|0);
 $11 = $56;
 $57 = $11;
 $10 = $57;
 $58 = $10;
 $59 = HEAP32[$58>>2]|0;
 $60 = HEAP32[$54>>2]|0;
 $61 = $59;
 $62 = $60;
 $63 = (($61) - ($62))|0;
 $64 = (($52) + ($63)|0);
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE31__annotate_contiguous_containerEPKvSI_SI_SI_($20,$23,$38,$49,$64);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($22) + ($33)|0);
 $6 = $16;
 $35 = $6;
 $36 = HEAP32[$35>>2]|0;
 $5 = $36;
 $37 = $5;
 $38 = $15;
 $39 = (($37) + ($38)|0);
 $8 = $16;
 $40 = $8;
 $41 = HEAP32[$40>>2]|0;
 $7 = $41;
 $42 = $7;
 $9 = $16;
 $43 = $9;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($42) + ($49)|0);
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE31__annotate_contiguous_containerEPKvSI_SI_SI_($16,$19,$34,$39,$50);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE4swapERSG_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 124|0;
 $__t$i1 = sp + 76|0;
 $24 = sp;
 $27 = sp + 148|0;
 $__t$i = sp + 12|0;
 $33 = $this;
 $34 = $__x;
 $35 = $33;
 $36 = $34;
 $31 = $35;
 $32 = $36;
 $37 = $31;
 $30 = $37;
 $38 = $30;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$__t$i>>2] = $39;
 $40 = $32;
 $28 = $40;
 $41 = $28;
 $42 = HEAP32[$41>>2]|0;
 $43 = $31;
 HEAP32[$43>>2] = $42;
 $29 = $__t$i;
 $44 = $29;
 $45 = HEAP32[$44>>2]|0;
 $46 = $32;
 HEAP32[$46>>2] = $45;
 $47 = ((($35)) + 4|0);
 $48 = $34;
 $49 = ((($48)) + 4|0);
 $3 = $47;
 $4 = $49;
 $50 = $3;
 $2 = $50;
 $51 = $2;
 $52 = HEAP32[$51>>2]|0;
 HEAP32[$__t$i2>>2] = $52;
 $53 = $4;
 $0 = $53;
 $54 = $0;
 $55 = HEAP32[$54>>2]|0;
 $56 = $3;
 HEAP32[$56>>2] = $55;
 $1 = $__t$i2;
 $57 = $1;
 $58 = HEAP32[$57>>2]|0;
 $59 = $4;
 HEAP32[$59>>2] = $58;
 $7 = $35;
 $60 = $7;
 $61 = ((($60)) + 8|0);
 $6 = $61;
 $62 = $6;
 $5 = $62;
 $63 = $5;
 $64 = $34;
 $10 = $64;
 $65 = $10;
 $66 = ((($65)) + 8|0);
 $9 = $66;
 $67 = $9;
 $8 = $67;
 $68 = $8;
 $14 = $63;
 $15 = $68;
 $69 = $14;
 $13 = $69;
 $70 = $13;
 $71 = HEAP32[$70>>2]|0;
 HEAP32[$__t$i1>>2] = $71;
 $72 = $15;
 $11 = $72;
 $73 = $11;
 $74 = HEAP32[$73>>2]|0;
 $75 = $14;
 HEAP32[$75>>2] = $74;
 $12 = $__t$i1;
 $76 = $12;
 $77 = HEAP32[$76>>2]|0;
 $78 = $15;
 HEAP32[$78>>2] = $77;
 $18 = $35;
 $79 = $18;
 $80 = ((($79)) + 8|0);
 $17 = $80;
 $81 = $17;
 $16 = $81;
 $82 = $16;
 $83 = $34;
 $21 = $83;
 $84 = $21;
 $85 = ((($84)) + 8|0);
 $20 = $85;
 $86 = $20;
 $19 = $86;
 $87 = $19;
 $25 = $82;
 $26 = $87;
 $88 = $25;
 $89 = $26;
 ;HEAP8[$24>>0]=HEAP8[$27>>0]|0;
 $22 = $88;
 $23 = $89;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $__cs = $27;
 $28 = $__cs;
 $29 = $19;
 $30 = ($28>>>0)<($29>>>0);
 if ($30) {
  $31 = $19;
  $32 = $__cs;
  $33 = (($31) - ($32))|0;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8__appendEj($20,$33);
  STACKTOP = sp;return;
 }
 $34 = $__cs;
 $35 = $19;
 $36 = ($34>>>0)>($35>>>0);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = HEAP32[$20>>2]|0;
 $38 = $19;
 $39 = (($37) + ($38)|0);
 $13 = $20;
 $14 = $39;
 $40 = $13;
 $12 = $40;
 $41 = $12;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$41>>2]|0;
 $45 = $43;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $__old_size$i = $47;
 $48 = $14;
 $10 = $40;
 $11 = $48;
 $49 = $10;
 while(1) {
  $50 = $11;
  $51 = ((($49)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($50|0)!=($52|0);
  if (!($53)) {
   break;
  }
  $9 = $49;
  $54 = $9;
  $55 = ((($54)) + 8|0);
  $8 = $55;
  $56 = $8;
  $7 = $56;
  $57 = $7;
  $58 = ((($49)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ((($59)) + -1|0);
  HEAP32[$58>>2] = $60;
  $0 = $60;
  $61 = $0;
  $4 = $57;
  $5 = $61;
  $62 = $4;
  $63 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $62;
  $2 = $63;
 }
 $64 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(615,($40|0),($64|0));
 $65 = __THREW__; __THREW__ = 0;
 $66 = $65&1;
 if ($66) {
  $67 = ___cxa_find_matching_catch()|0;
  $68 = tempRet0;
  $15 = $67;
  $16 = $68;
  $69 = $15;
  ___cxa_call_unexpected(($69|0));
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 72|0;
 $__v = sp + 12|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = $27;
 $42 = ($40>>>0)>=($41>>>0);
 if ($42) {
  $43 = $27;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE18__construct_at_endEj($30,$43);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $44 = $22;
 $45 = ((($44)) + 8|0);
 $21 = $45;
 $46 = $21;
 $20 = $46;
 $47 = $20;
 $__a = $47;
 $19 = $30;
 $48 = $19;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = $27;
 $56 = (($54) + ($55))|0;
 $16 = $30;
 HEAP32[$17>>2] = $56;
 $57 = $16;
 $58 = (__ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$17>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
 }
 $14 = $57;
 $62 = $14;
 $13 = $62;
 $63 = $13;
 $12 = $63;
 $64 = $12;
 $65 = ((($64)) + 8|0);
 $11 = $65;
 $66 = $11;
 $10 = $66;
 $67 = $10;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $__cap$i = $72;
 $73 = $__cap$i;
 $74 = $__ms$i;
 $75 = (($74>>>0) / 2)&-1;
 $76 = ($73>>>0)>=($75>>>0);
 if ($76) {
  $77 = $__ms$i;
  $15 = $77;
 } else {
  $78 = $__cap$i;
  $79 = $78<<1;
  HEAP32[$18>>2] = $79;
  $7 = $18;
  $8 = $17;
  $80 = $7;
  $81 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $80;
  $5 = $81;
  $82 = $4;
  $83 = $5;
  $1 = $6;
  $2 = $82;
  $3 = $83;
  $84 = $2;
  $85 = HEAP32[$84>>2]|0;
  $86 = $3;
  $87 = HEAP32[$86>>2]|0;
  $88 = ($85>>>0)<($87>>>0);
  $89 = $5;
  $90 = $4;
  $91 = $88 ? $89 : $90;
  $92 = HEAP32[$91>>2]|0;
  $15 = $92;
 }
 $93 = $15;
 $0 = $30;
 $94 = $0;
 $95 = ((($94)) + 4|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = HEAP32[$94>>2]|0;
 $98 = $96;
 $99 = $97;
 $100 = (($98) - ($99))|0;
 $101 = $__a;
 __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEEC2EjjSG_($__v,$93,$100,$101);
 $102 = $27;
 __THREW__ = 0;
 invoke_vii(628,($__v|0),($102|0));
 $103 = __THREW__; __THREW__ = 0;
 $104 = $103&1;
 if (!($104)) {
  __THREW__ = 0;
  invoke_vii(626,($30|0),($__v|0));
  $105 = __THREW__; __THREW__ = 0;
  $106 = $105&1;
  if (!($106)) {
   __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEED2Ev($__v);
   STACKTOP = sp;return;
  }
 }
 $107 = ___cxa_find_matching_catch()|0;
 $108 = tempRet0;
 $28 = $107;
 $29 = $108;
 __THREW__ = 0;
 invoke_vi(627,($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $113 = ___cxa_find_matching_catch(0|0)|0;
  $114 = tempRet0;
  ___clang_call_terminate($113);
  // unreachable;
 } else {
  $111 = $28;
  $112 = $29;
  ___resumeException($111|0);
  // unreachable;
 }
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 36|0;
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = ((($9)) + 8|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $__a = $12;
 while(1) {
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotatorC2ERKSG_j($__annotator,$8,1);
  $13 = $__a;
  $14 = ((($8)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $2 = $15;
  $16 = $2;
  $0 = $13;
  $1 = $16;
  $17 = ((($8)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 1|0);
  HEAP32[$17>>2] = $19;
  $20 = $7;
  $21 = (($20) + -1)|0;
  $7 = $21;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $22 = $7;
  $23 = ($22>>>0)>(0);
  if (!($23)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = ((($9)) + 12|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $__a = $14;
 while(1) {
  $15 = $__a;
  $16 = ((($8)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $0 = $17;
  $18 = $0;
  $1 = $15;
  $2 = $18;
  $19 = ((($8)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 1|0);
  HEAP32[$19>>2] = $21;
  $22 = $7;
  $23 = (($22) + -1)|0;
  $7 = $23;
  $24 = $7;
  $25 = ($24>>>0)>(0);
  if (!($25)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp + 8|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $14 = $10;
 $8 = $13;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = ((($17)) + 8|0);
 $5 = $18;
 $19 = $5;
 $4 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$16>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = ($14>>>0)>($25>>>0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $3 = $13;
 $27 = $3;
 $28 = ((($27)) + 8|0);
 $2 = $28;
 $29 = $2;
 $1 = $29;
 $30 = $1;
 $__a = $30;
 $31 = $10;
 $0 = $13;
 $32 = $0;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$32>>2]|0;
 $36 = $34;
 $37 = $35;
 $38 = (($36) - ($37))|0;
 $39 = $__a;
 __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEEC2EjjSG_($__v,$31,$38,$39);
 __THREW__ = 0;
 invoke_vii(626,($13|0),($__v|0));
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 if (!($41)) {
  __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $42 = ___cxa_find_matching_catch()|0;
 $43 = tempRet0;
 $11 = $42;
 $12 = $43;
 __THREW__ = 0;
 invoke_vi(627,($__v|0));
 $44 = __THREW__; __THREW__ = 0;
 $45 = $44&1;
 if ($45) {
  $48 = ___cxa_find_matching_catch(0|0)|0;
  $49 = tempRet0;
  ___clang_call_terminate($48);
  // unreachable;
 } else {
  $46 = $11;
  $47 = $12;
  ___resumeException($46|0);
  // unreachable;
 }
}
function __ZNKSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 77|0;
 $10 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $3 = $24;
 $25 = $3;
 ;HEAP8[$2>>0]=HEAP8[$4>>0]|0;
 $1 = $25;
 $26 = $1;
 $0 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $11 = $18;
 $12 = $19;
 $28 = $11;
 $29 = $12;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $8 = $28;
 $9 = $29;
 $30 = $9;
 $31 = $8;
 $5 = $10;
 $6 = $30;
 $7 = $31;
 $32 = $6;
 $33 = HEAP32[$32>>2]|0;
 $34 = $7;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $9;
 $38 = $8;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIPN8OpenMesh12BasePropertyERNS_9allocatorIS3_EEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 124|0;
 $8 = sp + 108|0;
 $22 = sp + 52|0;
 $29 = sp + 24|0;
 $34 = sp + 4|0;
 $35 = sp;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = ((($36)) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = ((($46)) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = ((($54)) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $64 = $63<<2;
  $14 = $64;
  $65 = $14;
  $66 = (__Znwj($65)|0);
  $69 = $66;
 } else {
  $20 = $22;
  $21 = -1;
  $67 = $20;
  HEAP32[$67>>2] = 0;
  $68 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $68;
  $23 = $35;
  $69 = 0;
 }
 HEAP32[$36>>2] = $69;
 $70 = HEAP32[$36>>2]|0;
 $71 = $32;
 $72 = (($70) + ($71<<2)|0);
 $73 = ((($36)) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = ((($36)) + 4|0);
 HEAP32[$74>>2] = $72;
 $75 = HEAP32[$36>>2]|0;
 $76 = $31;
 $77 = (($75) + ($76<<2)|0);
 $26 = $36;
 $78 = $26;
 $79 = ((($78)) + 12|0);
 $25 = $79;
 $80 = $25;
 $24 = $80;
 $81 = $24;
 HEAP32[$81>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPN8OpenMesh12BasePropertyERNS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 8|0;
 $20 = sp + 125|0;
 $26 = sp;
 $29 = sp + 124|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26>>0]=HEAP8[$29>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = ((($38)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = ((($43)) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($38)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -4|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17>>0]=HEAP8[$20>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = ((($57)) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = ((($65)) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 4)&-1;
 $11 = $62;
 $12 = $63;
 $13 = $74;
 $75 = $11;
 $76 = $12;
 $77 = $13;
 $8 = $75;
 $9 = $76;
 $10 = $77;
 $78 = $9;
 $7 = $78;
 $79 = $7;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh17PropertyContainer3addINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEENS_15BasePropHandleTIT_EERKSF_RKNSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEE($this,$0,$_name) {
 $this = $this|0;
 $0 = $0|0;
 $_name = $_name|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $idx = 0, $p_end = 0, $p_it = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator$i = sp + 200|0;
 $29 = sp + 84|0;
 $32 = sp + 72|0;
 $36 = sp + 56|0;
 $39 = sp + 44|0;
 $41 = sp + 36|0;
 $p_it = sp + 20|0;
 $p_end = sp + 16|0;
 $45 = sp + 8|0;
 $42 = $this;
 $43 = $0;
 $44 = $_name;
 $48 = $42;
 $49 = ((($48)) + 4|0);
 $40 = $49;
 $50 = $40;
 $51 = HEAP32[$50>>2]|0;
 $37 = $50;
 $38 = $51;
 $52 = $38;
 $34 = $36;
 $35 = $52;
 $53 = $34;
 $54 = $35;
 HEAP32[$53>>2] = $54;
 $55 = HEAP32[$36>>2]|0;
 HEAP32[$39>>2] = $55;
 $56 = HEAP32[$39>>2]|0;
 HEAP32[$p_it>>2] = $56;
 $57 = ((($48)) + 4|0);
 $33 = $57;
 $58 = $33;
 $59 = ((($58)) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 $30 = $58;
 $31 = $60;
 $61 = $31;
 $27 = $29;
 $28 = $61;
 $62 = $27;
 $63 = $28;
 HEAP32[$62>>2] = $63;
 $64 = HEAP32[$29>>2]|0;
 HEAP32[$32>>2] = $64;
 $65 = HEAP32[$32>>2]|0;
 HEAP32[$p_end>>2] = $65;
 $idx = 0;
 while(1) {
  $23 = $p_it;
  $24 = $p_end;
  $66 = $23;
  $67 = $24;
  $21 = $66;
  $22 = $67;
  $68 = $21;
  $20 = $68;
  $69 = $20;
  $70 = HEAP32[$69>>2]|0;
  $71 = $22;
  $19 = $71;
  $72 = $19;
  $73 = HEAP32[$72>>2]|0;
  $74 = ($70|0)==($73|0);
  $75 = $74 ^ 1;
  if (!($75)) {
   break;
  }
  $6 = $p_it;
  $76 = $6;
  $77 = HEAP32[$76>>2]|0;
  $78 = HEAP32[$77>>2]|0;
  $79 = ($78|0)!=(0|0);
  if (!($79)) {
   break;
  }
  $5 = $p_it;
  $80 = $5;
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($81)) + 4|0);
  HEAP32[$80>>2] = $82;
  $83 = $idx;
  $84 = (($83) + 1)|0;
  $idx = $84;
 }
 $3 = $p_it;
 $4 = $p_end;
 $85 = $3;
 $2 = $85;
 $86 = $2;
 $87 = HEAP32[$86>>2]|0;
 $88 = $4;
 $1 = $88;
 $89 = $1;
 $90 = HEAP32[$89>>2]|0;
 $91 = ($87|0)==($90|0);
 do {
  if ($91) {
   $92 = ((($48)) + 4|0);
   HEAP32[$45>>2] = 0;
   $17 = $92;
   $18 = $45;
   $93 = $17;
   $94 = ((($93)) + 4|0);
   $95 = HEAP32[$94>>2]|0;
   $16 = $93;
   $96 = $16;
   $97 = ((($96)) + 8|0);
   $15 = $97;
   $98 = $15;
   $14 = $98;
   $99 = $14;
   $100 = HEAP32[$99>>2]|0;
   $101 = ($95|0)!=($100|0);
   if ($101) {
    __ZNSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i,$93,1);
    $13 = $93;
    $102 = $13;
    $103 = ((($102)) + 8|0);
    $12 = $103;
    $104 = $12;
    $11 = $104;
    $105 = $11;
    $106 = ((($93)) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $10 = $107;
    $108 = $10;
    $109 = $18;
    $7 = $105;
    $8 = $108;
    $9 = $109;
    $110 = $8;
    $111 = $9;
    $112 = HEAP32[$111>>2]|0;
    HEAP32[$110>>2] = $112;
    __ZNSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
    $113 = ((($93)) + 4|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((($114)) + 4|0);
    HEAP32[$113>>2] = $115;
    break;
   } else {
    $116 = $18;
    __ZNSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($93,$116);
    break;
   }
  }
 } while(0);
 $117 = (__Znwj(32)|0);
 $118 = $44;
 __THREW__ = 0;
 invoke_vii(629,($117|0),($118|0));
 $119 = __THREW__; __THREW__ = 0;
 $120 = $119&1;
 if ($120) {
  $129 = ___cxa_find_matching_catch()|0;
  $130 = tempRet0;
  $46 = $129;
  $47 = $130;
  __ZdlPv($117);
  $131 = $46;
  $132 = $47;
  ___resumeException($131|0);
  // unreachable;
 } else {
  $121 = ((($48)) + 4|0);
  $122 = $idx;
  $25 = $121;
  $26 = $122;
  $123 = $25;
  $124 = $26;
  $125 = HEAP32[$123>>2]|0;
  $126 = (($125) + ($124<<2)|0);
  HEAP32[$126>>2] = $117;
  $127 = $idx;
  __ZN8OpenMesh15BasePropHandleTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2Ei($41,$127);
  $128 = HEAP32[$41>>2]|0;
  STACKTOP = sp;return ($128|0);
 }
 return (0)|0;
}
function __ZN8OpenMesh12HPropHandleTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKNS_15BasePropHandleTISC_EE($this,$_b) {
 $this = $this|0;
 $_b = $_b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_b;
 $2 = $0;
 $3 = $1;
 ;HEAP32[$2>>2]=HEAP32[$3>>2]|0;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEE($this,$_name) {
 $this = $this|0;
 $_name = $_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 96|0;
 $6 = sp + 80|0;
 $10 = sp + 64|0;
 $15 = sp + 44|0;
 $18 = sp + 32|0;
 $21 = sp + 20|0;
 $22 = sp + 16|0;
 $23 = sp + 12|0;
 $25 = $this;
 $26 = $_name;
 $27 = $25;
 $28 = $26;
 __ZN8OpenMesh12BasePropertyC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($27,$28);
 $29 = 3548;
 HEAP32[$27>>2] = $29;
 $30 = ((($27)) + 20|0);
 $24 = $30;
 $31 = $24;
 $20 = $31;
 $32 = $20;
 $19 = $32;
 $0 = $2;
 $1 = -1;
 $33 = $0;
 HEAP32[$33>>2] = 0;
 $34 = HEAP32[$2>>2]|0;
 HEAP32[$21>>2] = $34;
 $3 = $21;
 HEAP32[$32>>2] = 0;
 $35 = ((($32)) + 4|0);
 $4 = $6;
 $5 = -1;
 $36 = $4;
 HEAP32[$36>>2] = 0;
 $37 = HEAP32[$6>>2]|0;
 HEAP32[$22>>2] = $37;
 $7 = $22;
 HEAP32[$35>>2] = 0;
 $38 = ((($32)) + 8|0);
 $8 = $10;
 $9 = -1;
 $39 = $8;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$10>>2]|0;
 HEAP32[$23>>2] = $40;
 $11 = $23;
 $17 = $38;
 HEAP32[$18>>2] = 0;
 $41 = $17;
 $16 = $18;
 $42 = $16;
 $43 = HEAP32[$42>>2]|0;
 $14 = $41;
 HEAP32[$15>>2] = $43;
 $44 = $14;
 $13 = $44;
 $12 = $15;
 $45 = $12;
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$44>>2] = $46;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh15BasePropHandleTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh10BaseHandleC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 3548;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 20|0);
 __THREW__ = 0;
 invoke_vi(630,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8OpenMesh12BasePropertyD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(614,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(78,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7reserveEj($this,$_n) {
 $this = $this|0;
 $_n = $_n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_n;
 $2 = $0;
 $3 = ((($2)) + 20|0);
 $4 = $1;
 __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE7reserveEj($3,$4);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE6resizeEj($this,$_n) {
 $this = $this|0;
 $_n = $_n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_n;
 $2 = $0;
 $3 = ((($2)) + 20|0);
 $4 = $1;
 __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE6resizeEj($3,$4);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 184|0;
 $6 = sp + 168|0;
 $10 = sp + 152|0;
 $15 = sp + 132|0;
 $18 = sp + 120|0;
 $21 = sp + 108|0;
 $22 = sp + 104|0;
 $23 = sp + 100|0;
 $28 = sp;
 $31 = sp + 196|0;
 $44 = sp + 12|0;
 $43 = $this;
 $47 = $43;
 $48 = ((($47)) + 20|0);
 $40 = $48;
 $49 = $40;
 $39 = $49;
 $50 = $39;
 $51 = ((($50)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = HEAP32[$50>>2]|0;
 $54 = $52;
 $55 = $53;
 $56 = (($54) - ($55))|0;
 $__old_size$i = $56;
 $37 = $49;
 $57 = $37;
 $58 = HEAP32[$57>>2]|0;
 $35 = $57;
 $36 = $58;
 $59 = $35;
 while(1) {
  $60 = $36;
  $61 = ((($59)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($60|0)!=($62|0);
  if (!($63)) {
   break;
  }
  $34 = $59;
  $64 = $34;
  $65 = ((($64)) + 8|0);
  $33 = $65;
  $66 = $33;
  $32 = $66;
  $67 = $32;
  $68 = ((($59)) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($69)) + -1|0);
  HEAP32[$68>>2] = $70;
  $25 = $70;
  $71 = $25;
  $29 = $67;
  $30 = $71;
  $72 = $29;
  $73 = $30;
  ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
  $26 = $72;
  $27 = $73;
 }
 $74 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(631,($49|0),($74|0));
 $75 = __THREW__; __THREW__ = 0;
 $76 = $75&1;
 if ($76) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $41 = $77;
  $42 = $78;
  $79 = $41;
  ___cxa_call_unexpected(($79|0));
  // unreachable;
 }
 $38 = $49;
 $24 = $44;
 $80 = $24;
 $20 = $80;
 $81 = $20;
 $19 = $81;
 $0 = $2;
 $1 = -1;
 $82 = $0;
 HEAP32[$82>>2] = 0;
 $83 = HEAP32[$2>>2]|0;
 HEAP32[$21>>2] = $83;
 $3 = $21;
 HEAP32[$81>>2] = 0;
 $84 = ((($81)) + 4|0);
 $4 = $6;
 $5 = -1;
 $85 = $4;
 HEAP32[$85>>2] = 0;
 $86 = HEAP32[$6>>2]|0;
 HEAP32[$22>>2] = $86;
 $7 = $22;
 HEAP32[$84>>2] = 0;
 $87 = ((($81)) + 8|0);
 $8 = $10;
 $9 = -1;
 $88 = $8;
 HEAP32[$88>>2] = 0;
 $89 = HEAP32[$10>>2]|0;
 HEAP32[$23>>2] = $89;
 $11 = $23;
 $17 = $87;
 HEAP32[$18>>2] = 0;
 $90 = $17;
 $16 = $18;
 $91 = $16;
 $92 = HEAP32[$91>>2]|0;
 $14 = $90;
 HEAP32[$15>>2] = $92;
 $93 = $14;
 $13 = $93;
 $12 = $15;
 $94 = $12;
 $95 = HEAP32[$94>>2]|0;
 HEAP32[$93>>2] = $95;
 $96 = ((($47)) + 20|0);
 __THREW__ = 0;
 invoke_vii(632,($44|0),($96|0));
 $97 = __THREW__; __THREW__ = 0;
 $98 = $97&1;
 if (!($98)) {
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev($44);
  STACKTOP = sp;return;
 }
 $99 = ___cxa_find_matching_catch()|0;
 $100 = tempRet0;
 $45 = $99;
 $46 = $100;
 __THREW__ = 0;
 invoke_vi(630,($44|0));
 $101 = __THREW__; __THREW__ = 0;
 $102 = $101&1;
 if ($102) {
  $105 = ___cxa_find_matching_catch(0|0)|0;
  $106 = tempRet0;
  ___clang_call_terminate($105);
  // unreachable;
 } else {
  $103 = $45;
  $104 = $46;
  ___resumeException($103|0);
  // unreachable;
 }
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE9push_backEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__annotator$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator$i = sp + 53|0;
 $13 = sp + 52|0;
 $12 = $this;
 $14 = $12;
 $15 = ((($14)) + 20|0);
 $10 = $15;
 $11 = $13;
 $16 = $10;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $9 = $16;
 $19 = $9;
 $20 = ((($19)) + 8|0);
 $8 = $20;
 $21 = $8;
 $7 = $21;
 $22 = $7;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($18|0)!=($23|0);
 if ($24) {
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotatorC2ERKSG_j($__annotator$i,$16,1);
  $6 = $16;
  $25 = $6;
  $26 = ((($25)) + 8|0);
  $5 = $26;
  $27 = $5;
  $4 = $27;
  $28 = $4;
  $29 = ((($16)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $3 = $30;
  $31 = $3;
  $32 = $11;
  $0 = $28;
  $1 = $31;
  $2 = $32;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $33 = ((($16)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 1|0);
  HEAP32[$33>>2] = $35;
  STACKTOP = sp;return;
 } else {
  $36 = $11;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE21__push_back_slow_pathIKSD_EEvRT_($16,$36);
  STACKTOP = sp;return;
 }
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4swapEjj($this,$_i0,$_i1) {
 $this = $this|0;
 $_i0 = $_i0|0;
 $_i1 = $_i1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i = sp + 48|0;
 $9 = $this;
 $10 = $_i0;
 $11 = $_i1;
 $12 = $9;
 $13 = ((($12)) + 20|0);
 $14 = $10;
 $7 = $13;
 $8 = $14;
 $15 = $7;
 $16 = $8;
 $17 = HEAP32[$15>>2]|0;
 $18 = (($17) + ($16)|0);
 $19 = ((($12)) + 20|0);
 $20 = $11;
 $0 = $19;
 $1 = $20;
 $21 = $0;
 $22 = $1;
 $23 = HEAP32[$21>>2]|0;
 $24 = (($23) + ($22)|0);
 $5 = $18;
 $6 = $24;
 $25 = $5;
 $4 = $25;
 $26 = $6;
 $2 = $26;
 $3 = $__t$i;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4copyEjj($this,$_i0,$_i1) {
 $this = $this|0;
 $_i0 = $_i0|0;
 $_i1 = $_i1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $this;
 $5 = $_i0;
 $6 = $_i1;
 $7 = $4;
 $8 = ((($7)) + 20|0);
 $9 = $6;
 $2 = $8;
 $3 = $9;
 $10 = ((($7)) + 20|0);
 $11 = $5;
 $0 = $10;
 $1 = $11;
 STACKTOP = sp;return;
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5cloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(32)|0);
 __THREW__ = 0;
 invoke_vii(633,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $1 = $8;
  $2 = $9;
  __ZdlPv($4);
  $10 = $1;
  $11 = $2;
  ___resumeException($10|0);
  // unreachable;
 } else {
  $p = $4;
  $7 = $p;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE14set_persistentEb($this,$_yn) {
 $this = $this|0;
 $_yn = $_yn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $_yn&1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4&1;
 __ZN8OpenMesh12BaseProperty24check_and_set_persistentINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEvb($3,$5);
 STACKTOP = sp;return;
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE10n_elementsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 STACKTOP = sp;return ($10|0);
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE12element_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN8OpenMesh2IO7size_ofINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7size_ofEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 116|0;
 $5 = sp + 104|0;
 $16 = sp + 16|0;
 $17 = sp + 8|0;
 $18 = sp;
 $21 = sp + 52|0;
 $24 = sp + 40|0;
 $28 = sp + 24|0;
 $29 = sp + 20|0;
 $30 = sp + 128|0;
 $27 = $this;
 $31 = $27;
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 48|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (FUNCTION_TABLE_ii[$34 & 1023]($31)|0);
 $36 = ($35|0)!=(-1);
 if ($36) {
  $37 = HEAP32[$31>>2]|0;
  $38 = ((($37)) + 44|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_ii[$39 & 1023]($31)|0);
  $41 = (__ZNK8OpenMesh12BaseProperty7size_ofEj($31,$40)|0);
  $26 = $41;
  $76 = $26;
  STACKTOP = sp;return ($76|0);
 }
 $42 = ((($31)) + 20|0);
 $25 = $42;
 $43 = $25;
 $44 = HEAP32[$43>>2]|0;
 $22 = $43;
 $23 = $44;
 $45 = $23;
 $19 = $21;
 $20 = $45;
 $46 = $19;
 $47 = $20;
 HEAP32[$46>>2] = $47;
 $48 = HEAP32[$21>>2]|0;
 HEAP32[$24>>2] = $48;
 $49 = HEAP32[$24>>2]|0;
 HEAP32[$28>>2] = $49;
 $50 = ((($31)) + 20|0);
 $6 = $50;
 $51 = $6;
 $52 = ((($51)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $3 = $51;
 $4 = $53;
 $54 = $4;
 $0 = $2;
 $1 = $54;
 $55 = $0;
 $56 = $1;
 HEAP32[$55>>2] = $56;
 $57 = HEAP32[$2>>2]|0;
 HEAP32[$5>>2] = $57;
 $58 = HEAP32[$5>>2]|0;
 HEAP32[$29>>2] = $58;
 ;HEAP8[$16>>0]=HEAP8[$30>>0]|0;
 ;HEAP8[$17>>0]=HEAP8[$29>>0]|0;HEAP8[$17+1>>0]=HEAP8[$29+1>>0]|0;HEAP8[$17+2>>0]=HEAP8[$29+2>>0]|0;HEAP8[$17+3>>0]=HEAP8[$29+3>>0]|0;
 ;HEAP8[$18>>0]=HEAP8[$28>>0]|0;HEAP8[$18+1>>0]=HEAP8[$28+1>>0]|0;HEAP8[$18+2>>0]=HEAP8[$28+2>>0]|0;HEAP8[$18+3>>0]=HEAP8[$28+3>>0]|0;
 $15 = 0;
 while(1) {
  $13 = $18;
  $14 = $17;
  $59 = $13;
  $60 = $14;
  $11 = $59;
  $12 = $60;
  $61 = $11;
  $10 = $61;
  $62 = $10;
  $63 = HEAP32[$62>>2]|0;
  $64 = $12;
  $9 = $64;
  $65 = $9;
  $66 = HEAP32[$65>>2]|0;
  $67 = ($63|0)==($66|0);
  $68 = $67 ^ 1;
  $69 = $15;
  if (!($68)) {
   break;
  }
  $7 = $18;
  $70 = $7;
  $71 = HEAP32[$70>>2]|0;
  $72 = (__ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4plusclEjRKSC_($16,$69,$71)|0);
  $15 = $72;
  $8 = $18;
  $73 = $8;
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($74)) + 1|0);
  HEAP32[$73>>2] = $75;
 }
 $26 = $69;
 $76 = $26;
 STACKTOP = sp;return ($76|0);
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7size_ofEj($this,$_n_elem) {
 $this = $this|0;
 $_n_elem = $_n_elem|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_n_elem;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8OpenMesh12BaseProperty7size_ofEj($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5storeERNSt3__113basic_ostreamIcNSE_11char_traitsIcEEEEb($this,$_ostr,$_swap) {
 $this = $this|0;
 $_ostr = $_ostr|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $_ostr;
 $6 = $_swap&1;
 $5 = $6;
 $7 = $3;
 $8 = (__ZN8OpenMesh2IO13is_streamableINSt3__16vectorINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEbv()|0);
 if ($8) {
  $9 = $4;
  $10 = ((($7)) + 20|0);
  $11 = $5;
  $12 = $11&1;
  $13 = (__ZN8OpenMesh2IO5storeINSt3__16vectorINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEjRNS2_13basic_ostreamIcNS2_11char_traitsIcEEEERKT_b($9,$10,$12)|0);
  $2 = $13;
  $35 = $2;
  STACKTOP = sp;return ($35|0);
 }
 $bytes = 0;
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = HEAP32[$7>>2]|0;
  $16 = ((($15)) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_ii[$17 & 1023]($7)|0);
  $19 = ($14>>>0)<($18>>>0);
  if (!($19)) {
   break;
  }
  $20 = $4;
  $21 = ((($7)) + 20|0);
  $22 = $i;
  $0 = $21;
  $1 = $22;
  $23 = $0;
  $24 = $1;
  $25 = HEAP32[$23>>2]|0;
  $26 = (($25) + ($24)|0);
  $27 = $5;
  $28 = $27&1;
  $29 = (__ZN8OpenMesh2IO5storeINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRNSt3__113basic_ostreamIcNSE_11char_traitsIcEEEERKT_b($20,$26,$28)|0);
  $30 = $bytes;
  $31 = (($30) + ($29))|0;
  $bytes = $31;
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
 }
 $34 = $bytes;
 $2 = $34;
 $35 = $2;
 STACKTOP = sp;return ($35|0);
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7restoreERNSt3__113basic_istreamIcNSE_11char_traitsIcEEEEb($this,$_istr,$_swap) {
 $this = $this|0;
 $_istr = $_istr|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $_istr;
 $6 = $_swap&1;
 $5 = $6;
 $7 = $3;
 $8 = (__ZN8OpenMesh2IO13is_streamableINSt3__16vectorINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEbv()|0);
 if ($8) {
  $9 = $4;
  $10 = ((($7)) + 20|0);
  $11 = $5;
  $12 = $11&1;
  $13 = (__ZN8OpenMesh2IO7restoreINSt3__16vectorINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEjRNS2_13basic_istreamIcNS2_11char_traitsIcEEEERT_b($9,$10,$12)|0);
  $2 = $13;
  $35 = $2;
  STACKTOP = sp;return ($35|0);
 }
 $bytes = 0;
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = HEAP32[$7>>2]|0;
  $16 = ((($15)) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_ii[$17 & 1023]($7)|0);
  $19 = ($14>>>0)<($18>>>0);
  if (!($19)) {
   break;
  }
  $20 = $4;
  $21 = ((($7)) + 20|0);
  $22 = $i;
  $0 = $21;
  $1 = $22;
  $23 = $0;
  $24 = $1;
  $25 = HEAP32[$23>>2]|0;
  $26 = (($25) + ($24)|0);
  $27 = $5;
  $28 = $27&1;
  $29 = (__ZN8OpenMesh2IO7restoreINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRNSt3__113basic_istreamIcNSE_11char_traitsIcEEEERT_b($20,$26,$28)|0);
  $30 = $bytes;
  $31 = (($30) + ($29))|0;
  $bytes = $31;
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
 }
 $34 = $bytes;
 $2 = $34;
 $35 = $2;
 STACKTOP = sp;return ($35|0);
}
function __ZN8OpenMesh2IO13is_streamableINSt3__16vectorINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEbv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN8OpenMesh2IO7restoreINSt3__16vectorINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEjRNS2_13basic_istreamIcNS2_11char_traitsIcEEEERT_b($_is,$_v,$_swap) {
 $_is = $_is|0;
 $_v = $_v|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_is;
 $1 = $_v;
 $3 = $_swap&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 $8 = (__ZN8OpenMesh2IO6binaryINSt3__16vectorINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEE7restoreERNS2_13basic_istreamIcNS2_11char_traitsIcEEEERSI_b($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN8OpenMesh2IO7restoreINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRNSt3__113basic_istreamIcNSE_11char_traitsIcEEEERT_b($_is,$_v,$_swap) {
 $_is = $_is|0;
 $_v = $_v|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_is;
 $1 = $_v;
 $3 = $_swap&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 $8 = (__ZN8OpenMesh2IO6binaryINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7restoreERNSt3__113basic_istreamIcNSF_11char_traitsIcEEEERSD_b($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN8OpenMesh2IO6binaryINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7restoreERNSt3__113basic_istreamIcNSF_11char_traitsIcEEEERSD_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0;
 var $__i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp + 212|0;
 $msg = sp + 24|0;
 $40 = sp;
 $41 = sp + 320|0;
 $35 = $0;
 $36 = $1;
 $42 = $2&1;
 $37 = $42;
 $31 = $msg;
 $32 = 16;
 $43 = $31;
 $44 = ((($43)) + 56|0);
 $30 = $44;
 $45 = $30;
 $29 = $45;
 $46 = $29;
 $47 = 6536;
 HEAP32[$46>>2] = $47;
 $48 = 6212;
 HEAP32[$45>>2] = $48;
 $49 = 3456;
 HEAP32[$43>>2] = $49;
 $50 = ((($43)) + 56|0);
 $51 = 3476;
 HEAP32[$50>>2] = $51;
 $52 = ((($43)) + 4|0);
 $26 = $43;
 $53 = 3488;
 $27 = $53;
 $28 = $52;
 $54 = $26;
 $55 = $27;
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = ((($55)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$54>>2]|0;
 $60 = ((($59)) + -12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($54) + ($61)|0);
 HEAP32[$62>>2] = $58;
 $63 = HEAP32[$54>>2]|0;
 $64 = ((($63)) + -12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($54) + ($65)|0);
 $67 = $28;
 $24 = $66;
 $25 = $67;
 $68 = $24;
 $69 = $25;
 __THREW__ = 0;
 invoke_vii(490,($68|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $133 = ___cxa_find_matching_catch()|0;
  $134 = tempRet0;
  $33 = $133;
  $34 = $134;
 } else {
  $72 = ((($68)) + 72|0);
  HEAP32[$72>>2] = 0;
  $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $74 = ((($68)) + 76|0);
  HEAP32[$74>>2] = $73;
  $75 = 3456;
  HEAP32[$43>>2] = $75;
  $76 = ((($43)) + 56|0);
  $77 = 3476;
  HEAP32[$76>>2] = $77;
  $78 = ((($43)) + 4|0);
  $79 = $32;
  $80 = $79 | 16;
  $19 = $78;
  $20 = $80;
  $81 = $19;
  __THREW__ = 0;
  invoke_vi(500,($81|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  do {
   if ($83) {
    $135 = ___cxa_find_matching_catch()|0;
    $136 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $136;$eh$lpad$body$i$indexZ2D = $135;
   } else {
    $84 = 3016;
    HEAP32[$81>>2] = $84;
    $85 = ((($81)) + 32|0);
    $18 = $85;
    $86 = $18;
    $17 = $86;
    $87 = $17;
    $16 = $87;
    $88 = $16;
    $15 = $88;
    $14 = $86;
    $89 = $14;
    $13 = $89;
    $90 = $13;
    $12 = $90;
    $91 = $12;
    $__a$i$i$i$i = $91;
    $__i$i$i$i$i = 0;
    while(1) {
     $92 = $__i$i$i$i$i;
     $93 = ($92>>>0)<(3);
     if (!($93)) {
      break;
     }
     $94 = $__i$i$i$i$i;
     $95 = $__a$i$i$i$i;
     $96 = (($95) + ($94<<2)|0);
     HEAP32[$96>>2] = 0;
     $97 = $__i$i$i$i$i;
     $98 = (($97) + 1)|0;
     $__i$i$i$i$i = $98;
    }
    $99 = ((($81)) + 44|0);
    HEAP32[$99>>2] = 0;
    $100 = ((($81)) + 48|0);
    $101 = $20;
    HEAP32[$100>>2] = $101;
    $11 = $23;
    $102 = $11;
    $10 = $102;
    $103 = $10;
    $9 = $103;
    $104 = $9;
    $8 = $104;
    $7 = $102;
    $105 = $7;
    $6 = $105;
    $106 = $6;
    $5 = $106;
    $107 = $5;
    $__a$i$i1$i$i = $107;
    $__i$i$i2$i$i = 0;
    while(1) {
     $108 = $__i$i$i2$i$i;
     $109 = ($108>>>0)<(3);
     if (!($109)) {
      break;
     }
     $110 = $__i$i$i2$i$i;
     $111 = $__a$i$i1$i$i;
     $112 = (($111) + ($110<<2)|0);
     HEAP32[$112>>2] = 0;
     $113 = $__i$i$i2$i$i;
     $114 = (($113) + 1)|0;
     $__i$i$i2$i$i = $114;
    }
    __THREW__ = 0;
    invoke_vii(501,($81|0),($23|0));
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    do {
     if ($116) {
      $121 = ___cxa_find_matching_catch()|0;
      $122 = tempRet0;
      $21 = $121;
      $22 = $122;
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $131 = ___cxa_find_matching_catch(0|0)|0;
       $132 = tempRet0;
       ___clang_call_terminate($131);
       // unreachable;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       $119 = ___cxa_find_matching_catch()|0;
       $120 = tempRet0;
       $21 = $119;
       $22 = $120;
       break;
      }
      __THREW__ = 0;
      $146 = (invoke_iii(484,($msg|0),(13513|0))|0);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      if ($148) {
       label = 28;
      } else {
       $4 = 328;
       $149 = $4;
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       (invoke_iii(484,($146|0),($151|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
       } else {
        $154 = (___cxa_allocate_exception(8)|0);
        $$expand_i1_val = 1;
        HEAP8[$41>>0] = $$expand_i1_val;
        $3 = $msg;
        $155 = $3;
        $156 = ((($155)) + 4|0);
        __THREW__ = 0;
        invoke_vii(618,($40|0),($156|0));
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         $164 = ___cxa_find_matching_catch()|0;
         $165 = tempRet0;
         $38 = $164;
         $39 = $165;
        } else {
         __THREW__ = 0;
         invoke_vii(619,($154|0),($40|0));
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if (!($160)) {
          $$expand_i1_val7 = 0;
          HEAP8[$41>>0] = $$expand_i1_val7;
          __THREW__ = 0;
          invoke_viii(620,($154|0),(632|0),(146|0));
          $161 = __THREW__; __THREW__ = 0;
         }
         $166 = ___cxa_find_matching_catch()|0;
         $167 = tempRet0;
         $38 = $166;
         $39 = $167;
         __THREW__ = 0;
         invoke_vi(502,($40|0));
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          $175 = ___cxa_find_matching_catch(0|0)|0;
          $176 = tempRet0;
          ___clang_call_terminate($175);
          // unreachable;
         }
        }
        $$pre_trunc = HEAP8[$41>>0]|0;
        $170 = $$pre_trunc&1;
        if ($170) {
         ___cxa_free_exception(($154|0));
        }
       }
      }
      if ((label|0) == 28) {
       $162 = ___cxa_find_matching_catch()|0;
       $163 = tempRet0;
       $38 = $162;
       $39 = $163;
      }
      __THREW__ = 0;
      invoke_vi(70,($msg|0));
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       $175 = ___cxa_find_matching_catch(0|0)|0;
       $176 = tempRet0;
       ___clang_call_terminate($175);
       // unreachable;
      } else {
       $173 = $38;
       $174 = $39;
       ___resumeException($173|0);
       // unreachable;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(502,($85|0));
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(194,($81|0));
    $127 = __THREW__; __THREW__ = 0;
    $128 = $127&1;
    if ($128) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    } else {
     $129 = $21;
     $130 = $22;
     $eh$lpad$body$i$index2Z2D = $130;$eh$lpad$body$i$indexZ2D = $129;
     break;
    }
   }
  } while(0);
  $33 = $eh$lpad$body$i$indexZ2D;
  $34 = $eh$lpad$body$i$index2Z2D;
  __THREW__ = 0;
  $137 = __THREW__; __THREW__ = 0;
  $138 = $137&1;
  if ($138) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
 }
 $139 = ((($43)) + 56|0);
 __THREW__ = 0;
 invoke_vi(210,($139|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if ($141) {
  $144 = ___cxa_find_matching_catch(0|0)|0;
  $145 = tempRet0;
  ___clang_call_terminate($144);
  // unreachable;
 } else {
  $142 = $33;
  $143 = $34;
  ___resumeException($142|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh2IO6binaryINSt3__16vectorINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEE7restoreERNS2_13basic_istreamIcNS2_11char_traitsIcEEEERSI_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0;
 var $__i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp + 212|0;
 $msg = sp + 24|0;
 $40 = sp;
 $41 = sp + 320|0;
 $35 = $0;
 $36 = $1;
 $42 = $2&1;
 $37 = $42;
 $31 = $msg;
 $32 = 16;
 $43 = $31;
 $44 = ((($43)) + 56|0);
 $30 = $44;
 $45 = $30;
 $29 = $45;
 $46 = $29;
 $47 = 6536;
 HEAP32[$46>>2] = $47;
 $48 = 6212;
 HEAP32[$45>>2] = $48;
 $49 = 3456;
 HEAP32[$43>>2] = $49;
 $50 = ((($43)) + 56|0);
 $51 = 3476;
 HEAP32[$50>>2] = $51;
 $52 = ((($43)) + 4|0);
 $26 = $43;
 $53 = 3488;
 $27 = $53;
 $28 = $52;
 $54 = $26;
 $55 = $27;
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = ((($55)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$54>>2]|0;
 $60 = ((($59)) + -12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($54) + ($61)|0);
 HEAP32[$62>>2] = $58;
 $63 = HEAP32[$54>>2]|0;
 $64 = ((($63)) + -12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($54) + ($65)|0);
 $67 = $28;
 $24 = $66;
 $25 = $67;
 $68 = $24;
 $69 = $25;
 __THREW__ = 0;
 invoke_vii(490,($68|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $133 = ___cxa_find_matching_catch()|0;
  $134 = tempRet0;
  $33 = $133;
  $34 = $134;
 } else {
  $72 = ((($68)) + 72|0);
  HEAP32[$72>>2] = 0;
  $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $74 = ((($68)) + 76|0);
  HEAP32[$74>>2] = $73;
  $75 = 3456;
  HEAP32[$43>>2] = $75;
  $76 = ((($43)) + 56|0);
  $77 = 3476;
  HEAP32[$76>>2] = $77;
  $78 = ((($43)) + 4|0);
  $79 = $32;
  $80 = $79 | 16;
  $19 = $78;
  $20 = $80;
  $81 = $19;
  __THREW__ = 0;
  invoke_vi(500,($81|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  do {
   if ($83) {
    $135 = ___cxa_find_matching_catch()|0;
    $136 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $136;$eh$lpad$body$i$indexZ2D = $135;
   } else {
    $84 = 3016;
    HEAP32[$81>>2] = $84;
    $85 = ((($81)) + 32|0);
    $18 = $85;
    $86 = $18;
    $17 = $86;
    $87 = $17;
    $16 = $87;
    $88 = $16;
    $15 = $88;
    $14 = $86;
    $89 = $14;
    $13 = $89;
    $90 = $13;
    $12 = $90;
    $91 = $12;
    $__a$i$i$i$i = $91;
    $__i$i$i$i$i = 0;
    while(1) {
     $92 = $__i$i$i$i$i;
     $93 = ($92>>>0)<(3);
     if (!($93)) {
      break;
     }
     $94 = $__i$i$i$i$i;
     $95 = $__a$i$i$i$i;
     $96 = (($95) + ($94<<2)|0);
     HEAP32[$96>>2] = 0;
     $97 = $__i$i$i$i$i;
     $98 = (($97) + 1)|0;
     $__i$i$i$i$i = $98;
    }
    $99 = ((($81)) + 44|0);
    HEAP32[$99>>2] = 0;
    $100 = ((($81)) + 48|0);
    $101 = $20;
    HEAP32[$100>>2] = $101;
    $11 = $23;
    $102 = $11;
    $10 = $102;
    $103 = $10;
    $9 = $103;
    $104 = $9;
    $8 = $104;
    $7 = $102;
    $105 = $7;
    $6 = $105;
    $106 = $6;
    $5 = $106;
    $107 = $5;
    $__a$i$i1$i$i = $107;
    $__i$i$i2$i$i = 0;
    while(1) {
     $108 = $__i$i$i2$i$i;
     $109 = ($108>>>0)<(3);
     if (!($109)) {
      break;
     }
     $110 = $__i$i$i2$i$i;
     $111 = $__a$i$i1$i$i;
     $112 = (($111) + ($110<<2)|0);
     HEAP32[$112>>2] = 0;
     $113 = $__i$i$i2$i$i;
     $114 = (($113) + 1)|0;
     $__i$i$i2$i$i = $114;
    }
    __THREW__ = 0;
    invoke_vii(501,($81|0),($23|0));
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    do {
     if ($116) {
      $121 = ___cxa_find_matching_catch()|0;
      $122 = tempRet0;
      $21 = $121;
      $22 = $122;
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $131 = ___cxa_find_matching_catch(0|0)|0;
       $132 = tempRet0;
       ___clang_call_terminate($131);
       // unreachable;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       $119 = ___cxa_find_matching_catch()|0;
       $120 = tempRet0;
       $21 = $119;
       $22 = $120;
       break;
      }
      __THREW__ = 0;
      $146 = (invoke_iii(484,($msg|0),(13513|0))|0);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      if ($148) {
       label = 28;
      } else {
       $4 = 344;
       $149 = $4;
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       (invoke_iii(484,($146|0),($151|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
       } else {
        $154 = (___cxa_allocate_exception(8)|0);
        $$expand_i1_val = 1;
        HEAP8[$41>>0] = $$expand_i1_val;
        $3 = $msg;
        $155 = $3;
        $156 = ((($155)) + 4|0);
        __THREW__ = 0;
        invoke_vii(618,($40|0),($156|0));
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         $164 = ___cxa_find_matching_catch()|0;
         $165 = tempRet0;
         $38 = $164;
         $39 = $165;
        } else {
         __THREW__ = 0;
         invoke_vii(619,($154|0),($40|0));
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if (!($160)) {
          $$expand_i1_val7 = 0;
          HEAP8[$41>>0] = $$expand_i1_val7;
          __THREW__ = 0;
          invoke_viii(620,($154|0),(632|0),(146|0));
          $161 = __THREW__; __THREW__ = 0;
         }
         $166 = ___cxa_find_matching_catch()|0;
         $167 = tempRet0;
         $38 = $166;
         $39 = $167;
         __THREW__ = 0;
         invoke_vi(502,($40|0));
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          $175 = ___cxa_find_matching_catch(0|0)|0;
          $176 = tempRet0;
          ___clang_call_terminate($175);
          // unreachable;
         }
        }
        $$pre_trunc = HEAP8[$41>>0]|0;
        $170 = $$pre_trunc&1;
        if ($170) {
         ___cxa_free_exception(($154|0));
        }
       }
      }
      if ((label|0) == 28) {
       $162 = ___cxa_find_matching_catch()|0;
       $163 = tempRet0;
       $38 = $162;
       $39 = $163;
      }
      __THREW__ = 0;
      invoke_vi(70,($msg|0));
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       $175 = ___cxa_find_matching_catch(0|0)|0;
       $176 = tempRet0;
       ___clang_call_terminate($175);
       // unreachable;
      } else {
       $173 = $38;
       $174 = $39;
       ___resumeException($173|0);
       // unreachable;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(502,($85|0));
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(194,($81|0));
    $127 = __THREW__; __THREW__ = 0;
    $128 = $127&1;
    if ($128) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    } else {
     $129 = $21;
     $130 = $22;
     $eh$lpad$body$i$index2Z2D = $130;$eh$lpad$body$i$indexZ2D = $129;
     break;
    }
   }
  } while(0);
  $33 = $eh$lpad$body$i$indexZ2D;
  $34 = $eh$lpad$body$i$index2Z2D;
  __THREW__ = 0;
  $137 = __THREW__; __THREW__ = 0;
  $138 = $137&1;
  if ($138) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
 }
 $139 = ((($43)) + 56|0);
 __THREW__ = 0;
 invoke_vi(210,($139|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if ($141) {
  $144 = ___cxa_find_matching_catch(0|0)|0;
  $145 = tempRet0;
  ___clang_call_terminate($144);
  // unreachable;
 } else {
  $142 = $33;
  $143 = $34;
  ___resumeException($142|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh2IO5storeINSt3__16vectorINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEjRNS2_13basic_ostreamIcNS2_11char_traitsIcEEEERKT_b($_os,$_v,$_swap) {
 $_os = $_os|0;
 $_v = $_v|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_os;
 $1 = $_v;
 $3 = $_swap&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 $8 = (__ZN8OpenMesh2IO6binaryINSt3__16vectorINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEE5storeERNS2_13basic_ostreamIcNS2_11char_traitsIcEEEERKSI_b($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN8OpenMesh2IO5storeINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRNSt3__113basic_ostreamIcNSE_11char_traitsIcEEEERKT_b($_os,$_v,$_swap) {
 $_os = $_os|0;
 $_v = $_v|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_os;
 $1 = $_v;
 $3 = $_swap&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 $8 = (__ZN8OpenMesh2IO6binaryINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE5storeERNSt3__113basic_ostreamIcNSF_11char_traitsIcEEEERKSD_b($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN8OpenMesh2IO6binaryINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE5storeERNSt3__113basic_ostreamIcNSF_11char_traitsIcEEEERKSD_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0;
 var $__i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp + 212|0;
 $msg = sp + 24|0;
 $40 = sp;
 $41 = sp + 320|0;
 $35 = $0;
 $36 = $1;
 $42 = $2&1;
 $37 = $42;
 $31 = $msg;
 $32 = 16;
 $43 = $31;
 $44 = ((($43)) + 56|0);
 $30 = $44;
 $45 = $30;
 $29 = $45;
 $46 = $29;
 $47 = 6536;
 HEAP32[$46>>2] = $47;
 $48 = 6212;
 HEAP32[$45>>2] = $48;
 $49 = 3456;
 HEAP32[$43>>2] = $49;
 $50 = ((($43)) + 56|0);
 $51 = 3476;
 HEAP32[$50>>2] = $51;
 $52 = ((($43)) + 4|0);
 $26 = $43;
 $53 = 3488;
 $27 = $53;
 $28 = $52;
 $54 = $26;
 $55 = $27;
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = ((($55)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$54>>2]|0;
 $60 = ((($59)) + -12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($54) + ($61)|0);
 HEAP32[$62>>2] = $58;
 $63 = HEAP32[$54>>2]|0;
 $64 = ((($63)) + -12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($54) + ($65)|0);
 $67 = $28;
 $24 = $66;
 $25 = $67;
 $68 = $24;
 $69 = $25;
 __THREW__ = 0;
 invoke_vii(490,($68|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $133 = ___cxa_find_matching_catch()|0;
  $134 = tempRet0;
  $33 = $133;
  $34 = $134;
 } else {
  $72 = ((($68)) + 72|0);
  HEAP32[$72>>2] = 0;
  $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $74 = ((($68)) + 76|0);
  HEAP32[$74>>2] = $73;
  $75 = 3456;
  HEAP32[$43>>2] = $75;
  $76 = ((($43)) + 56|0);
  $77 = 3476;
  HEAP32[$76>>2] = $77;
  $78 = ((($43)) + 4|0);
  $79 = $32;
  $80 = $79 | 16;
  $19 = $78;
  $20 = $80;
  $81 = $19;
  __THREW__ = 0;
  invoke_vi(500,($81|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  do {
   if ($83) {
    $135 = ___cxa_find_matching_catch()|0;
    $136 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $136;$eh$lpad$body$i$indexZ2D = $135;
   } else {
    $84 = 3016;
    HEAP32[$81>>2] = $84;
    $85 = ((($81)) + 32|0);
    $18 = $85;
    $86 = $18;
    $17 = $86;
    $87 = $17;
    $16 = $87;
    $88 = $16;
    $15 = $88;
    $14 = $86;
    $89 = $14;
    $13 = $89;
    $90 = $13;
    $12 = $90;
    $91 = $12;
    $__a$i$i$i$i = $91;
    $__i$i$i$i$i = 0;
    while(1) {
     $92 = $__i$i$i$i$i;
     $93 = ($92>>>0)<(3);
     if (!($93)) {
      break;
     }
     $94 = $__i$i$i$i$i;
     $95 = $__a$i$i$i$i;
     $96 = (($95) + ($94<<2)|0);
     HEAP32[$96>>2] = 0;
     $97 = $__i$i$i$i$i;
     $98 = (($97) + 1)|0;
     $__i$i$i$i$i = $98;
    }
    $99 = ((($81)) + 44|0);
    HEAP32[$99>>2] = 0;
    $100 = ((($81)) + 48|0);
    $101 = $20;
    HEAP32[$100>>2] = $101;
    $11 = $23;
    $102 = $11;
    $10 = $102;
    $103 = $10;
    $9 = $103;
    $104 = $9;
    $8 = $104;
    $7 = $102;
    $105 = $7;
    $6 = $105;
    $106 = $6;
    $5 = $106;
    $107 = $5;
    $__a$i$i1$i$i = $107;
    $__i$i$i2$i$i = 0;
    while(1) {
     $108 = $__i$i$i2$i$i;
     $109 = ($108>>>0)<(3);
     if (!($109)) {
      break;
     }
     $110 = $__i$i$i2$i$i;
     $111 = $__a$i$i1$i$i;
     $112 = (($111) + ($110<<2)|0);
     HEAP32[$112>>2] = 0;
     $113 = $__i$i$i2$i$i;
     $114 = (($113) + 1)|0;
     $__i$i$i2$i$i = $114;
    }
    __THREW__ = 0;
    invoke_vii(501,($81|0),($23|0));
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    do {
     if ($116) {
      $121 = ___cxa_find_matching_catch()|0;
      $122 = tempRet0;
      $21 = $121;
      $22 = $122;
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $131 = ___cxa_find_matching_catch(0|0)|0;
       $132 = tempRet0;
       ___clang_call_terminate($131);
       // unreachable;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       $119 = ___cxa_find_matching_catch()|0;
       $120 = tempRet0;
       $21 = $119;
       $22 = $120;
       break;
      }
      __THREW__ = 0;
      $146 = (invoke_iii(484,($msg|0),(13513|0))|0);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      if ($148) {
       label = 28;
      } else {
       $4 = 328;
       $149 = $4;
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       (invoke_iii(484,($146|0),($151|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
       } else {
        $154 = (___cxa_allocate_exception(8)|0);
        $$expand_i1_val = 1;
        HEAP8[$41>>0] = $$expand_i1_val;
        $3 = $msg;
        $155 = $3;
        $156 = ((($155)) + 4|0);
        __THREW__ = 0;
        invoke_vii(618,($40|0),($156|0));
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         $164 = ___cxa_find_matching_catch()|0;
         $165 = tempRet0;
         $38 = $164;
         $39 = $165;
        } else {
         __THREW__ = 0;
         invoke_vii(619,($154|0),($40|0));
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if (!($160)) {
          $$expand_i1_val7 = 0;
          HEAP8[$41>>0] = $$expand_i1_val7;
          __THREW__ = 0;
          invoke_viii(620,($154|0),(632|0),(146|0));
          $161 = __THREW__; __THREW__ = 0;
         }
         $166 = ___cxa_find_matching_catch()|0;
         $167 = tempRet0;
         $38 = $166;
         $39 = $167;
         __THREW__ = 0;
         invoke_vi(502,($40|0));
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          $175 = ___cxa_find_matching_catch(0|0)|0;
          $176 = tempRet0;
          ___clang_call_terminate($175);
          // unreachable;
         }
        }
        $$pre_trunc = HEAP8[$41>>0]|0;
        $170 = $$pre_trunc&1;
        if ($170) {
         ___cxa_free_exception(($154|0));
        }
       }
      }
      if ((label|0) == 28) {
       $162 = ___cxa_find_matching_catch()|0;
       $163 = tempRet0;
       $38 = $162;
       $39 = $163;
      }
      __THREW__ = 0;
      invoke_vi(70,($msg|0));
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       $175 = ___cxa_find_matching_catch(0|0)|0;
       $176 = tempRet0;
       ___clang_call_terminate($175);
       // unreachable;
      } else {
       $173 = $38;
       $174 = $39;
       ___resumeException($173|0);
       // unreachable;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(502,($85|0));
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(194,($81|0));
    $127 = __THREW__; __THREW__ = 0;
    $128 = $127&1;
    if ($128) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    } else {
     $129 = $21;
     $130 = $22;
     $eh$lpad$body$i$index2Z2D = $130;$eh$lpad$body$i$indexZ2D = $129;
     break;
    }
   }
  } while(0);
  $33 = $eh$lpad$body$i$indexZ2D;
  $34 = $eh$lpad$body$i$index2Z2D;
  __THREW__ = 0;
  $137 = __THREW__; __THREW__ = 0;
  $138 = $137&1;
  if ($138) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
 }
 $139 = ((($43)) + 56|0);
 __THREW__ = 0;
 invoke_vi(210,($139|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if ($141) {
  $144 = ___cxa_find_matching_catch(0|0)|0;
  $145 = tempRet0;
  ___clang_call_terminate($144);
  // unreachable;
 } else {
  $142 = $33;
  $143 = $34;
  ___resumeException($142|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh2IO6binaryINSt3__16vectorINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEE5storeERNS2_13basic_ostreamIcNS2_11char_traitsIcEEEERKSI_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0;
 var $__i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp + 212|0;
 $msg = sp + 24|0;
 $40 = sp;
 $41 = sp + 320|0;
 $35 = $0;
 $36 = $1;
 $42 = $2&1;
 $37 = $42;
 $31 = $msg;
 $32 = 16;
 $43 = $31;
 $44 = ((($43)) + 56|0);
 $30 = $44;
 $45 = $30;
 $29 = $45;
 $46 = $29;
 $47 = 6536;
 HEAP32[$46>>2] = $47;
 $48 = 6212;
 HEAP32[$45>>2] = $48;
 $49 = 3456;
 HEAP32[$43>>2] = $49;
 $50 = ((($43)) + 56|0);
 $51 = 3476;
 HEAP32[$50>>2] = $51;
 $52 = ((($43)) + 4|0);
 $26 = $43;
 $53 = 3488;
 $27 = $53;
 $28 = $52;
 $54 = $26;
 $55 = $27;
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = ((($55)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$54>>2]|0;
 $60 = ((($59)) + -12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($54) + ($61)|0);
 HEAP32[$62>>2] = $58;
 $63 = HEAP32[$54>>2]|0;
 $64 = ((($63)) + -12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($54) + ($65)|0);
 $67 = $28;
 $24 = $66;
 $25 = $67;
 $68 = $24;
 $69 = $25;
 __THREW__ = 0;
 invoke_vii(490,($68|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $133 = ___cxa_find_matching_catch()|0;
  $134 = tempRet0;
  $33 = $133;
  $34 = $134;
 } else {
  $72 = ((($68)) + 72|0);
  HEAP32[$72>>2] = 0;
  $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $74 = ((($68)) + 76|0);
  HEAP32[$74>>2] = $73;
  $75 = 3456;
  HEAP32[$43>>2] = $75;
  $76 = ((($43)) + 56|0);
  $77 = 3476;
  HEAP32[$76>>2] = $77;
  $78 = ((($43)) + 4|0);
  $79 = $32;
  $80 = $79 | 16;
  $19 = $78;
  $20 = $80;
  $81 = $19;
  __THREW__ = 0;
  invoke_vi(500,($81|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  do {
   if ($83) {
    $135 = ___cxa_find_matching_catch()|0;
    $136 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $136;$eh$lpad$body$i$indexZ2D = $135;
   } else {
    $84 = 3016;
    HEAP32[$81>>2] = $84;
    $85 = ((($81)) + 32|0);
    $18 = $85;
    $86 = $18;
    $17 = $86;
    $87 = $17;
    $16 = $87;
    $88 = $16;
    $15 = $88;
    $14 = $86;
    $89 = $14;
    $13 = $89;
    $90 = $13;
    $12 = $90;
    $91 = $12;
    $__a$i$i$i$i = $91;
    $__i$i$i$i$i = 0;
    while(1) {
     $92 = $__i$i$i$i$i;
     $93 = ($92>>>0)<(3);
     if (!($93)) {
      break;
     }
     $94 = $__i$i$i$i$i;
     $95 = $__a$i$i$i$i;
     $96 = (($95) + ($94<<2)|0);
     HEAP32[$96>>2] = 0;
     $97 = $__i$i$i$i$i;
     $98 = (($97) + 1)|0;
     $__i$i$i$i$i = $98;
    }
    $99 = ((($81)) + 44|0);
    HEAP32[$99>>2] = 0;
    $100 = ((($81)) + 48|0);
    $101 = $20;
    HEAP32[$100>>2] = $101;
    $11 = $23;
    $102 = $11;
    $10 = $102;
    $103 = $10;
    $9 = $103;
    $104 = $9;
    $8 = $104;
    $7 = $102;
    $105 = $7;
    $6 = $105;
    $106 = $6;
    $5 = $106;
    $107 = $5;
    $__a$i$i1$i$i = $107;
    $__i$i$i2$i$i = 0;
    while(1) {
     $108 = $__i$i$i2$i$i;
     $109 = ($108>>>0)<(3);
     if (!($109)) {
      break;
     }
     $110 = $__i$i$i2$i$i;
     $111 = $__a$i$i1$i$i;
     $112 = (($111) + ($110<<2)|0);
     HEAP32[$112>>2] = 0;
     $113 = $__i$i$i2$i$i;
     $114 = (($113) + 1)|0;
     $__i$i$i2$i$i = $114;
    }
    __THREW__ = 0;
    invoke_vii(501,($81|0),($23|0));
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    do {
     if ($116) {
      $121 = ___cxa_find_matching_catch()|0;
      $122 = tempRet0;
      $21 = $121;
      $22 = $122;
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $131 = ___cxa_find_matching_catch(0|0)|0;
       $132 = tempRet0;
       ___clang_call_terminate($131);
       // unreachable;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       $119 = ___cxa_find_matching_catch()|0;
       $120 = tempRet0;
       $21 = $119;
       $22 = $120;
       break;
      }
      __THREW__ = 0;
      $146 = (invoke_iii(484,($msg|0),(13513|0))|0);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      if ($148) {
       label = 28;
      } else {
       $4 = 344;
       $149 = $4;
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       (invoke_iii(484,($146|0),($151|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
       } else {
        $154 = (___cxa_allocate_exception(8)|0);
        $$expand_i1_val = 1;
        HEAP8[$41>>0] = $$expand_i1_val;
        $3 = $msg;
        $155 = $3;
        $156 = ((($155)) + 4|0);
        __THREW__ = 0;
        invoke_vii(618,($40|0),($156|0));
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         $164 = ___cxa_find_matching_catch()|0;
         $165 = tempRet0;
         $38 = $164;
         $39 = $165;
        } else {
         __THREW__ = 0;
         invoke_vii(619,($154|0),($40|0));
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if (!($160)) {
          $$expand_i1_val7 = 0;
          HEAP8[$41>>0] = $$expand_i1_val7;
          __THREW__ = 0;
          invoke_viii(620,($154|0),(632|0),(146|0));
          $161 = __THREW__; __THREW__ = 0;
         }
         $166 = ___cxa_find_matching_catch()|0;
         $167 = tempRet0;
         $38 = $166;
         $39 = $167;
         __THREW__ = 0;
         invoke_vi(502,($40|0));
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          $175 = ___cxa_find_matching_catch(0|0)|0;
          $176 = tempRet0;
          ___clang_call_terminate($175);
          // unreachable;
         }
        }
        $$pre_trunc = HEAP8[$41>>0]|0;
        $170 = $$pre_trunc&1;
        if ($170) {
         ___cxa_free_exception(($154|0));
        }
       }
      }
      if ((label|0) == 28) {
       $162 = ___cxa_find_matching_catch()|0;
       $163 = tempRet0;
       $38 = $162;
       $39 = $163;
      }
      __THREW__ = 0;
      invoke_vi(70,($msg|0));
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       $175 = ___cxa_find_matching_catch(0|0)|0;
       $176 = tempRet0;
       ___clang_call_terminate($175);
       // unreachable;
      } else {
       $173 = $38;
       $174 = $39;
       ___resumeException($173|0);
       // unreachable;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(502,($85|0));
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(194,($81|0));
    $127 = __THREW__; __THREW__ = 0;
    $128 = $127&1;
    if ($128) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    } else {
     $129 = $21;
     $130 = $22;
     $eh$lpad$body$i$index2Z2D = $130;$eh$lpad$body$i$indexZ2D = $129;
     break;
    }
   }
  } while(0);
  $33 = $eh$lpad$body$i$indexZ2D;
  $34 = $eh$lpad$body$i$index2Z2D;
  __THREW__ = 0;
  $137 = __THREW__; __THREW__ = 0;
  $138 = $137&1;
  if ($138) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
 }
 $139 = ((($43)) + 56|0);
 __THREW__ = 0;
 invoke_vi(210,($139|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if ($141) {
  $144 = ___cxa_find_matching_catch(0|0)|0;
  $145 = tempRet0;
  ___clang_call_terminate($144);
  // unreachable;
 } else {
  $142 = $33;
  $143 = $34;
  ___resumeException($142|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4plusclEjRKSC_($this,$_b,$_v) {
 $this = $this|0;
 $_b = $_b|0;
 $_v = $_v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_b;
 $2 = $_v;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN8OpenMesh2IO7size_ofINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRKT_($4)|0);
 $6 = (($3) + ($5))|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN8OpenMesh2IO7size_ofINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRKT_($_v) {
 $_v = $_v|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_v;
 $1 = $0;
 $2 = (__ZN8OpenMesh2IO6binaryINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7size_ofERKSD_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN8OpenMesh2IO6binaryINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7size_ofERKSD_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return -1;
}
function __ZN8OpenMesh2IO7size_ofINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8OpenMesh2IO6binaryINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7size_ofEv()|0);
 return ($0|0);
}
function __ZN8OpenMesh2IO6binaryINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7size_ofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZN8OpenMesh12BaseProperty24check_and_set_persistentINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEvb($this,$_yn) {
 $this = $this|0;
 $_yn = $_yn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $_yn&1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4&1;
 if ($5) {
  $6 = (__ZN8OpenMesh2IO13is_streamableINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEbv()|0);
  if (!($6)) {
   $7 = (__Z5omerrv()|0);
   (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($7,14170)|0);
  }
 }
 $8 = (__ZN8OpenMesh2IO13is_streamableINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEbv()|0);
 $9 = $1;
 $10 = $9&1;
 $11 = $8 ? $10 : 0;
 $12 = ((($3)) + 16|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh2IO13is_streamableINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEbv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKSD_($this,$_rhs) {
 $this = $this|0;
 $_rhs = $_rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_rhs;
 $4 = $0;
 $5 = $1;
 __ZN8OpenMesh12BasePropertyC2ERKS0_($4,$5);
 $6 = 3548;
 HEAP32[$4>>2] = $6;
 $7 = ((($4)) + 20|0);
 $8 = $1;
 $9 = ((($8)) + 20|0);
 __THREW__ = 0;
 invoke_vii(634,($7|0),($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = ___cxa_find_matching_catch()|0;
 $13 = tempRet0;
 $2 = $12;
 $3 = $13;
 __THREW__ = 0;
 invoke_vi(614,($4|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $18 = ___cxa_find_matching_catch(0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 } else {
  $16 = $2;
  $17 = $3;
  ___resumeException($16|0);
  // unreachable;
 }
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEEC2ERKSG_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 152|0;
 $7 = sp + 136|0;
 $11 = sp + 120|0;
 $17 = sp + 96|0;
 $18 = sp + 16|0;
 $21 = sp + 84|0;
 $22 = sp + 171|0;
 $23 = sp + 8|0;
 $27 = sp + 68|0;
 $28 = sp + 64|0;
 $29 = sp + 60|0;
 $30 = sp + 170|0;
 $32 = sp;
 $34 = sp + 169|0;
 $40 = sp + 168|0;
 $38 = $this;
 $39 = $__x;
 $43 = $38;
 $44 = $39;
 $37 = $44;
 $45 = $37;
 $46 = ((($45)) + 8|0);
 $36 = $46;
 $47 = $36;
 $35 = $47;
 $48 = $35;
 $33 = $48;
 $49 = $33;
 ;HEAP8[$32>>0]=HEAP8[$34>>0]|0;
 $31 = $49;
 $25 = $43;
 $26 = $40;
 $50 = $25;
 $24 = $50;
 $1 = $3;
 $2 = -1;
 $51 = $1;
 HEAP32[$51>>2] = 0;
 $52 = HEAP32[$3>>2]|0;
 HEAP32[$27>>2] = $52;
 $4 = $27;
 HEAP32[$50>>2] = 0;
 $53 = ((($50)) + 4|0);
 $5 = $7;
 $6 = -1;
 $54 = $5;
 HEAP32[$54>>2] = 0;
 $55 = HEAP32[$7>>2]|0;
 HEAP32[$28>>2] = $55;
 $8 = $28;
 HEAP32[$53>>2] = 0;
 $56 = ((($50)) + 8|0);
 $9 = $11;
 $10 = -1;
 $57 = $9;
 HEAP32[$57>>2] = 0;
 $58 = HEAP32[$11>>2]|0;
 HEAP32[$29>>2] = $58;
 $12 = $29;
 ;HEAP8[$23>>0]=HEAP8[$30>>0]|0;
 $20 = $56;
 HEAP32[$21>>2] = 0;
 $59 = $20;
 $19 = $21;
 $60 = $19;
 $61 = HEAP32[$60>>2]|0;
 $13 = $23;
 ;HEAP8[$18>>0]=HEAP8[$22>>0]|0;
 $16 = $59;
 HEAP32[$17>>2] = $61;
 $62 = $16;
 $15 = $18;
 $14 = $17;
 $63 = $14;
 $64 = HEAP32[$63>>2]|0;
 HEAP32[$62>>2] = $64;
 $65 = $39;
 $0 = $65;
 $66 = $0;
 $67 = ((($66)) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$66>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $__n = $72;
 $73 = $__n;
 $74 = ($73>>>0)>(0);
 if (!($74)) {
  STACKTOP = sp;return;
 }
 $75 = $__n;
 __THREW__ = 0;
 invoke_vii(635,($43|0),($75|0));
 $76 = __THREW__; __THREW__ = 0;
 $77 = $76&1;
 if (!($77)) {
  $78 = $39;
  $79 = HEAP32[$78>>2]|0;
  $80 = $39;
  $81 = ((($80)) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  __THREW__ = 0;
  invoke_viii(636,($43|0),($79|0),($82|0));
  $83 = __THREW__; __THREW__ = 0;
  $84 = $83&1;
  if (!($84)) {
   STACKTOP = sp;return;
  }
 }
 $85 = ___cxa_find_matching_catch()|0;
 $86 = tempRet0;
 $41 = $85;
 $42 = $86;
 __THREW__ = 0;
 invoke_vi(637,($43|0));
 $87 = __THREW__; __THREW__ = 0;
 $88 = $87&1;
 if ($88) {
  $91 = ___cxa_find_matching_catch(0|0)|0;
  $92 = tempRet0;
  ___clang_call_terminate($91);
  // unreachable;
 } else {
  $89 = $41;
  $90 = $42;
  ___resumeException($89|0);
  // unreachable;
 }
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
 }
 $11 = $14;
 $18 = $11;
 $19 = ((($18)) + 8|0);
 $10 = $19;
 $20 = $10;
 $9 = $20;
 $21 = $9;
 $22 = $13;
 $7 = $21;
 $8 = $22;
 $23 = $7;
 $24 = $8;
 $4 = $23;
 $5 = $24;
 $6 = 0;
 $25 = $5;
 $3 = $25;
 $26 = $3;
 $27 = (__Znwj($26)|0);
 $28 = ((($14)) + 4|0);
 HEAP32[$28>>2] = $27;
 HEAP32[$14>>2] = $27;
 $29 = HEAP32[$14>>2]|0;
 $30 = $13;
 $31 = (($29) + ($30)|0);
 $2 = $14;
 $32 = $2;
 $33 = ((($32)) + 8|0);
 $1 = $33;
 $34 = $1;
 $0 = $34;
 $35 = $0;
 HEAP32[$35>>2] = $31;
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE14__annotate_newEj($14,0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE18__construct_at_endIPSD_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESK_SK_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 44|0;
 $7 = $this;
 $8 = $__first;
 $9 = $__last;
 $10 = $7;
 $6 = $10;
 $11 = $6;
 $12 = ((($11)) + 8|0);
 $5 = $12;
 $13 = $5;
 $4 = $13;
 $14 = $4;
 $__a = $14;
 while(1) {
  $15 = $8;
  $16 = $9;
  $17 = ($15|0)!=($16|0);
  if (!($17)) {
   break;
  }
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotatorC2ERKSG_j($__annotator,$10,1);
  $18 = $__a;
  $19 = ((($10)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $3 = $20;
  $21 = $3;
  $22 = $8;
  $0 = $18;
  $1 = $21;
  $2 = $22;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $23 = ((($10)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 1|0);
  HEAP32[$23>>2] = $25;
  $26 = $8;
  $27 = ((($26)) + 1|0);
  $8 = $27;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 12|0;
 $32 = sp + 4|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = ((($40)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = ((($45)) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = ((($40)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -1|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = ((($55)) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = ((($61)) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $25 = $58;
 $26 = $59;
 $27 = $69;
 $70 = $25;
 $71 = $26;
 $72 = $27;
 $22 = $70;
 $23 = $71;
 $24 = $72;
 $73 = $23;
 $21 = $73;
 $74 = $21;
 __ZdlPv($74);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotatorC2ERKSG_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 77|0;
 $10 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $3 = $24;
 $25 = $3;
 ;HEAP8[$2>>0]=HEAP8[$4>>0]|0;
 $1 = $25;
 $26 = $1;
 $0 = $26;
 HEAP32[$18>>2] = -1;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $11 = $18;
 $12 = $19;
 $28 = $11;
 $29 = $12;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $8 = $28;
 $9 = $29;
 $30 = $9;
 $31 = $8;
 $5 = $10;
 $6 = $30;
 $7 = $31;
 $32 = $6;
 $33 = HEAP32[$32>>2]|0;
 $34 = $7;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $9;
 $38 = $8;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($26) + ($37)|0);
 $6 = $20;
 $39 = $6;
 $40 = HEAP32[$39>>2]|0;
 $5 = $40;
 $41 = $5;
 $11 = $20;
 $42 = $11;
 $10 = $42;
 $43 = $10;
 $9 = $43;
 $44 = $9;
 $45 = ((($44)) + 8|0);
 $8 = $45;
 $46 = $8;
 $7 = $46;
 $47 = $7;
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$43>>2]|0;
 $50 = $48;
 $51 = $49;
 $52 = (($50) - ($51))|0;
 $53 = (($41) + ($52)|0);
 $13 = $20;
 $54 = $13;
 $55 = HEAP32[$54>>2]|0;
 $12 = $55;
 $56 = $12;
 $57 = $19;
 $58 = (($56) + ($57)|0);
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE31__annotate_contiguous_containerEPKvSI_SI_SI_($20,$23,$38,$53,$58);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE31__annotate_contiguous_containerEPKvSI_SI_SI_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE21__push_back_slow_pathIKSD_EEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 72|0;
 $23 = sp + 60|0;
 $__v = sp + 12|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = ((($33)) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $44;
 $45 = $21;
 $46 = (__ZNKSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8max_sizeEv($45)|0);
 $__ms$i = $46;
 $47 = HEAP32[$22>>2]|0;
 $48 = $__ms$i;
 $49 = ($47>>>0)>($48>>>0);
 if ($49) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($45);
 }
 $19 = $45;
 $50 = $19;
 $18 = $50;
 $51 = $18;
 $17 = $51;
 $52 = $17;
 $53 = ((($52)) + 8|0);
 $16 = $53;
 $54 = $16;
 $15 = $54;
 $55 = $15;
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$51>>2]|0;
 $58 = $56;
 $59 = $57;
 $60 = (($58) - ($59))|0;
 $__cap$i = $60;
 $61 = $__cap$i;
 $62 = $__ms$i;
 $63 = (($62>>>0) / 2)&-1;
 $64 = ($61>>>0)>=($63>>>0);
 if ($64) {
  $65 = $__ms$i;
  $20 = $65;
 } else {
  $66 = $__cap$i;
  $67 = $66<<1;
  HEAP32[$23>>2] = $67;
  $12 = $23;
  $13 = $22;
  $68 = $12;
  $69 = $13;
  ;HEAP8[$11>>0]=HEAP8[$14>>0]|0;
  $9 = $68;
  $10 = $69;
  $70 = $9;
  $71 = $10;
  $6 = $11;
  $7 = $70;
  $8 = $71;
  $72 = $7;
  $73 = HEAP32[$72>>2]|0;
  $74 = $8;
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73>>>0)<($75>>>0);
  $77 = $10;
  $78 = $9;
  $79 = $76 ? $77 : $78;
  $80 = HEAP32[$79>>2]|0;
  $20 = $80;
 }
 $81 = $20;
 $5 = $32;
 $82 = $5;
 $83 = ((($82)) + 4|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$82>>2]|0;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = $__a;
 __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEEC2EjjSG_($__v,$81,$88,$89);
 $90 = $__a;
 $91 = ((($__v)) + 8|0);
 $92 = HEAP32[$91>>2]|0;
 $4 = $92;
 $93 = $4;
 $94 = $29;
 $3 = $94;
 $95 = $3;
 $0 = $90;
 $1 = $93;
 $2 = $95;
 $96 = ((($__v)) + 8|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ((($97)) + 1|0);
 HEAP32[$96>>2] = $98;
 __THREW__ = 0;
 invoke_vii(638,($32|0),($__v|0));
 $99 = __THREW__; __THREW__ = 0;
 $100 = $99&1;
 if (!($100)) {
  __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $101 = ___cxa_find_matching_catch()|0;
 $102 = tempRet0;
 $30 = $101;
 $31 = $102;
 __THREW__ = 0;
 invoke_vi(639,($__v|0));
 $103 = __THREW__; __THREW__ = 0;
 $104 = $103&1;
 if ($104) {
  $107 = ___cxa_find_matching_catch(0|0)|0;
  $108 = tempRet0;
  ___clang_call_terminate($107);
  // unreachable;
 } else {
  $105 = $30;
  $106 = $31;
  ___resumeException($105|0);
  // unreachable;
 }
}
function __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEEC2EjjSG_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 124|0;
 $8 = sp + 108|0;
 $22 = sp + 52|0;
 $29 = sp + 24|0;
 $34 = sp + 4|0;
 $35 = sp;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = ((($36)) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = ((($46)) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = ((($54)) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $14 = $63;
  $64 = $14;
  $65 = (__Znwj($64)|0);
  $68 = $65;
 } else {
  $20 = $22;
  $21 = -1;
  $66 = $20;
  HEAP32[$66>>2] = 0;
  $67 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $67;
  $23 = $35;
  $68 = 0;
 }
 HEAP32[$36>>2] = $68;
 $69 = HEAP32[$36>>2]|0;
 $70 = $32;
 $71 = (($69) + ($70)|0);
 $72 = ((($36)) + 8|0);
 HEAP32[$72>>2] = $71;
 $73 = ((($36)) + 4|0);
 HEAP32[$73>>2] = $71;
 $74 = HEAP32[$36>>2]|0;
 $75 = $31;
 $76 = (($74) + ($75)|0);
 $26 = $36;
 $77 = $26;
 $78 = ((($77)) + 12|0);
 $25 = $78;
 $79 = $25;
 $24 = $79;
 $80 = $24;
 HEAP32[$80>>2] = $76;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE26__swap_out_circular_bufferERNS_14__split_bufferISD_RSF_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $_Np$i = $46;
 $47 = $_Np$i;
 $48 = $25;
 $49 = HEAP32[$48>>2]|0;
 $50 = (0 - ($47))|0;
 $51 = (($49) + ($50)|0);
 HEAP32[$48>>2] = $51;
 $52 = $25;
 $53 = HEAP32[$52>>2]|0;
 $54 = $23;
 $55 = $_Np$i;
 _memcpy(($53|0),($54|0),($55|0))|0;
 $56 = $31;
 $57 = ((($56)) + 4|0);
 $3 = $32;
 $4 = $57;
 $58 = $3;
 $2 = $58;
 $59 = $2;
 $60 = HEAP32[$59>>2]|0;
 HEAP32[$__t$i2>>2] = $60;
 $61 = $4;
 $0 = $61;
 $62 = $0;
 $63 = HEAP32[$62>>2]|0;
 $64 = $3;
 HEAP32[$64>>2] = $63;
 $1 = $__t$i2;
 $65 = $1;
 $66 = HEAP32[$65>>2]|0;
 $67 = $4;
 HEAP32[$67>>2] = $66;
 $68 = ((($32)) + 4|0);
 $69 = $31;
 $70 = ((($69)) + 8|0);
 $8 = $68;
 $9 = $70;
 $71 = $8;
 $7 = $71;
 $72 = $7;
 $73 = HEAP32[$72>>2]|0;
 HEAP32[$__t$i1>>2] = $73;
 $74 = $9;
 $5 = $74;
 $75 = $5;
 $76 = HEAP32[$75>>2]|0;
 $77 = $8;
 HEAP32[$77>>2] = $76;
 $6 = $__t$i1;
 $78 = $6;
 $79 = HEAP32[$78>>2]|0;
 $80 = $9;
 HEAP32[$80>>2] = $79;
 $12 = $32;
 $81 = $12;
 $82 = ((($81)) + 8|0);
 $11 = $82;
 $83 = $11;
 $10 = $83;
 $84 = $10;
 $85 = $31;
 $15 = $85;
 $86 = $15;
 $87 = ((($86)) + 12|0);
 $14 = $87;
 $88 = $14;
 $13 = $88;
 $89 = $13;
 $19 = $84;
 $20 = $89;
 $90 = $19;
 $18 = $90;
 $91 = $18;
 $92 = HEAP32[$91>>2]|0;
 HEAP32[$__t$i>>2] = $92;
 $93 = $20;
 $16 = $93;
 $94 = $16;
 $95 = HEAP32[$94>>2]|0;
 $96 = $19;
 HEAP32[$96>>2] = $95;
 $17 = $__t$i;
 $97 = $17;
 $98 = HEAP32[$97>>2]|0;
 $99 = $20;
 HEAP32[$99>>2] = $98;
 $100 = $31;
 $101 = ((($100)) + 4|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = $31;
 HEAP32[$103>>2] = $102;
 $21 = $32;
 $104 = $21;
 $105 = ((($104)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = HEAP32[$104>>2]|0;
 $108 = $106;
 $109 = $107;
 $110 = (($108) - ($109))|0;
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE14__annotate_newEj($32,$110);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 8|0;
 $20 = sp + 125|0;
 $26 = sp;
 $29 = sp + 124|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26>>0]=HEAP8[$29>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = ((($38)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = ((($43)) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($38)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -1|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17>>0]=HEAP8[$20>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = ((($57)) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = ((($65)) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $11 = $62;
 $12 = $63;
 $13 = $73;
 $74 = $11;
 $75 = $12;
 $76 = $13;
 $8 = $74;
 $9 = $75;
 $10 = $76;
 $77 = $9;
 $7 = $77;
 $78 = $7;
 __ZdlPv($78);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($26) + ($37)|0);
 $6 = $20;
 $39 = $6;
 $40 = HEAP32[$39>>2]|0;
 $5 = $40;
 $41 = $5;
 $7 = $20;
 $42 = $7;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($41) + ($48)|0);
 $9 = $20;
 $50 = $9;
 $51 = HEAP32[$50>>2]|0;
 $8 = $51;
 $52 = $8;
 $14 = $20;
 $53 = $14;
 $13 = $53;
 $54 = $13;
 $12 = $54;
 $55 = $12;
 $56 = ((($55)) + 8|0);
 $11 = $56;
 $57 = $11;
 $10 = $57;
 $58 = $10;
 $59 = HEAP32[$58>>2]|0;
 $60 = HEAP32[$54>>2]|0;
 $61 = $59;
 $62 = $60;
 $63 = (($61) - ($62))|0;
 $64 = (($52) + ($63)|0);
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE31__annotate_contiguous_containerEPKvSI_SI_SI_($20,$23,$38,$49,$64);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($22) + ($33)|0);
 $6 = $16;
 $35 = $6;
 $36 = HEAP32[$35>>2]|0;
 $5 = $36;
 $37 = $5;
 $38 = $15;
 $39 = (($37) + ($38)|0);
 $8 = $16;
 $40 = $8;
 $41 = HEAP32[$40>>2]|0;
 $7 = $41;
 $42 = $7;
 $9 = $16;
 $43 = $9;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($42) + ($49)|0);
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE31__annotate_contiguous_containerEPKvSI_SI_SI_($16,$19,$34,$39,$50);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE4swapERSG_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 124|0;
 $__t$i1 = sp + 76|0;
 $24 = sp;
 $27 = sp + 148|0;
 $__t$i = sp + 12|0;
 $33 = $this;
 $34 = $__x;
 $35 = $33;
 $36 = $34;
 $31 = $35;
 $32 = $36;
 $37 = $31;
 $30 = $37;
 $38 = $30;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$__t$i>>2] = $39;
 $40 = $32;
 $28 = $40;
 $41 = $28;
 $42 = HEAP32[$41>>2]|0;
 $43 = $31;
 HEAP32[$43>>2] = $42;
 $29 = $__t$i;
 $44 = $29;
 $45 = HEAP32[$44>>2]|0;
 $46 = $32;
 HEAP32[$46>>2] = $45;
 $47 = ((($35)) + 4|0);
 $48 = $34;
 $49 = ((($48)) + 4|0);
 $3 = $47;
 $4 = $49;
 $50 = $3;
 $2 = $50;
 $51 = $2;
 $52 = HEAP32[$51>>2]|0;
 HEAP32[$__t$i2>>2] = $52;
 $53 = $4;
 $0 = $53;
 $54 = $0;
 $55 = HEAP32[$54>>2]|0;
 $56 = $3;
 HEAP32[$56>>2] = $55;
 $1 = $__t$i2;
 $57 = $1;
 $58 = HEAP32[$57>>2]|0;
 $59 = $4;
 HEAP32[$59>>2] = $58;
 $7 = $35;
 $60 = $7;
 $61 = ((($60)) + 8|0);
 $6 = $61;
 $62 = $6;
 $5 = $62;
 $63 = $5;
 $64 = $34;
 $10 = $64;
 $65 = $10;
 $66 = ((($65)) + 8|0);
 $9 = $66;
 $67 = $9;
 $8 = $67;
 $68 = $8;
 $14 = $63;
 $15 = $68;
 $69 = $14;
 $13 = $69;
 $70 = $13;
 $71 = HEAP32[$70>>2]|0;
 HEAP32[$__t$i1>>2] = $71;
 $72 = $15;
 $11 = $72;
 $73 = $11;
 $74 = HEAP32[$73>>2]|0;
 $75 = $14;
 HEAP32[$75>>2] = $74;
 $12 = $__t$i1;
 $76 = $12;
 $77 = HEAP32[$76>>2]|0;
 $78 = $15;
 HEAP32[$78>>2] = $77;
 $18 = $35;
 $79 = $18;
 $80 = ((($79)) + 8|0);
 $17 = $80;
 $81 = $17;
 $16 = $81;
 $82 = $16;
 $83 = $34;
 $21 = $83;
 $84 = $21;
 $85 = ((($84)) + 8|0);
 $20 = $85;
 $86 = $20;
 $19 = $86;
 $87 = $19;
 $25 = $82;
 $26 = $87;
 $88 = $25;
 $89 = $26;
 ;HEAP8[$24>>0]=HEAP8[$27>>0]|0;
 $22 = $88;
 $23 = $89;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $__cs = $27;
 $28 = $__cs;
 $29 = $19;
 $30 = ($28>>>0)<($29>>>0);
 if ($30) {
  $31 = $19;
  $32 = $__cs;
  $33 = (($31) - ($32))|0;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8__appendEj($20,$33);
  STACKTOP = sp;return;
 }
 $34 = $__cs;
 $35 = $19;
 $36 = ($34>>>0)>($35>>>0);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = HEAP32[$20>>2]|0;
 $38 = $19;
 $39 = (($37) + ($38)|0);
 $13 = $20;
 $14 = $39;
 $40 = $13;
 $12 = $40;
 $41 = $12;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$41>>2]|0;
 $45 = $43;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $__old_size$i = $47;
 $48 = $14;
 $10 = $40;
 $11 = $48;
 $49 = $10;
 while(1) {
  $50 = $11;
  $51 = ((($49)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($50|0)!=($52|0);
  if (!($53)) {
   break;
  }
  $9 = $49;
  $54 = $9;
  $55 = ((($54)) + 8|0);
  $8 = $55;
  $56 = $8;
  $7 = $56;
  $57 = $7;
  $58 = ((($49)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ((($59)) + -1|0);
  HEAP32[$58>>2] = $60;
  $0 = $60;
  $61 = $0;
  $4 = $57;
  $5 = $61;
  $62 = $4;
  $63 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $62;
  $2 = $63;
 }
 $64 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(631,($40|0),($64|0));
 $65 = __THREW__; __THREW__ = 0;
 $66 = $65&1;
 if ($66) {
  $67 = ___cxa_find_matching_catch()|0;
  $68 = tempRet0;
  $15 = $67;
  $16 = $68;
  $69 = $15;
  ___cxa_call_unexpected(($69|0));
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 72|0;
 $__v = sp + 12|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = $27;
 $42 = ($40>>>0)>=($41>>>0);
 if ($42) {
  $43 = $27;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE18__construct_at_endEj($30,$43);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $44 = $22;
 $45 = ((($44)) + 8|0);
 $21 = $45;
 $46 = $21;
 $20 = $46;
 $47 = $20;
 $__a = $47;
 $19 = $30;
 $48 = $19;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = $27;
 $56 = (($54) + ($55))|0;
 $16 = $30;
 HEAP32[$17>>2] = $56;
 $57 = $16;
 $58 = (__ZNKSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$17>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
 }
 $14 = $57;
 $62 = $14;
 $13 = $62;
 $63 = $13;
 $12 = $63;
 $64 = $12;
 $65 = ((($64)) + 8|0);
 $11 = $65;
 $66 = $11;
 $10 = $66;
 $67 = $10;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $__cap$i = $72;
 $73 = $__cap$i;
 $74 = $__ms$i;
 $75 = (($74>>>0) / 2)&-1;
 $76 = ($73>>>0)>=($75>>>0);
 if ($76) {
  $77 = $__ms$i;
  $15 = $77;
 } else {
  $78 = $__cap$i;
  $79 = $78<<1;
  HEAP32[$18>>2] = $79;
  $7 = $18;
  $8 = $17;
  $80 = $7;
  $81 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $80;
  $5 = $81;
  $82 = $4;
  $83 = $5;
  $1 = $6;
  $2 = $82;
  $3 = $83;
  $84 = $2;
  $85 = HEAP32[$84>>2]|0;
  $86 = $3;
  $87 = HEAP32[$86>>2]|0;
  $88 = ($85>>>0)<($87>>>0);
  $89 = $5;
  $90 = $4;
  $91 = $88 ? $89 : $90;
  $92 = HEAP32[$91>>2]|0;
  $15 = $92;
 }
 $93 = $15;
 $0 = $30;
 $94 = $0;
 $95 = ((($94)) + 4|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = HEAP32[$94>>2]|0;
 $98 = $96;
 $99 = $97;
 $100 = (($98) - ($99))|0;
 $101 = $__a;
 __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEEC2EjjSG_($__v,$93,$100,$101);
 $102 = $27;
 __THREW__ = 0;
 invoke_vii(640,($__v|0),($102|0));
 $103 = __THREW__; __THREW__ = 0;
 $104 = $103&1;
 if (!($104)) {
  __THREW__ = 0;
  invoke_vii(638,($30|0),($__v|0));
  $105 = __THREW__; __THREW__ = 0;
  $106 = $105&1;
  if (!($106)) {
   __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEED2Ev($__v);
   STACKTOP = sp;return;
  }
 }
 $107 = ___cxa_find_matching_catch()|0;
 $108 = tempRet0;
 $28 = $107;
 $29 = $108;
 __THREW__ = 0;
 invoke_vi(639,($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $113 = ___cxa_find_matching_catch(0|0)|0;
  $114 = tempRet0;
  ___clang_call_terminate($113);
  // unreachable;
 } else {
  $111 = $28;
  $112 = $29;
  ___resumeException($111|0);
  // unreachable;
 }
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 36|0;
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = ((($9)) + 8|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $__a = $12;
 while(1) {
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotatorC2ERKSG_j($__annotator,$8,1);
  $13 = $__a;
  $14 = ((($8)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $2 = $15;
  $16 = $2;
  $0 = $13;
  $1 = $16;
  $17 = ((($8)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 1|0);
  HEAP32[$17>>2] = $19;
  $20 = $7;
  $21 = (($20) + -1)|0;
  $7 = $21;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $22 = $7;
  $23 = ($22>>>0)>(0);
  if (!($23)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = ((($9)) + 12|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $__a = $14;
 while(1) {
  $15 = $__a;
  $16 = ((($8)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $0 = $17;
  $18 = $0;
  $1 = $15;
  $2 = $18;
  $19 = ((($8)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 1|0);
  HEAP32[$19>>2] = $21;
  $22 = $7;
  $23 = (($22) + -1)|0;
  $7 = $23;
  $24 = $7;
  $25 = ($24>>>0)>(0);
  if (!($25)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp + 8|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $14 = $10;
 $8 = $13;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = ((($17)) + 8|0);
 $5 = $18;
 $19 = $5;
 $4 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$16>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = ($14>>>0)>($25>>>0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $3 = $13;
 $27 = $3;
 $28 = ((($27)) + 8|0);
 $2 = $28;
 $29 = $2;
 $1 = $29;
 $30 = $1;
 $__a = $30;
 $31 = $10;
 $0 = $13;
 $32 = $0;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$32>>2]|0;
 $36 = $34;
 $37 = $35;
 $38 = (($36) - ($37))|0;
 $39 = $__a;
 __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEEC2EjjSG_($__v,$31,$38,$39);
 __THREW__ = 0;
 invoke_vii(638,($13|0),($__v|0));
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 if (!($41)) {
  __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $42 = ___cxa_find_matching_catch()|0;
 $43 = tempRet0;
 $11 = $42;
 $12 = $43;
 __THREW__ = 0;
 invoke_vi(639,($__v|0));
 $44 = __THREW__; __THREW__ = 0;
 $45 = $44&1;
 if ($45) {
  $48 = ___cxa_find_matching_catch(0|0)|0;
  $49 = tempRet0;
  ___clang_call_terminate($48);
  // unreachable;
 } else {
  $46 = $11;
  $47 = $12;
  ___resumeException($46|0);
  // unreachable;
 }
}
function __ZN8OpenMesh17PropertyContainer3addINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEENS_15BasePropHandleTIT_EERKSF_RKNSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEE($this,$0,$_name) {
 $this = $this|0;
 $0 = $0|0;
 $_name = $_name|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $idx = 0, $p_end = 0, $p_it = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator$i = sp + 200|0;
 $29 = sp + 84|0;
 $32 = sp + 72|0;
 $36 = sp + 56|0;
 $39 = sp + 44|0;
 $41 = sp + 36|0;
 $p_it = sp + 20|0;
 $p_end = sp + 16|0;
 $45 = sp + 8|0;
 $42 = $this;
 $43 = $0;
 $44 = $_name;
 $48 = $42;
 $49 = ((($48)) + 4|0);
 $40 = $49;
 $50 = $40;
 $51 = HEAP32[$50>>2]|0;
 $37 = $50;
 $38 = $51;
 $52 = $38;
 $34 = $36;
 $35 = $52;
 $53 = $34;
 $54 = $35;
 HEAP32[$53>>2] = $54;
 $55 = HEAP32[$36>>2]|0;
 HEAP32[$39>>2] = $55;
 $56 = HEAP32[$39>>2]|0;
 HEAP32[$p_it>>2] = $56;
 $57 = ((($48)) + 4|0);
 $33 = $57;
 $58 = $33;
 $59 = ((($58)) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 $30 = $58;
 $31 = $60;
 $61 = $31;
 $27 = $29;
 $28 = $61;
 $62 = $27;
 $63 = $28;
 HEAP32[$62>>2] = $63;
 $64 = HEAP32[$29>>2]|0;
 HEAP32[$32>>2] = $64;
 $65 = HEAP32[$32>>2]|0;
 HEAP32[$p_end>>2] = $65;
 $idx = 0;
 while(1) {
  $23 = $p_it;
  $24 = $p_end;
  $66 = $23;
  $67 = $24;
  $21 = $66;
  $22 = $67;
  $68 = $21;
  $20 = $68;
  $69 = $20;
  $70 = HEAP32[$69>>2]|0;
  $71 = $22;
  $19 = $71;
  $72 = $19;
  $73 = HEAP32[$72>>2]|0;
  $74 = ($70|0)==($73|0);
  $75 = $74 ^ 1;
  if (!($75)) {
   break;
  }
  $6 = $p_it;
  $76 = $6;
  $77 = HEAP32[$76>>2]|0;
  $78 = HEAP32[$77>>2]|0;
  $79 = ($78|0)!=(0|0);
  if (!($79)) {
   break;
  }
  $5 = $p_it;
  $80 = $5;
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($81)) + 4|0);
  HEAP32[$80>>2] = $82;
  $83 = $idx;
  $84 = (($83) + 1)|0;
  $idx = $84;
 }
 $3 = $p_it;
 $4 = $p_end;
 $85 = $3;
 $2 = $85;
 $86 = $2;
 $87 = HEAP32[$86>>2]|0;
 $88 = $4;
 $1 = $88;
 $89 = $1;
 $90 = HEAP32[$89>>2]|0;
 $91 = ($87|0)==($90|0);
 do {
  if ($91) {
   $92 = ((($48)) + 4|0);
   HEAP32[$45>>2] = 0;
   $17 = $92;
   $18 = $45;
   $93 = $17;
   $94 = ((($93)) + 4|0);
   $95 = HEAP32[$94>>2]|0;
   $16 = $93;
   $96 = $16;
   $97 = ((($96)) + 8|0);
   $15 = $97;
   $98 = $15;
   $14 = $98;
   $99 = $14;
   $100 = HEAP32[$99>>2]|0;
   $101 = ($95|0)!=($100|0);
   if ($101) {
    __ZNSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i,$93,1);
    $13 = $93;
    $102 = $13;
    $103 = ((($102)) + 8|0);
    $12 = $103;
    $104 = $12;
    $11 = $104;
    $105 = $11;
    $106 = ((($93)) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $10 = $107;
    $108 = $10;
    $109 = $18;
    $7 = $105;
    $8 = $108;
    $9 = $109;
    $110 = $8;
    $111 = $9;
    $112 = HEAP32[$111>>2]|0;
    HEAP32[$110>>2] = $112;
    __ZNSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
    $113 = ((($93)) + 4|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((($114)) + 4|0);
    HEAP32[$113>>2] = $115;
    break;
   } else {
    $116 = $18;
    __ZNSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($93,$116);
    break;
   }
  }
 } while(0);
 $117 = (__Znwj(32)|0);
 $118 = $44;
 __THREW__ = 0;
 invoke_vii(641,($117|0),($118|0));
 $119 = __THREW__; __THREW__ = 0;
 $120 = $119&1;
 if ($120) {
  $129 = ___cxa_find_matching_catch()|0;
  $130 = tempRet0;
  $46 = $129;
  $47 = $130;
  __ZdlPv($117);
  $131 = $46;
  $132 = $47;
  ___resumeException($131|0);
  // unreachable;
 } else {
  $121 = ((($48)) + 4|0);
  $122 = $idx;
  $25 = $121;
  $26 = $122;
  $123 = $25;
  $124 = $26;
  $125 = HEAP32[$123>>2]|0;
  $126 = (($125) + ($124<<2)|0);
  HEAP32[$126>>2] = $117;
  $127 = $idx;
  __ZN8OpenMesh15BasePropHandleTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2Ei($41,$127);
  $128 = HEAP32[$41>>2]|0;
  STACKTOP = sp;return ($128|0);
 }
 return (0)|0;
}
function __ZN8OpenMesh12FPropHandleTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKNS_15BasePropHandleTISC_EE($this,$_b) {
 $this = $this|0;
 $_b = $_b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_b;
 $2 = $0;
 $3 = $1;
 ;HEAP32[$2>>2]=HEAP32[$3>>2]|0;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEE($this,$_name) {
 $this = $this|0;
 $_name = $_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 96|0;
 $6 = sp + 80|0;
 $10 = sp + 64|0;
 $15 = sp + 44|0;
 $18 = sp + 32|0;
 $21 = sp + 20|0;
 $22 = sp + 16|0;
 $23 = sp + 12|0;
 $25 = $this;
 $26 = $_name;
 $27 = $25;
 $28 = $26;
 __ZN8OpenMesh12BasePropertyC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($27,$28);
 $29 = 3624;
 HEAP32[$27>>2] = $29;
 $30 = ((($27)) + 20|0);
 $24 = $30;
 $31 = $24;
 $20 = $31;
 $32 = $20;
 $19 = $32;
 $0 = $2;
 $1 = -1;
 $33 = $0;
 HEAP32[$33>>2] = 0;
 $34 = HEAP32[$2>>2]|0;
 HEAP32[$21>>2] = $34;
 $3 = $21;
 HEAP32[$32>>2] = 0;
 $35 = ((($32)) + 4|0);
 $4 = $6;
 $5 = -1;
 $36 = $4;
 HEAP32[$36>>2] = 0;
 $37 = HEAP32[$6>>2]|0;
 HEAP32[$22>>2] = $37;
 $7 = $22;
 HEAP32[$35>>2] = 0;
 $38 = ((($32)) + 8|0);
 $8 = $10;
 $9 = -1;
 $39 = $8;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$10>>2]|0;
 HEAP32[$23>>2] = $40;
 $11 = $23;
 $17 = $38;
 HEAP32[$18>>2] = 0;
 $41 = $17;
 $16 = $18;
 $42 = $16;
 $43 = HEAP32[$42>>2]|0;
 $14 = $41;
 HEAP32[$15>>2] = $43;
 $44 = $14;
 $13 = $44;
 $12 = $15;
 $45 = $12;
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$44>>2] = $46;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh15BasePropHandleTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh10BaseHandleC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 3624;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 20|0);
 __THREW__ = 0;
 invoke_vi(642,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8OpenMesh12BasePropertyD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(614,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(94,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7reserveEj($this,$_n) {
 $this = $this|0;
 $_n = $_n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_n;
 $2 = $0;
 $3 = ((($2)) + 20|0);
 $4 = $1;
 __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE7reserveEj($3,$4);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE6resizeEj($this,$_n) {
 $this = $this|0;
 $_n = $_n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_n;
 $2 = $0;
 $3 = ((($2)) + 20|0);
 $4 = $1;
 __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE6resizeEj($3,$4);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 184|0;
 $6 = sp + 168|0;
 $10 = sp + 152|0;
 $15 = sp + 132|0;
 $18 = sp + 120|0;
 $21 = sp + 108|0;
 $22 = sp + 104|0;
 $23 = sp + 100|0;
 $28 = sp;
 $31 = sp + 196|0;
 $44 = sp + 12|0;
 $43 = $this;
 $47 = $43;
 $48 = ((($47)) + 20|0);
 $40 = $48;
 $49 = $40;
 $39 = $49;
 $50 = $39;
 $51 = ((($50)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = HEAP32[$50>>2]|0;
 $54 = $52;
 $55 = $53;
 $56 = (($54) - ($55))|0;
 $__old_size$i = $56;
 $37 = $49;
 $57 = $37;
 $58 = HEAP32[$57>>2]|0;
 $35 = $57;
 $36 = $58;
 $59 = $35;
 while(1) {
  $60 = $36;
  $61 = ((($59)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($60|0)!=($62|0);
  if (!($63)) {
   break;
  }
  $34 = $59;
  $64 = $34;
  $65 = ((($64)) + 8|0);
  $33 = $65;
  $66 = $33;
  $32 = $66;
  $67 = $32;
  $68 = ((($59)) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($69)) + -1|0);
  HEAP32[$68>>2] = $70;
  $25 = $70;
  $71 = $25;
  $29 = $67;
  $30 = $71;
  $72 = $29;
  $73 = $30;
  ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
  $26 = $72;
  $27 = $73;
 }
 $74 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(643,($49|0),($74|0));
 $75 = __THREW__; __THREW__ = 0;
 $76 = $75&1;
 if ($76) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $41 = $77;
  $42 = $78;
  $79 = $41;
  ___cxa_call_unexpected(($79|0));
  // unreachable;
 }
 $38 = $49;
 $24 = $44;
 $80 = $24;
 $20 = $80;
 $81 = $20;
 $19 = $81;
 $0 = $2;
 $1 = -1;
 $82 = $0;
 HEAP32[$82>>2] = 0;
 $83 = HEAP32[$2>>2]|0;
 HEAP32[$21>>2] = $83;
 $3 = $21;
 HEAP32[$81>>2] = 0;
 $84 = ((($81)) + 4|0);
 $4 = $6;
 $5 = -1;
 $85 = $4;
 HEAP32[$85>>2] = 0;
 $86 = HEAP32[$6>>2]|0;
 HEAP32[$22>>2] = $86;
 $7 = $22;
 HEAP32[$84>>2] = 0;
 $87 = ((($81)) + 8|0);
 $8 = $10;
 $9 = -1;
 $88 = $8;
 HEAP32[$88>>2] = 0;
 $89 = HEAP32[$10>>2]|0;
 HEAP32[$23>>2] = $89;
 $11 = $23;
 $17 = $87;
 HEAP32[$18>>2] = 0;
 $90 = $17;
 $16 = $18;
 $91 = $16;
 $92 = HEAP32[$91>>2]|0;
 $14 = $90;
 HEAP32[$15>>2] = $92;
 $93 = $14;
 $13 = $93;
 $12 = $15;
 $94 = $12;
 $95 = HEAP32[$94>>2]|0;
 HEAP32[$93>>2] = $95;
 $96 = ((($47)) + 20|0);
 __THREW__ = 0;
 invoke_vii(644,($44|0),($96|0));
 $97 = __THREW__; __THREW__ = 0;
 $98 = $97&1;
 if (!($98)) {
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev($44);
  STACKTOP = sp;return;
 }
 $99 = ___cxa_find_matching_catch()|0;
 $100 = tempRet0;
 $45 = $99;
 $46 = $100;
 __THREW__ = 0;
 invoke_vi(642,($44|0));
 $101 = __THREW__; __THREW__ = 0;
 $102 = $101&1;
 if ($102) {
  $105 = ___cxa_find_matching_catch(0|0)|0;
  $106 = tempRet0;
  ___clang_call_terminate($105);
  // unreachable;
 } else {
  $103 = $45;
  $104 = $46;
  ___resumeException($103|0);
  // unreachable;
 }
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE9push_backEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__annotator$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator$i = sp + 53|0;
 $13 = sp + 52|0;
 $12 = $this;
 $14 = $12;
 $15 = ((($14)) + 20|0);
 $10 = $15;
 $11 = $13;
 $16 = $10;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $9 = $16;
 $19 = $9;
 $20 = ((($19)) + 8|0);
 $8 = $20;
 $21 = $8;
 $7 = $21;
 $22 = $7;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($18|0)!=($23|0);
 if ($24) {
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotatorC2ERKSG_j($__annotator$i,$16,1);
  $6 = $16;
  $25 = $6;
  $26 = ((($25)) + 8|0);
  $5 = $26;
  $27 = $5;
  $4 = $27;
  $28 = $4;
  $29 = ((($16)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $3 = $30;
  $31 = $3;
  $32 = $11;
  $0 = $28;
  $1 = $31;
  $2 = $32;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $33 = ((($16)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 1|0);
  HEAP32[$33>>2] = $35;
  STACKTOP = sp;return;
 } else {
  $36 = $11;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE21__push_back_slow_pathIKSD_EEvRT_($16,$36);
  STACKTOP = sp;return;
 }
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4swapEjj($this,$_i0,$_i1) {
 $this = $this|0;
 $_i0 = $_i0|0;
 $_i1 = $_i1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i = sp + 48|0;
 $9 = $this;
 $10 = $_i0;
 $11 = $_i1;
 $12 = $9;
 $13 = ((($12)) + 20|0);
 $14 = $10;
 $7 = $13;
 $8 = $14;
 $15 = $7;
 $16 = $8;
 $17 = HEAP32[$15>>2]|0;
 $18 = (($17) + ($16)|0);
 $19 = ((($12)) + 20|0);
 $20 = $11;
 $0 = $19;
 $1 = $20;
 $21 = $0;
 $22 = $1;
 $23 = HEAP32[$21>>2]|0;
 $24 = (($23) + ($22)|0);
 $5 = $18;
 $6 = $24;
 $25 = $5;
 $4 = $25;
 $26 = $6;
 $2 = $26;
 $3 = $__t$i;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4copyEjj($this,$_i0,$_i1) {
 $this = $this|0;
 $_i0 = $_i0|0;
 $_i1 = $_i1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $this;
 $5 = $_i0;
 $6 = $_i1;
 $7 = $4;
 $8 = ((($7)) + 20|0);
 $9 = $6;
 $2 = $8;
 $3 = $9;
 $10 = ((($7)) + 20|0);
 $11 = $5;
 $0 = $10;
 $1 = $11;
 STACKTOP = sp;return;
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5cloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(32)|0);
 __THREW__ = 0;
 invoke_vii(645,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $1 = $8;
  $2 = $9;
  __ZdlPv($4);
  $10 = $1;
  $11 = $2;
  ___resumeException($10|0);
  // unreachable;
 } else {
  $p = $4;
  $7 = $p;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE14set_persistentEb($this,$_yn) {
 $this = $this|0;
 $_yn = $_yn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $_yn&1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4&1;
 __ZN8OpenMesh12BaseProperty24check_and_set_persistentINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEvb($3,$5);
 STACKTOP = sp;return;
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE10n_elementsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 STACKTOP = sp;return ($10|0);
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE12element_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN8OpenMesh2IO7size_ofINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7size_ofEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 116|0;
 $5 = sp + 104|0;
 $16 = sp + 16|0;
 $17 = sp + 8|0;
 $18 = sp;
 $21 = sp + 52|0;
 $24 = sp + 40|0;
 $28 = sp + 24|0;
 $29 = sp + 20|0;
 $30 = sp + 128|0;
 $27 = $this;
 $31 = $27;
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 48|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (FUNCTION_TABLE_ii[$34 & 1023]($31)|0);
 $36 = ($35|0)!=(-1);
 if ($36) {
  $37 = HEAP32[$31>>2]|0;
  $38 = ((($37)) + 44|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_ii[$39 & 1023]($31)|0);
  $41 = (__ZNK8OpenMesh12BaseProperty7size_ofEj($31,$40)|0);
  $26 = $41;
  $76 = $26;
  STACKTOP = sp;return ($76|0);
 }
 $42 = ((($31)) + 20|0);
 $25 = $42;
 $43 = $25;
 $44 = HEAP32[$43>>2]|0;
 $22 = $43;
 $23 = $44;
 $45 = $23;
 $19 = $21;
 $20 = $45;
 $46 = $19;
 $47 = $20;
 HEAP32[$46>>2] = $47;
 $48 = HEAP32[$21>>2]|0;
 HEAP32[$24>>2] = $48;
 $49 = HEAP32[$24>>2]|0;
 HEAP32[$28>>2] = $49;
 $50 = ((($31)) + 20|0);
 $6 = $50;
 $51 = $6;
 $52 = ((($51)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $3 = $51;
 $4 = $53;
 $54 = $4;
 $0 = $2;
 $1 = $54;
 $55 = $0;
 $56 = $1;
 HEAP32[$55>>2] = $56;
 $57 = HEAP32[$2>>2]|0;
 HEAP32[$5>>2] = $57;
 $58 = HEAP32[$5>>2]|0;
 HEAP32[$29>>2] = $58;
 ;HEAP8[$16>>0]=HEAP8[$30>>0]|0;
 ;HEAP8[$17>>0]=HEAP8[$29>>0]|0;HEAP8[$17+1>>0]=HEAP8[$29+1>>0]|0;HEAP8[$17+2>>0]=HEAP8[$29+2>>0]|0;HEAP8[$17+3>>0]=HEAP8[$29+3>>0]|0;
 ;HEAP8[$18>>0]=HEAP8[$28>>0]|0;HEAP8[$18+1>>0]=HEAP8[$28+1>>0]|0;HEAP8[$18+2>>0]=HEAP8[$28+2>>0]|0;HEAP8[$18+3>>0]=HEAP8[$28+3>>0]|0;
 $15 = 0;
 while(1) {
  $13 = $18;
  $14 = $17;
  $59 = $13;
  $60 = $14;
  $11 = $59;
  $12 = $60;
  $61 = $11;
  $10 = $61;
  $62 = $10;
  $63 = HEAP32[$62>>2]|0;
  $64 = $12;
  $9 = $64;
  $65 = $9;
  $66 = HEAP32[$65>>2]|0;
  $67 = ($63|0)==($66|0);
  $68 = $67 ^ 1;
  $69 = $15;
  if (!($68)) {
   break;
  }
  $7 = $18;
  $70 = $7;
  $71 = HEAP32[$70>>2]|0;
  $72 = (__ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4plusclEjRKSC_($16,$69,$71)|0);
  $15 = $72;
  $8 = $18;
  $73 = $8;
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($74)) + 1|0);
  HEAP32[$73>>2] = $75;
 }
 $26 = $69;
 $76 = $26;
 STACKTOP = sp;return ($76|0);
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7size_ofEj($this,$_n_elem) {
 $this = $this|0;
 $_n_elem = $_n_elem|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_n_elem;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8OpenMesh12BaseProperty7size_ofEj($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5storeERNSt3__113basic_ostreamIcNSE_11char_traitsIcEEEEb($this,$_ostr,$_swap) {
 $this = $this|0;
 $_ostr = $_ostr|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $_ostr;
 $6 = $_swap&1;
 $5 = $6;
 $7 = $3;
 $8 = (__ZN8OpenMesh2IO13is_streamableINSt3__16vectorINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEbv()|0);
 if ($8) {
  $9 = $4;
  $10 = ((($7)) + 20|0);
  $11 = $5;
  $12 = $11&1;
  $13 = (__ZN8OpenMesh2IO5storeINSt3__16vectorINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEjRNS2_13basic_ostreamIcNS2_11char_traitsIcEEEERKT_b($9,$10,$12)|0);
  $2 = $13;
  $35 = $2;
  STACKTOP = sp;return ($35|0);
 }
 $bytes = 0;
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = HEAP32[$7>>2]|0;
  $16 = ((($15)) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_ii[$17 & 1023]($7)|0);
  $19 = ($14>>>0)<($18>>>0);
  if (!($19)) {
   break;
  }
  $20 = $4;
  $21 = ((($7)) + 20|0);
  $22 = $i;
  $0 = $21;
  $1 = $22;
  $23 = $0;
  $24 = $1;
  $25 = HEAP32[$23>>2]|0;
  $26 = (($25) + ($24)|0);
  $27 = $5;
  $28 = $27&1;
  $29 = (__ZN8OpenMesh2IO5storeINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRNSt3__113basic_ostreamIcNSE_11char_traitsIcEEEERKT_b($20,$26,$28)|0);
  $30 = $bytes;
  $31 = (($30) + ($29))|0;
  $bytes = $31;
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
 }
 $34 = $bytes;
 $2 = $34;
 $35 = $2;
 STACKTOP = sp;return ($35|0);
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7restoreERNSt3__113basic_istreamIcNSE_11char_traitsIcEEEEb($this,$_istr,$_swap) {
 $this = $this|0;
 $_istr = $_istr|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $_istr;
 $6 = $_swap&1;
 $5 = $6;
 $7 = $3;
 $8 = (__ZN8OpenMesh2IO13is_streamableINSt3__16vectorINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEbv()|0);
 if ($8) {
  $9 = $4;
  $10 = ((($7)) + 20|0);
  $11 = $5;
  $12 = $11&1;
  $13 = (__ZN8OpenMesh2IO7restoreINSt3__16vectorINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEjRNS2_13basic_istreamIcNS2_11char_traitsIcEEEERT_b($9,$10,$12)|0);
  $2 = $13;
  $35 = $2;
  STACKTOP = sp;return ($35|0);
 }
 $bytes = 0;
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = HEAP32[$7>>2]|0;
  $16 = ((($15)) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_ii[$17 & 1023]($7)|0);
  $19 = ($14>>>0)<($18>>>0);
  if (!($19)) {
   break;
  }
  $20 = $4;
  $21 = ((($7)) + 20|0);
  $22 = $i;
  $0 = $21;
  $1 = $22;
  $23 = $0;
  $24 = $1;
  $25 = HEAP32[$23>>2]|0;
  $26 = (($25) + ($24)|0);
  $27 = $5;
  $28 = $27&1;
  $29 = (__ZN8OpenMesh2IO7restoreINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRNSt3__113basic_istreamIcNSE_11char_traitsIcEEEERT_b($20,$26,$28)|0);
  $30 = $bytes;
  $31 = (($30) + ($29))|0;
  $bytes = $31;
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
 }
 $34 = $bytes;
 $2 = $34;
 $35 = $2;
 STACKTOP = sp;return ($35|0);
}
function __ZN8OpenMesh2IO13is_streamableINSt3__16vectorINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEbv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN8OpenMesh2IO7restoreINSt3__16vectorINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEjRNS2_13basic_istreamIcNS2_11char_traitsIcEEEERT_b($_is,$_v,$_swap) {
 $_is = $_is|0;
 $_v = $_v|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_is;
 $1 = $_v;
 $3 = $_swap&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 $8 = (__ZN8OpenMesh2IO6binaryINSt3__16vectorINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEE7restoreERNS2_13basic_istreamIcNS2_11char_traitsIcEEEERSI_b($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN8OpenMesh2IO7restoreINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRNSt3__113basic_istreamIcNSE_11char_traitsIcEEEERT_b($_is,$_v,$_swap) {
 $_is = $_is|0;
 $_v = $_v|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_is;
 $1 = $_v;
 $3 = $_swap&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 $8 = (__ZN8OpenMesh2IO6binaryINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7restoreERNSt3__113basic_istreamIcNSF_11char_traitsIcEEEERSD_b($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN8OpenMesh2IO6binaryINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7restoreERNSt3__113basic_istreamIcNSF_11char_traitsIcEEEERSD_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0;
 var $__i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp + 212|0;
 $msg = sp + 24|0;
 $40 = sp;
 $41 = sp + 320|0;
 $35 = $0;
 $36 = $1;
 $42 = $2&1;
 $37 = $42;
 $31 = $msg;
 $32 = 16;
 $43 = $31;
 $44 = ((($43)) + 56|0);
 $30 = $44;
 $45 = $30;
 $29 = $45;
 $46 = $29;
 $47 = 6536;
 HEAP32[$46>>2] = $47;
 $48 = 6212;
 HEAP32[$45>>2] = $48;
 $49 = 3456;
 HEAP32[$43>>2] = $49;
 $50 = ((($43)) + 56|0);
 $51 = 3476;
 HEAP32[$50>>2] = $51;
 $52 = ((($43)) + 4|0);
 $26 = $43;
 $53 = 3488;
 $27 = $53;
 $28 = $52;
 $54 = $26;
 $55 = $27;
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = ((($55)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$54>>2]|0;
 $60 = ((($59)) + -12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($54) + ($61)|0);
 HEAP32[$62>>2] = $58;
 $63 = HEAP32[$54>>2]|0;
 $64 = ((($63)) + -12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($54) + ($65)|0);
 $67 = $28;
 $24 = $66;
 $25 = $67;
 $68 = $24;
 $69 = $25;
 __THREW__ = 0;
 invoke_vii(490,($68|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $133 = ___cxa_find_matching_catch()|0;
  $134 = tempRet0;
  $33 = $133;
  $34 = $134;
 } else {
  $72 = ((($68)) + 72|0);
  HEAP32[$72>>2] = 0;
  $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $74 = ((($68)) + 76|0);
  HEAP32[$74>>2] = $73;
  $75 = 3456;
  HEAP32[$43>>2] = $75;
  $76 = ((($43)) + 56|0);
  $77 = 3476;
  HEAP32[$76>>2] = $77;
  $78 = ((($43)) + 4|0);
  $79 = $32;
  $80 = $79 | 16;
  $19 = $78;
  $20 = $80;
  $81 = $19;
  __THREW__ = 0;
  invoke_vi(500,($81|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  do {
   if ($83) {
    $135 = ___cxa_find_matching_catch()|0;
    $136 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $136;$eh$lpad$body$i$indexZ2D = $135;
   } else {
    $84 = 3016;
    HEAP32[$81>>2] = $84;
    $85 = ((($81)) + 32|0);
    $18 = $85;
    $86 = $18;
    $17 = $86;
    $87 = $17;
    $16 = $87;
    $88 = $16;
    $15 = $88;
    $14 = $86;
    $89 = $14;
    $13 = $89;
    $90 = $13;
    $12 = $90;
    $91 = $12;
    $__a$i$i$i$i = $91;
    $__i$i$i$i$i = 0;
    while(1) {
     $92 = $__i$i$i$i$i;
     $93 = ($92>>>0)<(3);
     if (!($93)) {
      break;
     }
     $94 = $__i$i$i$i$i;
     $95 = $__a$i$i$i$i;
     $96 = (($95) + ($94<<2)|0);
     HEAP32[$96>>2] = 0;
     $97 = $__i$i$i$i$i;
     $98 = (($97) + 1)|0;
     $__i$i$i$i$i = $98;
    }
    $99 = ((($81)) + 44|0);
    HEAP32[$99>>2] = 0;
    $100 = ((($81)) + 48|0);
    $101 = $20;
    HEAP32[$100>>2] = $101;
    $11 = $23;
    $102 = $11;
    $10 = $102;
    $103 = $10;
    $9 = $103;
    $104 = $9;
    $8 = $104;
    $7 = $102;
    $105 = $7;
    $6 = $105;
    $106 = $6;
    $5 = $106;
    $107 = $5;
    $__a$i$i1$i$i = $107;
    $__i$i$i2$i$i = 0;
    while(1) {
     $108 = $__i$i$i2$i$i;
     $109 = ($108>>>0)<(3);
     if (!($109)) {
      break;
     }
     $110 = $__i$i$i2$i$i;
     $111 = $__a$i$i1$i$i;
     $112 = (($111) + ($110<<2)|0);
     HEAP32[$112>>2] = 0;
     $113 = $__i$i$i2$i$i;
     $114 = (($113) + 1)|0;
     $__i$i$i2$i$i = $114;
    }
    __THREW__ = 0;
    invoke_vii(501,($81|0),($23|0));
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    do {
     if ($116) {
      $121 = ___cxa_find_matching_catch()|0;
      $122 = tempRet0;
      $21 = $121;
      $22 = $122;
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $131 = ___cxa_find_matching_catch(0|0)|0;
       $132 = tempRet0;
       ___clang_call_terminate($131);
       // unreachable;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       $119 = ___cxa_find_matching_catch()|0;
       $120 = tempRet0;
       $21 = $119;
       $22 = $120;
       break;
      }
      __THREW__ = 0;
      $146 = (invoke_iii(484,($msg|0),(13513|0))|0);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      if ($148) {
       label = 28;
      } else {
       $4 = 408;
       $149 = $4;
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       (invoke_iii(484,($146|0),($151|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
       } else {
        $154 = (___cxa_allocate_exception(8)|0);
        $$expand_i1_val = 1;
        HEAP8[$41>>0] = $$expand_i1_val;
        $3 = $msg;
        $155 = $3;
        $156 = ((($155)) + 4|0);
        __THREW__ = 0;
        invoke_vii(618,($40|0),($156|0));
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         $164 = ___cxa_find_matching_catch()|0;
         $165 = tempRet0;
         $38 = $164;
         $39 = $165;
        } else {
         __THREW__ = 0;
         invoke_vii(619,($154|0),($40|0));
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if (!($160)) {
          $$expand_i1_val7 = 0;
          HEAP8[$41>>0] = $$expand_i1_val7;
          __THREW__ = 0;
          invoke_viii(620,($154|0),(632|0),(146|0));
          $161 = __THREW__; __THREW__ = 0;
         }
         $166 = ___cxa_find_matching_catch()|0;
         $167 = tempRet0;
         $38 = $166;
         $39 = $167;
         __THREW__ = 0;
         invoke_vi(502,($40|0));
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          $175 = ___cxa_find_matching_catch(0|0)|0;
          $176 = tempRet0;
          ___clang_call_terminate($175);
          // unreachable;
         }
        }
        $$pre_trunc = HEAP8[$41>>0]|0;
        $170 = $$pre_trunc&1;
        if ($170) {
         ___cxa_free_exception(($154|0));
        }
       }
      }
      if ((label|0) == 28) {
       $162 = ___cxa_find_matching_catch()|0;
       $163 = tempRet0;
       $38 = $162;
       $39 = $163;
      }
      __THREW__ = 0;
      invoke_vi(70,($msg|0));
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       $175 = ___cxa_find_matching_catch(0|0)|0;
       $176 = tempRet0;
       ___clang_call_terminate($175);
       // unreachable;
      } else {
       $173 = $38;
       $174 = $39;
       ___resumeException($173|0);
       // unreachable;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(502,($85|0));
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(194,($81|0));
    $127 = __THREW__; __THREW__ = 0;
    $128 = $127&1;
    if ($128) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    } else {
     $129 = $21;
     $130 = $22;
     $eh$lpad$body$i$index2Z2D = $130;$eh$lpad$body$i$indexZ2D = $129;
     break;
    }
   }
  } while(0);
  $33 = $eh$lpad$body$i$indexZ2D;
  $34 = $eh$lpad$body$i$index2Z2D;
  __THREW__ = 0;
  $137 = __THREW__; __THREW__ = 0;
  $138 = $137&1;
  if ($138) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
 }
 $139 = ((($43)) + 56|0);
 __THREW__ = 0;
 invoke_vi(210,($139|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if ($141) {
  $144 = ___cxa_find_matching_catch(0|0)|0;
  $145 = tempRet0;
  ___clang_call_terminate($144);
  // unreachable;
 } else {
  $142 = $33;
  $143 = $34;
  ___resumeException($142|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh2IO6binaryINSt3__16vectorINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEE7restoreERNS2_13basic_istreamIcNS2_11char_traitsIcEEEERSI_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0;
 var $__i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp + 212|0;
 $msg = sp + 24|0;
 $40 = sp;
 $41 = sp + 320|0;
 $35 = $0;
 $36 = $1;
 $42 = $2&1;
 $37 = $42;
 $31 = $msg;
 $32 = 16;
 $43 = $31;
 $44 = ((($43)) + 56|0);
 $30 = $44;
 $45 = $30;
 $29 = $45;
 $46 = $29;
 $47 = 6536;
 HEAP32[$46>>2] = $47;
 $48 = 6212;
 HEAP32[$45>>2] = $48;
 $49 = 3456;
 HEAP32[$43>>2] = $49;
 $50 = ((($43)) + 56|0);
 $51 = 3476;
 HEAP32[$50>>2] = $51;
 $52 = ((($43)) + 4|0);
 $26 = $43;
 $53 = 3488;
 $27 = $53;
 $28 = $52;
 $54 = $26;
 $55 = $27;
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = ((($55)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$54>>2]|0;
 $60 = ((($59)) + -12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($54) + ($61)|0);
 HEAP32[$62>>2] = $58;
 $63 = HEAP32[$54>>2]|0;
 $64 = ((($63)) + -12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($54) + ($65)|0);
 $67 = $28;
 $24 = $66;
 $25 = $67;
 $68 = $24;
 $69 = $25;
 __THREW__ = 0;
 invoke_vii(490,($68|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $133 = ___cxa_find_matching_catch()|0;
  $134 = tempRet0;
  $33 = $133;
  $34 = $134;
 } else {
  $72 = ((($68)) + 72|0);
  HEAP32[$72>>2] = 0;
  $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $74 = ((($68)) + 76|0);
  HEAP32[$74>>2] = $73;
  $75 = 3456;
  HEAP32[$43>>2] = $75;
  $76 = ((($43)) + 56|0);
  $77 = 3476;
  HEAP32[$76>>2] = $77;
  $78 = ((($43)) + 4|0);
  $79 = $32;
  $80 = $79 | 16;
  $19 = $78;
  $20 = $80;
  $81 = $19;
  __THREW__ = 0;
  invoke_vi(500,($81|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  do {
   if ($83) {
    $135 = ___cxa_find_matching_catch()|0;
    $136 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $136;$eh$lpad$body$i$indexZ2D = $135;
   } else {
    $84 = 3016;
    HEAP32[$81>>2] = $84;
    $85 = ((($81)) + 32|0);
    $18 = $85;
    $86 = $18;
    $17 = $86;
    $87 = $17;
    $16 = $87;
    $88 = $16;
    $15 = $88;
    $14 = $86;
    $89 = $14;
    $13 = $89;
    $90 = $13;
    $12 = $90;
    $91 = $12;
    $__a$i$i$i$i = $91;
    $__i$i$i$i$i = 0;
    while(1) {
     $92 = $__i$i$i$i$i;
     $93 = ($92>>>0)<(3);
     if (!($93)) {
      break;
     }
     $94 = $__i$i$i$i$i;
     $95 = $__a$i$i$i$i;
     $96 = (($95) + ($94<<2)|0);
     HEAP32[$96>>2] = 0;
     $97 = $__i$i$i$i$i;
     $98 = (($97) + 1)|0;
     $__i$i$i$i$i = $98;
    }
    $99 = ((($81)) + 44|0);
    HEAP32[$99>>2] = 0;
    $100 = ((($81)) + 48|0);
    $101 = $20;
    HEAP32[$100>>2] = $101;
    $11 = $23;
    $102 = $11;
    $10 = $102;
    $103 = $10;
    $9 = $103;
    $104 = $9;
    $8 = $104;
    $7 = $102;
    $105 = $7;
    $6 = $105;
    $106 = $6;
    $5 = $106;
    $107 = $5;
    $__a$i$i1$i$i = $107;
    $__i$i$i2$i$i = 0;
    while(1) {
     $108 = $__i$i$i2$i$i;
     $109 = ($108>>>0)<(3);
     if (!($109)) {
      break;
     }
     $110 = $__i$i$i2$i$i;
     $111 = $__a$i$i1$i$i;
     $112 = (($111) + ($110<<2)|0);
     HEAP32[$112>>2] = 0;
     $113 = $__i$i$i2$i$i;
     $114 = (($113) + 1)|0;
     $__i$i$i2$i$i = $114;
    }
    __THREW__ = 0;
    invoke_vii(501,($81|0),($23|0));
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    do {
     if ($116) {
      $121 = ___cxa_find_matching_catch()|0;
      $122 = tempRet0;
      $21 = $121;
      $22 = $122;
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $131 = ___cxa_find_matching_catch(0|0)|0;
       $132 = tempRet0;
       ___clang_call_terminate($131);
       // unreachable;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       $119 = ___cxa_find_matching_catch()|0;
       $120 = tempRet0;
       $21 = $119;
       $22 = $120;
       break;
      }
      __THREW__ = 0;
      $146 = (invoke_iii(484,($msg|0),(13513|0))|0);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      if ($148) {
       label = 28;
      } else {
       $4 = 424;
       $149 = $4;
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       (invoke_iii(484,($146|0),($151|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
       } else {
        $154 = (___cxa_allocate_exception(8)|0);
        $$expand_i1_val = 1;
        HEAP8[$41>>0] = $$expand_i1_val;
        $3 = $msg;
        $155 = $3;
        $156 = ((($155)) + 4|0);
        __THREW__ = 0;
        invoke_vii(618,($40|0),($156|0));
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         $164 = ___cxa_find_matching_catch()|0;
         $165 = tempRet0;
         $38 = $164;
         $39 = $165;
        } else {
         __THREW__ = 0;
         invoke_vii(619,($154|0),($40|0));
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if (!($160)) {
          $$expand_i1_val7 = 0;
          HEAP8[$41>>0] = $$expand_i1_val7;
          __THREW__ = 0;
          invoke_viii(620,($154|0),(632|0),(146|0));
          $161 = __THREW__; __THREW__ = 0;
         }
         $166 = ___cxa_find_matching_catch()|0;
         $167 = tempRet0;
         $38 = $166;
         $39 = $167;
         __THREW__ = 0;
         invoke_vi(502,($40|0));
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          $175 = ___cxa_find_matching_catch(0|0)|0;
          $176 = tempRet0;
          ___clang_call_terminate($175);
          // unreachable;
         }
        }
        $$pre_trunc = HEAP8[$41>>0]|0;
        $170 = $$pre_trunc&1;
        if ($170) {
         ___cxa_free_exception(($154|0));
        }
       }
      }
      if ((label|0) == 28) {
       $162 = ___cxa_find_matching_catch()|0;
       $163 = tempRet0;
       $38 = $162;
       $39 = $163;
      }
      __THREW__ = 0;
      invoke_vi(70,($msg|0));
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       $175 = ___cxa_find_matching_catch(0|0)|0;
       $176 = tempRet0;
       ___clang_call_terminate($175);
       // unreachable;
      } else {
       $173 = $38;
       $174 = $39;
       ___resumeException($173|0);
       // unreachable;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(502,($85|0));
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(194,($81|0));
    $127 = __THREW__; __THREW__ = 0;
    $128 = $127&1;
    if ($128) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    } else {
     $129 = $21;
     $130 = $22;
     $eh$lpad$body$i$index2Z2D = $130;$eh$lpad$body$i$indexZ2D = $129;
     break;
    }
   }
  } while(0);
  $33 = $eh$lpad$body$i$indexZ2D;
  $34 = $eh$lpad$body$i$index2Z2D;
  __THREW__ = 0;
  $137 = __THREW__; __THREW__ = 0;
  $138 = $137&1;
  if ($138) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
 }
 $139 = ((($43)) + 56|0);
 __THREW__ = 0;
 invoke_vi(210,($139|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if ($141) {
  $144 = ___cxa_find_matching_catch(0|0)|0;
  $145 = tempRet0;
  ___clang_call_terminate($144);
  // unreachable;
 } else {
  $142 = $33;
  $143 = $34;
  ___resumeException($142|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh2IO5storeINSt3__16vectorINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEjRNS2_13basic_ostreamIcNS2_11char_traitsIcEEEERKT_b($_os,$_v,$_swap) {
 $_os = $_os|0;
 $_v = $_v|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_os;
 $1 = $_v;
 $3 = $_swap&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 $8 = (__ZN8OpenMesh2IO6binaryINSt3__16vectorINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEE5storeERNS2_13basic_ostreamIcNS2_11char_traitsIcEEEERKSI_b($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN8OpenMesh2IO5storeINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRNSt3__113basic_ostreamIcNSE_11char_traitsIcEEEERKT_b($_os,$_v,$_swap) {
 $_os = $_os|0;
 $_v = $_v|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_os;
 $1 = $_v;
 $3 = $_swap&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 $8 = (__ZN8OpenMesh2IO6binaryINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE5storeERNSt3__113basic_ostreamIcNSF_11char_traitsIcEEEERKSD_b($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN8OpenMesh2IO6binaryINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE5storeERNSt3__113basic_ostreamIcNSF_11char_traitsIcEEEERKSD_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0;
 var $__i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp + 212|0;
 $msg = sp + 24|0;
 $40 = sp;
 $41 = sp + 320|0;
 $35 = $0;
 $36 = $1;
 $42 = $2&1;
 $37 = $42;
 $31 = $msg;
 $32 = 16;
 $43 = $31;
 $44 = ((($43)) + 56|0);
 $30 = $44;
 $45 = $30;
 $29 = $45;
 $46 = $29;
 $47 = 6536;
 HEAP32[$46>>2] = $47;
 $48 = 6212;
 HEAP32[$45>>2] = $48;
 $49 = 3456;
 HEAP32[$43>>2] = $49;
 $50 = ((($43)) + 56|0);
 $51 = 3476;
 HEAP32[$50>>2] = $51;
 $52 = ((($43)) + 4|0);
 $26 = $43;
 $53 = 3488;
 $27 = $53;
 $28 = $52;
 $54 = $26;
 $55 = $27;
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = ((($55)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$54>>2]|0;
 $60 = ((($59)) + -12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($54) + ($61)|0);
 HEAP32[$62>>2] = $58;
 $63 = HEAP32[$54>>2]|0;
 $64 = ((($63)) + -12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($54) + ($65)|0);
 $67 = $28;
 $24 = $66;
 $25 = $67;
 $68 = $24;
 $69 = $25;
 __THREW__ = 0;
 invoke_vii(490,($68|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $133 = ___cxa_find_matching_catch()|0;
  $134 = tempRet0;
  $33 = $133;
  $34 = $134;
 } else {
  $72 = ((($68)) + 72|0);
  HEAP32[$72>>2] = 0;
  $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $74 = ((($68)) + 76|0);
  HEAP32[$74>>2] = $73;
  $75 = 3456;
  HEAP32[$43>>2] = $75;
  $76 = ((($43)) + 56|0);
  $77 = 3476;
  HEAP32[$76>>2] = $77;
  $78 = ((($43)) + 4|0);
  $79 = $32;
  $80 = $79 | 16;
  $19 = $78;
  $20 = $80;
  $81 = $19;
  __THREW__ = 0;
  invoke_vi(500,($81|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  do {
   if ($83) {
    $135 = ___cxa_find_matching_catch()|0;
    $136 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $136;$eh$lpad$body$i$indexZ2D = $135;
   } else {
    $84 = 3016;
    HEAP32[$81>>2] = $84;
    $85 = ((($81)) + 32|0);
    $18 = $85;
    $86 = $18;
    $17 = $86;
    $87 = $17;
    $16 = $87;
    $88 = $16;
    $15 = $88;
    $14 = $86;
    $89 = $14;
    $13 = $89;
    $90 = $13;
    $12 = $90;
    $91 = $12;
    $__a$i$i$i$i = $91;
    $__i$i$i$i$i = 0;
    while(1) {
     $92 = $__i$i$i$i$i;
     $93 = ($92>>>0)<(3);
     if (!($93)) {
      break;
     }
     $94 = $__i$i$i$i$i;
     $95 = $__a$i$i$i$i;
     $96 = (($95) + ($94<<2)|0);
     HEAP32[$96>>2] = 0;
     $97 = $__i$i$i$i$i;
     $98 = (($97) + 1)|0;
     $__i$i$i$i$i = $98;
    }
    $99 = ((($81)) + 44|0);
    HEAP32[$99>>2] = 0;
    $100 = ((($81)) + 48|0);
    $101 = $20;
    HEAP32[$100>>2] = $101;
    $11 = $23;
    $102 = $11;
    $10 = $102;
    $103 = $10;
    $9 = $103;
    $104 = $9;
    $8 = $104;
    $7 = $102;
    $105 = $7;
    $6 = $105;
    $106 = $6;
    $5 = $106;
    $107 = $5;
    $__a$i$i1$i$i = $107;
    $__i$i$i2$i$i = 0;
    while(1) {
     $108 = $__i$i$i2$i$i;
     $109 = ($108>>>0)<(3);
     if (!($109)) {
      break;
     }
     $110 = $__i$i$i2$i$i;
     $111 = $__a$i$i1$i$i;
     $112 = (($111) + ($110<<2)|0);
     HEAP32[$112>>2] = 0;
     $113 = $__i$i$i2$i$i;
     $114 = (($113) + 1)|0;
     $__i$i$i2$i$i = $114;
    }
    __THREW__ = 0;
    invoke_vii(501,($81|0),($23|0));
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    do {
     if ($116) {
      $121 = ___cxa_find_matching_catch()|0;
      $122 = tempRet0;
      $21 = $121;
      $22 = $122;
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $131 = ___cxa_find_matching_catch(0|0)|0;
       $132 = tempRet0;
       ___clang_call_terminate($131);
       // unreachable;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       $119 = ___cxa_find_matching_catch()|0;
       $120 = tempRet0;
       $21 = $119;
       $22 = $120;
       break;
      }
      __THREW__ = 0;
      $146 = (invoke_iii(484,($msg|0),(13513|0))|0);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      if ($148) {
       label = 28;
      } else {
       $4 = 408;
       $149 = $4;
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       (invoke_iii(484,($146|0),($151|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
       } else {
        $154 = (___cxa_allocate_exception(8)|0);
        $$expand_i1_val = 1;
        HEAP8[$41>>0] = $$expand_i1_val;
        $3 = $msg;
        $155 = $3;
        $156 = ((($155)) + 4|0);
        __THREW__ = 0;
        invoke_vii(618,($40|0),($156|0));
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         $164 = ___cxa_find_matching_catch()|0;
         $165 = tempRet0;
         $38 = $164;
         $39 = $165;
        } else {
         __THREW__ = 0;
         invoke_vii(619,($154|0),($40|0));
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if (!($160)) {
          $$expand_i1_val7 = 0;
          HEAP8[$41>>0] = $$expand_i1_val7;
          __THREW__ = 0;
          invoke_viii(620,($154|0),(632|0),(146|0));
          $161 = __THREW__; __THREW__ = 0;
         }
         $166 = ___cxa_find_matching_catch()|0;
         $167 = tempRet0;
         $38 = $166;
         $39 = $167;
         __THREW__ = 0;
         invoke_vi(502,($40|0));
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          $175 = ___cxa_find_matching_catch(0|0)|0;
          $176 = tempRet0;
          ___clang_call_terminate($175);
          // unreachable;
         }
        }
        $$pre_trunc = HEAP8[$41>>0]|0;
        $170 = $$pre_trunc&1;
        if ($170) {
         ___cxa_free_exception(($154|0));
        }
       }
      }
      if ((label|0) == 28) {
       $162 = ___cxa_find_matching_catch()|0;
       $163 = tempRet0;
       $38 = $162;
       $39 = $163;
      }
      __THREW__ = 0;
      invoke_vi(70,($msg|0));
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       $175 = ___cxa_find_matching_catch(0|0)|0;
       $176 = tempRet0;
       ___clang_call_terminate($175);
       // unreachable;
      } else {
       $173 = $38;
       $174 = $39;
       ___resumeException($173|0);
       // unreachable;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(502,($85|0));
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(194,($81|0));
    $127 = __THREW__; __THREW__ = 0;
    $128 = $127&1;
    if ($128) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    } else {
     $129 = $21;
     $130 = $22;
     $eh$lpad$body$i$index2Z2D = $130;$eh$lpad$body$i$indexZ2D = $129;
     break;
    }
   }
  } while(0);
  $33 = $eh$lpad$body$i$indexZ2D;
  $34 = $eh$lpad$body$i$index2Z2D;
  __THREW__ = 0;
  $137 = __THREW__; __THREW__ = 0;
  $138 = $137&1;
  if ($138) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
 }
 $139 = ((($43)) + 56|0);
 __THREW__ = 0;
 invoke_vi(210,($139|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if ($141) {
  $144 = ___cxa_find_matching_catch(0|0)|0;
  $145 = tempRet0;
  ___clang_call_terminate($144);
  // unreachable;
 } else {
  $142 = $33;
  $143 = $34;
  ___resumeException($142|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh2IO6binaryINSt3__16vectorINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEE5storeERNS2_13basic_ostreamIcNS2_11char_traitsIcEEEERKSI_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0;
 var $__i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp + 212|0;
 $msg = sp + 24|0;
 $40 = sp;
 $41 = sp + 320|0;
 $35 = $0;
 $36 = $1;
 $42 = $2&1;
 $37 = $42;
 $31 = $msg;
 $32 = 16;
 $43 = $31;
 $44 = ((($43)) + 56|0);
 $30 = $44;
 $45 = $30;
 $29 = $45;
 $46 = $29;
 $47 = 6536;
 HEAP32[$46>>2] = $47;
 $48 = 6212;
 HEAP32[$45>>2] = $48;
 $49 = 3456;
 HEAP32[$43>>2] = $49;
 $50 = ((($43)) + 56|0);
 $51 = 3476;
 HEAP32[$50>>2] = $51;
 $52 = ((($43)) + 4|0);
 $26 = $43;
 $53 = 3488;
 $27 = $53;
 $28 = $52;
 $54 = $26;
 $55 = $27;
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = ((($55)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$54>>2]|0;
 $60 = ((($59)) + -12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($54) + ($61)|0);
 HEAP32[$62>>2] = $58;
 $63 = HEAP32[$54>>2]|0;
 $64 = ((($63)) + -12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($54) + ($65)|0);
 $67 = $28;
 $24 = $66;
 $25 = $67;
 $68 = $24;
 $69 = $25;
 __THREW__ = 0;
 invoke_vii(490,($68|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $133 = ___cxa_find_matching_catch()|0;
  $134 = tempRet0;
  $33 = $133;
  $34 = $134;
 } else {
  $72 = ((($68)) + 72|0);
  HEAP32[$72>>2] = 0;
  $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $74 = ((($68)) + 76|0);
  HEAP32[$74>>2] = $73;
  $75 = 3456;
  HEAP32[$43>>2] = $75;
  $76 = ((($43)) + 56|0);
  $77 = 3476;
  HEAP32[$76>>2] = $77;
  $78 = ((($43)) + 4|0);
  $79 = $32;
  $80 = $79 | 16;
  $19 = $78;
  $20 = $80;
  $81 = $19;
  __THREW__ = 0;
  invoke_vi(500,($81|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  do {
   if ($83) {
    $135 = ___cxa_find_matching_catch()|0;
    $136 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $136;$eh$lpad$body$i$indexZ2D = $135;
   } else {
    $84 = 3016;
    HEAP32[$81>>2] = $84;
    $85 = ((($81)) + 32|0);
    $18 = $85;
    $86 = $18;
    $17 = $86;
    $87 = $17;
    $16 = $87;
    $88 = $16;
    $15 = $88;
    $14 = $86;
    $89 = $14;
    $13 = $89;
    $90 = $13;
    $12 = $90;
    $91 = $12;
    $__a$i$i$i$i = $91;
    $__i$i$i$i$i = 0;
    while(1) {
     $92 = $__i$i$i$i$i;
     $93 = ($92>>>0)<(3);
     if (!($93)) {
      break;
     }
     $94 = $__i$i$i$i$i;
     $95 = $__a$i$i$i$i;
     $96 = (($95) + ($94<<2)|0);
     HEAP32[$96>>2] = 0;
     $97 = $__i$i$i$i$i;
     $98 = (($97) + 1)|0;
     $__i$i$i$i$i = $98;
    }
    $99 = ((($81)) + 44|0);
    HEAP32[$99>>2] = 0;
    $100 = ((($81)) + 48|0);
    $101 = $20;
    HEAP32[$100>>2] = $101;
    $11 = $23;
    $102 = $11;
    $10 = $102;
    $103 = $10;
    $9 = $103;
    $104 = $9;
    $8 = $104;
    $7 = $102;
    $105 = $7;
    $6 = $105;
    $106 = $6;
    $5 = $106;
    $107 = $5;
    $__a$i$i1$i$i = $107;
    $__i$i$i2$i$i = 0;
    while(1) {
     $108 = $__i$i$i2$i$i;
     $109 = ($108>>>0)<(3);
     if (!($109)) {
      break;
     }
     $110 = $__i$i$i2$i$i;
     $111 = $__a$i$i1$i$i;
     $112 = (($111) + ($110<<2)|0);
     HEAP32[$112>>2] = 0;
     $113 = $__i$i$i2$i$i;
     $114 = (($113) + 1)|0;
     $__i$i$i2$i$i = $114;
    }
    __THREW__ = 0;
    invoke_vii(501,($81|0),($23|0));
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    do {
     if ($116) {
      $121 = ___cxa_find_matching_catch()|0;
      $122 = tempRet0;
      $21 = $121;
      $22 = $122;
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $131 = ___cxa_find_matching_catch(0|0)|0;
       $132 = tempRet0;
       ___clang_call_terminate($131);
       // unreachable;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       $119 = ___cxa_find_matching_catch()|0;
       $120 = tempRet0;
       $21 = $119;
       $22 = $120;
       break;
      }
      __THREW__ = 0;
      $146 = (invoke_iii(484,($msg|0),(13513|0))|0);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      if ($148) {
       label = 28;
      } else {
       $4 = 424;
       $149 = $4;
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       (invoke_iii(484,($146|0),($151|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
       } else {
        $154 = (___cxa_allocate_exception(8)|0);
        $$expand_i1_val = 1;
        HEAP8[$41>>0] = $$expand_i1_val;
        $3 = $msg;
        $155 = $3;
        $156 = ((($155)) + 4|0);
        __THREW__ = 0;
        invoke_vii(618,($40|0),($156|0));
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         $164 = ___cxa_find_matching_catch()|0;
         $165 = tempRet0;
         $38 = $164;
         $39 = $165;
        } else {
         __THREW__ = 0;
         invoke_vii(619,($154|0),($40|0));
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if (!($160)) {
          $$expand_i1_val7 = 0;
          HEAP8[$41>>0] = $$expand_i1_val7;
          __THREW__ = 0;
          invoke_viii(620,($154|0),(632|0),(146|0));
          $161 = __THREW__; __THREW__ = 0;
         }
         $166 = ___cxa_find_matching_catch()|0;
         $167 = tempRet0;
         $38 = $166;
         $39 = $167;
         __THREW__ = 0;
         invoke_vi(502,($40|0));
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          $175 = ___cxa_find_matching_catch(0|0)|0;
          $176 = tempRet0;
          ___clang_call_terminate($175);
          // unreachable;
         }
        }
        $$pre_trunc = HEAP8[$41>>0]|0;
        $170 = $$pre_trunc&1;
        if ($170) {
         ___cxa_free_exception(($154|0));
        }
       }
      }
      if ((label|0) == 28) {
       $162 = ___cxa_find_matching_catch()|0;
       $163 = tempRet0;
       $38 = $162;
       $39 = $163;
      }
      __THREW__ = 0;
      invoke_vi(70,($msg|0));
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       $175 = ___cxa_find_matching_catch(0|0)|0;
       $176 = tempRet0;
       ___clang_call_terminate($175);
       // unreachable;
      } else {
       $173 = $38;
       $174 = $39;
       ___resumeException($173|0);
       // unreachable;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(502,($85|0));
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(194,($81|0));
    $127 = __THREW__; __THREW__ = 0;
    $128 = $127&1;
    if ($128) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    } else {
     $129 = $21;
     $130 = $22;
     $eh$lpad$body$i$index2Z2D = $130;$eh$lpad$body$i$indexZ2D = $129;
     break;
    }
   }
  } while(0);
  $33 = $eh$lpad$body$i$indexZ2D;
  $34 = $eh$lpad$body$i$index2Z2D;
  __THREW__ = 0;
  $137 = __THREW__; __THREW__ = 0;
  $138 = $137&1;
  if ($138) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
 }
 $139 = ((($43)) + 56|0);
 __THREW__ = 0;
 invoke_vi(210,($139|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if ($141) {
  $144 = ___cxa_find_matching_catch(0|0)|0;
  $145 = tempRet0;
  ___clang_call_terminate($144);
  // unreachable;
 } else {
  $142 = $33;
  $143 = $34;
  ___resumeException($142|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4plusclEjRKSC_($this,$_b,$_v) {
 $this = $this|0;
 $_b = $_b|0;
 $_v = $_v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_b;
 $2 = $_v;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN8OpenMesh2IO7size_ofINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRKT_($4)|0);
 $6 = (($3) + ($5))|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN8OpenMesh2IO7size_ofINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRKT_($_v) {
 $_v = $_v|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_v;
 $1 = $0;
 $2 = (__ZN8OpenMesh2IO6binaryINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7size_ofERKSD_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN8OpenMesh2IO6binaryINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7size_ofERKSD_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return -1;
}
function __ZN8OpenMesh2IO7size_ofINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8OpenMesh2IO6binaryINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7size_ofEv()|0);
 return ($0|0);
}
function __ZN8OpenMesh2IO6binaryINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7size_ofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZN8OpenMesh12BaseProperty24check_and_set_persistentINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEvb($this,$_yn) {
 $this = $this|0;
 $_yn = $_yn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $_yn&1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4&1;
 if ($5) {
  $6 = (__ZN8OpenMesh2IO13is_streamableINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEbv()|0);
  if (!($6)) {
   $7 = (__Z5omerrv()|0);
   (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($7,14170)|0);
  }
 }
 $8 = (__ZN8OpenMesh2IO13is_streamableINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEbv()|0);
 $9 = $1;
 $10 = $9&1;
 $11 = $8 ? $10 : 0;
 $12 = ((($3)) + 16|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh2IO13is_streamableINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEbv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKSD_($this,$_rhs) {
 $this = $this|0;
 $_rhs = $_rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_rhs;
 $4 = $0;
 $5 = $1;
 __ZN8OpenMesh12BasePropertyC2ERKS0_($4,$5);
 $6 = 3624;
 HEAP32[$4>>2] = $6;
 $7 = ((($4)) + 20|0);
 $8 = $1;
 $9 = ((($8)) + 20|0);
 __THREW__ = 0;
 invoke_vii(646,($7|0),($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = ___cxa_find_matching_catch()|0;
 $13 = tempRet0;
 $2 = $12;
 $3 = $13;
 __THREW__ = 0;
 invoke_vi(614,($4|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $18 = ___cxa_find_matching_catch(0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 } else {
  $16 = $2;
  $17 = $3;
  ___resumeException($16|0);
  // unreachable;
 }
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEEC2ERKSG_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 152|0;
 $7 = sp + 136|0;
 $11 = sp + 120|0;
 $17 = sp + 96|0;
 $18 = sp + 16|0;
 $21 = sp + 84|0;
 $22 = sp + 171|0;
 $23 = sp + 8|0;
 $27 = sp + 68|0;
 $28 = sp + 64|0;
 $29 = sp + 60|0;
 $30 = sp + 170|0;
 $32 = sp;
 $34 = sp + 169|0;
 $40 = sp + 168|0;
 $38 = $this;
 $39 = $__x;
 $43 = $38;
 $44 = $39;
 $37 = $44;
 $45 = $37;
 $46 = ((($45)) + 8|0);
 $36 = $46;
 $47 = $36;
 $35 = $47;
 $48 = $35;
 $33 = $48;
 $49 = $33;
 ;HEAP8[$32>>0]=HEAP8[$34>>0]|0;
 $31 = $49;
 $25 = $43;
 $26 = $40;
 $50 = $25;
 $24 = $50;
 $1 = $3;
 $2 = -1;
 $51 = $1;
 HEAP32[$51>>2] = 0;
 $52 = HEAP32[$3>>2]|0;
 HEAP32[$27>>2] = $52;
 $4 = $27;
 HEAP32[$50>>2] = 0;
 $53 = ((($50)) + 4|0);
 $5 = $7;
 $6 = -1;
 $54 = $5;
 HEAP32[$54>>2] = 0;
 $55 = HEAP32[$7>>2]|0;
 HEAP32[$28>>2] = $55;
 $8 = $28;
 HEAP32[$53>>2] = 0;
 $56 = ((($50)) + 8|0);
 $9 = $11;
 $10 = -1;
 $57 = $9;
 HEAP32[$57>>2] = 0;
 $58 = HEAP32[$11>>2]|0;
 HEAP32[$29>>2] = $58;
 $12 = $29;
 ;HEAP8[$23>>0]=HEAP8[$30>>0]|0;
 $20 = $56;
 HEAP32[$21>>2] = 0;
 $59 = $20;
 $19 = $21;
 $60 = $19;
 $61 = HEAP32[$60>>2]|0;
 $13 = $23;
 ;HEAP8[$18>>0]=HEAP8[$22>>0]|0;
 $16 = $59;
 HEAP32[$17>>2] = $61;
 $62 = $16;
 $15 = $18;
 $14 = $17;
 $63 = $14;
 $64 = HEAP32[$63>>2]|0;
 HEAP32[$62>>2] = $64;
 $65 = $39;
 $0 = $65;
 $66 = $0;
 $67 = ((($66)) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$66>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $__n = $72;
 $73 = $__n;
 $74 = ($73>>>0)>(0);
 if (!($74)) {
  STACKTOP = sp;return;
 }
 $75 = $__n;
 __THREW__ = 0;
 invoke_vii(647,($43|0),($75|0));
 $76 = __THREW__; __THREW__ = 0;
 $77 = $76&1;
 if (!($77)) {
  $78 = $39;
  $79 = HEAP32[$78>>2]|0;
  $80 = $39;
  $81 = ((($80)) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  __THREW__ = 0;
  invoke_viii(648,($43|0),($79|0),($82|0));
  $83 = __THREW__; __THREW__ = 0;
  $84 = $83&1;
  if (!($84)) {
   STACKTOP = sp;return;
  }
 }
 $85 = ___cxa_find_matching_catch()|0;
 $86 = tempRet0;
 $41 = $85;
 $42 = $86;
 __THREW__ = 0;
 invoke_vi(649,($43|0));
 $87 = __THREW__; __THREW__ = 0;
 $88 = $87&1;
 if ($88) {
  $91 = ___cxa_find_matching_catch(0|0)|0;
  $92 = tempRet0;
  ___clang_call_terminate($91);
  // unreachable;
 } else {
  $89 = $41;
  $90 = $42;
  ___resumeException($89|0);
  // unreachable;
 }
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
 }
 $11 = $14;
 $18 = $11;
 $19 = ((($18)) + 8|0);
 $10 = $19;
 $20 = $10;
 $9 = $20;
 $21 = $9;
 $22 = $13;
 $7 = $21;
 $8 = $22;
 $23 = $7;
 $24 = $8;
 $4 = $23;
 $5 = $24;
 $6 = 0;
 $25 = $5;
 $3 = $25;
 $26 = $3;
 $27 = (__Znwj($26)|0);
 $28 = ((($14)) + 4|0);
 HEAP32[$28>>2] = $27;
 HEAP32[$14>>2] = $27;
 $29 = HEAP32[$14>>2]|0;
 $30 = $13;
 $31 = (($29) + ($30)|0);
 $2 = $14;
 $32 = $2;
 $33 = ((($32)) + 8|0);
 $1 = $33;
 $34 = $1;
 $0 = $34;
 $35 = $0;
 HEAP32[$35>>2] = $31;
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE14__annotate_newEj($14,0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE18__construct_at_endIPSD_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESK_SK_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 44|0;
 $7 = $this;
 $8 = $__first;
 $9 = $__last;
 $10 = $7;
 $6 = $10;
 $11 = $6;
 $12 = ((($11)) + 8|0);
 $5 = $12;
 $13 = $5;
 $4 = $13;
 $14 = $4;
 $__a = $14;
 while(1) {
  $15 = $8;
  $16 = $9;
  $17 = ($15|0)!=($16|0);
  if (!($17)) {
   break;
  }
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotatorC2ERKSG_j($__annotator,$10,1);
  $18 = $__a;
  $19 = ((($10)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $3 = $20;
  $21 = $3;
  $22 = $8;
  $0 = $18;
  $1 = $21;
  $2 = $22;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $23 = ((($10)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 1|0);
  HEAP32[$23>>2] = $25;
  $26 = $8;
  $27 = ((($26)) + 1|0);
  $8 = $27;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 12|0;
 $32 = sp + 4|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = ((($40)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = ((($45)) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = ((($40)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -1|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = ((($55)) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = ((($61)) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $25 = $58;
 $26 = $59;
 $27 = $69;
 $70 = $25;
 $71 = $26;
 $72 = $27;
 $22 = $70;
 $23 = $71;
 $24 = $72;
 $73 = $23;
 $21 = $73;
 $74 = $21;
 __ZdlPv($74);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotatorC2ERKSG_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 77|0;
 $10 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $3 = $24;
 $25 = $3;
 ;HEAP8[$2>>0]=HEAP8[$4>>0]|0;
 $1 = $25;
 $26 = $1;
 $0 = $26;
 HEAP32[$18>>2] = -1;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $11 = $18;
 $12 = $19;
 $28 = $11;
 $29 = $12;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $8 = $28;
 $9 = $29;
 $30 = $9;
 $31 = $8;
 $5 = $10;
 $6 = $30;
 $7 = $31;
 $32 = $6;
 $33 = HEAP32[$32>>2]|0;
 $34 = $7;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $9;
 $38 = $8;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($26) + ($37)|0);
 $6 = $20;
 $39 = $6;
 $40 = HEAP32[$39>>2]|0;
 $5 = $40;
 $41 = $5;
 $11 = $20;
 $42 = $11;
 $10 = $42;
 $43 = $10;
 $9 = $43;
 $44 = $9;
 $45 = ((($44)) + 8|0);
 $8 = $45;
 $46 = $8;
 $7 = $46;
 $47 = $7;
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$43>>2]|0;
 $50 = $48;
 $51 = $49;
 $52 = (($50) - ($51))|0;
 $53 = (($41) + ($52)|0);
 $13 = $20;
 $54 = $13;
 $55 = HEAP32[$54>>2]|0;
 $12 = $55;
 $56 = $12;
 $57 = $19;
 $58 = (($56) + ($57)|0);
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE31__annotate_contiguous_containerEPKvSI_SI_SI_($20,$23,$38,$53,$58);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE31__annotate_contiguous_containerEPKvSI_SI_SI_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE21__push_back_slow_pathIKSD_EEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 72|0;
 $23 = sp + 60|0;
 $__v = sp + 12|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = ((($33)) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $44;
 $45 = $21;
 $46 = (__ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8max_sizeEv($45)|0);
 $__ms$i = $46;
 $47 = HEAP32[$22>>2]|0;
 $48 = $__ms$i;
 $49 = ($47>>>0)>($48>>>0);
 if ($49) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($45);
 }
 $19 = $45;
 $50 = $19;
 $18 = $50;
 $51 = $18;
 $17 = $51;
 $52 = $17;
 $53 = ((($52)) + 8|0);
 $16 = $53;
 $54 = $16;
 $15 = $54;
 $55 = $15;
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$51>>2]|0;
 $58 = $56;
 $59 = $57;
 $60 = (($58) - ($59))|0;
 $__cap$i = $60;
 $61 = $__cap$i;
 $62 = $__ms$i;
 $63 = (($62>>>0) / 2)&-1;
 $64 = ($61>>>0)>=($63>>>0);
 if ($64) {
  $65 = $__ms$i;
  $20 = $65;
 } else {
  $66 = $__cap$i;
  $67 = $66<<1;
  HEAP32[$23>>2] = $67;
  $12 = $23;
  $13 = $22;
  $68 = $12;
  $69 = $13;
  ;HEAP8[$11>>0]=HEAP8[$14>>0]|0;
  $9 = $68;
  $10 = $69;
  $70 = $9;
  $71 = $10;
  $6 = $11;
  $7 = $70;
  $8 = $71;
  $72 = $7;
  $73 = HEAP32[$72>>2]|0;
  $74 = $8;
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73>>>0)<($75>>>0);
  $77 = $10;
  $78 = $9;
  $79 = $76 ? $77 : $78;
  $80 = HEAP32[$79>>2]|0;
  $20 = $80;
 }
 $81 = $20;
 $5 = $32;
 $82 = $5;
 $83 = ((($82)) + 4|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$82>>2]|0;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = $__a;
 __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEEC2EjjSG_($__v,$81,$88,$89);
 $90 = $__a;
 $91 = ((($__v)) + 8|0);
 $92 = HEAP32[$91>>2]|0;
 $4 = $92;
 $93 = $4;
 $94 = $29;
 $3 = $94;
 $95 = $3;
 $0 = $90;
 $1 = $93;
 $2 = $95;
 $96 = ((($__v)) + 8|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ((($97)) + 1|0);
 HEAP32[$96>>2] = $98;
 __THREW__ = 0;
 invoke_vii(650,($32|0),($__v|0));
 $99 = __THREW__; __THREW__ = 0;
 $100 = $99&1;
 if (!($100)) {
  __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $101 = ___cxa_find_matching_catch()|0;
 $102 = tempRet0;
 $30 = $101;
 $31 = $102;
 __THREW__ = 0;
 invoke_vi(651,($__v|0));
 $103 = __THREW__; __THREW__ = 0;
 $104 = $103&1;
 if ($104) {
  $107 = ___cxa_find_matching_catch(0|0)|0;
  $108 = tempRet0;
  ___clang_call_terminate($107);
  // unreachable;
 } else {
  $105 = $30;
  $106 = $31;
  ___resumeException($105|0);
  // unreachable;
 }
}
function __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEEC2EjjSG_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 124|0;
 $8 = sp + 108|0;
 $22 = sp + 52|0;
 $29 = sp + 24|0;
 $34 = sp + 4|0;
 $35 = sp;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = ((($36)) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = ((($46)) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = ((($54)) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $14 = $63;
  $64 = $14;
  $65 = (__Znwj($64)|0);
  $68 = $65;
 } else {
  $20 = $22;
  $21 = -1;
  $66 = $20;
  HEAP32[$66>>2] = 0;
  $67 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $67;
  $23 = $35;
  $68 = 0;
 }
 HEAP32[$36>>2] = $68;
 $69 = HEAP32[$36>>2]|0;
 $70 = $32;
 $71 = (($69) + ($70)|0);
 $72 = ((($36)) + 8|0);
 HEAP32[$72>>2] = $71;
 $73 = ((($36)) + 4|0);
 HEAP32[$73>>2] = $71;
 $74 = HEAP32[$36>>2]|0;
 $75 = $31;
 $76 = (($74) + ($75)|0);
 $26 = $36;
 $77 = $26;
 $78 = ((($77)) + 12|0);
 $25 = $78;
 $79 = $25;
 $24 = $79;
 $80 = $24;
 HEAP32[$80>>2] = $76;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE26__swap_out_circular_bufferERNS_14__split_bufferISD_RSF_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $_Np$i = $46;
 $47 = $_Np$i;
 $48 = $25;
 $49 = HEAP32[$48>>2]|0;
 $50 = (0 - ($47))|0;
 $51 = (($49) + ($50)|0);
 HEAP32[$48>>2] = $51;
 $52 = $25;
 $53 = HEAP32[$52>>2]|0;
 $54 = $23;
 $55 = $_Np$i;
 _memcpy(($53|0),($54|0),($55|0))|0;
 $56 = $31;
 $57 = ((($56)) + 4|0);
 $3 = $32;
 $4 = $57;
 $58 = $3;
 $2 = $58;
 $59 = $2;
 $60 = HEAP32[$59>>2]|0;
 HEAP32[$__t$i2>>2] = $60;
 $61 = $4;
 $0 = $61;
 $62 = $0;
 $63 = HEAP32[$62>>2]|0;
 $64 = $3;
 HEAP32[$64>>2] = $63;
 $1 = $__t$i2;
 $65 = $1;
 $66 = HEAP32[$65>>2]|0;
 $67 = $4;
 HEAP32[$67>>2] = $66;
 $68 = ((($32)) + 4|0);
 $69 = $31;
 $70 = ((($69)) + 8|0);
 $8 = $68;
 $9 = $70;
 $71 = $8;
 $7 = $71;
 $72 = $7;
 $73 = HEAP32[$72>>2]|0;
 HEAP32[$__t$i1>>2] = $73;
 $74 = $9;
 $5 = $74;
 $75 = $5;
 $76 = HEAP32[$75>>2]|0;
 $77 = $8;
 HEAP32[$77>>2] = $76;
 $6 = $__t$i1;
 $78 = $6;
 $79 = HEAP32[$78>>2]|0;
 $80 = $9;
 HEAP32[$80>>2] = $79;
 $12 = $32;
 $81 = $12;
 $82 = ((($81)) + 8|0);
 $11 = $82;
 $83 = $11;
 $10 = $83;
 $84 = $10;
 $85 = $31;
 $15 = $85;
 $86 = $15;
 $87 = ((($86)) + 12|0);
 $14 = $87;
 $88 = $14;
 $13 = $88;
 $89 = $13;
 $19 = $84;
 $20 = $89;
 $90 = $19;
 $18 = $90;
 $91 = $18;
 $92 = HEAP32[$91>>2]|0;
 HEAP32[$__t$i>>2] = $92;
 $93 = $20;
 $16 = $93;
 $94 = $16;
 $95 = HEAP32[$94>>2]|0;
 $96 = $19;
 HEAP32[$96>>2] = $95;
 $17 = $__t$i;
 $97 = $17;
 $98 = HEAP32[$97>>2]|0;
 $99 = $20;
 HEAP32[$99>>2] = $98;
 $100 = $31;
 $101 = ((($100)) + 4|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = $31;
 HEAP32[$103>>2] = $102;
 $21 = $32;
 $104 = $21;
 $105 = ((($104)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = HEAP32[$104>>2]|0;
 $108 = $106;
 $109 = $107;
 $110 = (($108) - ($109))|0;
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE14__annotate_newEj($32,$110);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 8|0;
 $20 = sp + 125|0;
 $26 = sp;
 $29 = sp + 124|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26>>0]=HEAP8[$29>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = ((($38)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = ((($43)) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($38)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -1|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17>>0]=HEAP8[$20>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = ((($57)) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = ((($65)) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $11 = $62;
 $12 = $63;
 $13 = $73;
 $74 = $11;
 $75 = $12;
 $76 = $13;
 $8 = $74;
 $9 = $75;
 $10 = $76;
 $77 = $9;
 $7 = $77;
 $78 = $7;
 __ZdlPv($78);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($26) + ($37)|0);
 $6 = $20;
 $39 = $6;
 $40 = HEAP32[$39>>2]|0;
 $5 = $40;
 $41 = $5;
 $7 = $20;
 $42 = $7;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($41) + ($48)|0);
 $9 = $20;
 $50 = $9;
 $51 = HEAP32[$50>>2]|0;
 $8 = $51;
 $52 = $8;
 $14 = $20;
 $53 = $14;
 $13 = $53;
 $54 = $13;
 $12 = $54;
 $55 = $12;
 $56 = ((($55)) + 8|0);
 $11 = $56;
 $57 = $11;
 $10 = $57;
 $58 = $10;
 $59 = HEAP32[$58>>2]|0;
 $60 = HEAP32[$54>>2]|0;
 $61 = $59;
 $62 = $60;
 $63 = (($61) - ($62))|0;
 $64 = (($52) + ($63)|0);
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE31__annotate_contiguous_containerEPKvSI_SI_SI_($20,$23,$38,$49,$64);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($22) + ($33)|0);
 $6 = $16;
 $35 = $6;
 $36 = HEAP32[$35>>2]|0;
 $5 = $36;
 $37 = $5;
 $38 = $15;
 $39 = (($37) + ($38)|0);
 $8 = $16;
 $40 = $8;
 $41 = HEAP32[$40>>2]|0;
 $7 = $41;
 $42 = $7;
 $9 = $16;
 $43 = $9;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($42) + ($49)|0);
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE31__annotate_contiguous_containerEPKvSI_SI_SI_($16,$19,$34,$39,$50);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE4swapERSG_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 124|0;
 $__t$i1 = sp + 76|0;
 $24 = sp;
 $27 = sp + 148|0;
 $__t$i = sp + 12|0;
 $33 = $this;
 $34 = $__x;
 $35 = $33;
 $36 = $34;
 $31 = $35;
 $32 = $36;
 $37 = $31;
 $30 = $37;
 $38 = $30;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$__t$i>>2] = $39;
 $40 = $32;
 $28 = $40;
 $41 = $28;
 $42 = HEAP32[$41>>2]|0;
 $43 = $31;
 HEAP32[$43>>2] = $42;
 $29 = $__t$i;
 $44 = $29;
 $45 = HEAP32[$44>>2]|0;
 $46 = $32;
 HEAP32[$46>>2] = $45;
 $47 = ((($35)) + 4|0);
 $48 = $34;
 $49 = ((($48)) + 4|0);
 $3 = $47;
 $4 = $49;
 $50 = $3;
 $2 = $50;
 $51 = $2;
 $52 = HEAP32[$51>>2]|0;
 HEAP32[$__t$i2>>2] = $52;
 $53 = $4;
 $0 = $53;
 $54 = $0;
 $55 = HEAP32[$54>>2]|0;
 $56 = $3;
 HEAP32[$56>>2] = $55;
 $1 = $__t$i2;
 $57 = $1;
 $58 = HEAP32[$57>>2]|0;
 $59 = $4;
 HEAP32[$59>>2] = $58;
 $7 = $35;
 $60 = $7;
 $61 = ((($60)) + 8|0);
 $6 = $61;
 $62 = $6;
 $5 = $62;
 $63 = $5;
 $64 = $34;
 $10 = $64;
 $65 = $10;
 $66 = ((($65)) + 8|0);
 $9 = $66;
 $67 = $9;
 $8 = $67;
 $68 = $8;
 $14 = $63;
 $15 = $68;
 $69 = $14;
 $13 = $69;
 $70 = $13;
 $71 = HEAP32[$70>>2]|0;
 HEAP32[$__t$i1>>2] = $71;
 $72 = $15;
 $11 = $72;
 $73 = $11;
 $74 = HEAP32[$73>>2]|0;
 $75 = $14;
 HEAP32[$75>>2] = $74;
 $12 = $__t$i1;
 $76 = $12;
 $77 = HEAP32[$76>>2]|0;
 $78 = $15;
 HEAP32[$78>>2] = $77;
 $18 = $35;
 $79 = $18;
 $80 = ((($79)) + 8|0);
 $17 = $80;
 $81 = $17;
 $16 = $81;
 $82 = $16;
 $83 = $34;
 $21 = $83;
 $84 = $21;
 $85 = ((($84)) + 8|0);
 $20 = $85;
 $86 = $20;
 $19 = $86;
 $87 = $19;
 $25 = $82;
 $26 = $87;
 $88 = $25;
 $89 = $26;
 ;HEAP8[$24>>0]=HEAP8[$27>>0]|0;
 $22 = $88;
 $23 = $89;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $__cs = $27;
 $28 = $__cs;
 $29 = $19;
 $30 = ($28>>>0)<($29>>>0);
 if ($30) {
  $31 = $19;
  $32 = $__cs;
  $33 = (($31) - ($32))|0;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8__appendEj($20,$33);
  STACKTOP = sp;return;
 }
 $34 = $__cs;
 $35 = $19;
 $36 = ($34>>>0)>($35>>>0);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = HEAP32[$20>>2]|0;
 $38 = $19;
 $39 = (($37) + ($38)|0);
 $13 = $20;
 $14 = $39;
 $40 = $13;
 $12 = $40;
 $41 = $12;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$41>>2]|0;
 $45 = $43;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $__old_size$i = $47;
 $48 = $14;
 $10 = $40;
 $11 = $48;
 $49 = $10;
 while(1) {
  $50 = $11;
  $51 = ((($49)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($50|0)!=($52|0);
  if (!($53)) {
   break;
  }
  $9 = $49;
  $54 = $9;
  $55 = ((($54)) + 8|0);
  $8 = $55;
  $56 = $8;
  $7 = $56;
  $57 = $7;
  $58 = ((($49)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ((($59)) + -1|0);
  HEAP32[$58>>2] = $60;
  $0 = $60;
  $61 = $0;
  $4 = $57;
  $5 = $61;
  $62 = $4;
  $63 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $62;
  $2 = $63;
 }
 $64 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(643,($40|0),($64|0));
 $65 = __THREW__; __THREW__ = 0;
 $66 = $65&1;
 if ($66) {
  $67 = ___cxa_find_matching_catch()|0;
  $68 = tempRet0;
  $15 = $67;
  $16 = $68;
  $69 = $15;
  ___cxa_call_unexpected(($69|0));
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 72|0;
 $__v = sp + 12|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = $27;
 $42 = ($40>>>0)>=($41>>>0);
 if ($42) {
  $43 = $27;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE18__construct_at_endEj($30,$43);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $44 = $22;
 $45 = ((($44)) + 8|0);
 $21 = $45;
 $46 = $21;
 $20 = $46;
 $47 = $20;
 $__a = $47;
 $19 = $30;
 $48 = $19;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = $27;
 $56 = (($54) + ($55))|0;
 $16 = $30;
 HEAP32[$17>>2] = $56;
 $57 = $16;
 $58 = (__ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$17>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
 }
 $14 = $57;
 $62 = $14;
 $13 = $62;
 $63 = $13;
 $12 = $63;
 $64 = $12;
 $65 = ((($64)) + 8|0);
 $11 = $65;
 $66 = $11;
 $10 = $66;
 $67 = $10;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $__cap$i = $72;
 $73 = $__cap$i;
 $74 = $__ms$i;
 $75 = (($74>>>0) / 2)&-1;
 $76 = ($73>>>0)>=($75>>>0);
 if ($76) {
  $77 = $__ms$i;
  $15 = $77;
 } else {
  $78 = $__cap$i;
  $79 = $78<<1;
  HEAP32[$18>>2] = $79;
  $7 = $18;
  $8 = $17;
  $80 = $7;
  $81 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $80;
  $5 = $81;
  $82 = $4;
  $83 = $5;
  $1 = $6;
  $2 = $82;
  $3 = $83;
  $84 = $2;
  $85 = HEAP32[$84>>2]|0;
  $86 = $3;
  $87 = HEAP32[$86>>2]|0;
  $88 = ($85>>>0)<($87>>>0);
  $89 = $5;
  $90 = $4;
  $91 = $88 ? $89 : $90;
  $92 = HEAP32[$91>>2]|0;
  $15 = $92;
 }
 $93 = $15;
 $0 = $30;
 $94 = $0;
 $95 = ((($94)) + 4|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = HEAP32[$94>>2]|0;
 $98 = $96;
 $99 = $97;
 $100 = (($98) - ($99))|0;
 $101 = $__a;
 __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEEC2EjjSG_($__v,$93,$100,$101);
 $102 = $27;
 __THREW__ = 0;
 invoke_vii(652,($__v|0),($102|0));
 $103 = __THREW__; __THREW__ = 0;
 $104 = $103&1;
 if (!($104)) {
  __THREW__ = 0;
  invoke_vii(650,($30|0),($__v|0));
  $105 = __THREW__; __THREW__ = 0;
  $106 = $105&1;
  if (!($106)) {
   __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEED2Ev($__v);
   STACKTOP = sp;return;
  }
 }
 $107 = ___cxa_find_matching_catch()|0;
 $108 = tempRet0;
 $28 = $107;
 $29 = $108;
 __THREW__ = 0;
 invoke_vi(651,($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $113 = ___cxa_find_matching_catch(0|0)|0;
  $114 = tempRet0;
  ___clang_call_terminate($113);
  // unreachable;
 } else {
  $111 = $28;
  $112 = $29;
  ___resumeException($111|0);
  // unreachable;
 }
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 36|0;
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = ((($9)) + 8|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $__a = $12;
 while(1) {
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotatorC2ERKSG_j($__annotator,$8,1);
  $13 = $__a;
  $14 = ((($8)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $2 = $15;
  $16 = $2;
  $0 = $13;
  $1 = $16;
  $17 = ((($8)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 1|0);
  HEAP32[$17>>2] = $19;
  $20 = $7;
  $21 = (($20) + -1)|0;
  $7 = $21;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $22 = $7;
  $23 = ($22>>>0)>(0);
  if (!($23)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = ((($9)) + 12|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $__a = $14;
 while(1) {
  $15 = $__a;
  $16 = ((($8)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $0 = $17;
  $18 = $0;
  $1 = $15;
  $2 = $18;
  $19 = ((($8)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 1|0);
  HEAP32[$19>>2] = $21;
  $22 = $7;
  $23 = (($22) + -1)|0;
  $7 = $23;
  $24 = $7;
  $25 = ($24>>>0)>(0);
  if (!($25)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp + 8|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $14 = $10;
 $8 = $13;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = ((($17)) + 8|0);
 $5 = $18;
 $19 = $5;
 $4 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$16>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = ($14>>>0)>($25>>>0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $3 = $13;
 $27 = $3;
 $28 = ((($27)) + 8|0);
 $2 = $28;
 $29 = $2;
 $1 = $29;
 $30 = $1;
 $__a = $30;
 $31 = $10;
 $0 = $13;
 $32 = $0;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$32>>2]|0;
 $36 = $34;
 $37 = $35;
 $38 = (($36) - ($37))|0;
 $39 = $__a;
 __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEEC2EjjSG_($__v,$31,$38,$39);
 __THREW__ = 0;
 invoke_vii(650,($13|0),($__v|0));
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 if (!($41)) {
  __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $42 = ___cxa_find_matching_catch()|0;
 $43 = tempRet0;
 $11 = $42;
 $12 = $43;
 __THREW__ = 0;
 invoke_vi(651,($__v|0));
 $44 = __THREW__; __THREW__ = 0;
 $45 = $44&1;
 if ($45) {
  $48 = ___cxa_find_matching_catch(0|0)|0;
  $49 = tempRet0;
  ___clang_call_terminate($48);
  // unreachable;
 } else {
  $46 = $11;
  $47 = $12;
  ___resumeException($46|0);
  // unreachable;
 }
}
function __ZN8OpenMesh17PropertyContainer3addINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEENS_15BasePropHandleTIT_EERKSF_RKNSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEE($this,$0,$_name) {
 $this = $this|0;
 $0 = $0|0;
 $_name = $_name|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $idx = 0, $p_end = 0, $p_it = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator$i = sp + 200|0;
 $29 = sp + 84|0;
 $32 = sp + 72|0;
 $36 = sp + 56|0;
 $39 = sp + 44|0;
 $41 = sp + 36|0;
 $p_it = sp + 20|0;
 $p_end = sp + 16|0;
 $45 = sp + 8|0;
 $42 = $this;
 $43 = $0;
 $44 = $_name;
 $48 = $42;
 $49 = ((($48)) + 4|0);
 $40 = $49;
 $50 = $40;
 $51 = HEAP32[$50>>2]|0;
 $37 = $50;
 $38 = $51;
 $52 = $38;
 $34 = $36;
 $35 = $52;
 $53 = $34;
 $54 = $35;
 HEAP32[$53>>2] = $54;
 $55 = HEAP32[$36>>2]|0;
 HEAP32[$39>>2] = $55;
 $56 = HEAP32[$39>>2]|0;
 HEAP32[$p_it>>2] = $56;
 $57 = ((($48)) + 4|0);
 $33 = $57;
 $58 = $33;
 $59 = ((($58)) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 $30 = $58;
 $31 = $60;
 $61 = $31;
 $27 = $29;
 $28 = $61;
 $62 = $27;
 $63 = $28;
 HEAP32[$62>>2] = $63;
 $64 = HEAP32[$29>>2]|0;
 HEAP32[$32>>2] = $64;
 $65 = HEAP32[$32>>2]|0;
 HEAP32[$p_end>>2] = $65;
 $idx = 0;
 while(1) {
  $23 = $p_it;
  $24 = $p_end;
  $66 = $23;
  $67 = $24;
  $21 = $66;
  $22 = $67;
  $68 = $21;
  $20 = $68;
  $69 = $20;
  $70 = HEAP32[$69>>2]|0;
  $71 = $22;
  $19 = $71;
  $72 = $19;
  $73 = HEAP32[$72>>2]|0;
  $74 = ($70|0)==($73|0);
  $75 = $74 ^ 1;
  if (!($75)) {
   break;
  }
  $6 = $p_it;
  $76 = $6;
  $77 = HEAP32[$76>>2]|0;
  $78 = HEAP32[$77>>2]|0;
  $79 = ($78|0)!=(0|0);
  if (!($79)) {
   break;
  }
  $5 = $p_it;
  $80 = $5;
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($81)) + 4|0);
  HEAP32[$80>>2] = $82;
  $83 = $idx;
  $84 = (($83) + 1)|0;
  $idx = $84;
 }
 $3 = $p_it;
 $4 = $p_end;
 $85 = $3;
 $2 = $85;
 $86 = $2;
 $87 = HEAP32[$86>>2]|0;
 $88 = $4;
 $1 = $88;
 $89 = $1;
 $90 = HEAP32[$89>>2]|0;
 $91 = ($87|0)==($90|0);
 do {
  if ($91) {
   $92 = ((($48)) + 4|0);
   HEAP32[$45>>2] = 0;
   $17 = $92;
   $18 = $45;
   $93 = $17;
   $94 = ((($93)) + 4|0);
   $95 = HEAP32[$94>>2]|0;
   $16 = $93;
   $96 = $16;
   $97 = ((($96)) + 8|0);
   $15 = $97;
   $98 = $15;
   $14 = $98;
   $99 = $14;
   $100 = HEAP32[$99>>2]|0;
   $101 = ($95|0)!=($100|0);
   if ($101) {
    __ZNSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i,$93,1);
    $13 = $93;
    $102 = $13;
    $103 = ((($102)) + 8|0);
    $12 = $103;
    $104 = $12;
    $11 = $104;
    $105 = $11;
    $106 = ((($93)) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $10 = $107;
    $108 = $10;
    $109 = $18;
    $7 = $105;
    $8 = $108;
    $9 = $109;
    $110 = $8;
    $111 = $9;
    $112 = HEAP32[$111>>2]|0;
    HEAP32[$110>>2] = $112;
    __ZNSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
    $113 = ((($93)) + 4|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((($114)) + 4|0);
    HEAP32[$113>>2] = $115;
    break;
   } else {
    $116 = $18;
    __ZNSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($93,$116);
    break;
   }
  }
 } while(0);
 $117 = (__Znwj(32)|0);
 $118 = $44;
 __THREW__ = 0;
 invoke_vii(653,($117|0),($118|0));
 $119 = __THREW__; __THREW__ = 0;
 $120 = $119&1;
 if ($120) {
  $129 = ___cxa_find_matching_catch()|0;
  $130 = tempRet0;
  $46 = $129;
  $47 = $130;
  __ZdlPv($117);
  $131 = $46;
  $132 = $47;
  ___resumeException($131|0);
  // unreachable;
 } else {
  $121 = ((($48)) + 4|0);
  $122 = $idx;
  $25 = $121;
  $26 = $122;
  $123 = $25;
  $124 = $26;
  $125 = HEAP32[$123>>2]|0;
  $126 = (($125) + ($124<<2)|0);
  HEAP32[$126>>2] = $117;
  $127 = $idx;
  __ZN8OpenMesh15BasePropHandleTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2Ei($41,$127);
  $128 = HEAP32[$41>>2]|0;
  STACKTOP = sp;return ($128|0);
 }
 return (0)|0;
}
function __ZN8OpenMesh12VPropHandleTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKNS_15BasePropHandleTISC_EE($this,$_b) {
 $this = $this|0;
 $_b = $_b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_b;
 $2 = $0;
 $3 = $1;
 ;HEAP32[$2>>2]=HEAP32[$3>>2]|0;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEE($this,$_name) {
 $this = $this|0;
 $_name = $_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 96|0;
 $6 = sp + 80|0;
 $10 = sp + 64|0;
 $15 = sp + 44|0;
 $18 = sp + 32|0;
 $21 = sp + 20|0;
 $22 = sp + 16|0;
 $23 = sp + 12|0;
 $25 = $this;
 $26 = $_name;
 $27 = $25;
 $28 = $26;
 __ZN8OpenMesh12BasePropertyC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($27,$28);
 $29 = 3700;
 HEAP32[$27>>2] = $29;
 $30 = ((($27)) + 20|0);
 $24 = $30;
 $31 = $24;
 $20 = $31;
 $32 = $20;
 $19 = $32;
 $0 = $2;
 $1 = -1;
 $33 = $0;
 HEAP32[$33>>2] = 0;
 $34 = HEAP32[$2>>2]|0;
 HEAP32[$21>>2] = $34;
 $3 = $21;
 HEAP32[$32>>2] = 0;
 $35 = ((($32)) + 4|0);
 $4 = $6;
 $5 = -1;
 $36 = $4;
 HEAP32[$36>>2] = 0;
 $37 = HEAP32[$6>>2]|0;
 HEAP32[$22>>2] = $37;
 $7 = $22;
 HEAP32[$35>>2] = 0;
 $38 = ((($32)) + 8|0);
 $8 = $10;
 $9 = -1;
 $39 = $8;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$10>>2]|0;
 HEAP32[$23>>2] = $40;
 $11 = $23;
 $17 = $38;
 HEAP32[$18>>2] = 0;
 $41 = $17;
 $16 = $18;
 $42 = $16;
 $43 = HEAP32[$42>>2]|0;
 $14 = $41;
 HEAP32[$15>>2] = $43;
 $44 = $14;
 $13 = $44;
 $12 = $15;
 $45 = $12;
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$44>>2] = $46;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh15BasePropHandleTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh10BaseHandleC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 3700;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 20|0);
 __THREW__ = 0;
 invoke_vi(654,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8OpenMesh12BasePropertyD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(614,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(110,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7reserveEj($this,$_n) {
 $this = $this|0;
 $_n = $_n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_n;
 $2 = $0;
 $3 = ((($2)) + 20|0);
 $4 = $1;
 __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE7reserveEj($3,$4);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE6resizeEj($this,$_n) {
 $this = $this|0;
 $_n = $_n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_n;
 $2 = $0;
 $3 = ((($2)) + 20|0);
 $4 = $1;
 __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE6resizeEj($3,$4);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 184|0;
 $6 = sp + 168|0;
 $10 = sp + 152|0;
 $15 = sp + 132|0;
 $18 = sp + 120|0;
 $21 = sp + 108|0;
 $22 = sp + 104|0;
 $23 = sp + 100|0;
 $28 = sp;
 $31 = sp + 196|0;
 $44 = sp + 12|0;
 $43 = $this;
 $47 = $43;
 $48 = ((($47)) + 20|0);
 $40 = $48;
 $49 = $40;
 $39 = $49;
 $50 = $39;
 $51 = ((($50)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = HEAP32[$50>>2]|0;
 $54 = $52;
 $55 = $53;
 $56 = (($54) - ($55))|0;
 $__old_size$i = $56;
 $37 = $49;
 $57 = $37;
 $58 = HEAP32[$57>>2]|0;
 $35 = $57;
 $36 = $58;
 $59 = $35;
 while(1) {
  $60 = $36;
  $61 = ((($59)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($60|0)!=($62|0);
  if (!($63)) {
   break;
  }
  $34 = $59;
  $64 = $34;
  $65 = ((($64)) + 8|0);
  $33 = $65;
  $66 = $33;
  $32 = $66;
  $67 = $32;
  $68 = ((($59)) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($69)) + -1|0);
  HEAP32[$68>>2] = $70;
  $25 = $70;
  $71 = $25;
  $29 = $67;
  $30 = $71;
  $72 = $29;
  $73 = $30;
  ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
  $26 = $72;
  $27 = $73;
 }
 $74 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(655,($49|0),($74|0));
 $75 = __THREW__; __THREW__ = 0;
 $76 = $75&1;
 if ($76) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $41 = $77;
  $42 = $78;
  $79 = $41;
  ___cxa_call_unexpected(($79|0));
  // unreachable;
 }
 $38 = $49;
 $24 = $44;
 $80 = $24;
 $20 = $80;
 $81 = $20;
 $19 = $81;
 $0 = $2;
 $1 = -1;
 $82 = $0;
 HEAP32[$82>>2] = 0;
 $83 = HEAP32[$2>>2]|0;
 HEAP32[$21>>2] = $83;
 $3 = $21;
 HEAP32[$81>>2] = 0;
 $84 = ((($81)) + 4|0);
 $4 = $6;
 $5 = -1;
 $85 = $4;
 HEAP32[$85>>2] = 0;
 $86 = HEAP32[$6>>2]|0;
 HEAP32[$22>>2] = $86;
 $7 = $22;
 HEAP32[$84>>2] = 0;
 $87 = ((($81)) + 8|0);
 $8 = $10;
 $9 = -1;
 $88 = $8;
 HEAP32[$88>>2] = 0;
 $89 = HEAP32[$10>>2]|0;
 HEAP32[$23>>2] = $89;
 $11 = $23;
 $17 = $87;
 HEAP32[$18>>2] = 0;
 $90 = $17;
 $16 = $18;
 $91 = $16;
 $92 = HEAP32[$91>>2]|0;
 $14 = $90;
 HEAP32[$15>>2] = $92;
 $93 = $14;
 $13 = $93;
 $12 = $15;
 $94 = $12;
 $95 = HEAP32[$94>>2]|0;
 HEAP32[$93>>2] = $95;
 $96 = ((($47)) + 20|0);
 __THREW__ = 0;
 invoke_vii(656,($44|0),($96|0));
 $97 = __THREW__; __THREW__ = 0;
 $98 = $97&1;
 if (!($98)) {
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev($44);
  STACKTOP = sp;return;
 }
 $99 = ___cxa_find_matching_catch()|0;
 $100 = tempRet0;
 $45 = $99;
 $46 = $100;
 __THREW__ = 0;
 invoke_vi(654,($44|0));
 $101 = __THREW__; __THREW__ = 0;
 $102 = $101&1;
 if ($102) {
  $105 = ___cxa_find_matching_catch(0|0)|0;
  $106 = tempRet0;
  ___clang_call_terminate($105);
  // unreachable;
 } else {
  $103 = $45;
  $104 = $46;
  ___resumeException($103|0);
  // unreachable;
 }
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE9push_backEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__annotator$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator$i = sp + 53|0;
 $13 = sp + 52|0;
 $12 = $this;
 $14 = $12;
 $15 = ((($14)) + 20|0);
 $10 = $15;
 $11 = $13;
 $16 = $10;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $9 = $16;
 $19 = $9;
 $20 = ((($19)) + 8|0);
 $8 = $20;
 $21 = $8;
 $7 = $21;
 $22 = $7;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($18|0)!=($23|0);
 if ($24) {
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotatorC2ERKSG_j($__annotator$i,$16,1);
  $6 = $16;
  $25 = $6;
  $26 = ((($25)) + 8|0);
  $5 = $26;
  $27 = $5;
  $4 = $27;
  $28 = $4;
  $29 = ((($16)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $3 = $30;
  $31 = $3;
  $32 = $11;
  $0 = $28;
  $1 = $31;
  $2 = $32;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $33 = ((($16)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 1|0);
  HEAP32[$33>>2] = $35;
  STACKTOP = sp;return;
 } else {
  $36 = $11;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE21__push_back_slow_pathIKSD_EEvRT_($16,$36);
  STACKTOP = sp;return;
 }
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4swapEjj($this,$_i0,$_i1) {
 $this = $this|0;
 $_i0 = $_i0|0;
 $_i1 = $_i1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i = sp + 48|0;
 $9 = $this;
 $10 = $_i0;
 $11 = $_i1;
 $12 = $9;
 $13 = ((($12)) + 20|0);
 $14 = $10;
 $7 = $13;
 $8 = $14;
 $15 = $7;
 $16 = $8;
 $17 = HEAP32[$15>>2]|0;
 $18 = (($17) + ($16)|0);
 $19 = ((($12)) + 20|0);
 $20 = $11;
 $0 = $19;
 $1 = $20;
 $21 = $0;
 $22 = $1;
 $23 = HEAP32[$21>>2]|0;
 $24 = (($23) + ($22)|0);
 $5 = $18;
 $6 = $24;
 $25 = $5;
 $4 = $25;
 $26 = $6;
 $2 = $26;
 $3 = $__t$i;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4copyEjj($this,$_i0,$_i1) {
 $this = $this|0;
 $_i0 = $_i0|0;
 $_i1 = $_i1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $this;
 $5 = $_i0;
 $6 = $_i1;
 $7 = $4;
 $8 = ((($7)) + 20|0);
 $9 = $6;
 $2 = $8;
 $3 = $9;
 $10 = ((($7)) + 20|0);
 $11 = $5;
 $0 = $10;
 $1 = $11;
 STACKTOP = sp;return;
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5cloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(32)|0);
 __THREW__ = 0;
 invoke_vii(657,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $1 = $8;
  $2 = $9;
  __ZdlPv($4);
  $10 = $1;
  $11 = $2;
  ___resumeException($10|0);
  // unreachable;
 } else {
  $p = $4;
  $7 = $p;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE14set_persistentEb($this,$_yn) {
 $this = $this|0;
 $_yn = $_yn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $_yn&1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4&1;
 __ZN8OpenMesh12BaseProperty24check_and_set_persistentINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEvb($3,$5);
 STACKTOP = sp;return;
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE10n_elementsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 STACKTOP = sp;return ($10|0);
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE12element_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN8OpenMesh2IO7size_ofINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7size_ofEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 116|0;
 $5 = sp + 104|0;
 $16 = sp + 16|0;
 $17 = sp + 8|0;
 $18 = sp;
 $21 = sp + 52|0;
 $24 = sp + 40|0;
 $28 = sp + 24|0;
 $29 = sp + 20|0;
 $30 = sp + 128|0;
 $27 = $this;
 $31 = $27;
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 48|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (FUNCTION_TABLE_ii[$34 & 1023]($31)|0);
 $36 = ($35|0)!=(-1);
 if ($36) {
  $37 = HEAP32[$31>>2]|0;
  $38 = ((($37)) + 44|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_ii[$39 & 1023]($31)|0);
  $41 = (__ZNK8OpenMesh12BaseProperty7size_ofEj($31,$40)|0);
  $26 = $41;
  $76 = $26;
  STACKTOP = sp;return ($76|0);
 }
 $42 = ((($31)) + 20|0);
 $25 = $42;
 $43 = $25;
 $44 = HEAP32[$43>>2]|0;
 $22 = $43;
 $23 = $44;
 $45 = $23;
 $19 = $21;
 $20 = $45;
 $46 = $19;
 $47 = $20;
 HEAP32[$46>>2] = $47;
 $48 = HEAP32[$21>>2]|0;
 HEAP32[$24>>2] = $48;
 $49 = HEAP32[$24>>2]|0;
 HEAP32[$28>>2] = $49;
 $50 = ((($31)) + 20|0);
 $6 = $50;
 $51 = $6;
 $52 = ((($51)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $3 = $51;
 $4 = $53;
 $54 = $4;
 $0 = $2;
 $1 = $54;
 $55 = $0;
 $56 = $1;
 HEAP32[$55>>2] = $56;
 $57 = HEAP32[$2>>2]|0;
 HEAP32[$5>>2] = $57;
 $58 = HEAP32[$5>>2]|0;
 HEAP32[$29>>2] = $58;
 ;HEAP8[$16>>0]=HEAP8[$30>>0]|0;
 ;HEAP8[$17>>0]=HEAP8[$29>>0]|0;HEAP8[$17+1>>0]=HEAP8[$29+1>>0]|0;HEAP8[$17+2>>0]=HEAP8[$29+2>>0]|0;HEAP8[$17+3>>0]=HEAP8[$29+3>>0]|0;
 ;HEAP8[$18>>0]=HEAP8[$28>>0]|0;HEAP8[$18+1>>0]=HEAP8[$28+1>>0]|0;HEAP8[$18+2>>0]=HEAP8[$28+2>>0]|0;HEAP8[$18+3>>0]=HEAP8[$28+3>>0]|0;
 $15 = 0;
 while(1) {
  $13 = $18;
  $14 = $17;
  $59 = $13;
  $60 = $14;
  $11 = $59;
  $12 = $60;
  $61 = $11;
  $10 = $61;
  $62 = $10;
  $63 = HEAP32[$62>>2]|0;
  $64 = $12;
  $9 = $64;
  $65 = $9;
  $66 = HEAP32[$65>>2]|0;
  $67 = ($63|0)==($66|0);
  $68 = $67 ^ 1;
  $69 = $15;
  if (!($68)) {
   break;
  }
  $7 = $18;
  $70 = $7;
  $71 = HEAP32[$70>>2]|0;
  $72 = (__ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4plusclEjRKSC_($16,$69,$71)|0);
  $15 = $72;
  $8 = $18;
  $73 = $8;
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($74)) + 1|0);
  HEAP32[$73>>2] = $75;
 }
 $26 = $69;
 $76 = $26;
 STACKTOP = sp;return ($76|0);
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7size_ofEj($this,$_n_elem) {
 $this = $this|0;
 $_n_elem = $_n_elem|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_n_elem;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8OpenMesh12BaseProperty7size_ofEj($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5storeERNSt3__113basic_ostreamIcNSE_11char_traitsIcEEEEb($this,$_ostr,$_swap) {
 $this = $this|0;
 $_ostr = $_ostr|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $_ostr;
 $6 = $_swap&1;
 $5 = $6;
 $7 = $3;
 $8 = (__ZN8OpenMesh2IO13is_streamableINSt3__16vectorINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEbv()|0);
 if ($8) {
  $9 = $4;
  $10 = ((($7)) + 20|0);
  $11 = $5;
  $12 = $11&1;
  $13 = (__ZN8OpenMesh2IO5storeINSt3__16vectorINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEjRNS2_13basic_ostreamIcNS2_11char_traitsIcEEEERKT_b($9,$10,$12)|0);
  $2 = $13;
  $35 = $2;
  STACKTOP = sp;return ($35|0);
 }
 $bytes = 0;
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = HEAP32[$7>>2]|0;
  $16 = ((($15)) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_ii[$17 & 1023]($7)|0);
  $19 = ($14>>>0)<($18>>>0);
  if (!($19)) {
   break;
  }
  $20 = $4;
  $21 = ((($7)) + 20|0);
  $22 = $i;
  $0 = $21;
  $1 = $22;
  $23 = $0;
  $24 = $1;
  $25 = HEAP32[$23>>2]|0;
  $26 = (($25) + ($24)|0);
  $27 = $5;
  $28 = $27&1;
  $29 = (__ZN8OpenMesh2IO5storeINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRNSt3__113basic_ostreamIcNSE_11char_traitsIcEEEERKT_b($20,$26,$28)|0);
  $30 = $bytes;
  $31 = (($30) + ($29))|0;
  $bytes = $31;
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
 }
 $34 = $bytes;
 $2 = $34;
 $35 = $2;
 STACKTOP = sp;return ($35|0);
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7restoreERNSt3__113basic_istreamIcNSE_11char_traitsIcEEEEb($this,$_istr,$_swap) {
 $this = $this|0;
 $_istr = $_istr|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $_istr;
 $6 = $_swap&1;
 $5 = $6;
 $7 = $3;
 $8 = (__ZN8OpenMesh2IO13is_streamableINSt3__16vectorINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEbv()|0);
 if ($8) {
  $9 = $4;
  $10 = ((($7)) + 20|0);
  $11 = $5;
  $12 = $11&1;
  $13 = (__ZN8OpenMesh2IO7restoreINSt3__16vectorINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEjRNS2_13basic_istreamIcNS2_11char_traitsIcEEEERT_b($9,$10,$12)|0);
  $2 = $13;
  $35 = $2;
  STACKTOP = sp;return ($35|0);
 }
 $bytes = 0;
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = HEAP32[$7>>2]|0;
  $16 = ((($15)) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_ii[$17 & 1023]($7)|0);
  $19 = ($14>>>0)<($18>>>0);
  if (!($19)) {
   break;
  }
  $20 = $4;
  $21 = ((($7)) + 20|0);
  $22 = $i;
  $0 = $21;
  $1 = $22;
  $23 = $0;
  $24 = $1;
  $25 = HEAP32[$23>>2]|0;
  $26 = (($25) + ($24)|0);
  $27 = $5;
  $28 = $27&1;
  $29 = (__ZN8OpenMesh2IO7restoreINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRNSt3__113basic_istreamIcNSE_11char_traitsIcEEEERT_b($20,$26,$28)|0);
  $30 = $bytes;
  $31 = (($30) + ($29))|0;
  $bytes = $31;
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
 }
 $34 = $bytes;
 $2 = $34;
 $35 = $2;
 STACKTOP = sp;return ($35|0);
}
function __ZN8OpenMesh2IO13is_streamableINSt3__16vectorINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEbv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN8OpenMesh2IO7restoreINSt3__16vectorINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEjRNS2_13basic_istreamIcNS2_11char_traitsIcEEEERT_b($_is,$_v,$_swap) {
 $_is = $_is|0;
 $_v = $_v|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_is;
 $1 = $_v;
 $3 = $_swap&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 $8 = (__ZN8OpenMesh2IO6binaryINSt3__16vectorINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEE7restoreERNS2_13basic_istreamIcNS2_11char_traitsIcEEEERSI_b($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN8OpenMesh2IO7restoreINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRNSt3__113basic_istreamIcNSE_11char_traitsIcEEEERT_b($_is,$_v,$_swap) {
 $_is = $_is|0;
 $_v = $_v|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_is;
 $1 = $_v;
 $3 = $_swap&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 $8 = (__ZN8OpenMesh2IO6binaryINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7restoreERNSt3__113basic_istreamIcNSF_11char_traitsIcEEEERSD_b($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN8OpenMesh2IO6binaryINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7restoreERNSt3__113basic_istreamIcNSF_11char_traitsIcEEEERSD_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0;
 var $__i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp + 212|0;
 $msg = sp + 24|0;
 $40 = sp;
 $41 = sp + 320|0;
 $35 = $0;
 $36 = $1;
 $42 = $2&1;
 $37 = $42;
 $31 = $msg;
 $32 = 16;
 $43 = $31;
 $44 = ((($43)) + 56|0);
 $30 = $44;
 $45 = $30;
 $29 = $45;
 $46 = $29;
 $47 = 6536;
 HEAP32[$46>>2] = $47;
 $48 = 6212;
 HEAP32[$45>>2] = $48;
 $49 = 3456;
 HEAP32[$43>>2] = $49;
 $50 = ((($43)) + 56|0);
 $51 = 3476;
 HEAP32[$50>>2] = $51;
 $52 = ((($43)) + 4|0);
 $26 = $43;
 $53 = 3488;
 $27 = $53;
 $28 = $52;
 $54 = $26;
 $55 = $27;
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = ((($55)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$54>>2]|0;
 $60 = ((($59)) + -12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($54) + ($61)|0);
 HEAP32[$62>>2] = $58;
 $63 = HEAP32[$54>>2]|0;
 $64 = ((($63)) + -12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($54) + ($65)|0);
 $67 = $28;
 $24 = $66;
 $25 = $67;
 $68 = $24;
 $69 = $25;
 __THREW__ = 0;
 invoke_vii(490,($68|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $133 = ___cxa_find_matching_catch()|0;
  $134 = tempRet0;
  $33 = $133;
  $34 = $134;
 } else {
  $72 = ((($68)) + 72|0);
  HEAP32[$72>>2] = 0;
  $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $74 = ((($68)) + 76|0);
  HEAP32[$74>>2] = $73;
  $75 = 3456;
  HEAP32[$43>>2] = $75;
  $76 = ((($43)) + 56|0);
  $77 = 3476;
  HEAP32[$76>>2] = $77;
  $78 = ((($43)) + 4|0);
  $79 = $32;
  $80 = $79 | 16;
  $19 = $78;
  $20 = $80;
  $81 = $19;
  __THREW__ = 0;
  invoke_vi(500,($81|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  do {
   if ($83) {
    $135 = ___cxa_find_matching_catch()|0;
    $136 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $136;$eh$lpad$body$i$indexZ2D = $135;
   } else {
    $84 = 3016;
    HEAP32[$81>>2] = $84;
    $85 = ((($81)) + 32|0);
    $18 = $85;
    $86 = $18;
    $17 = $86;
    $87 = $17;
    $16 = $87;
    $88 = $16;
    $15 = $88;
    $14 = $86;
    $89 = $14;
    $13 = $89;
    $90 = $13;
    $12 = $90;
    $91 = $12;
    $__a$i$i$i$i = $91;
    $__i$i$i$i$i = 0;
    while(1) {
     $92 = $__i$i$i$i$i;
     $93 = ($92>>>0)<(3);
     if (!($93)) {
      break;
     }
     $94 = $__i$i$i$i$i;
     $95 = $__a$i$i$i$i;
     $96 = (($95) + ($94<<2)|0);
     HEAP32[$96>>2] = 0;
     $97 = $__i$i$i$i$i;
     $98 = (($97) + 1)|0;
     $__i$i$i$i$i = $98;
    }
    $99 = ((($81)) + 44|0);
    HEAP32[$99>>2] = 0;
    $100 = ((($81)) + 48|0);
    $101 = $20;
    HEAP32[$100>>2] = $101;
    $11 = $23;
    $102 = $11;
    $10 = $102;
    $103 = $10;
    $9 = $103;
    $104 = $9;
    $8 = $104;
    $7 = $102;
    $105 = $7;
    $6 = $105;
    $106 = $6;
    $5 = $106;
    $107 = $5;
    $__a$i$i1$i$i = $107;
    $__i$i$i2$i$i = 0;
    while(1) {
     $108 = $__i$i$i2$i$i;
     $109 = ($108>>>0)<(3);
     if (!($109)) {
      break;
     }
     $110 = $__i$i$i2$i$i;
     $111 = $__a$i$i1$i$i;
     $112 = (($111) + ($110<<2)|0);
     HEAP32[$112>>2] = 0;
     $113 = $__i$i$i2$i$i;
     $114 = (($113) + 1)|0;
     $__i$i$i2$i$i = $114;
    }
    __THREW__ = 0;
    invoke_vii(501,($81|0),($23|0));
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    do {
     if ($116) {
      $121 = ___cxa_find_matching_catch()|0;
      $122 = tempRet0;
      $21 = $121;
      $22 = $122;
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $131 = ___cxa_find_matching_catch(0|0)|0;
       $132 = tempRet0;
       ___clang_call_terminate($131);
       // unreachable;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       $119 = ___cxa_find_matching_catch()|0;
       $120 = tempRet0;
       $21 = $119;
       $22 = $120;
       break;
      }
      __THREW__ = 0;
      $146 = (invoke_iii(484,($msg|0),(13513|0))|0);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      if ($148) {
       label = 28;
      } else {
       $4 = 488;
       $149 = $4;
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       (invoke_iii(484,($146|0),($151|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
       } else {
        $154 = (___cxa_allocate_exception(8)|0);
        $$expand_i1_val = 1;
        HEAP8[$41>>0] = $$expand_i1_val;
        $3 = $msg;
        $155 = $3;
        $156 = ((($155)) + 4|0);
        __THREW__ = 0;
        invoke_vii(618,($40|0),($156|0));
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         $164 = ___cxa_find_matching_catch()|0;
         $165 = tempRet0;
         $38 = $164;
         $39 = $165;
        } else {
         __THREW__ = 0;
         invoke_vii(619,($154|0),($40|0));
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if (!($160)) {
          $$expand_i1_val7 = 0;
          HEAP8[$41>>0] = $$expand_i1_val7;
          __THREW__ = 0;
          invoke_viii(620,($154|0),(632|0),(146|0));
          $161 = __THREW__; __THREW__ = 0;
         }
         $166 = ___cxa_find_matching_catch()|0;
         $167 = tempRet0;
         $38 = $166;
         $39 = $167;
         __THREW__ = 0;
         invoke_vi(502,($40|0));
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          $175 = ___cxa_find_matching_catch(0|0)|0;
          $176 = tempRet0;
          ___clang_call_terminate($175);
          // unreachable;
         }
        }
        $$pre_trunc = HEAP8[$41>>0]|0;
        $170 = $$pre_trunc&1;
        if ($170) {
         ___cxa_free_exception(($154|0));
        }
       }
      }
      if ((label|0) == 28) {
       $162 = ___cxa_find_matching_catch()|0;
       $163 = tempRet0;
       $38 = $162;
       $39 = $163;
      }
      __THREW__ = 0;
      invoke_vi(70,($msg|0));
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       $175 = ___cxa_find_matching_catch(0|0)|0;
       $176 = tempRet0;
       ___clang_call_terminate($175);
       // unreachable;
      } else {
       $173 = $38;
       $174 = $39;
       ___resumeException($173|0);
       // unreachable;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(502,($85|0));
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(194,($81|0));
    $127 = __THREW__; __THREW__ = 0;
    $128 = $127&1;
    if ($128) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    } else {
     $129 = $21;
     $130 = $22;
     $eh$lpad$body$i$index2Z2D = $130;$eh$lpad$body$i$indexZ2D = $129;
     break;
    }
   }
  } while(0);
  $33 = $eh$lpad$body$i$indexZ2D;
  $34 = $eh$lpad$body$i$index2Z2D;
  __THREW__ = 0;
  $137 = __THREW__; __THREW__ = 0;
  $138 = $137&1;
  if ($138) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
 }
 $139 = ((($43)) + 56|0);
 __THREW__ = 0;
 invoke_vi(210,($139|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if ($141) {
  $144 = ___cxa_find_matching_catch(0|0)|0;
  $145 = tempRet0;
  ___clang_call_terminate($144);
  // unreachable;
 } else {
  $142 = $33;
  $143 = $34;
  ___resumeException($142|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh2IO6binaryINSt3__16vectorINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEE7restoreERNS2_13basic_istreamIcNS2_11char_traitsIcEEEERSI_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0;
 var $__i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp + 212|0;
 $msg = sp + 24|0;
 $40 = sp;
 $41 = sp + 320|0;
 $35 = $0;
 $36 = $1;
 $42 = $2&1;
 $37 = $42;
 $31 = $msg;
 $32 = 16;
 $43 = $31;
 $44 = ((($43)) + 56|0);
 $30 = $44;
 $45 = $30;
 $29 = $45;
 $46 = $29;
 $47 = 6536;
 HEAP32[$46>>2] = $47;
 $48 = 6212;
 HEAP32[$45>>2] = $48;
 $49 = 3456;
 HEAP32[$43>>2] = $49;
 $50 = ((($43)) + 56|0);
 $51 = 3476;
 HEAP32[$50>>2] = $51;
 $52 = ((($43)) + 4|0);
 $26 = $43;
 $53 = 3488;
 $27 = $53;
 $28 = $52;
 $54 = $26;
 $55 = $27;
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = ((($55)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$54>>2]|0;
 $60 = ((($59)) + -12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($54) + ($61)|0);
 HEAP32[$62>>2] = $58;
 $63 = HEAP32[$54>>2]|0;
 $64 = ((($63)) + -12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($54) + ($65)|0);
 $67 = $28;
 $24 = $66;
 $25 = $67;
 $68 = $24;
 $69 = $25;
 __THREW__ = 0;
 invoke_vii(490,($68|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $133 = ___cxa_find_matching_catch()|0;
  $134 = tempRet0;
  $33 = $133;
  $34 = $134;
 } else {
  $72 = ((($68)) + 72|0);
  HEAP32[$72>>2] = 0;
  $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $74 = ((($68)) + 76|0);
  HEAP32[$74>>2] = $73;
  $75 = 3456;
  HEAP32[$43>>2] = $75;
  $76 = ((($43)) + 56|0);
  $77 = 3476;
  HEAP32[$76>>2] = $77;
  $78 = ((($43)) + 4|0);
  $79 = $32;
  $80 = $79 | 16;
  $19 = $78;
  $20 = $80;
  $81 = $19;
  __THREW__ = 0;
  invoke_vi(500,($81|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  do {
   if ($83) {
    $135 = ___cxa_find_matching_catch()|0;
    $136 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $136;$eh$lpad$body$i$indexZ2D = $135;
   } else {
    $84 = 3016;
    HEAP32[$81>>2] = $84;
    $85 = ((($81)) + 32|0);
    $18 = $85;
    $86 = $18;
    $17 = $86;
    $87 = $17;
    $16 = $87;
    $88 = $16;
    $15 = $88;
    $14 = $86;
    $89 = $14;
    $13 = $89;
    $90 = $13;
    $12 = $90;
    $91 = $12;
    $__a$i$i$i$i = $91;
    $__i$i$i$i$i = 0;
    while(1) {
     $92 = $__i$i$i$i$i;
     $93 = ($92>>>0)<(3);
     if (!($93)) {
      break;
     }
     $94 = $__i$i$i$i$i;
     $95 = $__a$i$i$i$i;
     $96 = (($95) + ($94<<2)|0);
     HEAP32[$96>>2] = 0;
     $97 = $__i$i$i$i$i;
     $98 = (($97) + 1)|0;
     $__i$i$i$i$i = $98;
    }
    $99 = ((($81)) + 44|0);
    HEAP32[$99>>2] = 0;
    $100 = ((($81)) + 48|0);
    $101 = $20;
    HEAP32[$100>>2] = $101;
    $11 = $23;
    $102 = $11;
    $10 = $102;
    $103 = $10;
    $9 = $103;
    $104 = $9;
    $8 = $104;
    $7 = $102;
    $105 = $7;
    $6 = $105;
    $106 = $6;
    $5 = $106;
    $107 = $5;
    $__a$i$i1$i$i = $107;
    $__i$i$i2$i$i = 0;
    while(1) {
     $108 = $__i$i$i2$i$i;
     $109 = ($108>>>0)<(3);
     if (!($109)) {
      break;
     }
     $110 = $__i$i$i2$i$i;
     $111 = $__a$i$i1$i$i;
     $112 = (($111) + ($110<<2)|0);
     HEAP32[$112>>2] = 0;
     $113 = $__i$i$i2$i$i;
     $114 = (($113) + 1)|0;
     $__i$i$i2$i$i = $114;
    }
    __THREW__ = 0;
    invoke_vii(501,($81|0),($23|0));
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    do {
     if ($116) {
      $121 = ___cxa_find_matching_catch()|0;
      $122 = tempRet0;
      $21 = $121;
      $22 = $122;
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $131 = ___cxa_find_matching_catch(0|0)|0;
       $132 = tempRet0;
       ___clang_call_terminate($131);
       // unreachable;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       $119 = ___cxa_find_matching_catch()|0;
       $120 = tempRet0;
       $21 = $119;
       $22 = $120;
       break;
      }
      __THREW__ = 0;
      $146 = (invoke_iii(484,($msg|0),(13513|0))|0);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      if ($148) {
       label = 28;
      } else {
       $4 = 504;
       $149 = $4;
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       (invoke_iii(484,($146|0),($151|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
       } else {
        $154 = (___cxa_allocate_exception(8)|0);
        $$expand_i1_val = 1;
        HEAP8[$41>>0] = $$expand_i1_val;
        $3 = $msg;
        $155 = $3;
        $156 = ((($155)) + 4|0);
        __THREW__ = 0;
        invoke_vii(618,($40|0),($156|0));
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         $164 = ___cxa_find_matching_catch()|0;
         $165 = tempRet0;
         $38 = $164;
         $39 = $165;
        } else {
         __THREW__ = 0;
         invoke_vii(619,($154|0),($40|0));
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if (!($160)) {
          $$expand_i1_val7 = 0;
          HEAP8[$41>>0] = $$expand_i1_val7;
          __THREW__ = 0;
          invoke_viii(620,($154|0),(632|0),(146|0));
          $161 = __THREW__; __THREW__ = 0;
         }
         $166 = ___cxa_find_matching_catch()|0;
         $167 = tempRet0;
         $38 = $166;
         $39 = $167;
         __THREW__ = 0;
         invoke_vi(502,($40|0));
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          $175 = ___cxa_find_matching_catch(0|0)|0;
          $176 = tempRet0;
          ___clang_call_terminate($175);
          // unreachable;
         }
        }
        $$pre_trunc = HEAP8[$41>>0]|0;
        $170 = $$pre_trunc&1;
        if ($170) {
         ___cxa_free_exception(($154|0));
        }
       }
      }
      if ((label|0) == 28) {
       $162 = ___cxa_find_matching_catch()|0;
       $163 = tempRet0;
       $38 = $162;
       $39 = $163;
      }
      __THREW__ = 0;
      invoke_vi(70,($msg|0));
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       $175 = ___cxa_find_matching_catch(0|0)|0;
       $176 = tempRet0;
       ___clang_call_terminate($175);
       // unreachable;
      } else {
       $173 = $38;
       $174 = $39;
       ___resumeException($173|0);
       // unreachable;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(502,($85|0));
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(194,($81|0));
    $127 = __THREW__; __THREW__ = 0;
    $128 = $127&1;
    if ($128) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    } else {
     $129 = $21;
     $130 = $22;
     $eh$lpad$body$i$index2Z2D = $130;$eh$lpad$body$i$indexZ2D = $129;
     break;
    }
   }
  } while(0);
  $33 = $eh$lpad$body$i$indexZ2D;
  $34 = $eh$lpad$body$i$index2Z2D;
  __THREW__ = 0;
  $137 = __THREW__; __THREW__ = 0;
  $138 = $137&1;
  if ($138) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
 }
 $139 = ((($43)) + 56|0);
 __THREW__ = 0;
 invoke_vi(210,($139|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if ($141) {
  $144 = ___cxa_find_matching_catch(0|0)|0;
  $145 = tempRet0;
  ___clang_call_terminate($144);
  // unreachable;
 } else {
  $142 = $33;
  $143 = $34;
  ___resumeException($142|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh2IO5storeINSt3__16vectorINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEEEjRNS2_13basic_ostreamIcNS2_11char_traitsIcEEEERKT_b($_os,$_v,$_swap) {
 $_os = $_os|0;
 $_v = $_v|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_os;
 $1 = $_v;
 $3 = $_swap&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 $8 = (__ZN8OpenMesh2IO6binaryINSt3__16vectorINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEE5storeERNS2_13basic_ostreamIcNS2_11char_traitsIcEEEERKSI_b($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN8OpenMesh2IO5storeINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRNSt3__113basic_ostreamIcNSE_11char_traitsIcEEEERKT_b($_os,$_v,$_swap) {
 $_os = $_os|0;
 $_v = $_v|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_os;
 $1 = $_v;
 $3 = $_swap&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 $8 = (__ZN8OpenMesh2IO6binaryINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE5storeERNSt3__113basic_ostreamIcNSF_11char_traitsIcEEEERKSD_b($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN8OpenMesh2IO6binaryINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE5storeERNSt3__113basic_ostreamIcNSF_11char_traitsIcEEEERKSD_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0;
 var $__i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp + 212|0;
 $msg = sp + 24|0;
 $40 = sp;
 $41 = sp + 320|0;
 $35 = $0;
 $36 = $1;
 $42 = $2&1;
 $37 = $42;
 $31 = $msg;
 $32 = 16;
 $43 = $31;
 $44 = ((($43)) + 56|0);
 $30 = $44;
 $45 = $30;
 $29 = $45;
 $46 = $29;
 $47 = 6536;
 HEAP32[$46>>2] = $47;
 $48 = 6212;
 HEAP32[$45>>2] = $48;
 $49 = 3456;
 HEAP32[$43>>2] = $49;
 $50 = ((($43)) + 56|0);
 $51 = 3476;
 HEAP32[$50>>2] = $51;
 $52 = ((($43)) + 4|0);
 $26 = $43;
 $53 = 3488;
 $27 = $53;
 $28 = $52;
 $54 = $26;
 $55 = $27;
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = ((($55)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$54>>2]|0;
 $60 = ((($59)) + -12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($54) + ($61)|0);
 HEAP32[$62>>2] = $58;
 $63 = HEAP32[$54>>2]|0;
 $64 = ((($63)) + -12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($54) + ($65)|0);
 $67 = $28;
 $24 = $66;
 $25 = $67;
 $68 = $24;
 $69 = $25;
 __THREW__ = 0;
 invoke_vii(490,($68|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $133 = ___cxa_find_matching_catch()|0;
  $134 = tempRet0;
  $33 = $133;
  $34 = $134;
 } else {
  $72 = ((($68)) + 72|0);
  HEAP32[$72>>2] = 0;
  $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $74 = ((($68)) + 76|0);
  HEAP32[$74>>2] = $73;
  $75 = 3456;
  HEAP32[$43>>2] = $75;
  $76 = ((($43)) + 56|0);
  $77 = 3476;
  HEAP32[$76>>2] = $77;
  $78 = ((($43)) + 4|0);
  $79 = $32;
  $80 = $79 | 16;
  $19 = $78;
  $20 = $80;
  $81 = $19;
  __THREW__ = 0;
  invoke_vi(500,($81|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  do {
   if ($83) {
    $135 = ___cxa_find_matching_catch()|0;
    $136 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $136;$eh$lpad$body$i$indexZ2D = $135;
   } else {
    $84 = 3016;
    HEAP32[$81>>2] = $84;
    $85 = ((($81)) + 32|0);
    $18 = $85;
    $86 = $18;
    $17 = $86;
    $87 = $17;
    $16 = $87;
    $88 = $16;
    $15 = $88;
    $14 = $86;
    $89 = $14;
    $13 = $89;
    $90 = $13;
    $12 = $90;
    $91 = $12;
    $__a$i$i$i$i = $91;
    $__i$i$i$i$i = 0;
    while(1) {
     $92 = $__i$i$i$i$i;
     $93 = ($92>>>0)<(3);
     if (!($93)) {
      break;
     }
     $94 = $__i$i$i$i$i;
     $95 = $__a$i$i$i$i;
     $96 = (($95) + ($94<<2)|0);
     HEAP32[$96>>2] = 0;
     $97 = $__i$i$i$i$i;
     $98 = (($97) + 1)|0;
     $__i$i$i$i$i = $98;
    }
    $99 = ((($81)) + 44|0);
    HEAP32[$99>>2] = 0;
    $100 = ((($81)) + 48|0);
    $101 = $20;
    HEAP32[$100>>2] = $101;
    $11 = $23;
    $102 = $11;
    $10 = $102;
    $103 = $10;
    $9 = $103;
    $104 = $9;
    $8 = $104;
    $7 = $102;
    $105 = $7;
    $6 = $105;
    $106 = $6;
    $5 = $106;
    $107 = $5;
    $__a$i$i1$i$i = $107;
    $__i$i$i2$i$i = 0;
    while(1) {
     $108 = $__i$i$i2$i$i;
     $109 = ($108>>>0)<(3);
     if (!($109)) {
      break;
     }
     $110 = $__i$i$i2$i$i;
     $111 = $__a$i$i1$i$i;
     $112 = (($111) + ($110<<2)|0);
     HEAP32[$112>>2] = 0;
     $113 = $__i$i$i2$i$i;
     $114 = (($113) + 1)|0;
     $__i$i$i2$i$i = $114;
    }
    __THREW__ = 0;
    invoke_vii(501,($81|0),($23|0));
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    do {
     if ($116) {
      $121 = ___cxa_find_matching_catch()|0;
      $122 = tempRet0;
      $21 = $121;
      $22 = $122;
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $131 = ___cxa_find_matching_catch(0|0)|0;
       $132 = tempRet0;
       ___clang_call_terminate($131);
       // unreachable;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       $119 = ___cxa_find_matching_catch()|0;
       $120 = tempRet0;
       $21 = $119;
       $22 = $120;
       break;
      }
      __THREW__ = 0;
      $146 = (invoke_iii(484,($msg|0),(13513|0))|0);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      if ($148) {
       label = 28;
      } else {
       $4 = 488;
       $149 = $4;
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       (invoke_iii(484,($146|0),($151|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
       } else {
        $154 = (___cxa_allocate_exception(8)|0);
        $$expand_i1_val = 1;
        HEAP8[$41>>0] = $$expand_i1_val;
        $3 = $msg;
        $155 = $3;
        $156 = ((($155)) + 4|0);
        __THREW__ = 0;
        invoke_vii(618,($40|0),($156|0));
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         $164 = ___cxa_find_matching_catch()|0;
         $165 = tempRet0;
         $38 = $164;
         $39 = $165;
        } else {
         __THREW__ = 0;
         invoke_vii(619,($154|0),($40|0));
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if (!($160)) {
          $$expand_i1_val7 = 0;
          HEAP8[$41>>0] = $$expand_i1_val7;
          __THREW__ = 0;
          invoke_viii(620,($154|0),(632|0),(146|0));
          $161 = __THREW__; __THREW__ = 0;
         }
         $166 = ___cxa_find_matching_catch()|0;
         $167 = tempRet0;
         $38 = $166;
         $39 = $167;
         __THREW__ = 0;
         invoke_vi(502,($40|0));
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          $175 = ___cxa_find_matching_catch(0|0)|0;
          $176 = tempRet0;
          ___clang_call_terminate($175);
          // unreachable;
         }
        }
        $$pre_trunc = HEAP8[$41>>0]|0;
        $170 = $$pre_trunc&1;
        if ($170) {
         ___cxa_free_exception(($154|0));
        }
       }
      }
      if ((label|0) == 28) {
       $162 = ___cxa_find_matching_catch()|0;
       $163 = tempRet0;
       $38 = $162;
       $39 = $163;
      }
      __THREW__ = 0;
      invoke_vi(70,($msg|0));
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       $175 = ___cxa_find_matching_catch(0|0)|0;
       $176 = tempRet0;
       ___clang_call_terminate($175);
       // unreachable;
      } else {
       $173 = $38;
       $174 = $39;
       ___resumeException($173|0);
       // unreachable;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(502,($85|0));
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(194,($81|0));
    $127 = __THREW__; __THREW__ = 0;
    $128 = $127&1;
    if ($128) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    } else {
     $129 = $21;
     $130 = $22;
     $eh$lpad$body$i$index2Z2D = $130;$eh$lpad$body$i$indexZ2D = $129;
     break;
    }
   }
  } while(0);
  $33 = $eh$lpad$body$i$indexZ2D;
  $34 = $eh$lpad$body$i$index2Z2D;
  __THREW__ = 0;
  $137 = __THREW__; __THREW__ = 0;
  $138 = $137&1;
  if ($138) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
 }
 $139 = ((($43)) + 56|0);
 __THREW__ = 0;
 invoke_vi(210,($139|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if ($141) {
  $144 = ___cxa_find_matching_catch(0|0)|0;
  $145 = tempRet0;
  ___clang_call_terminate($144);
  // unreachable;
 } else {
  $142 = $33;
  $143 = $34;
  ___resumeException($142|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh2IO6binaryINSt3__16vectorINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS7_7Vector3IdEEEELb0EE7ITraitsENSC_4RefsEEENS2_9allocatorISF_EEEEE5storeERNS2_13basic_ostreamIcNS2_11char_traitsIcEEEERKSI_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0;
 var $__i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp + 212|0;
 $msg = sp + 24|0;
 $40 = sp;
 $41 = sp + 320|0;
 $35 = $0;
 $36 = $1;
 $42 = $2&1;
 $37 = $42;
 $31 = $msg;
 $32 = 16;
 $43 = $31;
 $44 = ((($43)) + 56|0);
 $30 = $44;
 $45 = $30;
 $29 = $45;
 $46 = $29;
 $47 = 6536;
 HEAP32[$46>>2] = $47;
 $48 = 6212;
 HEAP32[$45>>2] = $48;
 $49 = 3456;
 HEAP32[$43>>2] = $49;
 $50 = ((($43)) + 56|0);
 $51 = 3476;
 HEAP32[$50>>2] = $51;
 $52 = ((($43)) + 4|0);
 $26 = $43;
 $53 = 3488;
 $27 = $53;
 $28 = $52;
 $54 = $26;
 $55 = $27;
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = ((($55)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$54>>2]|0;
 $60 = ((($59)) + -12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($54) + ($61)|0);
 HEAP32[$62>>2] = $58;
 $63 = HEAP32[$54>>2]|0;
 $64 = ((($63)) + -12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($54) + ($65)|0);
 $67 = $28;
 $24 = $66;
 $25 = $67;
 $68 = $24;
 $69 = $25;
 __THREW__ = 0;
 invoke_vii(490,($68|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $133 = ___cxa_find_matching_catch()|0;
  $134 = tempRet0;
  $33 = $133;
  $34 = $134;
 } else {
  $72 = ((($68)) + 72|0);
  HEAP32[$72>>2] = 0;
  $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $74 = ((($68)) + 76|0);
  HEAP32[$74>>2] = $73;
  $75 = 3456;
  HEAP32[$43>>2] = $75;
  $76 = ((($43)) + 56|0);
  $77 = 3476;
  HEAP32[$76>>2] = $77;
  $78 = ((($43)) + 4|0);
  $79 = $32;
  $80 = $79 | 16;
  $19 = $78;
  $20 = $80;
  $81 = $19;
  __THREW__ = 0;
  invoke_vi(500,($81|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  do {
   if ($83) {
    $135 = ___cxa_find_matching_catch()|0;
    $136 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $136;$eh$lpad$body$i$indexZ2D = $135;
   } else {
    $84 = 3016;
    HEAP32[$81>>2] = $84;
    $85 = ((($81)) + 32|0);
    $18 = $85;
    $86 = $18;
    $17 = $86;
    $87 = $17;
    $16 = $87;
    $88 = $16;
    $15 = $88;
    $14 = $86;
    $89 = $14;
    $13 = $89;
    $90 = $13;
    $12 = $90;
    $91 = $12;
    $__a$i$i$i$i = $91;
    $__i$i$i$i$i = 0;
    while(1) {
     $92 = $__i$i$i$i$i;
     $93 = ($92>>>0)<(3);
     if (!($93)) {
      break;
     }
     $94 = $__i$i$i$i$i;
     $95 = $__a$i$i$i$i;
     $96 = (($95) + ($94<<2)|0);
     HEAP32[$96>>2] = 0;
     $97 = $__i$i$i$i$i;
     $98 = (($97) + 1)|0;
     $__i$i$i$i$i = $98;
    }
    $99 = ((($81)) + 44|0);
    HEAP32[$99>>2] = 0;
    $100 = ((($81)) + 48|0);
    $101 = $20;
    HEAP32[$100>>2] = $101;
    $11 = $23;
    $102 = $11;
    $10 = $102;
    $103 = $10;
    $9 = $103;
    $104 = $9;
    $8 = $104;
    $7 = $102;
    $105 = $7;
    $6 = $105;
    $106 = $6;
    $5 = $106;
    $107 = $5;
    $__a$i$i1$i$i = $107;
    $__i$i$i2$i$i = 0;
    while(1) {
     $108 = $__i$i$i2$i$i;
     $109 = ($108>>>0)<(3);
     if (!($109)) {
      break;
     }
     $110 = $__i$i$i2$i$i;
     $111 = $__a$i$i1$i$i;
     $112 = (($111) + ($110<<2)|0);
     HEAP32[$112>>2] = 0;
     $113 = $__i$i$i2$i$i;
     $114 = (($113) + 1)|0;
     $__i$i$i2$i$i = $114;
    }
    __THREW__ = 0;
    invoke_vii(501,($81|0),($23|0));
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    do {
     if ($116) {
      $121 = ___cxa_find_matching_catch()|0;
      $122 = tempRet0;
      $21 = $121;
      $22 = $122;
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $131 = ___cxa_find_matching_catch(0|0)|0;
       $132 = tempRet0;
       ___clang_call_terminate($131);
       // unreachable;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       $119 = ___cxa_find_matching_catch()|0;
       $120 = tempRet0;
       $21 = $119;
       $22 = $120;
       break;
      }
      __THREW__ = 0;
      $146 = (invoke_iii(484,($msg|0),(13513|0))|0);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      if ($148) {
       label = 28;
      } else {
       $4 = 504;
       $149 = $4;
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       (invoke_iii(484,($146|0),($151|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
       } else {
        $154 = (___cxa_allocate_exception(8)|0);
        $$expand_i1_val = 1;
        HEAP8[$41>>0] = $$expand_i1_val;
        $3 = $msg;
        $155 = $3;
        $156 = ((($155)) + 4|0);
        __THREW__ = 0;
        invoke_vii(618,($40|0),($156|0));
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         $164 = ___cxa_find_matching_catch()|0;
         $165 = tempRet0;
         $38 = $164;
         $39 = $165;
        } else {
         __THREW__ = 0;
         invoke_vii(619,($154|0),($40|0));
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if (!($160)) {
          $$expand_i1_val7 = 0;
          HEAP8[$41>>0] = $$expand_i1_val7;
          __THREW__ = 0;
          invoke_viii(620,($154|0),(632|0),(146|0));
          $161 = __THREW__; __THREW__ = 0;
         }
         $166 = ___cxa_find_matching_catch()|0;
         $167 = tempRet0;
         $38 = $166;
         $39 = $167;
         __THREW__ = 0;
         invoke_vi(502,($40|0));
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          $175 = ___cxa_find_matching_catch(0|0)|0;
          $176 = tempRet0;
          ___clang_call_terminate($175);
          // unreachable;
         }
        }
        $$pre_trunc = HEAP8[$41>>0]|0;
        $170 = $$pre_trunc&1;
        if ($170) {
         ___cxa_free_exception(($154|0));
        }
       }
      }
      if ((label|0) == 28) {
       $162 = ___cxa_find_matching_catch()|0;
       $163 = tempRet0;
       $38 = $162;
       $39 = $163;
      }
      __THREW__ = 0;
      invoke_vi(70,($msg|0));
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       $175 = ___cxa_find_matching_catch(0|0)|0;
       $176 = tempRet0;
       ___clang_call_terminate($175);
       // unreachable;
      } else {
       $173 = $38;
       $174 = $39;
       ___resumeException($173|0);
       // unreachable;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(502,($85|0));
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(194,($81|0));
    $127 = __THREW__; __THREW__ = 0;
    $128 = $127&1;
    if ($128) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    } else {
     $129 = $21;
     $130 = $22;
     $eh$lpad$body$i$index2Z2D = $130;$eh$lpad$body$i$indexZ2D = $129;
     break;
    }
   }
  } while(0);
  $33 = $eh$lpad$body$i$indexZ2D;
  $34 = $eh$lpad$body$i$index2Z2D;
  __THREW__ = 0;
  $137 = __THREW__; __THREW__ = 0;
  $138 = $137&1;
  if ($138) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
 }
 $139 = ((($43)) + 56|0);
 __THREW__ = 0;
 invoke_vi(210,($139|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if ($141) {
  $144 = ___cxa_find_matching_catch(0|0)|0;
  $145 = tempRet0;
  ___clang_call_terminate($144);
  // unreachable;
 } else {
  $142 = $33;
  $143 = $34;
  ___resumeException($142|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4plusclEjRKSC_($this,$_b,$_v) {
 $this = $this|0;
 $_b = $_b|0;
 $_v = $_v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_b;
 $2 = $_v;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN8OpenMesh2IO7size_ofINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRKT_($4)|0);
 $6 = (($3) + ($5))|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN8OpenMesh2IO7size_ofINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjRKT_($_v) {
 $_v = $_v|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_v;
 $1 = $0;
 $2 = (__ZN8OpenMesh2IO6binaryINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7size_ofERKSD_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN8OpenMesh2IO6binaryINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7size_ofERKSD_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return -1;
}
function __ZN8OpenMesh2IO7size_ofINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEjv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8OpenMesh2IO6binaryINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7size_ofEv()|0);
 return ($0|0);
}
function __ZN8OpenMesh2IO6binaryINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEE7size_ofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZN8OpenMesh12BaseProperty24check_and_set_persistentINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEvb($this,$_yn) {
 $this = $this|0;
 $_yn = $_yn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $_yn&1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4&1;
 if ($5) {
  $6 = (__ZN8OpenMesh2IO13is_streamableINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEbv()|0);
  if (!($6)) {
   $7 = (__Z5omerrv()|0);
   (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($7,14170)|0);
  }
 }
 $8 = (__ZN8OpenMesh2IO13is_streamableINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEbv()|0);
 $9 = $1;
 $10 = $9&1;
 $11 = $8 ? $10 : 0;
 $12 = ((($3)) + 16|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh2IO13is_streamableINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEbv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKSD_($this,$_rhs) {
 $this = $this|0;
 $_rhs = $_rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_rhs;
 $4 = $0;
 $5 = $1;
 __ZN8OpenMesh12BasePropertyC2ERKS0_($4,$5);
 $6 = 3700;
 HEAP32[$4>>2] = $6;
 $7 = ((($4)) + 20|0);
 $8 = $1;
 $9 = ((($8)) + 20|0);
 __THREW__ = 0;
 invoke_vii(658,($7|0),($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = ___cxa_find_matching_catch()|0;
 $13 = tempRet0;
 $2 = $12;
 $3 = $13;
 __THREW__ = 0;
 invoke_vi(614,($4|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $18 = ___cxa_find_matching_catch(0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 } else {
  $16 = $2;
  $17 = $3;
  ___resumeException($16|0);
  // unreachable;
 }
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEEC2ERKSG_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 152|0;
 $7 = sp + 136|0;
 $11 = sp + 120|0;
 $17 = sp + 96|0;
 $18 = sp + 16|0;
 $21 = sp + 84|0;
 $22 = sp + 171|0;
 $23 = sp + 8|0;
 $27 = sp + 68|0;
 $28 = sp + 64|0;
 $29 = sp + 60|0;
 $30 = sp + 170|0;
 $32 = sp;
 $34 = sp + 169|0;
 $40 = sp + 168|0;
 $38 = $this;
 $39 = $__x;
 $43 = $38;
 $44 = $39;
 $37 = $44;
 $45 = $37;
 $46 = ((($45)) + 8|0);
 $36 = $46;
 $47 = $36;
 $35 = $47;
 $48 = $35;
 $33 = $48;
 $49 = $33;
 ;HEAP8[$32>>0]=HEAP8[$34>>0]|0;
 $31 = $49;
 $25 = $43;
 $26 = $40;
 $50 = $25;
 $24 = $50;
 $1 = $3;
 $2 = -1;
 $51 = $1;
 HEAP32[$51>>2] = 0;
 $52 = HEAP32[$3>>2]|0;
 HEAP32[$27>>2] = $52;
 $4 = $27;
 HEAP32[$50>>2] = 0;
 $53 = ((($50)) + 4|0);
 $5 = $7;
 $6 = -1;
 $54 = $5;
 HEAP32[$54>>2] = 0;
 $55 = HEAP32[$7>>2]|0;
 HEAP32[$28>>2] = $55;
 $8 = $28;
 HEAP32[$53>>2] = 0;
 $56 = ((($50)) + 8|0);
 $9 = $11;
 $10 = -1;
 $57 = $9;
 HEAP32[$57>>2] = 0;
 $58 = HEAP32[$11>>2]|0;
 HEAP32[$29>>2] = $58;
 $12 = $29;
 ;HEAP8[$23>>0]=HEAP8[$30>>0]|0;
 $20 = $56;
 HEAP32[$21>>2] = 0;
 $59 = $20;
 $19 = $21;
 $60 = $19;
 $61 = HEAP32[$60>>2]|0;
 $13 = $23;
 ;HEAP8[$18>>0]=HEAP8[$22>>0]|0;
 $16 = $59;
 HEAP32[$17>>2] = $61;
 $62 = $16;
 $15 = $18;
 $14 = $17;
 $63 = $14;
 $64 = HEAP32[$63>>2]|0;
 HEAP32[$62>>2] = $64;
 $65 = $39;
 $0 = $65;
 $66 = $0;
 $67 = ((($66)) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$66>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $__n = $72;
 $73 = $__n;
 $74 = ($73>>>0)>(0);
 if (!($74)) {
  STACKTOP = sp;return;
 }
 $75 = $__n;
 __THREW__ = 0;
 invoke_vii(659,($43|0),($75|0));
 $76 = __THREW__; __THREW__ = 0;
 $77 = $76&1;
 if (!($77)) {
  $78 = $39;
  $79 = HEAP32[$78>>2]|0;
  $80 = $39;
  $81 = ((($80)) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  __THREW__ = 0;
  invoke_viii(660,($43|0),($79|0),($82|0));
  $83 = __THREW__; __THREW__ = 0;
  $84 = $83&1;
  if (!($84)) {
   STACKTOP = sp;return;
  }
 }
 $85 = ___cxa_find_matching_catch()|0;
 $86 = tempRet0;
 $41 = $85;
 $42 = $86;
 __THREW__ = 0;
 invoke_vi(661,($43|0));
 $87 = __THREW__; __THREW__ = 0;
 $88 = $87&1;
 if ($88) {
  $91 = ___cxa_find_matching_catch(0|0)|0;
  $92 = tempRet0;
  ___clang_call_terminate($91);
  // unreachable;
 } else {
  $89 = $41;
  $90 = $42;
  ___resumeException($89|0);
  // unreachable;
 }
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
 }
 $11 = $14;
 $18 = $11;
 $19 = ((($18)) + 8|0);
 $10 = $19;
 $20 = $10;
 $9 = $20;
 $21 = $9;
 $22 = $13;
 $7 = $21;
 $8 = $22;
 $23 = $7;
 $24 = $8;
 $4 = $23;
 $5 = $24;
 $6 = 0;
 $25 = $5;
 $3 = $25;
 $26 = $3;
 $27 = (__Znwj($26)|0);
 $28 = ((($14)) + 4|0);
 HEAP32[$28>>2] = $27;
 HEAP32[$14>>2] = $27;
 $29 = HEAP32[$14>>2]|0;
 $30 = $13;
 $31 = (($29) + ($30)|0);
 $2 = $14;
 $32 = $2;
 $33 = ((($32)) + 8|0);
 $1 = $33;
 $34 = $1;
 $0 = $34;
 $35 = $0;
 HEAP32[$35>>2] = $31;
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE14__annotate_newEj($14,0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE18__construct_at_endIPSD_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESK_SK_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 44|0;
 $7 = $this;
 $8 = $__first;
 $9 = $__last;
 $10 = $7;
 $6 = $10;
 $11 = $6;
 $12 = ((($11)) + 8|0);
 $5 = $12;
 $13 = $5;
 $4 = $13;
 $14 = $4;
 $__a = $14;
 while(1) {
  $15 = $8;
  $16 = $9;
  $17 = ($15|0)!=($16|0);
  if (!($17)) {
   break;
  }
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotatorC2ERKSG_j($__annotator,$10,1);
  $18 = $__a;
  $19 = ((($10)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $3 = $20;
  $21 = $3;
  $22 = $8;
  $0 = $18;
  $1 = $21;
  $2 = $22;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $23 = ((($10)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 1|0);
  HEAP32[$23>>2] = $25;
  $26 = $8;
  $27 = ((($26)) + 1|0);
  $8 = $27;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 12|0;
 $32 = sp + 4|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = ((($40)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = ((($45)) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = ((($40)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -1|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = ((($55)) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = ((($61)) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $25 = $58;
 $26 = $59;
 $27 = $69;
 $70 = $25;
 $71 = $26;
 $72 = $27;
 $22 = $70;
 $23 = $71;
 $24 = $72;
 $73 = $23;
 $21 = $73;
 $74 = $21;
 __ZdlPv($74);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotatorC2ERKSG_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 77|0;
 $10 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $3 = $24;
 $25 = $3;
 ;HEAP8[$2>>0]=HEAP8[$4>>0]|0;
 $1 = $25;
 $26 = $1;
 $0 = $26;
 HEAP32[$18>>2] = -1;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $11 = $18;
 $12 = $19;
 $28 = $11;
 $29 = $12;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $8 = $28;
 $9 = $29;
 $30 = $9;
 $31 = $8;
 $5 = $10;
 $6 = $30;
 $7 = $31;
 $32 = $6;
 $33 = HEAP32[$32>>2]|0;
 $34 = $7;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $9;
 $38 = $8;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($26) + ($37)|0);
 $6 = $20;
 $39 = $6;
 $40 = HEAP32[$39>>2]|0;
 $5 = $40;
 $41 = $5;
 $11 = $20;
 $42 = $11;
 $10 = $42;
 $43 = $10;
 $9 = $43;
 $44 = $9;
 $45 = ((($44)) + 8|0);
 $8 = $45;
 $46 = $8;
 $7 = $46;
 $47 = $7;
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$43>>2]|0;
 $50 = $48;
 $51 = $49;
 $52 = (($50) - ($51))|0;
 $53 = (($41) + ($52)|0);
 $13 = $20;
 $54 = $13;
 $55 = HEAP32[$54>>2]|0;
 $12 = $55;
 $56 = $12;
 $57 = $19;
 $58 = (($56) + ($57)|0);
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE31__annotate_contiguous_containerEPKvSI_SI_SI_($20,$23,$38,$53,$58);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE31__annotate_contiguous_containerEPKvSI_SI_SI_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE21__push_back_slow_pathIKSD_EEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 72|0;
 $23 = sp + 60|0;
 $__v = sp + 12|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = ((($33)) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $44;
 $45 = $21;
 $46 = (__ZNKSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8max_sizeEv($45)|0);
 $__ms$i = $46;
 $47 = HEAP32[$22>>2]|0;
 $48 = $__ms$i;
 $49 = ($47>>>0)>($48>>>0);
 if ($49) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($45);
 }
 $19 = $45;
 $50 = $19;
 $18 = $50;
 $51 = $18;
 $17 = $51;
 $52 = $17;
 $53 = ((($52)) + 8|0);
 $16 = $53;
 $54 = $16;
 $15 = $54;
 $55 = $15;
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$51>>2]|0;
 $58 = $56;
 $59 = $57;
 $60 = (($58) - ($59))|0;
 $__cap$i = $60;
 $61 = $__cap$i;
 $62 = $__ms$i;
 $63 = (($62>>>0) / 2)&-1;
 $64 = ($61>>>0)>=($63>>>0);
 if ($64) {
  $65 = $__ms$i;
  $20 = $65;
 } else {
  $66 = $__cap$i;
  $67 = $66<<1;
  HEAP32[$23>>2] = $67;
  $12 = $23;
  $13 = $22;
  $68 = $12;
  $69 = $13;
  ;HEAP8[$11>>0]=HEAP8[$14>>0]|0;
  $9 = $68;
  $10 = $69;
  $70 = $9;
  $71 = $10;
  $6 = $11;
  $7 = $70;
  $8 = $71;
  $72 = $7;
  $73 = HEAP32[$72>>2]|0;
  $74 = $8;
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73>>>0)<($75>>>0);
  $77 = $10;
  $78 = $9;
  $79 = $76 ? $77 : $78;
  $80 = HEAP32[$79>>2]|0;
  $20 = $80;
 }
 $81 = $20;
 $5 = $32;
 $82 = $5;
 $83 = ((($82)) + 4|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$82>>2]|0;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = $__a;
 __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEEC2EjjSG_($__v,$81,$88,$89);
 $90 = $__a;
 $91 = ((($__v)) + 8|0);
 $92 = HEAP32[$91>>2]|0;
 $4 = $92;
 $93 = $4;
 $94 = $29;
 $3 = $94;
 $95 = $3;
 $0 = $90;
 $1 = $93;
 $2 = $95;
 $96 = ((($__v)) + 8|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ((($97)) + 1|0);
 HEAP32[$96>>2] = $98;
 __THREW__ = 0;
 invoke_vii(662,($32|0),($__v|0));
 $99 = __THREW__; __THREW__ = 0;
 $100 = $99&1;
 if (!($100)) {
  __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $101 = ___cxa_find_matching_catch()|0;
 $102 = tempRet0;
 $30 = $101;
 $31 = $102;
 __THREW__ = 0;
 invoke_vi(663,($__v|0));
 $103 = __THREW__; __THREW__ = 0;
 $104 = $103&1;
 if ($104) {
  $107 = ___cxa_find_matching_catch(0|0)|0;
  $108 = tempRet0;
  ___clang_call_terminate($107);
  // unreachable;
 } else {
  $105 = $30;
  $106 = $31;
  ___resumeException($105|0);
  // unreachable;
 }
}
function __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEEC2EjjSG_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 124|0;
 $8 = sp + 108|0;
 $22 = sp + 52|0;
 $29 = sp + 24|0;
 $34 = sp + 4|0;
 $35 = sp;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = ((($36)) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = ((($46)) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = ((($54)) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $14 = $63;
  $64 = $14;
  $65 = (__Znwj($64)|0);
  $68 = $65;
 } else {
  $20 = $22;
  $21 = -1;
  $66 = $20;
  HEAP32[$66>>2] = 0;
  $67 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $67;
  $23 = $35;
  $68 = 0;
 }
 HEAP32[$36>>2] = $68;
 $69 = HEAP32[$36>>2]|0;
 $70 = $32;
 $71 = (($69) + ($70)|0);
 $72 = ((($36)) + 8|0);
 HEAP32[$72>>2] = $71;
 $73 = ((($36)) + 4|0);
 HEAP32[$73>>2] = $71;
 $74 = HEAP32[$36>>2]|0;
 $75 = $31;
 $76 = (($74) + ($75)|0);
 $26 = $36;
 $77 = $26;
 $78 = ((($77)) + 12|0);
 $25 = $78;
 $79 = $25;
 $24 = $79;
 $80 = $24;
 HEAP32[$80>>2] = $76;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE26__swap_out_circular_bufferERNS_14__split_bufferISD_RSF_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $_Np$i = $46;
 $47 = $_Np$i;
 $48 = $25;
 $49 = HEAP32[$48>>2]|0;
 $50 = (0 - ($47))|0;
 $51 = (($49) + ($50)|0);
 HEAP32[$48>>2] = $51;
 $52 = $25;
 $53 = HEAP32[$52>>2]|0;
 $54 = $23;
 $55 = $_Np$i;
 _memcpy(($53|0),($54|0),($55|0))|0;
 $56 = $31;
 $57 = ((($56)) + 4|0);
 $3 = $32;
 $4 = $57;
 $58 = $3;
 $2 = $58;
 $59 = $2;
 $60 = HEAP32[$59>>2]|0;
 HEAP32[$__t$i2>>2] = $60;
 $61 = $4;
 $0 = $61;
 $62 = $0;
 $63 = HEAP32[$62>>2]|0;
 $64 = $3;
 HEAP32[$64>>2] = $63;
 $1 = $__t$i2;
 $65 = $1;
 $66 = HEAP32[$65>>2]|0;
 $67 = $4;
 HEAP32[$67>>2] = $66;
 $68 = ((($32)) + 4|0);
 $69 = $31;
 $70 = ((($69)) + 8|0);
 $8 = $68;
 $9 = $70;
 $71 = $8;
 $7 = $71;
 $72 = $7;
 $73 = HEAP32[$72>>2]|0;
 HEAP32[$__t$i1>>2] = $73;
 $74 = $9;
 $5 = $74;
 $75 = $5;
 $76 = HEAP32[$75>>2]|0;
 $77 = $8;
 HEAP32[$77>>2] = $76;
 $6 = $__t$i1;
 $78 = $6;
 $79 = HEAP32[$78>>2]|0;
 $80 = $9;
 HEAP32[$80>>2] = $79;
 $12 = $32;
 $81 = $12;
 $82 = ((($81)) + 8|0);
 $11 = $82;
 $83 = $11;
 $10 = $83;
 $84 = $10;
 $85 = $31;
 $15 = $85;
 $86 = $15;
 $87 = ((($86)) + 12|0);
 $14 = $87;
 $88 = $14;
 $13 = $88;
 $89 = $13;
 $19 = $84;
 $20 = $89;
 $90 = $19;
 $18 = $90;
 $91 = $18;
 $92 = HEAP32[$91>>2]|0;
 HEAP32[$__t$i>>2] = $92;
 $93 = $20;
 $16 = $93;
 $94 = $16;
 $95 = HEAP32[$94>>2]|0;
 $96 = $19;
 HEAP32[$96>>2] = $95;
 $17 = $__t$i;
 $97 = $17;
 $98 = HEAP32[$97>>2]|0;
 $99 = $20;
 HEAP32[$99>>2] = $98;
 $100 = $31;
 $101 = ((($100)) + 4|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = $31;
 HEAP32[$103>>2] = $102;
 $21 = $32;
 $104 = $21;
 $105 = ((($104)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = HEAP32[$104>>2]|0;
 $108 = $106;
 $109 = $107;
 $110 = (($108) - ($109))|0;
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE14__annotate_newEj($32,$110);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 8|0;
 $20 = sp + 125|0;
 $26 = sp;
 $29 = sp + 124|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26>>0]=HEAP8[$29>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = ((($38)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = ((($43)) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($38)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -1|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17>>0]=HEAP8[$20>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = ((($57)) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = ((($65)) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $11 = $62;
 $12 = $63;
 $13 = $73;
 $74 = $11;
 $75 = $12;
 $76 = $13;
 $8 = $74;
 $9 = $75;
 $10 = $76;
 $77 = $9;
 $7 = $77;
 $78 = $7;
 __ZdlPv($78);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($26) + ($37)|0);
 $6 = $20;
 $39 = $6;
 $40 = HEAP32[$39>>2]|0;
 $5 = $40;
 $41 = $5;
 $7 = $20;
 $42 = $7;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($41) + ($48)|0);
 $9 = $20;
 $50 = $9;
 $51 = HEAP32[$50>>2]|0;
 $8 = $51;
 $52 = $8;
 $14 = $20;
 $53 = $14;
 $13 = $53;
 $54 = $13;
 $12 = $54;
 $55 = $12;
 $56 = ((($55)) + 8|0);
 $11 = $56;
 $57 = $11;
 $10 = $57;
 $58 = $10;
 $59 = HEAP32[$58>>2]|0;
 $60 = HEAP32[$54>>2]|0;
 $61 = $59;
 $62 = $60;
 $63 = (($61) - ($62))|0;
 $64 = (($52) + ($63)|0);
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE31__annotate_contiguous_containerEPKvSI_SI_SI_($20,$23,$38,$49,$64);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($22) + ($33)|0);
 $6 = $16;
 $35 = $6;
 $36 = HEAP32[$35>>2]|0;
 $5 = $36;
 $37 = $5;
 $38 = $15;
 $39 = (($37) + ($38)|0);
 $8 = $16;
 $40 = $8;
 $41 = HEAP32[$40>>2]|0;
 $7 = $41;
 $42 = $7;
 $9 = $16;
 $43 = $9;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($42) + ($49)|0);
 __ZNKSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE31__annotate_contiguous_containerEPKvSI_SI_SI_($16,$19,$34,$39,$50);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE4swapERSG_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 124|0;
 $__t$i1 = sp + 76|0;
 $24 = sp;
 $27 = sp + 148|0;
 $__t$i = sp + 12|0;
 $33 = $this;
 $34 = $__x;
 $35 = $33;
 $36 = $34;
 $31 = $35;
 $32 = $36;
 $37 = $31;
 $30 = $37;
 $38 = $30;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$__t$i>>2] = $39;
 $40 = $32;
 $28 = $40;
 $41 = $28;
 $42 = HEAP32[$41>>2]|0;
 $43 = $31;
 HEAP32[$43>>2] = $42;
 $29 = $__t$i;
 $44 = $29;
 $45 = HEAP32[$44>>2]|0;
 $46 = $32;
 HEAP32[$46>>2] = $45;
 $47 = ((($35)) + 4|0);
 $48 = $34;
 $49 = ((($48)) + 4|0);
 $3 = $47;
 $4 = $49;
 $50 = $3;
 $2 = $50;
 $51 = $2;
 $52 = HEAP32[$51>>2]|0;
 HEAP32[$__t$i2>>2] = $52;
 $53 = $4;
 $0 = $53;
 $54 = $0;
 $55 = HEAP32[$54>>2]|0;
 $56 = $3;
 HEAP32[$56>>2] = $55;
 $1 = $__t$i2;
 $57 = $1;
 $58 = HEAP32[$57>>2]|0;
 $59 = $4;
 HEAP32[$59>>2] = $58;
 $7 = $35;
 $60 = $7;
 $61 = ((($60)) + 8|0);
 $6 = $61;
 $62 = $6;
 $5 = $62;
 $63 = $5;
 $64 = $34;
 $10 = $64;
 $65 = $10;
 $66 = ((($65)) + 8|0);
 $9 = $66;
 $67 = $9;
 $8 = $67;
 $68 = $8;
 $14 = $63;
 $15 = $68;
 $69 = $14;
 $13 = $69;
 $70 = $13;
 $71 = HEAP32[$70>>2]|0;
 HEAP32[$__t$i1>>2] = $71;
 $72 = $15;
 $11 = $72;
 $73 = $11;
 $74 = HEAP32[$73>>2]|0;
 $75 = $14;
 HEAP32[$75>>2] = $74;
 $12 = $__t$i1;
 $76 = $12;
 $77 = HEAP32[$76>>2]|0;
 $78 = $15;
 HEAP32[$78>>2] = $77;
 $18 = $35;
 $79 = $18;
 $80 = ((($79)) + 8|0);
 $17 = $80;
 $81 = $17;
 $16 = $81;
 $82 = $16;
 $83 = $34;
 $21 = $83;
 $84 = $21;
 $85 = ((($84)) + 8|0);
 $20 = $85;
 $86 = $20;
 $19 = $86;
 $87 = $19;
 $25 = $82;
 $26 = $87;
 $88 = $25;
 $89 = $26;
 ;HEAP8[$24>>0]=HEAP8[$27>>0]|0;
 $22 = $88;
 $23 = $89;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $__cs = $27;
 $28 = $__cs;
 $29 = $19;
 $30 = ($28>>>0)<($29>>>0);
 if ($30) {
  $31 = $19;
  $32 = $__cs;
  $33 = (($31) - ($32))|0;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8__appendEj($20,$33);
  STACKTOP = sp;return;
 }
 $34 = $__cs;
 $35 = $19;
 $36 = ($34>>>0)>($35>>>0);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = HEAP32[$20>>2]|0;
 $38 = $19;
 $39 = (($37) + ($38)|0);
 $13 = $20;
 $14 = $39;
 $40 = $13;
 $12 = $40;
 $41 = $12;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$41>>2]|0;
 $45 = $43;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $__old_size$i = $47;
 $48 = $14;
 $10 = $40;
 $11 = $48;
 $49 = $10;
 while(1) {
  $50 = $11;
  $51 = ((($49)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($50|0)!=($52|0);
  if (!($53)) {
   break;
  }
  $9 = $49;
  $54 = $9;
  $55 = ((($54)) + 8|0);
  $8 = $55;
  $56 = $8;
  $7 = $56;
  $57 = $7;
  $58 = ((($49)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ((($59)) + -1|0);
  HEAP32[$58>>2] = $60;
  $0 = $60;
  $61 = $0;
  $4 = $57;
  $5 = $61;
  $62 = $4;
  $63 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $62;
  $2 = $63;
 }
 $64 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(655,($40|0),($64|0));
 $65 = __THREW__; __THREW__ = 0;
 $66 = $65&1;
 if ($66) {
  $67 = ___cxa_find_matching_catch()|0;
  $68 = tempRet0;
  $15 = $67;
  $16 = $68;
  $69 = $15;
  ___cxa_call_unexpected(($69|0));
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 72|0;
 $__v = sp + 12|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = $27;
 $42 = ($40>>>0)>=($41>>>0);
 if ($42) {
  $43 = $27;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE18__construct_at_endEj($30,$43);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $44 = $22;
 $45 = ((($44)) + 8|0);
 $21 = $45;
 $46 = $21;
 $20 = $46;
 $47 = $20;
 $__a = $47;
 $19 = $30;
 $48 = $19;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = $27;
 $56 = (($54) + ($55))|0;
 $16 = $30;
 HEAP32[$17>>2] = $56;
 $57 = $16;
 $58 = (__ZNKSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$17>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
 }
 $14 = $57;
 $62 = $14;
 $13 = $62;
 $63 = $13;
 $12 = $63;
 $64 = $12;
 $65 = ((($64)) + 8|0);
 $11 = $65;
 $66 = $11;
 $10 = $66;
 $67 = $10;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $__cap$i = $72;
 $73 = $__cap$i;
 $74 = $__ms$i;
 $75 = (($74>>>0) / 2)&-1;
 $76 = ($73>>>0)>=($75>>>0);
 if ($76) {
  $77 = $__ms$i;
  $15 = $77;
 } else {
  $78 = $__cap$i;
  $79 = $78<<1;
  HEAP32[$18>>2] = $79;
  $7 = $18;
  $8 = $17;
  $80 = $7;
  $81 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $80;
  $5 = $81;
  $82 = $4;
  $83 = $5;
  $1 = $6;
  $2 = $82;
  $3 = $83;
  $84 = $2;
  $85 = HEAP32[$84>>2]|0;
  $86 = $3;
  $87 = HEAP32[$86>>2]|0;
  $88 = ($85>>>0)<($87>>>0);
  $89 = $5;
  $90 = $4;
  $91 = $88 ? $89 : $90;
  $92 = HEAP32[$91>>2]|0;
  $15 = $92;
 }
 $93 = $15;
 $0 = $30;
 $94 = $0;
 $95 = ((($94)) + 4|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = HEAP32[$94>>2]|0;
 $98 = $96;
 $99 = $97;
 $100 = (($98) - ($99))|0;
 $101 = $__a;
 __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEEC2EjjSG_($__v,$93,$100,$101);
 $102 = $27;
 __THREW__ = 0;
 invoke_vii(664,($__v|0),($102|0));
 $103 = __THREW__; __THREW__ = 0;
 $104 = $103&1;
 if (!($104)) {
  __THREW__ = 0;
  invoke_vii(662,($30|0),($__v|0));
  $105 = __THREW__; __THREW__ = 0;
  $106 = $105&1;
  if (!($106)) {
   __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEED2Ev($__v);
   STACKTOP = sp;return;
  }
 }
 $107 = ___cxa_find_matching_catch()|0;
 $108 = tempRet0;
 $28 = $107;
 $29 = $108;
 __THREW__ = 0;
 invoke_vi(663,($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $113 = ___cxa_find_matching_catch(0|0)|0;
  $114 = tempRet0;
  ___clang_call_terminate($113);
  // unreachable;
 } else {
  $111 = $28;
  $112 = $29;
  ___resumeException($111|0);
  // unreachable;
 }
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 36|0;
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = ((($9)) + 8|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $__a = $12;
 while(1) {
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotatorC2ERKSG_j($__annotator,$8,1);
  $13 = $__a;
  $14 = ((($8)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $2 = $15;
  $16 = $2;
  $0 = $13;
  $1 = $16;
  $17 = ((($8)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 1|0);
  HEAP32[$17>>2] = $19;
  $20 = $7;
  $21 = (($20) + -1)|0;
  $7 = $21;
  __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $22 = $7;
  $23 = ($22>>>0)>(0);
  if (!($23)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = ((($9)) + 12|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $__a = $14;
 while(1) {
  $15 = $__a;
  $16 = ((($8)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $0 = $17;
  $18 = $0;
  $1 = $15;
  $2 = $18;
  $19 = ((($8)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 1|0);
  HEAP32[$19>>2] = $21;
  $22 = $7;
  $23 = (($22) + -1)|0;
  $7 = $23;
  $24 = $7;
  $25 = ($24>>>0)>(0);
  if (!($25)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp + 8|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $14 = $10;
 $8 = $13;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = ((($17)) + 8|0);
 $5 = $18;
 $19 = $5;
 $4 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$16>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = ($14>>>0)>($25>>>0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $3 = $13;
 $27 = $3;
 $28 = ((($27)) + 8|0);
 $2 = $28;
 $29 = $2;
 $1 = $29;
 $30 = $1;
 $__a = $30;
 $31 = $10;
 $0 = $13;
 $32 = $0;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$32>>2]|0;
 $36 = $34;
 $37 = $35;
 $38 = (($36) - ($37))|0;
 $39 = $__a;
 __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEEC2EjjSG_($__v,$31,$38,$39);
 __THREW__ = 0;
 invoke_vii(662,($13|0),($__v|0));
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 if (!($41)) {
  __ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $42 = ___cxa_find_matching_catch()|0;
 $43 = tempRet0;
 $11 = $42;
 $12 = $43;
 __THREW__ = 0;
 invoke_vi(663,($__v|0));
 $44 = __THREW__; __THREW__ = 0;
 $45 = $44&1;
 if ($45) {
  $48 = ___cxa_find_matching_catch(0|0)|0;
  $49 = tempRet0;
  ___clang_call_terminate($48);
  // unreachable;
 } else {
  $46 = $11;
  $47 = $12;
  ___resumeException($46|0);
  // unreachable;
 }
}
function __ZN4DGPC7Vector3IdEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 HEAPF64[$2>>3] = 1.7976931348623157E+308;
 $3 = ((($1)) + 8|0);
 HEAPF64[$3>>3] = 1.7976931348623157E+308;
 HEAPF64[$1>>3] = 1.7976931348623157E+308;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh17PropertyContainer3addIN4DGPC7Vector3IdEEEENS_15BasePropHandleTIT_EERKS6_RKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEE($this,$0,$_name) {
 $this = $this|0;
 $0 = $0|0;
 $_name = $_name|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $idx = 0, $p_end = 0, $p_it = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator$i = sp + 200|0;
 $29 = sp + 84|0;
 $32 = sp + 72|0;
 $36 = sp + 56|0;
 $39 = sp + 44|0;
 $41 = sp + 36|0;
 $p_it = sp + 20|0;
 $p_end = sp + 16|0;
 $45 = sp + 8|0;
 $42 = $this;
 $43 = $0;
 $44 = $_name;
 $48 = $42;
 $49 = ((($48)) + 4|0);
 $40 = $49;
 $50 = $40;
 $51 = HEAP32[$50>>2]|0;
 $37 = $50;
 $38 = $51;
 $52 = $38;
 $34 = $36;
 $35 = $52;
 $53 = $34;
 $54 = $35;
 HEAP32[$53>>2] = $54;
 $55 = HEAP32[$36>>2]|0;
 HEAP32[$39>>2] = $55;
 $56 = HEAP32[$39>>2]|0;
 HEAP32[$p_it>>2] = $56;
 $57 = ((($48)) + 4|0);
 $33 = $57;
 $58 = $33;
 $59 = ((($58)) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 $30 = $58;
 $31 = $60;
 $61 = $31;
 $27 = $29;
 $28 = $61;
 $62 = $27;
 $63 = $28;
 HEAP32[$62>>2] = $63;
 $64 = HEAP32[$29>>2]|0;
 HEAP32[$32>>2] = $64;
 $65 = HEAP32[$32>>2]|0;
 HEAP32[$p_end>>2] = $65;
 $idx = 0;
 while(1) {
  $23 = $p_it;
  $24 = $p_end;
  $66 = $23;
  $67 = $24;
  $21 = $66;
  $22 = $67;
  $68 = $21;
  $20 = $68;
  $69 = $20;
  $70 = HEAP32[$69>>2]|0;
  $71 = $22;
  $19 = $71;
  $72 = $19;
  $73 = HEAP32[$72>>2]|0;
  $74 = ($70|0)==($73|0);
  $75 = $74 ^ 1;
  if (!($75)) {
   break;
  }
  $6 = $p_it;
  $76 = $6;
  $77 = HEAP32[$76>>2]|0;
  $78 = HEAP32[$77>>2]|0;
  $79 = ($78|0)!=(0|0);
  if (!($79)) {
   break;
  }
  $5 = $p_it;
  $80 = $5;
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($81)) + 4|0);
  HEAP32[$80>>2] = $82;
  $83 = $idx;
  $84 = (($83) + 1)|0;
  $idx = $84;
 }
 $3 = $p_it;
 $4 = $p_end;
 $85 = $3;
 $2 = $85;
 $86 = $2;
 $87 = HEAP32[$86>>2]|0;
 $88 = $4;
 $1 = $88;
 $89 = $1;
 $90 = HEAP32[$89>>2]|0;
 $91 = ($87|0)==($90|0);
 do {
  if ($91) {
   $92 = ((($48)) + 4|0);
   HEAP32[$45>>2] = 0;
   $17 = $92;
   $18 = $45;
   $93 = $17;
   $94 = ((($93)) + 4|0);
   $95 = HEAP32[$94>>2]|0;
   $16 = $93;
   $96 = $16;
   $97 = ((($96)) + 8|0);
   $15 = $97;
   $98 = $15;
   $14 = $98;
   $99 = $14;
   $100 = HEAP32[$99>>2]|0;
   $101 = ($95|0)!=($100|0);
   if ($101) {
    __ZNSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i,$93,1);
    $13 = $93;
    $102 = $13;
    $103 = ((($102)) + 8|0);
    $12 = $103;
    $104 = $12;
    $11 = $104;
    $105 = $11;
    $106 = ((($93)) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $10 = $107;
    $108 = $10;
    $109 = $18;
    $7 = $105;
    $8 = $108;
    $9 = $109;
    $110 = $8;
    $111 = $9;
    $112 = HEAP32[$111>>2]|0;
    HEAP32[$110>>2] = $112;
    __ZNSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
    $113 = ((($93)) + 4|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((($114)) + 4|0);
    HEAP32[$113>>2] = $115;
    break;
   } else {
    $116 = $18;
    __ZNSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($93,$116);
    break;
   }
  }
 } while(0);
 $117 = (__Znwj(32)|0);
 $118 = $44;
 __THREW__ = 0;
 invoke_vii(665,($117|0),($118|0));
 $119 = __THREW__; __THREW__ = 0;
 $120 = $119&1;
 if ($120) {
  $129 = ___cxa_find_matching_catch()|0;
  $130 = tempRet0;
  $46 = $129;
  $47 = $130;
  __ZdlPv($117);
  $131 = $46;
  $132 = $47;
  ___resumeException($131|0);
  // unreachable;
 } else {
  $121 = ((($48)) + 4|0);
  $122 = $idx;
  $25 = $121;
  $26 = $122;
  $123 = $25;
  $124 = $26;
  $125 = HEAP32[$123>>2]|0;
  $126 = (($125) + ($124<<2)|0);
  HEAP32[$126>>2] = $117;
  $127 = $idx;
  __ZN8OpenMesh15BasePropHandleTIN4DGPC7Vector3IdEEEC2Ei($41,$127);
  $128 = HEAP32[$41>>2]|0;
  STACKTOP = sp;return ($128|0);
 }
 return (0)|0;
}
function __ZN8OpenMesh12VPropHandleTIN4DGPC7Vector3IdEEEC2ERKNS_15BasePropHandleTIS3_EE($this,$_b) {
 $this = $this|0;
 $_b = $_b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_b;
 $2 = $0;
 $3 = $1;
 ;HEAP32[$2>>2]=HEAP32[$3>>2]|0;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEEC2ERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($this,$_name) {
 $this = $this|0;
 $_name = $_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 96|0;
 $6 = sp + 80|0;
 $10 = sp + 64|0;
 $15 = sp + 44|0;
 $18 = sp + 32|0;
 $21 = sp + 20|0;
 $22 = sp + 16|0;
 $23 = sp + 12|0;
 $25 = $this;
 $26 = $_name;
 $27 = $25;
 $28 = $26;
 __ZN8OpenMesh12BasePropertyC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($27,$28);
 $29 = 3776;
 HEAP32[$27>>2] = $29;
 $30 = ((($27)) + 20|0);
 $24 = $30;
 $31 = $24;
 $20 = $31;
 $32 = $20;
 $19 = $32;
 $0 = $2;
 $1 = -1;
 $33 = $0;
 HEAP32[$33>>2] = 0;
 $34 = HEAP32[$2>>2]|0;
 HEAP32[$21>>2] = $34;
 $3 = $21;
 HEAP32[$32>>2] = 0;
 $35 = ((($32)) + 4|0);
 $4 = $6;
 $5 = -1;
 $36 = $4;
 HEAP32[$36>>2] = 0;
 $37 = HEAP32[$6>>2]|0;
 HEAP32[$22>>2] = $37;
 $7 = $22;
 HEAP32[$35>>2] = 0;
 $38 = ((($32)) + 8|0);
 $8 = $10;
 $9 = -1;
 $39 = $8;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$10>>2]|0;
 HEAP32[$23>>2] = $40;
 $11 = $23;
 $17 = $38;
 HEAP32[$18>>2] = 0;
 $41 = $17;
 $16 = $18;
 $42 = $16;
 $43 = HEAP32[$42>>2]|0;
 $14 = $41;
 HEAP32[$15>>2] = $43;
 $44 = $14;
 $13 = $44;
 $12 = $15;
 $45 = $12;
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$44>>2] = $46;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh15BasePropHandleTIN4DGPC7Vector3IdEEEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh10BaseHandleC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 3776;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 20|0);
 __THREW__ = 0;
 invoke_vi(666,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8OpenMesh12BasePropertyD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(614,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(126,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE7reserveEj($this,$_n) {
 $this = $this|0;
 $_n = $_n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_n;
 $2 = $0;
 $3 = ((($2)) + 20|0);
 $4 = $1;
 __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE7reserveEj($3,$4);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE6resizeEj($this,$_n) {
 $this = $this|0;
 $_n = $_n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_n;
 $2 = $0;
 $3 = ((($2)) + 20|0);
 $4 = $1;
 __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE6resizeEj($3,$4);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 184|0;
 $6 = sp + 168|0;
 $10 = sp + 152|0;
 $15 = sp + 132|0;
 $18 = sp + 120|0;
 $21 = sp + 108|0;
 $22 = sp + 104|0;
 $23 = sp + 100|0;
 $28 = sp;
 $31 = sp + 196|0;
 $44 = sp + 12|0;
 $43 = $this;
 $47 = $43;
 $48 = ((($47)) + 20|0);
 $40 = $48;
 $49 = $40;
 $39 = $49;
 $50 = $39;
 $51 = ((($50)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = HEAP32[$50>>2]|0;
 $54 = $52;
 $55 = $53;
 $56 = (($54) - ($55))|0;
 $57 = (($56|0) / 24)&-1;
 $__old_size$i = $57;
 $37 = $49;
 $58 = $37;
 $59 = HEAP32[$58>>2]|0;
 $35 = $58;
 $36 = $59;
 $60 = $35;
 while(1) {
  $61 = $36;
  $62 = ((($60)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($61|0)!=($63|0);
  if (!($64)) {
   break;
  }
  $34 = $60;
  $65 = $34;
  $66 = ((($65)) + 8|0);
  $33 = $66;
  $67 = $33;
  $32 = $67;
  $68 = $32;
  $69 = ((($60)) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($70)) + -24|0);
  HEAP32[$69>>2] = $71;
  $25 = $71;
  $72 = $25;
  $29 = $68;
  $30 = $72;
  $73 = $29;
  $74 = $30;
  ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
  $26 = $73;
  $27 = $74;
 }
 $75 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(667,($49|0),($75|0));
 $76 = __THREW__; __THREW__ = 0;
 $77 = $76&1;
 if ($77) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $41 = $78;
  $42 = $79;
  $80 = $41;
  ___cxa_call_unexpected(($80|0));
  // unreachable;
 }
 $38 = $49;
 $24 = $44;
 $81 = $24;
 $20 = $81;
 $82 = $20;
 $19 = $82;
 $0 = $2;
 $1 = -1;
 $83 = $0;
 HEAP32[$83>>2] = 0;
 $84 = HEAP32[$2>>2]|0;
 HEAP32[$21>>2] = $84;
 $3 = $21;
 HEAP32[$82>>2] = 0;
 $85 = ((($82)) + 4|0);
 $4 = $6;
 $5 = -1;
 $86 = $4;
 HEAP32[$86>>2] = 0;
 $87 = HEAP32[$6>>2]|0;
 HEAP32[$22>>2] = $87;
 $7 = $22;
 HEAP32[$85>>2] = 0;
 $88 = ((($82)) + 8|0);
 $8 = $10;
 $9 = -1;
 $89 = $8;
 HEAP32[$89>>2] = 0;
 $90 = HEAP32[$10>>2]|0;
 HEAP32[$23>>2] = $90;
 $11 = $23;
 $17 = $88;
 HEAP32[$18>>2] = 0;
 $91 = $17;
 $16 = $18;
 $92 = $16;
 $93 = HEAP32[$92>>2]|0;
 $14 = $91;
 HEAP32[$15>>2] = $93;
 $94 = $14;
 $13 = $94;
 $12 = $15;
 $95 = $12;
 $96 = HEAP32[$95>>2]|0;
 HEAP32[$94>>2] = $96;
 $97 = ((($47)) + 20|0);
 __THREW__ = 0;
 invoke_vii(668,($44|0),($97|0));
 $98 = __THREW__; __THREW__ = 0;
 $99 = $98&1;
 if (!($99)) {
  __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEED2Ev($44);
  STACKTOP = sp;return;
 }
 $100 = ___cxa_find_matching_catch()|0;
 $101 = tempRet0;
 $45 = $100;
 $46 = $101;
 __THREW__ = 0;
 invoke_vi(666,($44|0));
 $102 = __THREW__; __THREW__ = 0;
 $103 = $102&1;
 if ($103) {
  $106 = ___cxa_find_matching_catch(0|0)|0;
  $107 = tempRet0;
  ___clang_call_terminate($106);
  // unreachable;
 } else {
  $104 = $45;
  $105 = $46;
  ___resumeException($104|0);
  // unreachable;
 }
}
function __ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE9push_backEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__annotator$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator$i = sp + 76|0;
 $13 = sp;
 $12 = $this;
 $14 = $12;
 $15 = ((($14)) + 20|0);
 __ZN4DGPC7Vector3IdEC2Ev($13);
 $10 = $15;
 $11 = $13;
 $16 = $10;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $9 = $16;
 $19 = $9;
 $20 = ((($19)) + 8|0);
 $8 = $20;
 $21 = $8;
 $7 = $21;
 $22 = $7;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($18|0)!=($23|0);
 if ($24) {
  __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i,$16,1);
  $6 = $16;
  $25 = $6;
  $26 = ((($25)) + 8|0);
  $5 = $26;
  $27 = $5;
  $4 = $27;
  $28 = $4;
  $29 = ((($16)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $3 = $30;
  $31 = $3;
  $32 = $11;
  $0 = $28;
  $1 = $31;
  $2 = $32;
  $33 = $1;
  $34 = $2;
  __ZN4DGPC7Vector3IdEC2ERKS1_($33,$34);
  __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $35 = ((($16)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 24|0);
  HEAP32[$35>>2] = $37;
  STACKTOP = sp;return;
 } else {
  $38 = $11;
  __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($16,$38);
  STACKTOP = sp;return;
 }
}
function __ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE4swapEjj($this,$_i0,$_i1) {
 $this = $this|0;
 $_i0 = $_i0|0;
 $_i1 = $_i1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i = sp;
 $9 = $this;
 $10 = $_i0;
 $11 = $_i1;
 $12 = $9;
 $13 = ((($12)) + 20|0);
 $14 = $10;
 $7 = $13;
 $8 = $14;
 $15 = $7;
 $16 = $8;
 $17 = HEAP32[$15>>2]|0;
 $18 = (($17) + (($16*24)|0)|0);
 $19 = ((($12)) + 20|0);
 $20 = $11;
 $0 = $19;
 $1 = $20;
 $21 = $0;
 $22 = $1;
 $23 = HEAP32[$21>>2]|0;
 $24 = (($23) + (($22*24)|0)|0);
 $5 = $18;
 $6 = $24;
 $25 = $5;
 $4 = $25;
 $26 = $4;
 __ZN4DGPC7Vector3IdEC2ERKS1_($__t$i,$26);
 $27 = $5;
 $28 = $6;
 $3 = $28;
 $29 = $3;
 (__ZN4DGPC7Vector3IdEaSERKS1_($27,$29)|0);
 $30 = $6;
 $2 = $__t$i;
 $31 = $2;
 (__ZN4DGPC7Vector3IdEaSERKS1_($30,$31)|0);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE4copyEjj($this,$_i0,$_i1) {
 $this = $this|0;
 $_i0 = $_i0|0;
 $_i1 = $_i1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $this;
 $5 = $_i0;
 $6 = $_i1;
 $7 = $4;
 $8 = ((($7)) + 20|0);
 $9 = $6;
 $2 = $8;
 $3 = $9;
 $10 = $2;
 $11 = $3;
 $12 = HEAP32[$10>>2]|0;
 $13 = (($12) + (($11*24)|0)|0);
 $14 = ((($7)) + 20|0);
 $15 = $5;
 $0 = $14;
 $1 = $15;
 $16 = $0;
 $17 = $1;
 $18 = HEAP32[$16>>2]|0;
 $19 = (($18) + (($17*24)|0)|0);
 (__ZN4DGPC7Vector3IdEaSERKS1_($13,$19)|0);
 STACKTOP = sp;return;
}
function __ZNK8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE5cloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(32)|0);
 __THREW__ = 0;
 invoke_vii(669,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $1 = $8;
  $2 = $9;
  __ZdlPv($4);
  $10 = $1;
  $11 = $2;
  ___resumeException($10|0);
  // unreachable;
 } else {
  $p = $4;
  $7 = $p;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE14set_persistentEb($this,$_yn) {
 $this = $this|0;
 $_yn = $_yn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $_yn&1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4&1;
 __ZN8OpenMesh12BaseProperty24check_and_set_persistentIN4DGPC7Vector3IdEEEEvb($3,$5);
 STACKTOP = sp;return;
}
function __ZNK8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE10n_elementsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 24)&-1;
 STACKTOP = sp;return ($11|0);
}
function __ZNK8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE12element_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN8OpenMesh2IO7size_ofIN4DGPC7Vector3IdEEEEjv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNK8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE7size_ofEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 116|0;
 $5 = sp + 104|0;
 $16 = sp + 16|0;
 $17 = sp + 8|0;
 $18 = sp;
 $21 = sp + 52|0;
 $24 = sp + 40|0;
 $28 = sp + 24|0;
 $29 = sp + 20|0;
 $30 = sp + 128|0;
 $27 = $this;
 $31 = $27;
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 48|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (FUNCTION_TABLE_ii[$34 & 1023]($31)|0);
 $36 = ($35|0)!=(-1);
 if ($36) {
  $37 = HEAP32[$31>>2]|0;
  $38 = ((($37)) + 44|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_ii[$39 & 1023]($31)|0);
  $41 = (__ZNK8OpenMesh12BaseProperty7size_ofEj($31,$40)|0);
  $26 = $41;
  $76 = $26;
  STACKTOP = sp;return ($76|0);
 }
 $42 = ((($31)) + 20|0);
 $25 = $42;
 $43 = $25;
 $44 = HEAP32[$43>>2]|0;
 $22 = $43;
 $23 = $44;
 $45 = $23;
 $19 = $21;
 $20 = $45;
 $46 = $19;
 $47 = $20;
 HEAP32[$46>>2] = $47;
 $48 = HEAP32[$21>>2]|0;
 HEAP32[$24>>2] = $48;
 $49 = HEAP32[$24>>2]|0;
 HEAP32[$28>>2] = $49;
 $50 = ((($31)) + 20|0);
 $6 = $50;
 $51 = $6;
 $52 = ((($51)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $3 = $51;
 $4 = $53;
 $54 = $4;
 $0 = $2;
 $1 = $54;
 $55 = $0;
 $56 = $1;
 HEAP32[$55>>2] = $56;
 $57 = HEAP32[$2>>2]|0;
 HEAP32[$5>>2] = $57;
 $58 = HEAP32[$5>>2]|0;
 HEAP32[$29>>2] = $58;
 ;HEAP8[$16>>0]=HEAP8[$30>>0]|0;
 ;HEAP8[$17>>0]=HEAP8[$29>>0]|0;HEAP8[$17+1>>0]=HEAP8[$29+1>>0]|0;HEAP8[$17+2>>0]=HEAP8[$29+2>>0]|0;HEAP8[$17+3>>0]=HEAP8[$29+3>>0]|0;
 ;HEAP8[$18>>0]=HEAP8[$28>>0]|0;HEAP8[$18+1>>0]=HEAP8[$28+1>>0]|0;HEAP8[$18+2>>0]=HEAP8[$28+2>>0]|0;HEAP8[$18+3>>0]=HEAP8[$28+3>>0]|0;
 $15 = 0;
 while(1) {
  $13 = $18;
  $14 = $17;
  $59 = $13;
  $60 = $14;
  $11 = $59;
  $12 = $60;
  $61 = $11;
  $10 = $61;
  $62 = $10;
  $63 = HEAP32[$62>>2]|0;
  $64 = $12;
  $9 = $64;
  $65 = $9;
  $66 = HEAP32[$65>>2]|0;
  $67 = ($63|0)==($66|0);
  $68 = $67 ^ 1;
  $69 = $15;
  if (!($68)) {
   break;
  }
  $7 = $18;
  $70 = $7;
  $71 = HEAP32[$70>>2]|0;
  $72 = (__ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE4plusclEjRKS3_($16,$69,$71)|0);
  $15 = $72;
  $8 = $18;
  $73 = $8;
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($74)) + 24|0);
  HEAP32[$73>>2] = $75;
 }
 $26 = $69;
 $76 = $26;
 STACKTOP = sp;return ($76|0);
}
function __ZNK8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE7size_ofEj($this,$_n_elem) {
 $this = $this|0;
 $_n_elem = $_n_elem|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_n_elem;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8OpenMesh12BaseProperty7size_ofEj($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE5storeERNSt3__113basic_ostreamIcNS5_11char_traitsIcEEEEb($this,$_ostr,$_swap) {
 $this = $this|0;
 $_ostr = $_ostr|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $_ostr;
 $6 = $_swap&1;
 $5 = $6;
 $7 = $3;
 $8 = (__ZN8OpenMesh2IO13is_streamableINSt3__16vectorIN4DGPC7Vector3IdEENS2_9allocatorIS6_EEEEEEbv()|0);
 if ($8) {
  $9 = $4;
  $10 = ((($7)) + 20|0);
  $11 = $5;
  $12 = $11&1;
  $13 = (__ZN8OpenMesh2IO5storeINSt3__16vectorIN4DGPC7Vector3IdEENS2_9allocatorIS6_EEEEEEjRNS2_13basic_ostreamIcNS2_11char_traitsIcEEEERKT_b($9,$10,$12)|0);
  $2 = $13;
  $35 = $2;
  STACKTOP = sp;return ($35|0);
 }
 $bytes = 0;
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = HEAP32[$7>>2]|0;
  $16 = ((($15)) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_ii[$17 & 1023]($7)|0);
  $19 = ($14>>>0)<($18>>>0);
  if (!($19)) {
   break;
  }
  $20 = $4;
  $21 = ((($7)) + 20|0);
  $22 = $i;
  $0 = $21;
  $1 = $22;
  $23 = $0;
  $24 = $1;
  $25 = HEAP32[$23>>2]|0;
  $26 = (($25) + (($24*24)|0)|0);
  $27 = $5;
  $28 = $27&1;
  $29 = (__ZN8OpenMesh2IO5storeIN4DGPC7Vector3IdEEEEjRNSt3__113basic_ostreamIcNS5_11char_traitsIcEEEERKT_b($20,$26,$28)|0);
  $30 = $bytes;
  $31 = (($30) + ($29))|0;
  $bytes = $31;
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
 }
 $34 = $bytes;
 $2 = $34;
 $35 = $2;
 STACKTOP = sp;return ($35|0);
}
function __ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE7restoreERNSt3__113basic_istreamIcNS5_11char_traitsIcEEEEb($this,$_istr,$_swap) {
 $this = $this|0;
 $_istr = $_istr|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $_istr;
 $6 = $_swap&1;
 $5 = $6;
 $7 = $3;
 $8 = (__ZN8OpenMesh2IO13is_streamableINSt3__16vectorIN4DGPC7Vector3IdEENS2_9allocatorIS6_EEEEEEbv()|0);
 if ($8) {
  $9 = $4;
  $10 = ((($7)) + 20|0);
  $11 = $5;
  $12 = $11&1;
  $13 = (__ZN8OpenMesh2IO7restoreINSt3__16vectorIN4DGPC7Vector3IdEENS2_9allocatorIS6_EEEEEEjRNS2_13basic_istreamIcNS2_11char_traitsIcEEEERT_b($9,$10,$12)|0);
  $2 = $13;
  $35 = $2;
  STACKTOP = sp;return ($35|0);
 }
 $bytes = 0;
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = HEAP32[$7>>2]|0;
  $16 = ((($15)) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_ii[$17 & 1023]($7)|0);
  $19 = ($14>>>0)<($18>>>0);
  if (!($19)) {
   break;
  }
  $20 = $4;
  $21 = ((($7)) + 20|0);
  $22 = $i;
  $0 = $21;
  $1 = $22;
  $23 = $0;
  $24 = $1;
  $25 = HEAP32[$23>>2]|0;
  $26 = (($25) + (($24*24)|0)|0);
  $27 = $5;
  $28 = $27&1;
  $29 = (__ZN8OpenMesh2IO7restoreIN4DGPC7Vector3IdEEEEjRNSt3__113basic_istreamIcNS5_11char_traitsIcEEEERT_b($20,$26,$28)|0);
  $30 = $bytes;
  $31 = (($30) + ($29))|0;
  $bytes = $31;
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
 }
 $34 = $bytes;
 $2 = $34;
 $35 = $2;
 STACKTOP = sp;return ($35|0);
}
function __ZN8OpenMesh2IO13is_streamableINSt3__16vectorIN4DGPC7Vector3IdEENS2_9allocatorIS6_EEEEEEbv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN8OpenMesh2IO7restoreINSt3__16vectorIN4DGPC7Vector3IdEENS2_9allocatorIS6_EEEEEEjRNS2_13basic_istreamIcNS2_11char_traitsIcEEEERT_b($_is,$_v,$_swap) {
 $_is = $_is|0;
 $_v = $_v|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_is;
 $1 = $_v;
 $3 = $_swap&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 $8 = (__ZN8OpenMesh2IO6binaryINSt3__16vectorIN4DGPC7Vector3IdEENS2_9allocatorIS6_EEEEE7restoreERNS2_13basic_istreamIcNS2_11char_traitsIcEEEERS9_b($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN8OpenMesh2IO7restoreIN4DGPC7Vector3IdEEEEjRNSt3__113basic_istreamIcNS5_11char_traitsIcEEEERT_b($_is,$_v,$_swap) {
 $_is = $_is|0;
 $_v = $_v|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_is;
 $1 = $_v;
 $3 = $_swap&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 $8 = (__ZN8OpenMesh2IO6binaryIN4DGPC7Vector3IdEEE7restoreERNSt3__113basic_istreamIcNS6_11char_traitsIcEEEERS4_b($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN8OpenMesh2IO6binaryIN4DGPC7Vector3IdEEE7restoreERNSt3__113basic_istreamIcNS6_11char_traitsIcEEEERS4_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0;
 var $__i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp + 212|0;
 $msg = sp + 24|0;
 $40 = sp;
 $41 = sp + 320|0;
 $35 = $0;
 $36 = $1;
 $42 = $2&1;
 $37 = $42;
 $31 = $msg;
 $32 = 16;
 $43 = $31;
 $44 = ((($43)) + 56|0);
 $30 = $44;
 $45 = $30;
 $29 = $45;
 $46 = $29;
 $47 = 6536;
 HEAP32[$46>>2] = $47;
 $48 = 6212;
 HEAP32[$45>>2] = $48;
 $49 = 3456;
 HEAP32[$43>>2] = $49;
 $50 = ((($43)) + 56|0);
 $51 = 3476;
 HEAP32[$50>>2] = $51;
 $52 = ((($43)) + 4|0);
 $26 = $43;
 $53 = 3488;
 $27 = $53;
 $28 = $52;
 $54 = $26;
 $55 = $27;
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = ((($55)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$54>>2]|0;
 $60 = ((($59)) + -12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($54) + ($61)|0);
 HEAP32[$62>>2] = $58;
 $63 = HEAP32[$54>>2]|0;
 $64 = ((($63)) + -12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($54) + ($65)|0);
 $67 = $28;
 $24 = $66;
 $25 = $67;
 $68 = $24;
 $69 = $25;
 __THREW__ = 0;
 invoke_vii(490,($68|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $133 = ___cxa_find_matching_catch()|0;
  $134 = tempRet0;
  $33 = $133;
  $34 = $134;
 } else {
  $72 = ((($68)) + 72|0);
  HEAP32[$72>>2] = 0;
  $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $74 = ((($68)) + 76|0);
  HEAP32[$74>>2] = $73;
  $75 = 3456;
  HEAP32[$43>>2] = $75;
  $76 = ((($43)) + 56|0);
  $77 = 3476;
  HEAP32[$76>>2] = $77;
  $78 = ((($43)) + 4|0);
  $79 = $32;
  $80 = $79 | 16;
  $19 = $78;
  $20 = $80;
  $81 = $19;
  __THREW__ = 0;
  invoke_vi(500,($81|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  do {
   if ($83) {
    $135 = ___cxa_find_matching_catch()|0;
    $136 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $136;$eh$lpad$body$i$indexZ2D = $135;
   } else {
    $84 = 3016;
    HEAP32[$81>>2] = $84;
    $85 = ((($81)) + 32|0);
    $18 = $85;
    $86 = $18;
    $17 = $86;
    $87 = $17;
    $16 = $87;
    $88 = $16;
    $15 = $88;
    $14 = $86;
    $89 = $14;
    $13 = $89;
    $90 = $13;
    $12 = $90;
    $91 = $12;
    $__a$i$i$i$i = $91;
    $__i$i$i$i$i = 0;
    while(1) {
     $92 = $__i$i$i$i$i;
     $93 = ($92>>>0)<(3);
     if (!($93)) {
      break;
     }
     $94 = $__i$i$i$i$i;
     $95 = $__a$i$i$i$i;
     $96 = (($95) + ($94<<2)|0);
     HEAP32[$96>>2] = 0;
     $97 = $__i$i$i$i$i;
     $98 = (($97) + 1)|0;
     $__i$i$i$i$i = $98;
    }
    $99 = ((($81)) + 44|0);
    HEAP32[$99>>2] = 0;
    $100 = ((($81)) + 48|0);
    $101 = $20;
    HEAP32[$100>>2] = $101;
    $11 = $23;
    $102 = $11;
    $10 = $102;
    $103 = $10;
    $9 = $103;
    $104 = $9;
    $8 = $104;
    $7 = $102;
    $105 = $7;
    $6 = $105;
    $106 = $6;
    $5 = $106;
    $107 = $5;
    $__a$i$i1$i$i = $107;
    $__i$i$i2$i$i = 0;
    while(1) {
     $108 = $__i$i$i2$i$i;
     $109 = ($108>>>0)<(3);
     if (!($109)) {
      break;
     }
     $110 = $__i$i$i2$i$i;
     $111 = $__a$i$i1$i$i;
     $112 = (($111) + ($110<<2)|0);
     HEAP32[$112>>2] = 0;
     $113 = $__i$i$i2$i$i;
     $114 = (($113) + 1)|0;
     $__i$i$i2$i$i = $114;
    }
    __THREW__ = 0;
    invoke_vii(501,($81|0),($23|0));
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    do {
     if ($116) {
      $121 = ___cxa_find_matching_catch()|0;
      $122 = tempRet0;
      $21 = $121;
      $22 = $122;
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $131 = ___cxa_find_matching_catch(0|0)|0;
       $132 = tempRet0;
       ___clang_call_terminate($131);
       // unreachable;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       $119 = ___cxa_find_matching_catch()|0;
       $120 = tempRet0;
       $21 = $119;
       $22 = $120;
       break;
      }
      __THREW__ = 0;
      $146 = (invoke_iii(484,($msg|0),(13513|0))|0);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      if ($148) {
       label = 28;
      } else {
       $4 = 552;
       $149 = $4;
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       (invoke_iii(484,($146|0),($151|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
       } else {
        $154 = (___cxa_allocate_exception(8)|0);
        $$expand_i1_val = 1;
        HEAP8[$41>>0] = $$expand_i1_val;
        $3 = $msg;
        $155 = $3;
        $156 = ((($155)) + 4|0);
        __THREW__ = 0;
        invoke_vii(618,($40|0),($156|0));
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         $164 = ___cxa_find_matching_catch()|0;
         $165 = tempRet0;
         $38 = $164;
         $39 = $165;
        } else {
         __THREW__ = 0;
         invoke_vii(619,($154|0),($40|0));
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if (!($160)) {
          $$expand_i1_val7 = 0;
          HEAP8[$41>>0] = $$expand_i1_val7;
          __THREW__ = 0;
          invoke_viii(620,($154|0),(632|0),(146|0));
          $161 = __THREW__; __THREW__ = 0;
         }
         $166 = ___cxa_find_matching_catch()|0;
         $167 = tempRet0;
         $38 = $166;
         $39 = $167;
         __THREW__ = 0;
         invoke_vi(502,($40|0));
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          $175 = ___cxa_find_matching_catch(0|0)|0;
          $176 = tempRet0;
          ___clang_call_terminate($175);
          // unreachable;
         }
        }
        $$pre_trunc = HEAP8[$41>>0]|0;
        $170 = $$pre_trunc&1;
        if ($170) {
         ___cxa_free_exception(($154|0));
        }
       }
      }
      if ((label|0) == 28) {
       $162 = ___cxa_find_matching_catch()|0;
       $163 = tempRet0;
       $38 = $162;
       $39 = $163;
      }
      __THREW__ = 0;
      invoke_vi(70,($msg|0));
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       $175 = ___cxa_find_matching_catch(0|0)|0;
       $176 = tempRet0;
       ___clang_call_terminate($175);
       // unreachable;
      } else {
       $173 = $38;
       $174 = $39;
       ___resumeException($173|0);
       // unreachable;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(502,($85|0));
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(194,($81|0));
    $127 = __THREW__; __THREW__ = 0;
    $128 = $127&1;
    if ($128) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    } else {
     $129 = $21;
     $130 = $22;
     $eh$lpad$body$i$index2Z2D = $130;$eh$lpad$body$i$indexZ2D = $129;
     break;
    }
   }
  } while(0);
  $33 = $eh$lpad$body$i$indexZ2D;
  $34 = $eh$lpad$body$i$index2Z2D;
  __THREW__ = 0;
  $137 = __THREW__; __THREW__ = 0;
  $138 = $137&1;
  if ($138) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
 }
 $139 = ((($43)) + 56|0);
 __THREW__ = 0;
 invoke_vi(210,($139|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if ($141) {
  $144 = ___cxa_find_matching_catch(0|0)|0;
  $145 = tempRet0;
  ___clang_call_terminate($144);
  // unreachable;
 } else {
  $142 = $33;
  $143 = $34;
  ___resumeException($142|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh2IO6binaryINSt3__16vectorIN4DGPC7Vector3IdEENS2_9allocatorIS6_EEEEE7restoreERNS2_13basic_istreamIcNS2_11char_traitsIcEEEERS9_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0;
 var $__i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp + 212|0;
 $msg = sp + 24|0;
 $40 = sp;
 $41 = sp + 320|0;
 $35 = $0;
 $36 = $1;
 $42 = $2&1;
 $37 = $42;
 $31 = $msg;
 $32 = 16;
 $43 = $31;
 $44 = ((($43)) + 56|0);
 $30 = $44;
 $45 = $30;
 $29 = $45;
 $46 = $29;
 $47 = 6536;
 HEAP32[$46>>2] = $47;
 $48 = 6212;
 HEAP32[$45>>2] = $48;
 $49 = 3456;
 HEAP32[$43>>2] = $49;
 $50 = ((($43)) + 56|0);
 $51 = 3476;
 HEAP32[$50>>2] = $51;
 $52 = ((($43)) + 4|0);
 $26 = $43;
 $53 = 3488;
 $27 = $53;
 $28 = $52;
 $54 = $26;
 $55 = $27;
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = ((($55)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$54>>2]|0;
 $60 = ((($59)) + -12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($54) + ($61)|0);
 HEAP32[$62>>2] = $58;
 $63 = HEAP32[$54>>2]|0;
 $64 = ((($63)) + -12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($54) + ($65)|0);
 $67 = $28;
 $24 = $66;
 $25 = $67;
 $68 = $24;
 $69 = $25;
 __THREW__ = 0;
 invoke_vii(490,($68|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $133 = ___cxa_find_matching_catch()|0;
  $134 = tempRet0;
  $33 = $133;
  $34 = $134;
 } else {
  $72 = ((($68)) + 72|0);
  HEAP32[$72>>2] = 0;
  $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $74 = ((($68)) + 76|0);
  HEAP32[$74>>2] = $73;
  $75 = 3456;
  HEAP32[$43>>2] = $75;
  $76 = ((($43)) + 56|0);
  $77 = 3476;
  HEAP32[$76>>2] = $77;
  $78 = ((($43)) + 4|0);
  $79 = $32;
  $80 = $79 | 16;
  $19 = $78;
  $20 = $80;
  $81 = $19;
  __THREW__ = 0;
  invoke_vi(500,($81|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  do {
   if ($83) {
    $135 = ___cxa_find_matching_catch()|0;
    $136 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $136;$eh$lpad$body$i$indexZ2D = $135;
   } else {
    $84 = 3016;
    HEAP32[$81>>2] = $84;
    $85 = ((($81)) + 32|0);
    $18 = $85;
    $86 = $18;
    $17 = $86;
    $87 = $17;
    $16 = $87;
    $88 = $16;
    $15 = $88;
    $14 = $86;
    $89 = $14;
    $13 = $89;
    $90 = $13;
    $12 = $90;
    $91 = $12;
    $__a$i$i$i$i = $91;
    $__i$i$i$i$i = 0;
    while(1) {
     $92 = $__i$i$i$i$i;
     $93 = ($92>>>0)<(3);
     if (!($93)) {
      break;
     }
     $94 = $__i$i$i$i$i;
     $95 = $__a$i$i$i$i;
     $96 = (($95) + ($94<<2)|0);
     HEAP32[$96>>2] = 0;
     $97 = $__i$i$i$i$i;
     $98 = (($97) + 1)|0;
     $__i$i$i$i$i = $98;
    }
    $99 = ((($81)) + 44|0);
    HEAP32[$99>>2] = 0;
    $100 = ((($81)) + 48|0);
    $101 = $20;
    HEAP32[$100>>2] = $101;
    $11 = $23;
    $102 = $11;
    $10 = $102;
    $103 = $10;
    $9 = $103;
    $104 = $9;
    $8 = $104;
    $7 = $102;
    $105 = $7;
    $6 = $105;
    $106 = $6;
    $5 = $106;
    $107 = $5;
    $__a$i$i1$i$i = $107;
    $__i$i$i2$i$i = 0;
    while(1) {
     $108 = $__i$i$i2$i$i;
     $109 = ($108>>>0)<(3);
     if (!($109)) {
      break;
     }
     $110 = $__i$i$i2$i$i;
     $111 = $__a$i$i1$i$i;
     $112 = (($111) + ($110<<2)|0);
     HEAP32[$112>>2] = 0;
     $113 = $__i$i$i2$i$i;
     $114 = (($113) + 1)|0;
     $__i$i$i2$i$i = $114;
    }
    __THREW__ = 0;
    invoke_vii(501,($81|0),($23|0));
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    do {
     if ($116) {
      $121 = ___cxa_find_matching_catch()|0;
      $122 = tempRet0;
      $21 = $121;
      $22 = $122;
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $131 = ___cxa_find_matching_catch(0|0)|0;
       $132 = tempRet0;
       ___clang_call_terminate($131);
       // unreachable;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       $119 = ___cxa_find_matching_catch()|0;
       $120 = tempRet0;
       $21 = $119;
       $22 = $120;
       break;
      }
      __THREW__ = 0;
      $146 = (invoke_iii(484,($msg|0),(13513|0))|0);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      if ($148) {
       label = 28;
      } else {
       $4 = 560;
       $149 = $4;
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       (invoke_iii(484,($146|0),($151|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
       } else {
        $154 = (___cxa_allocate_exception(8)|0);
        $$expand_i1_val = 1;
        HEAP8[$41>>0] = $$expand_i1_val;
        $3 = $msg;
        $155 = $3;
        $156 = ((($155)) + 4|0);
        __THREW__ = 0;
        invoke_vii(618,($40|0),($156|0));
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         $164 = ___cxa_find_matching_catch()|0;
         $165 = tempRet0;
         $38 = $164;
         $39 = $165;
        } else {
         __THREW__ = 0;
         invoke_vii(619,($154|0),($40|0));
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if (!($160)) {
          $$expand_i1_val7 = 0;
          HEAP8[$41>>0] = $$expand_i1_val7;
          __THREW__ = 0;
          invoke_viii(620,($154|0),(632|0),(146|0));
          $161 = __THREW__; __THREW__ = 0;
         }
         $166 = ___cxa_find_matching_catch()|0;
         $167 = tempRet0;
         $38 = $166;
         $39 = $167;
         __THREW__ = 0;
         invoke_vi(502,($40|0));
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          $175 = ___cxa_find_matching_catch(0|0)|0;
          $176 = tempRet0;
          ___clang_call_terminate($175);
          // unreachable;
         }
        }
        $$pre_trunc = HEAP8[$41>>0]|0;
        $170 = $$pre_trunc&1;
        if ($170) {
         ___cxa_free_exception(($154|0));
        }
       }
      }
      if ((label|0) == 28) {
       $162 = ___cxa_find_matching_catch()|0;
       $163 = tempRet0;
       $38 = $162;
       $39 = $163;
      }
      __THREW__ = 0;
      invoke_vi(70,($msg|0));
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       $175 = ___cxa_find_matching_catch(0|0)|0;
       $176 = tempRet0;
       ___clang_call_terminate($175);
       // unreachable;
      } else {
       $173 = $38;
       $174 = $39;
       ___resumeException($173|0);
       // unreachable;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(502,($85|0));
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(194,($81|0));
    $127 = __THREW__; __THREW__ = 0;
    $128 = $127&1;
    if ($128) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    } else {
     $129 = $21;
     $130 = $22;
     $eh$lpad$body$i$index2Z2D = $130;$eh$lpad$body$i$indexZ2D = $129;
     break;
    }
   }
  } while(0);
  $33 = $eh$lpad$body$i$indexZ2D;
  $34 = $eh$lpad$body$i$index2Z2D;
  __THREW__ = 0;
  $137 = __THREW__; __THREW__ = 0;
  $138 = $137&1;
  if ($138) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
 }
 $139 = ((($43)) + 56|0);
 __THREW__ = 0;
 invoke_vi(210,($139|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if ($141) {
  $144 = ___cxa_find_matching_catch(0|0)|0;
  $145 = tempRet0;
  ___clang_call_terminate($144);
  // unreachable;
 } else {
  $142 = $33;
  $143 = $34;
  ___resumeException($142|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh2IO5storeINSt3__16vectorIN4DGPC7Vector3IdEENS2_9allocatorIS6_EEEEEEjRNS2_13basic_ostreamIcNS2_11char_traitsIcEEEERKT_b($_os,$_v,$_swap) {
 $_os = $_os|0;
 $_v = $_v|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_os;
 $1 = $_v;
 $3 = $_swap&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 $8 = (__ZN8OpenMesh2IO6binaryINSt3__16vectorIN4DGPC7Vector3IdEENS2_9allocatorIS6_EEEEE5storeERNS2_13basic_ostreamIcNS2_11char_traitsIcEEEERKS9_b($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN8OpenMesh2IO5storeIN4DGPC7Vector3IdEEEEjRNSt3__113basic_ostreamIcNS5_11char_traitsIcEEEERKT_b($_os,$_v,$_swap) {
 $_os = $_os|0;
 $_v = $_v|0;
 $_swap = $_swap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_os;
 $1 = $_v;
 $3 = $_swap&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 $8 = (__ZN8OpenMesh2IO6binaryIN4DGPC7Vector3IdEEE5storeERNSt3__113basic_ostreamIcNS6_11char_traitsIcEEEERKS4_b($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN8OpenMesh2IO6binaryIN4DGPC7Vector3IdEEE5storeERNSt3__113basic_ostreamIcNS6_11char_traitsIcEEEERKS4_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0;
 var $__i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp + 212|0;
 $msg = sp + 24|0;
 $40 = sp;
 $41 = sp + 320|0;
 $35 = $0;
 $36 = $1;
 $42 = $2&1;
 $37 = $42;
 $31 = $msg;
 $32 = 16;
 $43 = $31;
 $44 = ((($43)) + 56|0);
 $30 = $44;
 $45 = $30;
 $29 = $45;
 $46 = $29;
 $47 = 6536;
 HEAP32[$46>>2] = $47;
 $48 = 6212;
 HEAP32[$45>>2] = $48;
 $49 = 3456;
 HEAP32[$43>>2] = $49;
 $50 = ((($43)) + 56|0);
 $51 = 3476;
 HEAP32[$50>>2] = $51;
 $52 = ((($43)) + 4|0);
 $26 = $43;
 $53 = 3488;
 $27 = $53;
 $28 = $52;
 $54 = $26;
 $55 = $27;
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = ((($55)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$54>>2]|0;
 $60 = ((($59)) + -12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($54) + ($61)|0);
 HEAP32[$62>>2] = $58;
 $63 = HEAP32[$54>>2]|0;
 $64 = ((($63)) + -12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($54) + ($65)|0);
 $67 = $28;
 $24 = $66;
 $25 = $67;
 $68 = $24;
 $69 = $25;
 __THREW__ = 0;
 invoke_vii(490,($68|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $133 = ___cxa_find_matching_catch()|0;
  $134 = tempRet0;
  $33 = $133;
  $34 = $134;
 } else {
  $72 = ((($68)) + 72|0);
  HEAP32[$72>>2] = 0;
  $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $74 = ((($68)) + 76|0);
  HEAP32[$74>>2] = $73;
  $75 = 3456;
  HEAP32[$43>>2] = $75;
  $76 = ((($43)) + 56|0);
  $77 = 3476;
  HEAP32[$76>>2] = $77;
  $78 = ((($43)) + 4|0);
  $79 = $32;
  $80 = $79 | 16;
  $19 = $78;
  $20 = $80;
  $81 = $19;
  __THREW__ = 0;
  invoke_vi(500,($81|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  do {
   if ($83) {
    $135 = ___cxa_find_matching_catch()|0;
    $136 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $136;$eh$lpad$body$i$indexZ2D = $135;
   } else {
    $84 = 3016;
    HEAP32[$81>>2] = $84;
    $85 = ((($81)) + 32|0);
    $18 = $85;
    $86 = $18;
    $17 = $86;
    $87 = $17;
    $16 = $87;
    $88 = $16;
    $15 = $88;
    $14 = $86;
    $89 = $14;
    $13 = $89;
    $90 = $13;
    $12 = $90;
    $91 = $12;
    $__a$i$i$i$i = $91;
    $__i$i$i$i$i = 0;
    while(1) {
     $92 = $__i$i$i$i$i;
     $93 = ($92>>>0)<(3);
     if (!($93)) {
      break;
     }
     $94 = $__i$i$i$i$i;
     $95 = $__a$i$i$i$i;
     $96 = (($95) + ($94<<2)|0);
     HEAP32[$96>>2] = 0;
     $97 = $__i$i$i$i$i;
     $98 = (($97) + 1)|0;
     $__i$i$i$i$i = $98;
    }
    $99 = ((($81)) + 44|0);
    HEAP32[$99>>2] = 0;
    $100 = ((($81)) + 48|0);
    $101 = $20;
    HEAP32[$100>>2] = $101;
    $11 = $23;
    $102 = $11;
    $10 = $102;
    $103 = $10;
    $9 = $103;
    $104 = $9;
    $8 = $104;
    $7 = $102;
    $105 = $7;
    $6 = $105;
    $106 = $6;
    $5 = $106;
    $107 = $5;
    $__a$i$i1$i$i = $107;
    $__i$i$i2$i$i = 0;
    while(1) {
     $108 = $__i$i$i2$i$i;
     $109 = ($108>>>0)<(3);
     if (!($109)) {
      break;
     }
     $110 = $__i$i$i2$i$i;
     $111 = $__a$i$i1$i$i;
     $112 = (($111) + ($110<<2)|0);
     HEAP32[$112>>2] = 0;
     $113 = $__i$i$i2$i$i;
     $114 = (($113) + 1)|0;
     $__i$i$i2$i$i = $114;
    }
    __THREW__ = 0;
    invoke_vii(501,($81|0),($23|0));
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    do {
     if ($116) {
      $121 = ___cxa_find_matching_catch()|0;
      $122 = tempRet0;
      $21 = $121;
      $22 = $122;
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $131 = ___cxa_find_matching_catch(0|0)|0;
       $132 = tempRet0;
       ___clang_call_terminate($131);
       // unreachable;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       $119 = ___cxa_find_matching_catch()|0;
       $120 = tempRet0;
       $21 = $119;
       $22 = $120;
       break;
      }
      __THREW__ = 0;
      $146 = (invoke_iii(484,($msg|0),(13513|0))|0);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      if ($148) {
       label = 28;
      } else {
       $4 = 552;
       $149 = $4;
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       (invoke_iii(484,($146|0),($151|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
       } else {
        $154 = (___cxa_allocate_exception(8)|0);
        $$expand_i1_val = 1;
        HEAP8[$41>>0] = $$expand_i1_val;
        $3 = $msg;
        $155 = $3;
        $156 = ((($155)) + 4|0);
        __THREW__ = 0;
        invoke_vii(618,($40|0),($156|0));
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         $164 = ___cxa_find_matching_catch()|0;
         $165 = tempRet0;
         $38 = $164;
         $39 = $165;
        } else {
         __THREW__ = 0;
         invoke_vii(619,($154|0),($40|0));
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if (!($160)) {
          $$expand_i1_val7 = 0;
          HEAP8[$41>>0] = $$expand_i1_val7;
          __THREW__ = 0;
          invoke_viii(620,($154|0),(632|0),(146|0));
          $161 = __THREW__; __THREW__ = 0;
         }
         $166 = ___cxa_find_matching_catch()|0;
         $167 = tempRet0;
         $38 = $166;
         $39 = $167;
         __THREW__ = 0;
         invoke_vi(502,($40|0));
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          $175 = ___cxa_find_matching_catch(0|0)|0;
          $176 = tempRet0;
          ___clang_call_terminate($175);
          // unreachable;
         }
        }
        $$pre_trunc = HEAP8[$41>>0]|0;
        $170 = $$pre_trunc&1;
        if ($170) {
         ___cxa_free_exception(($154|0));
        }
       }
      }
      if ((label|0) == 28) {
       $162 = ___cxa_find_matching_catch()|0;
       $163 = tempRet0;
       $38 = $162;
       $39 = $163;
      }
      __THREW__ = 0;
      invoke_vi(70,($msg|0));
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       $175 = ___cxa_find_matching_catch(0|0)|0;
       $176 = tempRet0;
       ___clang_call_terminate($175);
       // unreachable;
      } else {
       $173 = $38;
       $174 = $39;
       ___resumeException($173|0);
       // unreachable;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(502,($85|0));
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(194,($81|0));
    $127 = __THREW__; __THREW__ = 0;
    $128 = $127&1;
    if ($128) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    } else {
     $129 = $21;
     $130 = $22;
     $eh$lpad$body$i$index2Z2D = $130;$eh$lpad$body$i$indexZ2D = $129;
     break;
    }
   }
  } while(0);
  $33 = $eh$lpad$body$i$indexZ2D;
  $34 = $eh$lpad$body$i$index2Z2D;
  __THREW__ = 0;
  $137 = __THREW__; __THREW__ = 0;
  $138 = $137&1;
  if ($138) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
 }
 $139 = ((($43)) + 56|0);
 __THREW__ = 0;
 invoke_vi(210,($139|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if ($141) {
  $144 = ___cxa_find_matching_catch(0|0)|0;
  $145 = tempRet0;
  ___clang_call_terminate($144);
  // unreachable;
 } else {
  $142 = $33;
  $143 = $34;
  ___resumeException($142|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh2IO6binaryINSt3__16vectorIN4DGPC7Vector3IdEENS2_9allocatorIS6_EEEEE5storeERNS2_13basic_ostreamIcNS2_11char_traitsIcEEEERKS9_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0;
 var $__i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp + 212|0;
 $msg = sp + 24|0;
 $40 = sp;
 $41 = sp + 320|0;
 $35 = $0;
 $36 = $1;
 $42 = $2&1;
 $37 = $42;
 $31 = $msg;
 $32 = 16;
 $43 = $31;
 $44 = ((($43)) + 56|0);
 $30 = $44;
 $45 = $30;
 $29 = $45;
 $46 = $29;
 $47 = 6536;
 HEAP32[$46>>2] = $47;
 $48 = 6212;
 HEAP32[$45>>2] = $48;
 $49 = 3456;
 HEAP32[$43>>2] = $49;
 $50 = ((($43)) + 56|0);
 $51 = 3476;
 HEAP32[$50>>2] = $51;
 $52 = ((($43)) + 4|0);
 $26 = $43;
 $53 = 3488;
 $27 = $53;
 $28 = $52;
 $54 = $26;
 $55 = $27;
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = ((($55)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$54>>2]|0;
 $60 = ((($59)) + -12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($54) + ($61)|0);
 HEAP32[$62>>2] = $58;
 $63 = HEAP32[$54>>2]|0;
 $64 = ((($63)) + -12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($54) + ($65)|0);
 $67 = $28;
 $24 = $66;
 $25 = $67;
 $68 = $24;
 $69 = $25;
 __THREW__ = 0;
 invoke_vii(490,($68|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $133 = ___cxa_find_matching_catch()|0;
  $134 = tempRet0;
  $33 = $133;
  $34 = $134;
 } else {
  $72 = ((($68)) + 72|0);
  HEAP32[$72>>2] = 0;
  $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $74 = ((($68)) + 76|0);
  HEAP32[$74>>2] = $73;
  $75 = 3456;
  HEAP32[$43>>2] = $75;
  $76 = ((($43)) + 56|0);
  $77 = 3476;
  HEAP32[$76>>2] = $77;
  $78 = ((($43)) + 4|0);
  $79 = $32;
  $80 = $79 | 16;
  $19 = $78;
  $20 = $80;
  $81 = $19;
  __THREW__ = 0;
  invoke_vi(500,($81|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  do {
   if ($83) {
    $135 = ___cxa_find_matching_catch()|0;
    $136 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $136;$eh$lpad$body$i$indexZ2D = $135;
   } else {
    $84 = 3016;
    HEAP32[$81>>2] = $84;
    $85 = ((($81)) + 32|0);
    $18 = $85;
    $86 = $18;
    $17 = $86;
    $87 = $17;
    $16 = $87;
    $88 = $16;
    $15 = $88;
    $14 = $86;
    $89 = $14;
    $13 = $89;
    $90 = $13;
    $12 = $90;
    $91 = $12;
    $__a$i$i$i$i = $91;
    $__i$i$i$i$i = 0;
    while(1) {
     $92 = $__i$i$i$i$i;
     $93 = ($92>>>0)<(3);
     if (!($93)) {
      break;
     }
     $94 = $__i$i$i$i$i;
     $95 = $__a$i$i$i$i;
     $96 = (($95) + ($94<<2)|0);
     HEAP32[$96>>2] = 0;
     $97 = $__i$i$i$i$i;
     $98 = (($97) + 1)|0;
     $__i$i$i$i$i = $98;
    }
    $99 = ((($81)) + 44|0);
    HEAP32[$99>>2] = 0;
    $100 = ((($81)) + 48|0);
    $101 = $20;
    HEAP32[$100>>2] = $101;
    $11 = $23;
    $102 = $11;
    $10 = $102;
    $103 = $10;
    $9 = $103;
    $104 = $9;
    $8 = $104;
    $7 = $102;
    $105 = $7;
    $6 = $105;
    $106 = $6;
    $5 = $106;
    $107 = $5;
    $__a$i$i1$i$i = $107;
    $__i$i$i2$i$i = 0;
    while(1) {
     $108 = $__i$i$i2$i$i;
     $109 = ($108>>>0)<(3);
     if (!($109)) {
      break;
     }
     $110 = $__i$i$i2$i$i;
     $111 = $__a$i$i1$i$i;
     $112 = (($111) + ($110<<2)|0);
     HEAP32[$112>>2] = 0;
     $113 = $__i$i$i2$i$i;
     $114 = (($113) + 1)|0;
     $__i$i$i2$i$i = $114;
    }
    __THREW__ = 0;
    invoke_vii(501,($81|0),($23|0));
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    do {
     if ($116) {
      $121 = ___cxa_find_matching_catch()|0;
      $122 = tempRet0;
      $21 = $121;
      $22 = $122;
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $131 = ___cxa_find_matching_catch(0|0)|0;
       $132 = tempRet0;
       ___clang_call_terminate($131);
       // unreachable;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(502,($23|0));
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       $119 = ___cxa_find_matching_catch()|0;
       $120 = tempRet0;
       $21 = $119;
       $22 = $120;
       break;
      }
      __THREW__ = 0;
      $146 = (invoke_iii(484,($msg|0),(13513|0))|0);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      if ($148) {
       label = 28;
      } else {
       $4 = 560;
       $149 = $4;
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       (invoke_iii(484,($146|0),($151|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
       } else {
        $154 = (___cxa_allocate_exception(8)|0);
        $$expand_i1_val = 1;
        HEAP8[$41>>0] = $$expand_i1_val;
        $3 = $msg;
        $155 = $3;
        $156 = ((($155)) + 4|0);
        __THREW__ = 0;
        invoke_vii(618,($40|0),($156|0));
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         $164 = ___cxa_find_matching_catch()|0;
         $165 = tempRet0;
         $38 = $164;
         $39 = $165;
        } else {
         __THREW__ = 0;
         invoke_vii(619,($154|0),($40|0));
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if (!($160)) {
          $$expand_i1_val7 = 0;
          HEAP8[$41>>0] = $$expand_i1_val7;
          __THREW__ = 0;
          invoke_viii(620,($154|0),(632|0),(146|0));
          $161 = __THREW__; __THREW__ = 0;
         }
         $166 = ___cxa_find_matching_catch()|0;
         $167 = tempRet0;
         $38 = $166;
         $39 = $167;
         __THREW__ = 0;
         invoke_vi(502,($40|0));
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          $175 = ___cxa_find_matching_catch(0|0)|0;
          $176 = tempRet0;
          ___clang_call_terminate($175);
          // unreachable;
         }
        }
        $$pre_trunc = HEAP8[$41>>0]|0;
        $170 = $$pre_trunc&1;
        if ($170) {
         ___cxa_free_exception(($154|0));
        }
       }
      }
      if ((label|0) == 28) {
       $162 = ___cxa_find_matching_catch()|0;
       $163 = tempRet0;
       $38 = $162;
       $39 = $163;
      }
      __THREW__ = 0;
      invoke_vi(70,($msg|0));
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       $175 = ___cxa_find_matching_catch(0|0)|0;
       $176 = tempRet0;
       ___clang_call_terminate($175);
       // unreachable;
      } else {
       $173 = $38;
       $174 = $39;
       ___resumeException($173|0);
       // unreachable;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(502,($85|0));
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(194,($81|0));
    $127 = __THREW__; __THREW__ = 0;
    $128 = $127&1;
    if ($128) {
     $131 = ___cxa_find_matching_catch(0|0)|0;
     $132 = tempRet0;
     ___clang_call_terminate($131);
     // unreachable;
    } else {
     $129 = $21;
     $130 = $22;
     $eh$lpad$body$i$index2Z2D = $130;$eh$lpad$body$i$indexZ2D = $129;
     break;
    }
   }
  } while(0);
  $33 = $eh$lpad$body$i$indexZ2D;
  $34 = $eh$lpad$body$i$index2Z2D;
  __THREW__ = 0;
  $137 = __THREW__; __THREW__ = 0;
  $138 = $137&1;
  if ($138) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
 }
 $139 = ((($43)) + 56|0);
 __THREW__ = 0;
 invoke_vi(210,($139|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if ($141) {
  $144 = ___cxa_find_matching_catch(0|0)|0;
  $145 = tempRet0;
  ___clang_call_terminate($144);
  // unreachable;
 } else {
  $142 = $33;
  $143 = $34;
  ___resumeException($142|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE4plusclEjRKS3_($this,$_b,$_v) {
 $this = $this|0;
 $_b = $_b|0;
 $_v = $_v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_b;
 $2 = $_v;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN8OpenMesh2IO7size_ofIN4DGPC7Vector3IdEEEEjRKT_($4)|0);
 $6 = (($3) + ($5))|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN8OpenMesh2IO7size_ofIN4DGPC7Vector3IdEEEEjRKT_($_v) {
 $_v = $_v|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_v;
 $1 = $0;
 $2 = (__ZN8OpenMesh2IO6binaryIN4DGPC7Vector3IdEEE7size_ofERKS4_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN8OpenMesh2IO6binaryIN4DGPC7Vector3IdEEE7size_ofERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return -1;
}
function __ZN8OpenMesh2IO7size_ofIN4DGPC7Vector3IdEEEEjv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8OpenMesh2IO6binaryIN4DGPC7Vector3IdEEE7size_ofEv()|0);
 return ($0|0);
}
function __ZN8OpenMesh2IO6binaryIN4DGPC7Vector3IdEEE7size_ofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZN8OpenMesh12BaseProperty24check_and_set_persistentIN4DGPC7Vector3IdEEEEvb($this,$_yn) {
 $this = $this|0;
 $_yn = $_yn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $_yn&1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4&1;
 if ($5) {
  $6 = (__ZN8OpenMesh2IO13is_streamableIN4DGPC7Vector3IdEEEEbv()|0);
  if (!($6)) {
   $7 = (__Z5omerrv()|0);
   (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($7,14170)|0);
  }
 }
 $8 = (__ZN8OpenMesh2IO13is_streamableIN4DGPC7Vector3IdEEEEbv()|0);
 $9 = $1;
 $10 = $9&1;
 $11 = $8 ? $10 : 0;
 $12 = ((($3)) + 16|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 STACKTOP = sp;return;
}
function __ZN8OpenMesh2IO13is_streamableIN4DGPC7Vector3IdEEEEbv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEEC2ERKS4_($this,$_rhs) {
 $this = $this|0;
 $_rhs = $_rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_rhs;
 $4 = $0;
 $5 = $1;
 __ZN8OpenMesh12BasePropertyC2ERKS0_($4,$5);
 $6 = 3776;
 HEAP32[$4>>2] = $6;
 $7 = ((($4)) + 20|0);
 $8 = $1;
 $9 = ((($8)) + 20|0);
 __THREW__ = 0;
 invoke_vii(670,($7|0),($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = ___cxa_find_matching_catch()|0;
 $13 = tempRet0;
 $2 = $12;
 $3 = $13;
 __THREW__ = 0;
 invoke_vi(614,($4|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $18 = ___cxa_find_matching_catch(0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 } else {
  $16 = $2;
  $17 = $3;
  ___resumeException($16|0);
  // unreachable;
 }
}
function __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEEC2ERKS6_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 152|0;
 $7 = sp + 136|0;
 $11 = sp + 120|0;
 $17 = sp + 96|0;
 $18 = sp + 16|0;
 $21 = sp + 84|0;
 $22 = sp + 171|0;
 $23 = sp + 8|0;
 $27 = sp + 68|0;
 $28 = sp + 64|0;
 $29 = sp + 60|0;
 $30 = sp + 170|0;
 $32 = sp;
 $34 = sp + 169|0;
 $40 = sp + 168|0;
 $38 = $this;
 $39 = $__x;
 $43 = $38;
 $44 = $39;
 $37 = $44;
 $45 = $37;
 $46 = ((($45)) + 8|0);
 $36 = $46;
 $47 = $36;
 $35 = $47;
 $48 = $35;
 $33 = $48;
 $49 = $33;
 ;HEAP8[$32>>0]=HEAP8[$34>>0]|0;
 $31 = $49;
 $25 = $43;
 $26 = $40;
 $50 = $25;
 $24 = $50;
 $1 = $3;
 $2 = -1;
 $51 = $1;
 HEAP32[$51>>2] = 0;
 $52 = HEAP32[$3>>2]|0;
 HEAP32[$27>>2] = $52;
 $4 = $27;
 HEAP32[$50>>2] = 0;
 $53 = ((($50)) + 4|0);
 $5 = $7;
 $6 = -1;
 $54 = $5;
 HEAP32[$54>>2] = 0;
 $55 = HEAP32[$7>>2]|0;
 HEAP32[$28>>2] = $55;
 $8 = $28;
 HEAP32[$53>>2] = 0;
 $56 = ((($50)) + 8|0);
 $9 = $11;
 $10 = -1;
 $57 = $9;
 HEAP32[$57>>2] = 0;
 $58 = HEAP32[$11>>2]|0;
 HEAP32[$29>>2] = $58;
 $12 = $29;
 ;HEAP8[$23>>0]=HEAP8[$30>>0]|0;
 $20 = $56;
 HEAP32[$21>>2] = 0;
 $59 = $20;
 $19 = $21;
 $60 = $19;
 $61 = HEAP32[$60>>2]|0;
 $13 = $23;
 ;HEAP8[$18>>0]=HEAP8[$22>>0]|0;
 $16 = $59;
 HEAP32[$17>>2] = $61;
 $62 = $16;
 $15 = $18;
 $14 = $17;
 $63 = $14;
 $64 = HEAP32[$63>>2]|0;
 HEAP32[$62>>2] = $64;
 $65 = $39;
 $0 = $65;
 $66 = $0;
 $67 = ((($66)) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$66>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 24)&-1;
 $__n = $73;
 $74 = $__n;
 $75 = ($74>>>0)>(0);
 if (!($75)) {
  STACKTOP = sp;return;
 }
 $76 = $__n;
 __THREW__ = 0;
 invoke_vii(671,($43|0),($76|0));
 $77 = __THREW__; __THREW__ = 0;
 $78 = $77&1;
 if (!($78)) {
  $79 = $39;
  $80 = HEAP32[$79>>2]|0;
  $81 = $39;
  $82 = ((($81)) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  __THREW__ = 0;
  invoke_viii(672,($43|0),($80|0),($83|0));
  $84 = __THREW__; __THREW__ = 0;
  $85 = $84&1;
  if (!($85)) {
   STACKTOP = sp;return;
  }
 }
 $86 = ___cxa_find_matching_catch()|0;
 $87 = tempRet0;
 $41 = $86;
 $42 = $87;
 __THREW__ = 0;
 invoke_vi(673,($43|0));
 $88 = __THREW__; __THREW__ = 0;
 $89 = $88&1;
 if ($89) {
  $92 = ___cxa_find_matching_catch(0|0)|0;
  $93 = tempRet0;
  ___clang_call_terminate($92);
  // unreachable;
 } else {
  $90 = $41;
  $91 = $42;
  ___resumeException($90|0);
  // unreachable;
 }
}
function __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
 }
 $11 = $14;
 $18 = $11;
 $19 = ((($18)) + 8|0);
 $10 = $19;
 $20 = $10;
 $9 = $20;
 $21 = $9;
 $22 = $13;
 $7 = $21;
 $8 = $22;
 $23 = $7;
 $24 = $8;
 $4 = $23;
 $5 = $24;
 $6 = 0;
 $25 = $5;
 $26 = ($25*24)|0;
 $3 = $26;
 $27 = $3;
 $28 = (__Znwj($27)|0);
 $29 = ((($14)) + 4|0);
 HEAP32[$29>>2] = $28;
 HEAP32[$14>>2] = $28;
 $30 = HEAP32[$14>>2]|0;
 $31 = $13;
 $32 = (($30) + (($31*24)|0)|0);
 $2 = $14;
 $33 = $2;
 $34 = ((($33)) + 8|0);
 $1 = $34;
 $35 = $1;
 $0 = $35;
 $36 = $0;
 HEAP32[$36>>2] = $32;
 __ZNKSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE14__annotate_newEj($14,0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 44|0;
 $7 = $this;
 $8 = $__first;
 $9 = $__last;
 $10 = $7;
 $6 = $10;
 $11 = $6;
 $12 = ((($11)) + 8|0);
 $5 = $12;
 $13 = $5;
 $4 = $13;
 $14 = $4;
 $__a = $14;
 while(1) {
  $15 = $8;
  $16 = $9;
  $17 = ($15|0)!=($16|0);
  if (!($17)) {
   break;
  }
  __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator,$10,1);
  $18 = $__a;
  $19 = ((($10)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $3 = $20;
  $21 = $3;
  $22 = $8;
  $0 = $18;
  $1 = $21;
  $2 = $22;
  $23 = $1;
  $24 = $2;
  __ZN4DGPC7Vector3IdEC2ERKS1_($23,$24);
  __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $25 = ((($10)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 24|0);
  HEAP32[$25>>2] = $27;
  $28 = $8;
  $29 = ((($28)) + 24|0);
  $8 = $29;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN4DGPC7Vector3IdEENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 12|0;
 $32 = sp + 4|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = ((($40)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = ((($45)) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = ((($40)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -24|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = ((($55)) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = ((($61)) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $70 = (($69|0) / 24)&-1;
 $25 = $58;
 $26 = $59;
 $27 = $70;
 $71 = $25;
 $72 = $26;
 $73 = $27;
 $22 = $71;
 $23 = $72;
 $24 = $73;
 $74 = $23;
 $21 = $74;
 $75 = $21;
 __ZdlPv($75);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 77|0;
 $10 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $3 = $24;
 $25 = $3;
 ;HEAP8[$2>>0]=HEAP8[$4>>0]|0;
 $1 = $25;
 $26 = $1;
 $0 = $26;
 HEAP32[$18>>2] = 178956970;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $11 = $18;
 $12 = $19;
 $28 = $11;
 $29 = $12;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $8 = $28;
 $9 = $29;
 $30 = $9;
 $31 = $8;
 $5 = $10;
 $6 = $30;
 $7 = $31;
 $32 = $6;
 $33 = HEAP32[$32>>2]|0;
 $34 = $7;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $9;
 $38 = $8;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 24)&-1;
 $39 = (($26) + (($38*24)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 24)&-1;
 $55 = (($42) + (($54*24)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*24)|0)|0);
 __ZNKSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 72|0;
 $23 = sp + 60|0;
 $__v = sp + 12|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = ((($33)) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 24)&-1;
 $45 = (($44) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $45;
 $46 = $21;
 $47 = (__ZNKSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE8max_sizeEv($46)|0);
 $__ms$i = $47;
 $48 = HEAP32[$22>>2]|0;
 $49 = $__ms$i;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($46);
 }
 $19 = $46;
 $51 = $19;
 $18 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = ((($53)) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$52>>2]|0;
 $59 = $57;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 24)&-1;
 $__cap$i = $62;
 $63 = $__cap$i;
 $64 = $__ms$i;
 $65 = (($64>>>0) / 2)&-1;
 $66 = ($63>>>0)>=($65>>>0);
 if ($66) {
  $67 = $__ms$i;
  $20 = $67;
 } else {
  $68 = $__cap$i;
  $69 = $68<<1;
  HEAP32[$23>>2] = $69;
  $12 = $23;
  $13 = $22;
  $70 = $12;
  $71 = $13;
  ;HEAP8[$11>>0]=HEAP8[$14>>0]|0;
  $9 = $70;
  $10 = $71;
  $72 = $9;
  $73 = $10;
  $6 = $11;
  $7 = $72;
  $8 = $73;
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75>>>0)<($77>>>0);
  $79 = $10;
  $80 = $9;
  $81 = $78 ? $79 : $80;
  $82 = HEAP32[$81>>2]|0;
  $20 = $82;
 }
 $83 = $20;
 $5 = $32;
 $84 = $5;
 $85 = ((($84)) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$84>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 24)&-1;
 $92 = $__a;
 __ZNSt3__114__split_bufferIN4DGPC7Vector3IdEERNS_9allocatorIS3_EEEC2EjjS6_($__v,$83,$91,$92);
 $93 = $__a;
 $94 = ((($__v)) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $4 = $95;
 $96 = $4;
 $97 = $29;
 $3 = $97;
 $98 = $3;
 $0 = $93;
 $1 = $96;
 $2 = $98;
 $99 = $1;
 $100 = $2;
 __THREW__ = 0;
 invoke_vii(674,($99|0),($100|0));
 $101 = __THREW__; __THREW__ = 0;
 $102 = $101&1;
 if (!($102)) {
  $103 = ((($__v)) + 8|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ((($104)) + 24|0);
  HEAP32[$103>>2] = $105;
  __THREW__ = 0;
  invoke_vii(675,($32|0),($__v|0));
  $106 = __THREW__; __THREW__ = 0;
  $107 = $106&1;
  if (!($107)) {
   __ZNSt3__114__split_bufferIN4DGPC7Vector3IdEERNS_9allocatorIS3_EEED2Ev($__v);
   STACKTOP = sp;return;
  }
 }
 $108 = ___cxa_find_matching_catch()|0;
 $109 = tempRet0;
 $30 = $108;
 $31 = $109;
 __THREW__ = 0;
 invoke_vi(676,($__v|0));
 $110 = __THREW__; __THREW__ = 0;
 $111 = $110&1;
 if ($111) {
  $114 = ___cxa_find_matching_catch(0|0)|0;
  $115 = tempRet0;
  ___clang_call_terminate($114);
  // unreachable;
 } else {
  $112 = $30;
  $113 = $31;
  ___resumeException($112|0);
  // unreachable;
 }
}
function __ZNSt3__114__split_bufferIN4DGPC7Vector3IdEERNS_9allocatorIS3_EEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 124|0;
 $8 = sp + 108|0;
 $22 = sp + 52|0;
 $29 = sp + 24|0;
 $34 = sp + 4|0;
 $35 = sp;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = ((($36)) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = ((($46)) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = ((($54)) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $64 = ($63*24)|0;
  $14 = $64;
  $65 = $14;
  $66 = (__Znwj($65)|0);
  $69 = $66;
 } else {
  $20 = $22;
  $21 = -1;
  $67 = $20;
  HEAP32[$67>>2] = 0;
  $68 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $68;
  $23 = $35;
  $69 = 0;
 }
 HEAP32[$36>>2] = $69;
 $70 = HEAP32[$36>>2]|0;
 $71 = $32;
 $72 = (($70) + (($71*24)|0)|0);
 $73 = ((($36)) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = ((($36)) + 4|0);
 HEAP32[$74>>2] = $72;
 $75 = HEAP32[$36>>2]|0;
 $76 = $31;
 $77 = (($75) + (($76*24)|0)|0);
 $26 = $36;
 $78 = $26;
 $79 = ((($78)) + 12|0);
 $25 = $79;
 $80 = $25;
 $24 = $80;
 $81 = $24;
 HEAP32[$81>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 140|0;
 $__t$i1 = sp + 92|0;
 $__t$i = sp + 64|0;
 $36 = $this;
 $37 = $__v;
 $38 = $36;
 __ZNKSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE17__annotate_deleteEv($38);
 $35 = $38;
 $39 = $35;
 $40 = ((($39)) + 8|0);
 $34 = $40;
 $41 = $34;
 $33 = $41;
 $42 = $33;
 $43 = HEAP32[$38>>2]|0;
 $44 = ((($38)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $37;
 $47 = ((($46)) + 4|0);
 $28 = $42;
 $29 = $43;
 $30 = $45;
 $31 = $47;
 while(1) {
  $48 = $30;
  $49 = $29;
  $50 = ($48|0)!=($49|0);
  if (!($50)) {
   break;
  }
  $51 = $28;
  $52 = $31;
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + -24|0);
  $27 = $54;
  $55 = $27;
  $56 = $30;
  $57 = ((($56)) + -24|0);
  $30 = $57;
  $23 = $57;
  $58 = $23;
  $22 = $58;
  $59 = $22;
  $24 = $51;
  $25 = $55;
  $26 = $59;
  $60 = $25;
  $61 = $26;
  __ZN4DGPC7Vector3IdEC2ERKS1_($60,$61);
  $62 = $31;
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($63)) + -24|0);
  HEAP32[$62>>2] = $64;
 }
 $65 = $37;
 $66 = ((($65)) + 4|0);
 $20 = $38;
 $21 = $66;
 $67 = $20;
 $19 = $67;
 $68 = $19;
 $69 = HEAP32[$68>>2]|0;
 HEAP32[$__t$i>>2] = $69;
 $70 = $21;
 $17 = $70;
 $71 = $17;
 $72 = HEAP32[$71>>2]|0;
 $73 = $20;
 HEAP32[$73>>2] = $72;
 $18 = $__t$i;
 $74 = $18;
 $75 = HEAP32[$74>>2]|0;
 $76 = $21;
 HEAP32[$76>>2] = $75;
 $77 = ((($38)) + 4|0);
 $78 = $37;
 $79 = ((($78)) + 8|0);
 $3 = $77;
 $4 = $79;
 $80 = $3;
 $2 = $80;
 $81 = $2;
 $82 = HEAP32[$81>>2]|0;
 HEAP32[$__t$i2>>2] = $82;
 $83 = $4;
 $0 = $83;
 $84 = $0;
 $85 = HEAP32[$84>>2]|0;
 $86 = $3;
 HEAP32[$86>>2] = $85;
 $1 = $__t$i2;
 $87 = $1;
 $88 = HEAP32[$87>>2]|0;
 $89 = $4;
 HEAP32[$89>>2] = $88;
 $7 = $38;
 $90 = $7;
 $91 = ((($90)) + 8|0);
 $6 = $91;
 $92 = $6;
 $5 = $92;
 $93 = $5;
 $94 = $37;
 $10 = $94;
 $95 = $10;
 $96 = ((($95)) + 12|0);
 $9 = $96;
 $97 = $9;
 $8 = $97;
 $98 = $8;
 $14 = $93;
 $15 = $98;
 $99 = $14;
 $13 = $99;
 $100 = $13;
 $101 = HEAP32[$100>>2]|0;
 HEAP32[$__t$i1>>2] = $101;
 $102 = $15;
 $11 = $102;
 $103 = $11;
 $104 = HEAP32[$103>>2]|0;
 $105 = $14;
 HEAP32[$105>>2] = $104;
 $12 = $__t$i1;
 $106 = $12;
 $107 = HEAP32[$106>>2]|0;
 $108 = $15;
 HEAP32[$108>>2] = $107;
 $109 = $37;
 $110 = ((($109)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $37;
 HEAP32[$112>>2] = $111;
 $16 = $38;
 $113 = $16;
 $114 = ((($113)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = HEAP32[$113>>2]|0;
 $117 = $115;
 $118 = $116;
 $119 = (($117) - ($118))|0;
 $120 = (($119|0) / 24)&-1;
 __ZNKSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE14__annotate_newEj($38,$120);
 $32 = $38;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN4DGPC7Vector3IdEERNS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 8|0;
 $20 = sp + 125|0;
 $26 = sp;
 $29 = sp + 124|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26>>0]=HEAP8[$29>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = ((($38)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = ((($43)) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($38)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -24|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17>>0]=HEAP8[$20>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = ((($57)) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = ((($65)) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 24)&-1;
 $11 = $62;
 $12 = $63;
 $13 = $74;
 $75 = $11;
 $76 = $12;
 $77 = $13;
 $8 = $75;
 $9 = $76;
 $10 = $77;
 $78 = $9;
 $7 = $78;
 $79 = $7;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 24)&-1;
 $39 = (($26) + (($38*24)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 24)&-1;
 $51 = (($42) + (($50*24)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 24)&-1;
 $67 = (($54) + (($66*24)|0)|0);
 __ZNKSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 24)&-1;
 $35 = (($22) + (($34*24)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*24)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 24)&-1;
 $52 = (($43) + (($51*24)|0)|0);
 __ZNKSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE4swapERS6_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 124|0;
 $__t$i1 = sp + 76|0;
 $24 = sp;
 $27 = sp + 148|0;
 $__t$i = sp + 12|0;
 $33 = $this;
 $34 = $__x;
 $35 = $33;
 $36 = $34;
 $31 = $35;
 $32 = $36;
 $37 = $31;
 $30 = $37;
 $38 = $30;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$__t$i>>2] = $39;
 $40 = $32;
 $28 = $40;
 $41 = $28;
 $42 = HEAP32[$41>>2]|0;
 $43 = $31;
 HEAP32[$43>>2] = $42;
 $29 = $__t$i;
 $44 = $29;
 $45 = HEAP32[$44>>2]|0;
 $46 = $32;
 HEAP32[$46>>2] = $45;
 $47 = ((($35)) + 4|0);
 $48 = $34;
 $49 = ((($48)) + 4|0);
 $3 = $47;
 $4 = $49;
 $50 = $3;
 $2 = $50;
 $51 = $2;
 $52 = HEAP32[$51>>2]|0;
 HEAP32[$__t$i2>>2] = $52;
 $53 = $4;
 $0 = $53;
 $54 = $0;
 $55 = HEAP32[$54>>2]|0;
 $56 = $3;
 HEAP32[$56>>2] = $55;
 $1 = $__t$i2;
 $57 = $1;
 $58 = HEAP32[$57>>2]|0;
 $59 = $4;
 HEAP32[$59>>2] = $58;
 $7 = $35;
 $60 = $7;
 $61 = ((($60)) + 8|0);
 $6 = $61;
 $62 = $6;
 $5 = $62;
 $63 = $5;
 $64 = $34;
 $10 = $64;
 $65 = $10;
 $66 = ((($65)) + 8|0);
 $9 = $66;
 $67 = $9;
 $8 = $67;
 $68 = $8;
 $14 = $63;
 $15 = $68;
 $69 = $14;
 $13 = $69;
 $70 = $13;
 $71 = HEAP32[$70>>2]|0;
 HEAP32[$__t$i1>>2] = $71;
 $72 = $15;
 $11 = $72;
 $73 = $11;
 $74 = HEAP32[$73>>2]|0;
 $75 = $14;
 HEAP32[$75>>2] = $74;
 $12 = $__t$i1;
 $76 = $12;
 $77 = HEAP32[$76>>2]|0;
 $78 = $15;
 HEAP32[$78>>2] = $77;
 $18 = $35;
 $79 = $18;
 $80 = ((($79)) + 8|0);
 $17 = $80;
 $81 = $17;
 $16 = $81;
 $82 = $16;
 $83 = $34;
 $21 = $83;
 $84 = $21;
 $85 = ((($84)) + 8|0);
 $20 = $85;
 $86 = $20;
 $19 = $86;
 $87 = $19;
 $25 = $82;
 $26 = $87;
 $88 = $25;
 $89 = $26;
 ;HEAP8[$24>>0]=HEAP8[$27>>0]|0;
 $22 = $88;
 $23 = $89;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN4DGPC7Vector3IdEENS_9allocatorIS3_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 24)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$20>>2]|0;
 $39 = $19;
 $40 = (($38) + (($39*24)|0)|0);
 $13 = $20;
 $14 = $40;
 $41 = $13;
 $12 = $41;
 $42 = $12;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($48|0) / 24)&-1;
 $__old_size$i = $49;
 $50 = $14;
 $10 = $41;
 $11 = $50;
 $51 = $10;
 while(1) {
  $52 = $11;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $9 = $51;
  $56 = $9;
  $57 = ((($56)) + 8|0);
  $8 = $57;
  $58 = $8;
  $7 = $58;
  $59 = $7;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -24|0);
  HEAP32[$60>>2] = $62;
  $0 = $62;
  $63 = $0;
  $4 = $59;
  $5 = $63;
  $64 = $4;
  $65 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $64;
  $2 = $65;
 }
 $66 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(667,($41|0),($66|0));
 $67 = __THREW__; __THREW__ = 0;
 $68 = $67&1;
 if ($68) {
  $69 = ___cxa_find_matching_catch()|0;
  $70 = tempRet0;
  $15 = $69;
  $16 = $70;
  $71 = $15;
  ___cxa_call_unexpected(($71|0));
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0;
 var $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 72|0;
 $__v = sp + 12|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 24)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = ((($45)) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 24)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 24)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  $92 = $5;
  $93 = $4;
  $94 = $91 ? $92 : $93;
  $95 = HEAP32[$94>>2]|0;
  $15 = $95;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 24)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferIN4DGPC7Vector3IdEERNS_9allocatorIS3_EEEC2EjjS6_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(677,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if (!($108)) {
  __THREW__ = 0;
  invoke_vii(675,($30|0),($__v|0));
  $109 = __THREW__; __THREW__ = 0;
  $110 = $109&1;
  if (!($110)) {
   __ZNSt3__114__split_bufferIN4DGPC7Vector3IdEERNS_9allocatorIS3_EEED2Ev($__v);
   STACKTOP = sp;return;
  }
 }
 $111 = ___cxa_find_matching_catch()|0;
 $112 = tempRet0;
 $28 = $111;
 $29 = $112;
 __THREW__ = 0;
 invoke_vi(676,($__v|0));
 $113 = __THREW__; __THREW__ = 0;
 $114 = $113&1;
 if ($114) {
  $117 = ___cxa_find_matching_catch(0|0)|0;
  $118 = tempRet0;
  ___clang_call_terminate($117);
  // unreachable;
 } else {
  $115 = $28;
  $116 = $29;
  ___resumeException($115|0);
  // unreachable;
 }
}
function __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 36|0;
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = ((($9)) + 8|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $__a = $12;
 while(1) {
  __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator,$8,1);
  $13 = $__a;
  $14 = ((($8)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $2 = $15;
  $16 = $2;
  $0 = $13;
  $1 = $16;
  $17 = $1;
  __ZN4DGPC7Vector3IdEC2Ev($17);
  $18 = ((($8)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 24|0);
  HEAP32[$18>>2] = $20;
  $21 = $7;
  $22 = (($21) + -1)|0;
  $7 = $22;
  __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $23 = $7;
  $24 = ($23>>>0)>(0);
  if (!($24)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN4DGPC7Vector3IdEERNS_9allocatorIS3_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = ((($9)) + 12|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $__a = $14;
 while(1) {
  $15 = $__a;
  $16 = ((($8)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $0 = $17;
  $18 = $0;
  $1 = $15;
  $2 = $18;
  $19 = $2;
  __ZN4DGPC7Vector3IdEC2Ev($19);
  $20 = ((($8)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 24|0);
  HEAP32[$20>>2] = $22;
  $23 = $7;
  $24 = (($23) + -1)|0;
  $7 = $24;
  $25 = $7;
  $26 = ($25>>>0)>(0);
  if (!($26)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp + 8|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $14 = $10;
 $8 = $13;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = ((($17)) + 8|0);
 $5 = $18;
 $19 = $5;
 $4 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$16>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 24)&-1;
 $27 = ($14>>>0)>($26>>>0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $3 = $13;
 $28 = $3;
 $29 = ((($28)) + 8|0);
 $2 = $29;
 $30 = $2;
 $1 = $30;
 $31 = $1;
 $__a = $31;
 $32 = $10;
 $0 = $13;
 $33 = $0;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$33>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 24)&-1;
 $41 = $__a;
 __ZNSt3__114__split_bufferIN4DGPC7Vector3IdEERNS_9allocatorIS3_EEEC2EjjS6_($__v,$32,$40,$41);
 __THREW__ = 0;
 invoke_vii(675,($13|0),($__v|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if (!($43)) {
  __ZNSt3__114__split_bufferIN4DGPC7Vector3IdEERNS_9allocatorIS3_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $44 = ___cxa_find_matching_catch()|0;
 $45 = tempRet0;
 $11 = $44;
 $12 = $45;
 __THREW__ = 0;
 invoke_vi(676,($__v|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $50 = ___cxa_find_matching_catch(0|0)|0;
  $51 = tempRet0;
  ___clang_call_terminate($50);
  // unreachable;
 } else {
  $48 = $11;
  $49 = $12;
  ___resumeException($48|0);
  // unreachable;
 }
}
function __ZN8OpenMesh15BasePropHandleTIiEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh10BaseHandleC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh15BasePropHandleTINS_7VectorTIhLi3EEEEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh10BaseHandleC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh15BasePropHandleTINS_7VectorTIfLi3EEEEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh10BaseHandleC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh15BasePropHandleTINS_7VectorTIfLi2EEEEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh10BaseHandleC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh15BasePropHandleTIfEC2Ei($this,$_idx) {
 $this = $this|0;
 $_idx = $_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_idx;
 $2 = $0;
 $3 = $1;
 __ZN8OpenMesh10BaseHandleC2Ei($2,$3);
 STACKTOP = sp;return;
}
function __ZN8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(51,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function _strtoull_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoull($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtoll_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoll($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _isblank($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = ($c|0)==(9);
 $2 = $0 | $1;
 $3 = $2&1;
 return ($3|0);
}
function _isdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $0 = $isdigit&1;
 return ($0|0);
}
function _isxdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isxdigit($c)|0);
 return ($0|0);
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)!=(0|0);
 $1 = $0 ? $st : 4048;
 $2 = (_mbrtowc(0,$s,$n,$1)|0);
 return ($2|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$023 = 0, $$1 = 0, $$lcssa = 0, $$lcssa34 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$04 = 0, $c$1 = 0, $c$2 = 0, $s$05 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$st = $1 ? 4052 : $st;
 $2 = HEAP32[$$st>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src>>0]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = ((($src)) + 1|0);
      $17 = (3844 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $20 = ($19|0)==(0);
      if ($20) {
       $c$2 = $18;
       break;
      } else {
       $$023 = $19;$c$04 = $18;$s$05 = $16;
       label = 11;
       break;
      }
     }
    } else {
     $$023 = $n;$c$04 = $2;$s$05 = $src;
     label = 11;
    }
   } while(0);
   L18: do {
    if ((label|0) == 11) {
     $21 = HEAP8[$s$05>>0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$04 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     } else {
      $$1 = $$023;$32 = $21;$c$1 = $c$04;$s$1 = $s$05;
     }
     while(1) {
      $29 = $c$1 << 6;
      $30 = ((($s$1)) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       $$lcssa = $34;$$lcssa34 = $35;
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $c$2 = $34;
       break L18;
      }
      $39 = HEAP8[$30>>0]|0;
      $40 = $39 & -64;
      $41 = ($40<<24>>24)==(-128);
      if ($41) {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      } else {
       break L1;
      }
     }
     HEAP32[$$st>>2] = 0;
     HEAP32[$11>>2] = $$lcssa;
     $37 = (($n) - ($$lcssa34))|0;
     $$0 = $37;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   HEAP32[$$st>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$st>>2] = 0;
 $42 = (___errno_location()|0);
 HEAP32[$42>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$02$ = 0, $$021 = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$216 = 0, $$24 = 0, $$313 = 0, $$cast = 0, $$lcssa = 0, $$lcssa57 = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$019 = 0, $cnt$1 = 0, $cnt$214 = 0, $cnt$214$lcssa = 0, $cnt$3 = 0, $or$cond = 0, $or$cond17 = 0, $s = 0, $wbuf = 0, $wcs$ = 0;
 var $wn$ = 0, $ws$020 = 0, $ws$020$lcssa56 = 0, $ws$09 = 0, $ws$1 = 0, $ws$215 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wbuf = sp + 8|0;
 $s = sp;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $1 = ($wcs|0)!=(0|0);
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $$cast = $0;
 $2 = ($0|0)!=(0);
 $3 = ($wn$|0)!=(0);
 $or$cond17 = $3 & $2;
 L1: do {
  if ($or$cond17) {
   $$021 = $n;$$0218 = $wn$;$37 = $$cast;$cnt$019 = 0;$ws$020 = $wcs$;
   while(1) {
    $4 = $$021 >>> 2;
    $5 = ($4>>>0)>=($$0218>>>0);
    $6 = ($$021>>>0)>(131);
    $7 = $6 | $5;
    if (!($7)) {
     $$1 = $$021;$$24 = $$0218;$19 = $37;$cnt$1 = $cnt$019;$ws$09 = $ws$020;
     break L1;
    }
    $$02$ = $5 ? $$0218 : $4;
    $8 = (($$021) - ($$02$))|0;
    $9 = (_mbsrtowcs($ws$020,$s,$$02$,$st)|0);
    $10 = ($9|0)==(-1);
    if ($10) {
     $$lcssa57 = $8;$ws$020$lcssa56 = $ws$020;
     break;
    }
    $11 = ($ws$020|0)==($wbuf|0);
    $12 = (($ws$020) + ($9<<2)|0);
    $13 = $11 ? 0 : $9;
    $$13 = (($$0218) - ($13))|0;
    $ws$1 = $11 ? $ws$020 : $12;
    $14 = (($9) + ($cnt$019))|0;
    $15 = HEAP32[$s>>2]|0;
    $16 = ($15|0)!=(0|0);
    $17 = ($$0218|0)!=($13|0);
    $or$cond = $17 & $16;
    if ($or$cond) {
     $$021 = $8;$$0218 = $$13;$37 = $15;$cnt$019 = $14;$ws$020 = $ws$1;
    } else {
     $$1 = $8;$$24 = $$13;$19 = $15;$cnt$1 = $14;$ws$09 = $ws$1;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$s>>2]|0;
   $$1 = $$lcssa57;$$24 = 0;$19 = $$pr$pre;$cnt$1 = -1;$ws$09 = $ws$020$lcssa56;
  } else {
   $$1 = $n;$$24 = $wn$;$19 = $$cast;$cnt$1 = 0;$ws$09 = $wcs$;
  }
 } while(0);
 $18 = ($19|0)==(0|0);
 L8: do {
  if ($18) {
   $cnt$3 = $cnt$1;
  } else {
   $20 = ($$24|0)!=(0);
   $21 = ($$1|0)!=(0);
   $22 = $20 & $21;
   if ($22) {
    $$216 = $$1;$$313 = $$24;$23 = $19;$cnt$214 = $cnt$1;$ws$215 = $ws$09;
    while(1) {
     $24 = (_mbrtowc($ws$215,$23,$$216,$st)|0);
     $25 = (($24) + 2)|0;
     $26 = ($25>>>0)<(3);
     if ($26) {
      $$lcssa = $24;$cnt$214$lcssa = $cnt$214;
      break;
     }
     $27 = HEAP32[$s>>2]|0;
     $28 = (($27) + ($24)|0);
     HEAP32[$s>>2] = $28;
     $29 = (($$216) - ($24))|0;
     $30 = ((($ws$215)) + 4|0);
     $31 = (($$313) + -1)|0;
     $32 = (($cnt$214) + 1)|0;
     $33 = ($31|0)!=(0);
     $34 = ($$216|0)!=($24|0);
     $35 = $33 & $34;
     if ($35) {
      $$216 = $29;$$313 = $31;$23 = $28;$cnt$214 = $32;$ws$215 = $30;
     } else {
      $cnt$3 = $32;
      break L8;
     }
    }
    switch ($$lcssa|0) {
    case -1:  {
     $cnt$3 = -1;
     break L8;
     break;
    }
    case 0:  {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$214$lcssa;
     break L8;
     break;
    }
    default: {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$214$lcssa;
     break L8;
    }
    }
   } else {
    $cnt$3 = $cnt$1;
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $36 = HEAP32[$s>>2]|0;
 HEAP32[$src>>2] = $36;
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$02$ph = 0, $$0219 = 0, $$03 = 0, $$1 = 0, $$1$lcssa = 0, $$14$lcssa = 0, $$1415 = 0, $$2 = 0, $$2$lcssa = 0, $$25 = 0, $$25$lcssa = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$434 = 0, $$47$ph = 0, $$4718 = 0, $$48 = 0, $$5 = 0;
 var $$5$lcssa = 0, $$6 = 0, $$6$lcssa = 0, $$7 = 0, $$8 = 0, $$833 = 0, $$in = 0, $$lcssa102 = 0, $$lcssa90 = 0, $$lcssa94 = 0, $$lcssa96 = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$old1 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0, $s$1035 = 0, $s$109 = 0, $s$116 = 0, $s$2 = 0, $s$2$lcssa = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0;
 var $s$520 = 0, $s$6 = 0, $s$6$lcssa = 0, $s$7 = 0, $s$7$lcssa = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$36 = $wn;$c$2 = $2;$s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 37;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$03 = $wn;$s$0 = $0;
   label = 7;
  } else {
   $$02$ph = $ws;$$47$ph = $wn;$s$5$ph = $0;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $6 = ($$47$ph|0)==(0);
   if ($6) {
    $s$5$lcssa = $s$5$ph;
    label = 26;
    break;
   } else {
    $$0219 = $$02$ph;$$4718 = $$47$ph;$s$520 = $s$5$ph;
   }
   while(1) {
    $63 = HEAP8[$s$520>>0]|0;
    $64 = $63&255;
    $65 = (($64) + -1)|0;
    $66 = ($65>>>0)<(127);
    do {
     if ($66) {
      $67 = $s$520;
      $68 = $67 & 3;
      $69 = ($68|0)==(0);
      $70 = ($$4718>>>0)>(4);
      $or$cond = $70 & $69;
      if ($or$cond) {
       $$1 = $$0219;$$5 = $$4718;$s$6 = $s$520;
       while(1) {
        $71 = HEAP32[$s$6>>2]|0;
        $72 = (($71) + -16843009)|0;
        $73 = $72 | $71;
        $74 = $73 & -2139062144;
        $75 = ($74|0)==(0);
        if (!($75)) {
         $$1$lcssa = $$1;$$5$lcssa = $$5;$$lcssa94 = $71;$s$6$lcssa = $s$6;
         label = 32;
         break;
        }
        $76 = ((($s$6)) + 1|0);
        $77 = $71 & 255;
        $78 = ((($$1)) + 4|0);
        HEAP32[$$1>>2] = $77;
        $79 = ((($s$6)) + 2|0);
        $80 = HEAP8[$76>>0]|0;
        $81 = $80&255;
        $82 = ((($$1)) + 8|0);
        HEAP32[$78>>2] = $81;
        $83 = ((($s$6)) + 3|0);
        $84 = HEAP8[$79>>0]|0;
        $85 = $84&255;
        $86 = ((($$1)) + 12|0);
        HEAP32[$82>>2] = $85;
        $87 = ((($s$6)) + 4|0);
        $88 = HEAP8[$83>>0]|0;
        $89 = $88&255;
        $90 = ((($$1)) + 16|0);
        HEAP32[$86>>2] = $89;
        $91 = (($$5) + -4)|0;
        $$old1 = ($91>>>0)>(4);
        if ($$old1) {
         $$1 = $90;$$5 = $91;$s$6 = $87;
        } else {
         $$lcssa96 = $87;$$lcssa97 = $90;$$lcssa98 = $91;
         label = 31;
         break;
        }
       }
       if ((label|0) == 31) {
        label = 0;
        $$pre$pre = HEAP8[$$lcssa96>>0]|0;
        $$2 = $$lcssa97;$$6 = $$lcssa98;$94 = $$pre$pre;$s$7 = $$lcssa96;
        break;
       }
       else if ((label|0) == 32) {
        label = 0;
        $92 = $$lcssa94&255;
        $$2 = $$1$lcssa;$$6 = $$5$lcssa;$94 = $92;$s$7 = $s$6$lcssa;
        break;
       }
      } else {
       $$2 = $$0219;$$6 = $$4718;$94 = $63;$s$7 = $s$520;
      }
     } else {
      $$2 = $$0219;$$6 = $$4718;$94 = $63;$s$7 = $s$520;
     }
    } while(0);
    $93 = $94&255;
    $95 = (($93) + -1)|0;
    $96 = ($95>>>0)<(127);
    if (!($96)) {
     $$2$lcssa = $$2;$$6$lcssa = $$6;$$lcssa102 = $93;$s$7$lcssa = $s$7;
     break;
    }
    $97 = ((($s$7)) + 1|0);
    $98 = ((($$2)) + 4|0);
    HEAP32[$$2>>2] = $93;
    $99 = (($$6) + -1)|0;
    $100 = ($99|0)==(0);
    if ($100) {
     $s$5$lcssa = $97;
     label = 26;
     break L7;
    } else {
     $$0219 = $98;$$4718 = $99;$s$520 = $97;
    }
   }
   $101 = (($$lcssa102) + -194)|0;
   $102 = ($101>>>0)>(50);
   if ($102) {
    $$434 = $$2$lcssa;$$833 = $$6$lcssa;$s$1035 = $s$7$lcssa;
    label = 48;
    break;
   }
   $103 = ((($s$7$lcssa)) + 1|0);
   $104 = (3844 + ($101<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $$3 = $$2$lcssa;$$7 = $$6$lcssa;$c$4 = $105;$s$8 = $103;
   label = 37;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0>>0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ($9>>>0)<(127);
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$s$0>>2]|0;
     $15 = (($14) + -16843009)|0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17|0)==(0);
     if ($18) {
      $$1415 = $$03;$s$116 = $s$0;
      while(1) {
       $19 = ((($s$116)) + 4|0);
       $20 = (($$1415) + -4)|0;
       $21 = HEAP32[$19>>2]|0;
       $22 = (($21) + -16843009)|0;
       $23 = $22 | $21;
       $24 = $23 & -2139062144;
       $25 = ($24|0)==(0);
       if ($25) {
        $$1415 = $20;$s$116 = $19;
       } else {
        $$14$lcssa = $20;$$in = $21;$s$1$lcssa = $19;
        break;
       }
      }
     } else {
      $$14$lcssa = $$03;$$in = $14;$s$1$lcssa = $s$0;
     }
     $26 = $$in&255;
     $$25 = $$14$lcssa;$28 = $26;$s$2 = $s$1$lcssa;
    } else {
     $$25 = $$03;$28 = $7;$s$2 = $s$0;
    }
   } else {
    $$25 = $$03;$28 = $7;$s$2 = $s$0;
   }
   $27 = $28&255;
   $29 = (($27) + -1)|0;
   $30 = ($29>>>0)<(127);
   if ($30) {
    $31 = ((($s$2)) + 1|0);
    $32 = (($$25) + -1)|0;
    $$03 = $32;$s$0 = $31;
    label = 7;
    continue;
   } else {
    $$25$lcssa = $$25;$$lcssa90 = $27;$s$2$lcssa = $s$2;
   }
   $33 = (($$lcssa90) + -194)|0;
   $34 = ($33>>>0)>(50);
   if ($34) {
    $$434 = $ws;$$833 = $$25$lcssa;$s$1035 = $s$2$lcssa;
    label = 48;
    break;
   }
   $35 = ((($s$2$lcssa)) + 1|0);
   $36 = (3844 + ($33<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $$36 = $$25$lcssa;$c$2 = $37;$s$3 = $35;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $38 = HEAP8[$s$3>>0]|0;
   $39 = $38&255;
   $40 = $39 >>> 3;
   $41 = (($40) + -16)|0;
   $42 = $c$2 >> 26;
   $43 = (($40) + ($42))|0;
   $44 = $41 | $43;
   $45 = ($44>>>0)>(7);
   if ($45) {
    label = 17;
    break;
   }
   $47 = ((($s$3)) + 1|0);
   $48 = $c$2 & 33554432;
   $49 = ($48|0)==(0);
   if ($49) {
    $s$4 = $47;
   } else {
    $50 = HEAP8[$47>>0]|0;
    $51 = $50 & -64;
    $52 = ($51<<24>>24)==(-128);
    if (!($52)) {
     label = 20;
     break;
    }
    $54 = ((($s$3)) + 2|0);
    $55 = $c$2 & 524288;
    $56 = ($55|0)==(0);
    if ($56) {
     $s$4 = $54;
    } else {
     $57 = HEAP8[$54>>0]|0;
     $58 = $57 & -64;
     $59 = ($58<<24>>24)==(-128);
     if (!($59)) {
      label = 23;
      break;
     }
     $61 = ((($s$3)) + 3|0);
     $s$4 = $61;
    }
   }
   $62 = (($$36) + -1)|0;
   $$03 = $62;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 37) {
   label = 0;
   $106 = HEAP8[$s$8>>0]|0;
   $107 = $106&255;
   $108 = $107 >>> 3;
   $109 = (($108) + -16)|0;
   $110 = $c$4 >> 26;
   $111 = (($108) + ($110))|0;
   $112 = $109 | $111;
   $113 = ($112>>>0)>(7);
   if ($113) {
    label = 38;
    break;
   }
   $115 = $c$4 << 6;
   $116 = ((($s$8)) + 1|0);
   $117 = (($107) + -128)|0;
   $118 = $117 | $115;
   $119 = ($118|0)<(0);
   if ($119) {
    $120 = HEAP8[$116>>0]|0;
    $121 = $120&255;
    $122 = $121 & 192;
    $123 = ($122|0)==(128);
    if (!($123)) {
     label = 41;
     break;
    }
    $125 = $118 << 6;
    $126 = ((($s$8)) + 2|0);
    $127 = (($121) + -128)|0;
    $128 = $127 | $125;
    $129 = ($128|0)<(0);
    if ($129) {
     $130 = HEAP8[$126>>0]|0;
     $131 = $130&255;
     $132 = $131 & 192;
     $133 = ($132|0)==(128);
     if (!($133)) {
      label = 44;
      break;
     }
     $135 = $128 << 6;
     $136 = ((($s$8)) + 3|0);
     $137 = (($131) + -128)|0;
     $138 = $137 | $135;
     $c$5 = $138;$s$9 = $136;
    } else {
     $c$5 = $128;$s$9 = $126;
    }
   } else {
    $c$5 = $118;$s$9 = $116;
   }
   $139 = ((($$3)) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $140 = (($$7) + -1)|0;
   $$02$ph = $139;$$47$ph = $140;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $46 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $46;
  label = 47;
 }
 else if ((label|0) == 20) {
  $53 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $53;
  label = 47;
 }
 else if ((label|0) == 23) {
  $60 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $60;
  label = 47;
 }
 else if ((label|0) == 26) {
  HEAP32[$src>>2] = $s$5$lcssa;
  $$0 = $wn;
  return ($$0|0);
 }
 else if ((label|0) == 38) {
  $114 = ((($s$8)) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $114;
  label = 47;
 }
 else if ((label|0) == 41) {
  $124 = ((($s$8)) + -1|0);
  $$48 = $$3;$s$109 = $124;
 }
 else if ((label|0) == 44) {
  $134 = ((($s$8)) + -1|0);
  $$48 = $$3;$s$109 = $134;
 }
 if ((label|0) == 47) {
  $141 = ($c$6|0)==(0);
  if ($141) {
   $$434 = $$4;$$833 = $$8;$s$1035 = $s$10;
   label = 48;
  } else {
   $$48 = $$4;$s$109 = $s$10;
  }
 }
 if ((label|0) == 48) {
  $142 = HEAP8[$s$1035>>0]|0;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $144 = ($$434|0)==(0|0);
   if (!($144)) {
    HEAP32[$$434>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $145 = (($wn) - ($$833))|0;
   $$0 = $145;
   return ($$0|0);
  } else {
   $$48 = $$434;$s$109 = $s$1035;
  }
 }
 $146 = (___errno_location()|0);
 HEAP32[$146>>2] = 84;
 $147 = ($$48|0)==(0|0);
 if ($147) {
  $$0 = -1;
  return ($$0|0);
 }
 HEAP32[$src>>2] = $s$109;
 $$0 = -1;
 return ($$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($src|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($n|0)==(0);
 do {
  if (!($2)) {
   $3 = ($wc|0)==(0|0);
   if ($3) {
    HEAP32[$0>>2] = $0;
    $7 = $0;
   } else {
    $7 = $wc;
   }
   $4 = HEAP8[$src>>0]|0;
   $5 = $4&255;
   $6 = ($4<<24>>24)>(-1);
   if ($6) {
    HEAP32[$7>>2] = $5;
    $8 = ($4<<24>>24)!=(0);
    $9 = $8&1;
    $$0 = $9;
    STACKTOP = sp;return ($$0|0);
   }
   $10 = (($5) + -194)|0;
   $11 = ($10>>>0)>(50);
   if (!($11)) {
    $12 = ((($src)) + 1|0);
    $13 = (3844 + ($10<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($n>>>0)<(4);
    if ($15) {
     $16 = ($n*6)|0;
     $17 = (($16) + -6)|0;
     $18 = -2147483648 >>> $17;
     $19 = $14 & $18;
     $20 = ($19|0)==(0);
     if (!($20)) {
      break;
     }
    }
    $21 = HEAP8[$12>>0]|0;
    $22 = $21&255;
    $23 = $22 >>> 3;
    $24 = (($23) + -16)|0;
    $25 = $14 >> 26;
    $26 = (($23) + ($25))|0;
    $27 = $24 | $26;
    $28 = ($27>>>0)>(7);
    if (!($28)) {
     $29 = $14 << 6;
     $30 = (($22) + -128)|0;
     $31 = $30 | $29;
     $32 = ($31|0)<(0);
     if (!($32)) {
      HEAP32[$7>>2] = $31;
      $$0 = 2;
      STACKTOP = sp;return ($$0|0);
     }
     $33 = ((($src)) + 2|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34&255;
     $36 = $35 & 192;
     $37 = ($36|0)==(128);
     if ($37) {
      $38 = $31 << 6;
      $39 = (($35) + -128)|0;
      $40 = $39 | $38;
      $41 = ($40|0)<(0);
      if (!($41)) {
       HEAP32[$7>>2] = $40;
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      $42 = ((($src)) + 3|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = $43&255;
      $45 = $44 & 192;
      $46 = ($45|0)==(128);
      if ($46) {
       $47 = $40 << 6;
       $48 = (($44) + -128)|0;
       $49 = $48 | $47;
       HEAP32[$7>>2] = $49;
       $$0 = 4;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   }
  }
 } while(0);
 $50 = (___errno_location()|0);
 HEAP32[$50>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$02$$0 = 0, $$021 = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$216 = 0, $$24 = 0, $$313 = 0, $$cast = 0, $$lcssa = 0, $$lcssa57 = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$019 = 0, $cnt$1 = 0, $cnt$214 = 0, $cnt$214$lcssa = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $or$cond = 0;
 var $or$cond17 = 0, $s$020 = 0, $s$020$lcssa56 = 0, $s$09 = 0, $s$1 = 0, $s$215 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 8|0;
 $ws = sp;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $1 = ($dst|0)!=(0|0);
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $$cast = $0;
 $2 = ($0|0)!=(0);
 $3 = ($n$|0)!=(0);
 $or$cond17 = $3 & $2;
 L1: do {
  if ($or$cond17) {
   $$021 = $wn;$$0218 = $n$;$38 = $$cast;$cnt$019 = 0;$s$020 = $dst$;
   while(1) {
    $4 = ($$021>>>0)>=($$0218>>>0);
    $5 = ($$021>>>0)>(32);
    $6 = $4 | $5;
    if (!($6)) {
     $$1 = $$021;$$24 = $$0218;$18 = $38;$cnt$1 = $cnt$019;$s$09 = $s$020;
     break L1;
    }
    $$02$$0 = $4 ? $$0218 : $$021;
    $7 = (($$021) - ($$02$$0))|0;
    $8 = (_wcsrtombs($s$020,$ws,$$02$$0,0)|0);
    $9 = ($8|0)==(-1);
    if ($9) {
     $$lcssa57 = $7;$s$020$lcssa56 = $s$020;
     break;
    }
    $10 = ($s$020|0)==($buf|0);
    $11 = (($s$020) + ($8)|0);
    $12 = $10 ? 0 : $8;
    $$13 = (($$0218) - ($12))|0;
    $s$1 = $10 ? $s$020 : $11;
    $13 = (($8) + ($cnt$019))|0;
    $14 = HEAP32[$ws>>2]|0;
    $15 = ($14|0)!=(0|0);
    $16 = ($$0218|0)!=($12|0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$021 = $7;$$0218 = $$13;$38 = $14;$cnt$019 = $13;$s$020 = $s$1;
    } else {
     $$1 = $7;$$24 = $$13;$18 = $14;$cnt$1 = $13;$s$09 = $s$1;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$ws>>2]|0;
   $$1 = $$lcssa57;$$24 = 0;$18 = $$pr$pre;$cnt$1 = -1;$s$09 = $s$020$lcssa56;
  } else {
   $$1 = $wn;$$24 = $n$;$18 = $$cast;$cnt$1 = 0;$s$09 = $dst$;
  }
 } while(0);
 $17 = ($18|0)==(0|0);
 L8: do {
  if ($17) {
   $cnt$3 = $cnt$1;
  } else {
   $19 = ($$24|0)!=(0);
   $20 = ($$1|0)!=(0);
   $21 = $19 & $20;
   if ($21) {
    $$216 = $$1;$$313 = $$24;$23 = $18;$cnt$214 = $cnt$1;$s$215 = $s$09;
    while(1) {
     $22 = HEAP32[$23>>2]|0;
     $24 = (_wcrtomb($s$215,$22,0)|0);
     $25 = (($24) + 1)|0;
     $26 = ($25>>>0)<(2);
     if ($26) {
      $$lcssa = $24;$cnt$214$lcssa = $cnt$214;
      break;
     }
     $28 = HEAP32[$ws>>2]|0;
     $29 = ((($28)) + 4|0);
     HEAP32[$ws>>2] = $29;
     $30 = (($$216) + -1)|0;
     $31 = (($s$215) + ($24)|0);
     $32 = (($$313) - ($24))|0;
     $33 = (($cnt$214) + 1)|0;
     $34 = ($$313|0)!=($24|0);
     $35 = ($30|0)!=(0);
     $36 = $34 & $35;
     if ($36) {
      $$216 = $30;$$313 = $32;$23 = $29;$cnt$214 = $33;$s$215 = $31;
     } else {
      $cnt$3 = $33;
      break L8;
     }
    }
    $27 = ($$lcssa|0)==(0);
    if ($27) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$214$lcssa;
    } else {
     $cnt$3 = -1;
    }
   } else {
    $cnt$3 = $cnt$1;
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $37 = HEAP32[$ws>>2]|0;
 HEAP32[$wcs>>2] = $37;
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01$lcssa = 0, $$0129 = 0, $$0129$lcssa = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$223 = 0, $$223$lcssa = 0, $$24$lcssa = 0, $$2428 = 0, $$2428$lcssa = 0, $$3 = 0, $$35 = 0, $$422 = 0, $$422$lcssa = 0, $$422$lcssa82 = 0, $$5 = 0, $$pn = 0, $$pre = 0;
 var $$pre43 = 0, $$pre44 = 0, $$pre45 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $2 = HEAP32[$ws>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$0218 = 0;$6 = $3;$ws2$019 = $2;
  }
  while(1) {
   $5 = ($6>>>0)>(127);
   if ($5) {
    $7 = (_wcrtomb($buf,$6,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     $$0 = -1;
     label = 26;
     break;
    } else {
     $$pn = $7;
    }
   } else {
    $$pn = 1;
   }
   $$13 = (($$pn) + ($$0218))|0;
   $9 = ((($ws2$019)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $$0 = $$13;
    label = 26;
    break;
   } else {
    $$0218 = $$13;$6 = $10;$ws2$019 = $9;
   }
  }
  if ((label|0) == 26) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1 = ($n>>>0)>(3);
 L14: do {
  if ($1) {
   $$pre = HEAP32[$ws>>2]|0;
   $$0129 = $s;$$2428 = $n;$14 = $$pre;
   while(1) {
    $13 = HEAP32[$14>>2]|0;
    $15 = (($13) + -1)|0;
    $16 = ($15>>>0)>(126);
    if ($16) {
     $17 = ($13|0)==(0);
     if ($17) {
      $$0129$lcssa = $$0129;$$2428$lcssa = $$2428;
      break;
     }
     $19 = (_wcrtomb($$0129,$13,0)|0);
     $20 = ($19|0)==(-1);
     if ($20) {
      $$0 = -1;
      label = 26;
      break;
     }
     $21 = (($$0129) + ($19)|0);
     $22 = (($$2428) - ($19))|0;
     $$1 = $21;$$35 = $22;$27 = $14;
    } else {
     $23 = $13&255;
     $24 = ((($$0129)) + 1|0);
     HEAP8[$$0129>>0] = $23;
     $25 = (($$2428) + -1)|0;
     $$pre43 = HEAP32[$ws>>2]|0;
     $$1 = $24;$$35 = $25;$27 = $$pre43;
    }
    $26 = ((($27)) + 4|0);
    HEAP32[$ws>>2] = $26;
    $28 = ($$35>>>0)>(3);
    if ($28) {
     $$0129 = $$1;$$2428 = $$35;$14 = $26;
    } else {
     $$01$lcssa = $$1;$$24$lcssa = $$35;
     break L14;
    }
   }
   if ((label|0) == 26) {
    STACKTOP = sp;return ($$0|0);
   }
   HEAP8[$$0129$lcssa>>0] = 0;
   HEAP32[$ws>>2] = 0;
   $18 = (($n) - ($$2428$lcssa))|0;
   $$0 = $18;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$01$lcssa = $s;$$24$lcssa = $n;
  }
 } while(0);
 $12 = ($$24$lcssa|0)==(0);
 if ($12) {
  $$0 = $n;
  STACKTOP = sp;return ($$0|0);
 }
 $$pre44 = HEAP32[$ws>>2]|0;
 $$223 = $$01$lcssa;$$422 = $$24$lcssa;$30 = $$pre44;
 while(1) {
  $29 = HEAP32[$30>>2]|0;
  $31 = (($29) + -1)|0;
  $32 = ($31>>>0)>(126);
  if ($32) {
   $33 = ($29|0)==(0);
   if ($33) {
    $$223$lcssa = $$223;$$422$lcssa = $$422;
    label = 19;
    break;
   }
   $35 = (_wcrtomb($buf,$29,0)|0);
   $36 = ($35|0)==(-1);
   if ($36) {
    $$0 = -1;
    label = 26;
    break;
   }
   $37 = ($$422>>>0)<($35>>>0);
   if ($37) {
    $$422$lcssa82 = $$422;
    label = 22;
    break;
   }
   $39 = HEAP32[$30>>2]|0;
   (_wcrtomb($$223,$39,0)|0);
   $40 = (($$223) + ($35)|0);
   $41 = (($$422) - ($35))|0;
   $$3 = $40;$$5 = $41;$46 = $30;
  } else {
   $42 = $29&255;
   $43 = ((($$223)) + 1|0);
   HEAP8[$$223>>0] = $42;
   $44 = (($$422) + -1)|0;
   $$pre45 = HEAP32[$ws>>2]|0;
   $$3 = $43;$$5 = $44;$46 = $$pre45;
  }
  $45 = ((($46)) + 4|0);
  HEAP32[$ws>>2] = $45;
  $47 = ($$5|0)==(0);
  if ($47) {
   $$0 = $n;
   label = 26;
   break;
  } else {
   $$223 = $$3;$$422 = $$5;$30 = $45;
  }
 }
 if ((label|0) == 19) {
  HEAP8[$$223$lcssa>>0] = 0;
  HEAP32[$ws>>2] = 0;
  $34 = (($n) - ($$422$lcssa))|0;
  $$0 = $34;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 22) {
  $38 = (($n) - ($$422$lcssa82))|0;
  $$0 = $38;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 $5 = $3;
 $6 = $1;
 $7 = (($5) - ($6))|0;
 $k$0 = $4 ? $2 : $7;
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = ((($f)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = ((($f)) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 return ($k$0$len|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp;
 $0 = (_malloc(240)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$ap>>2]|0;
   HEAP32[$ap2>>2] = $vacopy_currentptr;
   $2 = (_vsnprintf($0,240,$fmt,$ap2)|0);
   $3 = ($2>>>0)<(240);
   if ($3) {
    $4 = (($2) + 1)|0;
    $5 = (_realloc($0,$4)|0);
    $6 = ($5|0)!=(0|0);
    $7 = $6 ? $5 : $0;
    HEAP32[$s>>2] = $7;
    $$0 = $2;
    break;
   }
   _free($0);
   $8 = ($2|0)<(0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = (($2) + 1)|0;
    $10 = (_malloc($9)|0);
    HEAP32[$s>>2] = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = -1;
    } else {
     $12 = (_vsnprintf($10,$9,$fmt,$ap)|0);
     $$0 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _MUSL_vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$9 = 0, $$lcssa = 0, $$lcssa38 = 0, $$lcssa520 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi224Z2D = 0, $$pre208 = 0, $$pre210 = 0, $$pre212 = 0, $$pre214 = 0, $$pre216 = 0, $$pre220 = 0, $$pre222 = 0, $$pre223 = 0;
 var $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0203 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$0100 = 0, $dest$0 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0;
 var $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0, $factor16 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$lcssa = 0, $i$0$ph20 = 0, $i$0$ph20$lcssa = 0, $i$0$ph20$us105 = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0;
 var $isdigit = 0, $isdigit7 = 0, $isdigit795 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $isdigittmp694 = 0, $k$0$ph = 0, $k$1$ph = 0, $matches$0$ = 0, $matches$0110 = 0, $matches$0110$lcssa = 0, $matches$0110501 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond$us = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond8 = 0;
 var $p$0116 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$396 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0115 = 0, $pos$1 = 0, $pos$2 = 0, $s$0108 = 0, $s$0108$lcssa = 0;
 var $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0109 = 0, $wcs$0109$lcssa = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$3$ph138 = 0;
 var $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$097 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = HEAP8[$fmt>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $matches$3 = 0;
  STACKTOP = sp;return ($matches$3|0);
 }
 $3 = ((($f)) + 4|0);
 $4 = ((($f)) + 100|0);
 $5 = ((($f)) + 108|0);
 $6 = ((($f)) + 8|0);
 $7 = ((($scanset)) + 10|0);
 $8 = ((($scanset)) + 33|0);
 $9 = ((($st)) + 4|0);
 $10 = ((($scanset)) + 46|0);
 $11 = ((($scanset)) + 94|0);
 $13 = $1;$matches$0110 = 0;$p$0116 = $fmt;$pos$0115 = 0;$s$0108 = 0;$wcs$0109 = 0;
 L4: while(1) {
  $12 = $13&255;
  $14 = (_isspace($12)|0);
  $15 = ($14|0)==(0);
  L6: do {
   if ($15) {
    $42 = HEAP8[$p$0116>>0]|0;
    $43 = ($42<<24>>24)==(37);
    L8: do {
     if ($43) {
      $44 = ((($p$0116)) + 1|0);
      $45 = HEAP8[$44>>0]|0;
      L10: do {
       switch ($45<<24>>24) {
       case 37:  {
        break L8;
        break;
       }
       case 42:  {
        $66 = ((($p$0116)) + 2|0);
        $dest$0 = 0;$p$2 = $66;
        break;
       }
       default: {
        $67 = $45&255;
        $isdigittmp = (($67) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $68 = ((($p$0116)) + 2|0);
         $69 = HEAP8[$68>>0]|0;
         $70 = ($69<<24>>24)==(36);
         if ($70) {
          $vacopy_currentptr = HEAP32[$ap>>2]|0;
          HEAP32[$ap2$i>>2] = $vacopy_currentptr;
          $i$0$i = $isdigittmp;
          while(1) {
           $71 = ($i$0$i>>>0)>(1);
           $arglist_current = HEAP32[$ap2$i>>2]|0;
           $72 = $arglist_current;
           $73 = ((0) + 4|0);
           $expanded4 = $73;
           $expanded = (($expanded4) - 1)|0;
           $74 = (($72) + ($expanded))|0;
           $75 = ((0) + 4|0);
           $expanded8 = $75;
           $expanded7 = (($expanded8) - 1)|0;
           $expanded6 = $expanded7 ^ -1;
           $76 = $74 & $expanded6;
           $77 = $76;
           $78 = HEAP32[$77>>2]|0;
           $arglist_next = ((($77)) + 4|0);
           HEAP32[$ap2$i>>2] = $arglist_next;
           $79 = (($i$0$i) + -1)|0;
           if ($71) {
            $i$0$i = $79;
           } else {
            $$lcssa = $78;
            break;
           }
          }
          $80 = ((($p$0116)) + 3|0);
          $dest$0 = $$lcssa;$p$2 = $80;
          break L10;
         }
        }
        $arglist_current2 = HEAP32[$ap>>2]|0;
        $81 = $arglist_current2;
        $82 = ((0) + 4|0);
        $expanded11 = $82;
        $expanded10 = (($expanded11) - 1)|0;
        $83 = (($81) + ($expanded10))|0;
        $84 = ((0) + 4|0);
        $expanded15 = $84;
        $expanded14 = (($expanded15) - 1)|0;
        $expanded13 = $expanded14 ^ -1;
        $85 = $83 & $expanded13;
        $86 = $85;
        $87 = HEAP32[$86>>2]|0;
        $arglist_next3 = ((($86)) + 4|0);
        HEAP32[$ap>>2] = $arglist_next3;
        $dest$0 = $87;$p$2 = $44;
       }
       }
      } while(0);
      $88 = HEAP8[$p$2>>0]|0;
      $89 = $88&255;
      $isdigittmp694 = (($89) + -48)|0;
      $isdigit795 = ($isdigittmp694>>>0)<(10);
      if ($isdigit795) {
       $93 = $89;$p$396 = $p$2;$width$097 = 0;
       while(1) {
        $90 = ($width$097*10)|0;
        $91 = (($90) + -48)|0;
        $92 = (($91) + ($93))|0;
        $94 = ((($p$396)) + 1|0);
        $95 = HEAP8[$94>>0]|0;
        $96 = $95&255;
        $isdigittmp6 = (($96) + -48)|0;
        $isdigit7 = ($isdigittmp6>>>0)<(10);
        if ($isdigit7) {
         $93 = $96;$p$396 = $94;$width$097 = $92;
        } else {
         $$lcssa38 = $95;$p$3$lcssa = $94;$width$0$lcssa = $92;
         break;
        }
       }
      } else {
       $$lcssa38 = $88;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
      }
      $97 = ($$lcssa38<<24>>24)==(109);
      if ($97) {
       $98 = ($dest$0|0)!=(0|0);
       $99 = $98&1;
       $100 = ((($p$3$lcssa)) + 1|0);
       $$pre208 = HEAP8[$100>>0]|0;
       $103 = $$pre208;$alloc$0 = $99;$p$4 = $100;$s$1 = 0;$wcs$1 = 0;
      } else {
       $103 = $$lcssa38;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0108;$wcs$1 = $wcs$0109;
      }
      $101 = ((($p$4)) + 1|0);
      $102 = $103&255;
      switch ($102|0) {
      case 104:  {
       $104 = HEAP8[$101>>0]|0;
       $105 = ($104<<24>>24)==(104);
       $106 = ((($p$4)) + 2|0);
       $$9 = $105 ? $106 : $101;
       $$10 = $105 ? -2 : -1;
       $p$5 = $$9;$size$0 = $$10;
       break;
      }
      case 108:  {
       $107 = HEAP8[$101>>0]|0;
       $108 = ($107<<24>>24)==(108);
       $109 = ((($p$4)) + 2|0);
       $$11 = $108 ? $109 : $101;
       $$12 = $108 ? 3 : 1;
       $p$5 = $$11;$size$0 = $$12;
       break;
      }
      case 106:  {
       $p$5 = $101;$size$0 = 3;
       break;
      }
      case 116: case 122:  {
       $p$5 = $101;$size$0 = 1;
       break;
      }
      case 76:  {
       $p$5 = $101;$size$0 = 2;
       break;
      }
      case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
       $p$5 = $p$4;$size$0 = 0;
       break;
      }
      default: {
       $alloc$0203 = $alloc$0;$matches$0110501 = $matches$0110;$s$6 = $s$1;$wcs$7 = $wcs$1;
       label = 164;
       break L4;
      }
      }
      $110 = HEAP8[$p$5>>0]|0;
      $111 = $110&255;
      $112 = $111 & 47;
      $113 = ($112|0)==(3);
      $114 = $111 | 32;
      $$ = $113 ? $114 : $111;
      $$size$0 = $113 ? 1 : $size$0;
      switch ($$|0) {
      case 99:  {
       $115 = ($width$0$lcssa|0)<(1);
       $$width$0 = $115 ? 1 : $width$0$lcssa;
       $pos$1 = $pos$0115;$width$1 = $$width$0;
       break;
      }
      case 91:  {
       $pos$1 = $pos$0115;$width$1 = $width$0$lcssa;
       break;
      }
      case 110:  {
       $116 = ($pos$0115|0)<(0);
       $117 = $116 << 31 >> 31;
       $118 = ($dest$0|0)==(0|0);
       if ($118) {
        $matches$1 = $matches$0110;$p$11 = $p$5;$pos$2 = $pos$0115;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       switch ($$size$0|0) {
       case -2:  {
        $119 = $pos$0115&255;
        HEAP8[$dest$0>>0] = $119;
        $matches$1 = $matches$0110;$p$11 = $p$5;$pos$2 = $pos$0115;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -1:  {
        $120 = $pos$0115&65535;
        HEAP16[$dest$0>>1] = $120;
        $matches$1 = $matches$0110;$p$11 = $p$5;$pos$2 = $pos$0115;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 0:  {
        HEAP32[$dest$0>>2] = $pos$0115;
        $matches$1 = $matches$0110;$p$11 = $p$5;$pos$2 = $pos$0115;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 1:  {
        HEAP32[$dest$0>>2] = $pos$0115;
        $matches$1 = $matches$0110;$p$11 = $p$5;$pos$2 = $pos$0115;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 3:  {
        $121 = $dest$0;
        $122 = $121;
        HEAP32[$122>>2] = $pos$0115;
        $123 = (($121) + 4)|0;
        $124 = $123;
        HEAP32[$124>>2] = $117;
        $matches$1 = $matches$0110;$p$11 = $p$5;$pos$2 = $pos$0115;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       default: {
        $matches$1 = $matches$0110;$p$11 = $p$5;$pos$2 = $pos$0115;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       }
       break;
      }
      default: {
       ___shlim($f,0);
       while(1) {
        $125 = HEAP32[$3>>2]|0;
        $126 = HEAP32[$4>>2]|0;
        $127 = ($125>>>0)<($126>>>0);
        if ($127) {
         $128 = ((($125)) + 1|0);
         HEAP32[$3>>2] = $128;
         $129 = HEAP8[$125>>0]|0;
         $130 = $129&255;
         $132 = $130;
        } else {
         $131 = (___shgetc($f)|0);
         $132 = $131;
        }
        $133 = (_isspace($132)|0);
        $134 = ($133|0)==(0);
        if ($134) {
         break;
        }
       }
       $135 = HEAP32[$4>>2]|0;
       $136 = ($135|0)==(0|0);
       $$pre210 = HEAP32[$3>>2]|0;
       if ($136) {
        $141 = $$pre210;
       } else {
        $137 = ((($$pre210)) + -1|0);
        HEAP32[$3>>2] = $137;
        $141 = $137;
       }
       $138 = HEAP32[$5>>2]|0;
       $139 = HEAP32[$6>>2]|0;
       $140 = $141;
       $142 = $139;
       $143 = (($138) + ($pos$0115))|0;
       $144 = (($143) + ($140))|0;
       $145 = (($144) - ($142))|0;
       $pos$1 = $145;$width$1 = $width$0$lcssa;
      }
      }
      ___shlim($f,$width$1);
      $146 = HEAP32[$3>>2]|0;
      $147 = HEAP32[$4>>2]|0;
      $148 = ($146>>>0)<($147>>>0);
      if ($148) {
       $149 = ((($146)) + 1|0);
       HEAP32[$3>>2] = $149;
       $153 = $147;
      } else {
       $150 = (___shgetc($f)|0);
       $151 = ($150|0)<(0);
       if ($151) {
        $alloc$0203 = $alloc$0;$matches$0110501 = $matches$0110;$s$6 = $s$1;$wcs$7 = $wcs$1;
        label = 164;
        break L4;
       }
       $$pre212 = HEAP32[$4>>2]|0;
       $153 = $$pre212;
      }
      $152 = ($153|0)==(0|0);
      if (!($152)) {
       $154 = HEAP32[$3>>2]|0;
       $155 = ((($154)) + -1|0);
       HEAP32[$3>>2] = $155;
      }
      L65: do {
       switch ($$|0) {
       case 91: case 99: case 115:  {
        $156 = ($$|0)==(99);
        $157 = $$ & 239;
        $158 = ($157|0)==(99);
        L67: do {
         if ($158) {
          $159 = ($$|0)==(115);
          _memset(($scanset|0),-1,257)|0;
          HEAP8[$scanset>>0] = 0;
          if ($159) {
           HEAP8[$8>>0] = 0;
           ;HEAP8[$7>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;
           $p$9 = $p$5;
          } else {
           $p$9 = $p$5;
          }
         } else {
          $160 = ((($p$5)) + 1|0);
          $161 = HEAP8[$160>>0]|0;
          $162 = ($161<<24>>24)==(94);
          $163 = ((($p$5)) + 2|0);
          $invert$0 = $162&1;
          $164 = $162 ? $160 : $p$5;
          $p$6 = $162 ? $163 : $160;
          $165 = $162&1;
          _memset(($scanset|0),($165|0),257)|0;
          HEAP8[$scanset>>0] = 0;
          $166 = HEAP8[$p$6>>0]|0;
          switch ($166<<24>>24) {
          case 45:  {
           $167 = ((($164)) + 2|0);
           $168 = $invert$0 ^ 1;
           $169 = $168&255;
           HEAP8[$10>>0] = $169;
           $$pre$phi224Z2D = $169;$p$7$ph = $167;
           break;
          }
          case 93:  {
           $170 = ((($164)) + 2|0);
           $171 = $invert$0 ^ 1;
           $172 = $171&255;
           HEAP8[$11>>0] = $172;
           $$pre$phi224Z2D = $172;$p$7$ph = $170;
           break;
          }
          default: {
           $$pre222 = $invert$0 ^ 1;
           $$pre223 = $$pre222&255;
           $$pre$phi224Z2D = $$pre223;$p$7$ph = $p$6;
          }
          }
          $p$7 = $p$7$ph;
          while(1) {
           $173 = HEAP8[$p$7>>0]|0;
           L78: do {
            switch ($173<<24>>24) {
            case 0:  {
             $alloc$0203 = $alloc$0;$matches$0110501 = $matches$0110;$s$6 = $s$1;$wcs$7 = $wcs$1;
             label = 164;
             break L4;
             break;
            }
            case 93:  {
             $p$9 = $p$7;
             break L67;
             break;
            }
            case 45:  {
             $174 = ((($p$7)) + 1|0);
             $175 = HEAP8[$174>>0]|0;
             switch ($175<<24>>24) {
             case 93: case 0:  {
              $186 = 45;$p$8 = $p$7;
              break L78;
              break;
             }
             default: {
             }
             }
             $176 = ((($p$7)) + -1|0);
             $177 = HEAP8[$176>>0]|0;
             $178 = ($177&255)<($175&255);
             if ($178) {
              $179 = $177&255;
              $c$0100 = $179;
              while(1) {
               $180 = (($c$0100) + 1)|0;
               $181 = (($scanset) + ($180)|0);
               HEAP8[$181>>0] = $$pre$phi224Z2D;
               $182 = HEAP8[$174>>0]|0;
               $183 = $182&255;
               $184 = ($180|0)<($183|0);
               if ($184) {
                $c$0100 = $180;
               } else {
                $186 = $182;$p$8 = $174;
                break;
               }
              }
             } else {
              $186 = $175;$p$8 = $174;
             }
             break;
            }
            default: {
             $186 = $173;$p$8 = $p$7;
            }
            }
           } while(0);
           $185 = $186&255;
           $187 = (($185) + 1)|0;
           $188 = (($scanset) + ($187)|0);
           HEAP8[$188>>0] = $$pre$phi224Z2D;
           $189 = ((($p$8)) + 1|0);
           $p$7 = $189;
          }
         }
        } while(0);
        $190 = (($width$1) + 1)|0;
        $191 = $156 ? $190 : 31;
        $192 = ($$size$0|0)==(1);
        $193 = ($alloc$0|0)!=(0);
        L86: do {
         if ($192) {
          if ($193) {
           $194 = $191 << 2;
           $195 = (_malloc($194)|0);
           $196 = ($195|0)==(0|0);
           if ($196) {
            $alloc$0203 = $alloc$0;$matches$0110501 = $matches$0110;$s$6 = 0;$wcs$7 = $195;
            label = 164;
            break L4;
           } else {
            $wcs$2 = $195;
           }
          } else {
           $wcs$2 = $dest$0;
          }
          HEAP32[$st>>2] = 0;
          HEAP32[$9>>2] = 0;
          $i$0$ph = 0;$k$0$ph = $191;$wcs$3$ph = $wcs$2;
          L92: while(1) {
           $197 = ($wcs$3$ph|0)==(0|0);
           L94: do {
            if ($197) {
             $198 = ($i$0$ph|0)==($k$0$ph|0);
             $or$cond$us = $193 & $198;
             L96: while(1) {
              $201 = HEAP32[$3>>2]|0;
              $211 = HEAP32[$4>>2]|0;
              $212 = ($201>>>0)<($211>>>0);
              if ($212) {
               $200 = ((($201)) + 1|0);
               HEAP32[$3>>2] = $200;
               $202 = HEAP8[$201>>0]|0;
               $203 = $202&255;
               $205 = $203;
              } else {
               $199 = (___shgetc($f)|0);
               $205 = $199;
              }
              $204 = (($205) + 1)|0;
              $206 = (($scanset) + ($204)|0);
              $207 = HEAP8[$206>>0]|0;
              $208 = ($207<<24>>24)==(0);
              if ($208) {
               $i$0$ph20$lcssa = $i$0$ph;$wcs$3$ph138 = 0;
               break L92;
              }
              $209 = $205&255;
              HEAP8[$0>>0] = $209;
              $210 = (_mbrtowc($wc,$0,1,$st)|0);
              switch ($210|0) {
              case -1:  {
               $alloc$0203 = $alloc$0;$matches$0110501 = $matches$0110;$s$6 = 0;$wcs$7 = 0;
               label = 164;
               break L4;
               break;
              }
              case -2:  {
               continue L96;
               break;
              }
              default: {
              }
              }
              if ($or$cond$us) {
               $i$1$lcssa = $i$0$ph;
               break L94;
              }
             }
            } else {
             if ($193) {
              $i$0$ph20$us105 = $i$0$ph;
             } else {
              $i$0$ph$lcssa = $i$0$ph;$wcs$3$ph$lcssa = $wcs$3$ph;
              label = 86;
              break L92;
             }
             while(1) {
              L107: while(1) {
               $215 = HEAP32[$3>>2]|0;
               $229 = HEAP32[$4>>2]|0;
               $230 = ($215>>>0)<($229>>>0);
               if ($230) {
                $214 = ((($215)) + 1|0);
                HEAP32[$3>>2] = $214;
                $216 = HEAP8[$215>>0]|0;
                $217 = $216&255;
                $219 = $217;
               } else {
                $213 = (___shgetc($f)|0);
                $219 = $213;
               }
               $218 = (($219) + 1)|0;
               $220 = (($scanset) + ($218)|0);
               $221 = HEAP8[$220>>0]|0;
               $222 = ($221<<24>>24)==(0);
               if ($222) {
                $i$0$ph20$lcssa = $i$0$ph20$us105;$wcs$3$ph138 = $wcs$3$ph;
                break L92;
               }
               $223 = $219&255;
               HEAP8[$0>>0] = $223;
               $224 = (_mbrtowc($wc,$0,1,$st)|0);
               switch ($224|0) {
               case -1:  {
                $alloc$0203 = $alloc$0;$matches$0110501 = $matches$0110;$s$6 = 0;$wcs$7 = $wcs$3$ph;
                label = 164;
                break L4;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L107;
               }
               }
              }
              $225 = HEAP32[$wc>>2]|0;
              $226 = (($i$0$ph20$us105) + 1)|0;
              $227 = (($wcs$3$ph) + ($i$0$ph20$us105<<2)|0);
              HEAP32[$227>>2] = $225;
              $228 = ($226|0)==($k$0$ph|0);
              if ($228) {
               $i$1$lcssa = $k$0$ph;
               break;
              } else {
               $i$0$ph20$us105 = $226;
              }
             }
            }
           } while(0);
           $factor = $k$0$ph << 1;
           $248 = $factor | 1;
           $249 = $248 << 2;
           $250 = (_realloc($wcs$3$ph,$249)|0);
           $251 = ($250|0)==(0|0);
           if ($251) {
            $alloc$0203 = $alloc$0;$matches$0110501 = $matches$0110;$s$6 = 0;$wcs$7 = $wcs$3$ph;
            label = 164;
            break L4;
           }
           $i$0$ph = $i$1$lcssa;$k$0$ph = $248;$wcs$3$ph = $250;
          }
          L117: do {
           if ((label|0) == 86) {
            label = 0;
            $i$0$ph20 = $i$0$ph$lcssa;
            while(1) {
             L121: while(1) {
              $231 = HEAP32[$3>>2]|0;
              $232 = HEAP32[$4>>2]|0;
              $233 = ($231>>>0)<($232>>>0);
              if ($233) {
               $234 = ((($231)) + 1|0);
               HEAP32[$3>>2] = $234;
               $235 = HEAP8[$231>>0]|0;
               $236 = $235&255;
               $239 = $236;
              } else {
               $237 = (___shgetc($f)|0);
               $239 = $237;
              }
              $238 = (($239) + 1)|0;
              $240 = (($scanset) + ($238)|0);
              $241 = HEAP8[$240>>0]|0;
              $242 = ($241<<24>>24)==(0);
              if ($242) {
               $i$0$ph20$lcssa = $i$0$ph20;$wcs$3$ph138 = $wcs$3$ph$lcssa;
               break L117;
              }
              $243 = $239&255;
              HEAP8[$0>>0] = $243;
              $244 = (_mbrtowc($wc,$0,1,$st)|0);
              switch ($244|0) {
              case -1:  {
               $alloc$0203 = 0;$matches$0110501 = $matches$0110;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa;
               label = 164;
               break L4;
               break;
              }
              case -2:  {
               break;
              }
              default: {
               break L121;
              }
              }
             }
             $245 = HEAP32[$wc>>2]|0;
             $246 = (($i$0$ph20) + 1)|0;
             $247 = (($wcs$3$ph$lcssa) + ($i$0$ph20<<2)|0);
             HEAP32[$247>>2] = $245;
             $i$0$ph20 = $246;
            }
           }
          } while(0);
          $252 = (_mbsinit($st)|0);
          $253 = ($252|0)==(0);
          if ($253) {
           $alloc$0203 = $alloc$0;$matches$0110501 = $matches$0110;$s$6 = 0;$wcs$7 = $wcs$3$ph138;
           label = 164;
           break L4;
          } else {
           $i$4 = $i$0$ph20$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph138;
          }
         } else {
          if ($193) {
           $254 = (_malloc($191)|0);
           $255 = ($254|0)==(0|0);
           if ($255) {
            $alloc$0203 = $alloc$0;$matches$0110501 = $matches$0110;$s$6 = 0;$wcs$7 = 0;
            label = 164;
            break L4;
           } else {
            $i$2$ph = 0;$k$1$ph = $191;$s$2$ph = $254;
           }
           while(1) {
            $i$2 = $i$2$ph;
            while(1) {
             $256 = HEAP32[$3>>2]|0;
             $257 = HEAP32[$4>>2]|0;
             $258 = ($256>>>0)<($257>>>0);
             if ($258) {
              $259 = ((($256)) + 1|0);
              HEAP32[$3>>2] = $259;
              $260 = HEAP8[$256>>0]|0;
              $261 = $260&255;
              $264 = $261;
             } else {
              $262 = (___shgetc($f)|0);
              $264 = $262;
             }
             $263 = (($264) + 1)|0;
             $265 = (($scanset) + ($263)|0);
             $266 = HEAP8[$265>>0]|0;
             $267 = ($266<<24>>24)==(0);
             if ($267) {
              $i$4 = $i$2;$s$3 = $s$2$ph;$wcs$4 = 0;
              break L86;
             }
             $268 = $264&255;
             $269 = (($i$2) + 1)|0;
             $270 = (($s$2$ph) + ($i$2)|0);
             HEAP8[$270>>0] = $268;
             $271 = ($269|0)==($k$1$ph|0);
             if ($271) {
              break;
             } else {
              $i$2 = $269;
             }
            }
            $factor16 = $k$1$ph << 1;
            $272 = $factor16 | 1;
            $273 = (_realloc($s$2$ph,$272)|0);
            $274 = ($273|0)==(0|0);
            if ($274) {
             $alloc$0203 = $alloc$0;$matches$0110501 = $matches$0110;$s$6 = $s$2$ph;$wcs$7 = 0;
             label = 164;
             break L4;
            } else {
             $i$2$ph$phi = $k$1$ph;$k$1$ph = $272;$s$2$ph = $273;$i$2$ph = $i$2$ph$phi;
            }
           }
          }
          $275 = ($dest$0|0)==(0|0);
          if ($275) {
           $293 = $153;
           while(1) {
            $291 = HEAP32[$3>>2]|0;
            $292 = ($291>>>0)<($293>>>0);
            if ($292) {
             $294 = ((($291)) + 1|0);
             HEAP32[$3>>2] = $294;
             $295 = HEAP8[$291>>0]|0;
             $296 = $295&255;
             $299 = $296;
            } else {
             $297 = (___shgetc($f)|0);
             $299 = $297;
            }
            $298 = (($299) + 1)|0;
            $300 = (($scanset) + ($298)|0);
            $301 = HEAP8[$300>>0]|0;
            $302 = ($301<<24>>24)==(0);
            if ($302) {
             $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
             break L86;
            }
            $$pre216 = HEAP32[$4>>2]|0;
            $293 = $$pre216;
           }
          } else {
           $278 = $153;$i$3 = 0;
           while(1) {
            $276 = HEAP32[$3>>2]|0;
            $277 = ($276>>>0)<($278>>>0);
            if ($277) {
             $279 = ((($276)) + 1|0);
             HEAP32[$3>>2] = $279;
             $280 = HEAP8[$276>>0]|0;
             $281 = $280&255;
             $284 = $281;
            } else {
             $282 = (___shgetc($f)|0);
             $284 = $282;
            }
            $283 = (($284) + 1)|0;
            $285 = (($scanset) + ($283)|0);
            $286 = HEAP8[$285>>0]|0;
            $287 = ($286<<24>>24)==(0);
            if ($287) {
             $i$4 = $i$3;$s$3 = $dest$0;$wcs$4 = 0;
             break L86;
            }
            $288 = $284&255;
            $289 = (($i$3) + 1)|0;
            $290 = (($dest$0) + ($i$3)|0);
            HEAP8[$290>>0] = $288;
            $$pre214 = HEAP32[$4>>2]|0;
            $278 = $$pre214;$i$3 = $289;
           }
          }
         }
        } while(0);
        $303 = HEAP32[$4>>2]|0;
        $304 = ($303|0)==(0|0);
        $$pre220 = HEAP32[$3>>2]|0;
        if ($304) {
         $309 = $$pre220;
        } else {
         $305 = ((($$pre220)) + -1|0);
         HEAP32[$3>>2] = $305;
         $309 = $305;
        }
        $306 = HEAP32[$5>>2]|0;
        $307 = HEAP32[$6>>2]|0;
        $308 = $309;
        $310 = $307;
        $311 = (($308) - ($310))|0;
        $312 = (($311) + ($306))|0;
        $313 = ($312|0)==(0);
        if ($313) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0110;$s$8 = $s$3;$wcs$9 = $wcs$4;
         break L4;
        }
        $$not = $156 ^ 1;
        $314 = ($312|0)==($width$1|0);
        $or$cond8 = $314 | $$not;
        if (!($or$cond8)) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0110;$s$8 = $s$3;$wcs$9 = $wcs$4;
         break L4;
        }
        do {
         if ($193) {
          if ($192) {
           HEAP32[$dest$0>>2] = $wcs$4;
           break;
          } else {
           HEAP32[$dest$0>>2] = $s$3;
           break;
          }
         }
        } while(0);
        if ($156) {
         $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
        } else {
         $315 = ($wcs$4|0)==(0|0);
         if (!($315)) {
          $316 = (($wcs$4) + ($i$4<<2)|0);
          HEAP32[$316>>2] = 0;
         }
         $317 = ($s$3|0)==(0|0);
         if ($317) {
          $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
         } else {
          $318 = (($s$3) + ($i$4)|0);
          HEAP8[$318>>0] = 0;
          $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
         }
        }
        break;
       }
       case 120: case 88: case 112:  {
        $base$0 = 16;
        label = 146;
        break;
       }
       case 111:  {
        $base$0 = 8;
        label = 146;
        break;
       }
       case 117: case 100:  {
        $base$0 = 10;
        label = 146;
        break;
       }
       case 105:  {
        $base$0 = 0;
        label = 146;
        break;
       }
       case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
        $338 = (+___floatscan($f,$$size$0,0));
        $339 = HEAP32[$5>>2]|0;
        $340 = HEAP32[$3>>2]|0;
        $341 = HEAP32[$6>>2]|0;
        $342 = $340;
        $343 = $341;
        $344 = (($343) - ($342))|0;
        $345 = ($339|0)==($344|0);
        if ($345) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0110;$s$8 = $s$1;$wcs$9 = $wcs$1;
         break L4;
        }
        $346 = ($dest$0|0)==(0|0);
        if ($346) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         switch ($$size$0|0) {
         case 0:  {
          $347 = $338;
          HEAPF32[$dest$0>>2] = $347;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L65;
          break;
         }
         case 1:  {
          HEAPF64[$dest$0>>3] = $338;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L65;
          break;
         }
         case 2:  {
          HEAPF64[$dest$0>>3] = $338;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L65;
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L65;
         }
         }
        }
        break;
       }
       default: {
        $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
       }
       }
      } while(0);
      L186: do {
       if ((label|0) == 146) {
        label = 0;
        $319 = (___intscan($f,$base$0,0,-1,-1)|0);
        $320 = tempRet0;
        $321 = HEAP32[$5>>2]|0;
        $322 = HEAP32[$3>>2]|0;
        $323 = HEAP32[$6>>2]|0;
        $324 = $322;
        $325 = $323;
        $326 = (($325) - ($324))|0;
        $327 = ($321|0)==($326|0);
        if ($327) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0110;$s$8 = $s$1;$wcs$9 = $wcs$1;
         break L4;
        }
        $328 = ($$|0)==(112);
        $329 = ($dest$0|0)!=(0|0);
        $or$cond3 = $329 & $328;
        if ($or$cond3) {
         $330 = $319;
         HEAP32[$dest$0>>2] = $330;
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         break;
        }
        $331 = ($dest$0|0)==(0|0);
        if ($331) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         switch ($$size$0|0) {
         case -2:  {
          $332 = $319&255;
          HEAP8[$dest$0>>0] = $332;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L186;
          break;
         }
         case -1:  {
          $333 = $319&65535;
          HEAP16[$dest$0>>1] = $333;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L186;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $319;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L186;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $319;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L186;
          break;
         }
         case 3:  {
          $334 = $dest$0;
          $335 = $334;
          HEAP32[$335>>2] = $319;
          $336 = (($334) + 4)|0;
          $337 = $336;
          HEAP32[$337>>2] = $320;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L186;
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L186;
         }
         }
        }
       }
      } while(0);
      $348 = HEAP32[$5>>2]|0;
      $349 = HEAP32[$3>>2]|0;
      $350 = HEAP32[$6>>2]|0;
      $351 = $349;
      $352 = $350;
      $353 = (($348) + ($pos$1))|0;
      $354 = (($353) + ($351))|0;
      $355 = (($354) - ($352))|0;
      $not$ = ($dest$0|0)!=(0|0);
      $356 = $not$&1;
      $matches$0$ = (($356) + ($matches$0110))|0;
      $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $355;$s$5 = $s$4;$wcs$6 = $wcs$5;
      break L6;
     }
    } while(0);
    $46 = $43&1;
    $47 = (($p$0116) + ($46)|0);
    ___shlim($f,0);
    $48 = HEAP32[$3>>2]|0;
    $49 = HEAP32[$4>>2]|0;
    $50 = ($48>>>0)<($49>>>0);
    if ($50) {
     $51 = ((($48)) + 1|0);
     HEAP32[$3>>2] = $51;
     $52 = HEAP8[$48>>0]|0;
     $53 = $52&255;
     $58 = $53;
    } else {
     $54 = (___shgetc($f)|0);
     $58 = $54;
    }
    $55 = HEAP8[$47>>0]|0;
    $56 = $55&255;
    $57 = ($58|0)==($56|0);
    if (!($57)) {
     $$lcssa520 = $58;$matches$0110$lcssa = $matches$0110;$s$0108$lcssa = $s$0108;$wcs$0109$lcssa = $wcs$0109;
     label = 19;
     break L4;
    }
    $65 = (($pos$0115) + 1)|0;
    $matches$1 = $matches$0110;$p$11 = $47;$pos$2 = $65;$s$5 = $s$0108;$wcs$6 = $wcs$0109;
   } else {
    $p$1 = $p$0116;
    while(1) {
     $16 = ((($p$1)) + 1|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = (_isspace($18)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      $p$1$lcssa = $p$1;
      break;
     } else {
      $p$1 = $16;
     }
    }
    ___shlim($f,0);
    while(1) {
     $21 = HEAP32[$3>>2]|0;
     $22 = HEAP32[$4>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$3>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $28 = $26;
     } else {
      $27 = (___shgetc($f)|0);
      $28 = $27;
     }
     $29 = (_isspace($28)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      break;
     }
    }
    $31 = HEAP32[$4>>2]|0;
    $32 = ($31|0)==(0|0);
    $$pre = HEAP32[$3>>2]|0;
    if ($32) {
     $37 = $$pre;
    } else {
     $33 = ((($$pre)) + -1|0);
     HEAP32[$3>>2] = $33;
     $37 = $33;
    }
    $34 = HEAP32[$5>>2]|0;
    $35 = HEAP32[$6>>2]|0;
    $36 = $37;
    $38 = $35;
    $39 = (($34) + ($pos$0115))|0;
    $40 = (($39) + ($36))|0;
    $41 = (($40) - ($38))|0;
    $matches$1 = $matches$0110;$p$11 = $p$1$lcssa;$pos$2 = $41;$s$5 = $s$0108;$wcs$6 = $wcs$0109;
   }
  } while(0);
  $357 = ((($p$11)) + 1|0);
  $358 = HEAP8[$357>>0]|0;
  $359 = ($358<<24>>24)==(0);
  if ($359) {
   $matches$3 = $matches$1;
   label = 168;
   break;
  } else {
   $13 = $358;$matches$0110 = $matches$1;$p$0116 = $357;$pos$0115 = $pos$2;$s$0108 = $s$5;$wcs$0109 = $wcs$6;
  }
 }
 if ((label|0) == 19) {
  $59 = HEAP32[$4>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $61 = HEAP32[$3>>2]|0;
   $62 = ((($61)) + -1|0);
   HEAP32[$3>>2] = $62;
  }
  $63 = ($$lcssa520|0)>(-1);
  $64 = ($matches$0110$lcssa|0)!=(0);
  $or$cond5 = $64 | $63;
  if ($or$cond5) {
   $matches$3 = $matches$0110$lcssa;
   STACKTOP = sp;return ($matches$3|0);
  } else {
   $alloc$1 = 0;$s$7 = $s$0108$lcssa;$wcs$8 = $wcs$0109$lcssa;
   label = 165;
  }
 }
 else if ((label|0) == 164) {
  $$old4 = ($matches$0110501|0)==(0);
  if ($$old4) {
   $alloc$1 = $alloc$0203;$s$7 = $s$6;$wcs$8 = $wcs$7;
   label = 165;
  } else {
   $alloc$2 = $alloc$0203;$matches$2 = $matches$0110501;$s$8 = $s$6;$wcs$9 = $wcs$7;
  }
 }
 else if ((label|0) == 168) {
  STACKTOP = sp;return ($matches$3|0);
 }
 if ((label|0) == 165) {
  $alloc$2 = $alloc$1;$matches$2 = -1;$s$8 = $s$7;$wcs$9 = $wcs$8;
 }
 $360 = ($alloc$2|0)==(0);
 if ($360) {
  $matches$3 = $matches$2;
  STACKTOP = sp;return ($matches$3|0);
 }
 _free($s$8);
 _free($wcs$9);
 $matches$3 = $matches$2;
 STACKTOP = sp;return ($matches$3|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 32|0);
 HEAP32[$0>>2] = 678;
 $1 = ((($f)) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ((($f)) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = ((($f)) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_MUSL_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = ((($$0)) + 4|0);
  if ($1) {
   $$0$lcssa = $$0;
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0$lcssa;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 return ($6|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  return ($d|0);
 } else {
  $$014 = $n;$$023 = $s;$$05 = $d;
 }
 while(1) {
  $1 = (($$014) + -1)|0;
  $2 = ((($$023)) + 4|0);
  $3 = HEAP32[$$023>>2]|0;
  $4 = ((($$05)) + 4|0);
  HEAP32[$$05>>2] = $3;
  $5 = ($1|0)==(0);
  if ($5) {
   break;
  } else {
   $$014 = $1;$$023 = $2;$$05 = $4;
  }
 }
 return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)<($n>>>0);
 $5 = ($n|0)==(0);
 if ($4) {
  if ($5) {
   return ($d|0);
  } else {
   $$in = $n;
  }
  while(1) {
   $6 = (($$in) + -1)|0;
   $7 = (($s) + ($6<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($d) + ($6<<2)|0);
   HEAP32[$9>>2] = $8;
   $10 = ($6|0)==(0);
   if ($10) {
    break;
   } else {
    $$in = $6;
   }
  }
  return ($d|0);
 } else {
  if ($5) {
   return ($d|0);
  } else {
   $$025 = $s;$$07 = $d;$$16 = $n;
  }
  while(1) {
   $11 = (($$16) + -1)|0;
   $12 = ((($$025)) + 4|0);
   $13 = HEAP32[$$025>>2]|0;
   $14 = ((($$07)) + 4|0);
   HEAP32[$$07>>2] = $13;
   $15 = ($11|0)==(0);
   if ($15) {
    break;
   } else {
    $$025 = $12;$$07 = $14;$$16 = $11;
   }
  }
  return ($d|0);
 }
 return (0)|0;
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  return ($d|0);
 } else {
  $$012 = $n;$$03 = $d;
 }
 while(1) {
  $1 = (($$012) + -1)|0;
  $2 = ((($$03)) + 4|0);
  HEAP32[$$03>>2] = $c;
  $3 = ($1|0)==(0);
  if ($3) {
   break;
  } else {
   $$012 = $1;$$03 = $2;
  }
 }
 return ($d|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 return ($0|0);
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[_stderr>>2]|0;
 (_vfprintf(($0|0),($format|0),($list|0))|0);
 (_fputc(10,($0|0))|0);
 _abort();
 // unreachable;
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((16568|0),(16597|0),1164,(16668|0));
 // unreachable;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((16689|0),(16712|0),303,(16668|0));
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((4268|0),(679|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[4264>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(16783,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   while(1) {
    $3 = (__ZSt15get_new_handlerv()|0);
    $4 = ($3|0)==(0|0);
    if ($4) {
     break;
    }
    FUNCTION_TABLE_v[$3 & 1023]();
    $5 = (_malloc($$size)|0);
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $$lcssa = $5;
     break L1;
    }
   }
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = (4068);
   ___cxa_throw(($7|0),(608|0),(143|0));
   // unreachable;
  } else {
   $$lcssa = $1;
  }
 } while(0);
 return ($$lcssa|0);
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj($size)|0);
 return ($0|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 return;
}
function __ZNSt9bad_allocC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (4068);
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (16832|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(680,(16847|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
 }
 $3 = ___cxa_find_matching_catch(0|0)|0;
 $4 = tempRet0;
 (___cxa_begin_catch(($3|0))|0);
 __THREW__ = 0;
 invoke_vii(680,(16887|0),($vararg_buffer1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = ___cxa_find_matching_catch(0|0)|0;
 $7 = tempRet0;
 __THREW__ = 0;
 invoke_v(543);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___clang_call_terminate($6);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(681)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = HEAP32[1014]|0;HEAP32[1014] = (($19+0)|0);
 $20 = $19;
 __ZSt11__terminatePFvvE($20);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4080>>2]|0;HEAP32[4080>>2] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (4092);
 $0 = ((($this)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 return;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (4112);
 $0 = ((($this)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 return;
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (4132);
 return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (16937|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$1 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,688,704,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$1 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 1023]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$1 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = ((($info)) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = ((($info)) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = ((($info)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = ((($info)) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = ((($info)) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = ((($info)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 1023]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 1023]($8,$info,$12,$15);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  } else {
   $3 = ((($this)) + 16|0);
   $4 = ((($this)) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (((($this)) + 16|0) + ($5<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
   $7 = ($5|0)>(1);
   if ($7) {
    $8 = ((($this)) + 24|0);
    $9 = ((($info)) + 54|0);
    $p$0 = $8;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if (!($11)) {
      break L1;
     }
     $12 = ((($p$0)) + 8|0);
     $13 = ($12>>>0)<($6>>>0);
     if ($13) {
      $p$0 = $12;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = ((($info)) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = ((($info)) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = ((($info)) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = ((($info)) + 16|0);
 $11 = ((($info)) + 20|0);
 $12 = ((($info)) + 24|0);
 $13 = ((($info)) + 28|0);
 $14 = ((($info)) + 32|0);
 $15 = ((($info)) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 L1: do {
  if ($16) {
   $17 = ((($info)) + 48|0);
   HEAP32[$17>>2] = 1;
   $18 = HEAP32[$dst_type>>2]|0;
   $19 = ((($18)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viiiiii[$20 & 511]($dst_type,$info,$4,$4,1,0);
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(1);
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = ((($info)) + 36|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = ((($24)) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_viiiii[$26 & 255]($6,$info,$4,1,0);
   $27 = HEAP32[$23>>2]|0;
   switch ($27|0) {
   case 0:  {
    $28 = HEAP32[$15>>2]|0;
    $29 = ($28|0)==(1);
    $30 = HEAP32[$13>>2]|0;
    $31 = ($30|0)==(1);
    $or$cond = $29 & $31;
    $32 = HEAP32[$14>>2]|0;
    $33 = ($32|0)==(1);
    $or$cond3 = $or$cond & $33;
    $34 = HEAP32[$11>>2]|0;
    $$8 = $or$cond3 ? $34 : 0;
    $dst_ptr$0 = $$8;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = ($35|0)==(1);
   if (!($36)) {
    $37 = HEAP32[$15>>2]|0;
    $38 = ($37|0)==(0);
    $39 = HEAP32[$13>>2]|0;
    $40 = ($39|0)==(1);
    $or$cond5 = $38 & $40;
    $41 = HEAP32[$14>>2]|0;
    $42 = ($41|0)==(1);
    $or$cond7 = $or$cond5 & $42;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0;
   $dst_ptr$0 = $43;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $23 = $path_below;
   } else {
    $23 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $22 = ($23|0)==(1);
   $or$cond1 = $21 & $22;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off023 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off025 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0;
 var $p$024 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $57 = ((($this)) + 16|0);
    $58 = ((($this)) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (((($this)) + 16|0) + ($59<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($57,$info,$current_ptr,$path_below,$use_strcmp);
    $61 = ((($this)) + 24|0);
    $62 = ($59|0)>(1);
    if (!($62)) {
     break;
    }
    $63 = ((($this)) + 8|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $64 & 2;
    $66 = ($65|0)==(0);
    if ($66) {
     $67 = ((($info)) + 36|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)==(1);
     if (!($69)) {
      $75 = $64 & 1;
      $76 = ($75|0)==(0);
      if ($76) {
       $79 = ((($info)) + 54|0);
       $p2$2 = $61;
       while(1) {
        $88 = HEAP8[$79>>0]|0;
        $89 = ($88<<24>>24)==(0);
        if (!($89)) {
         break L1;
        }
        $90 = HEAP32[$67>>2]|0;
        $91 = ($90|0)==(1);
        if ($91) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
        $92 = ((($p2$2)) + 8|0);
        $93 = ($92>>>0)<($60>>>0);
        if ($93) {
         $p2$2 = $92;
        } else {
         break L1;
        }
       }
      }
      $77 = ((($info)) + 24|0);
      $78 = ((($info)) + 54|0);
      $p2$1 = $61;
      while(1) {
       $80 = HEAP8[$78>>0]|0;
       $81 = ($80<<24>>24)==(0);
       if (!($81)) {
        break L1;
       }
       $82 = HEAP32[$67>>2]|0;
       $83 = ($82|0)==(1);
       if ($83) {
        $84 = HEAP32[$77>>2]|0;
        $85 = ($84|0)==(1);
        if ($85) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
       $86 = ((($p2$1)) + 8|0);
       $87 = ($86>>>0)<($60>>>0);
       if ($87) {
        $p2$1 = $86;
       } else {
        break L1;
       }
      }
     }
    }
    $70 = ((($info)) + 54|0);
    $p2$0 = $61;
    while(1) {
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(0);
     if (!($72)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
     $73 = ((($p2$0)) + 8|0);
     $74 = ($73>>>0)<($60>>>0);
     if ($74) {
      $p2$0 = $73;
     } else {
      break L1;
     }
    }
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($this)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (((($this)) + 16|0) + ($24<<3)|0);
     $26 = ((($info)) + 52|0);
     $27 = ((($info)) + 53|0);
     $28 = ((($info)) + 54|0);
     $29 = ((($this)) + 8|0);
     $30 = ((($info)) + 24|0);
     $31 = ($24|0)>(0);
     L34: do {
      if ($31) {
       $32 = ((($this)) + 16|0);
       $does_dst_type_point_to_our_static_type$0$off023 = 0;$is_dst_type_derived_from_static_type$0$off025 = 0;$p$024 = $32;
       while(1) {
        HEAP8[$26>>0] = 0;
        HEAP8[$27>>0] = 0;
        __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$024,$info,$current_ptr,$current_ptr,1,$use_strcmp);
        $33 = HEAP8[$28>>0]|0;
        $34 = ($33<<24>>24)==(0);
        if (!($34)) {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off025;
         label = 20;
         break L34;
        }
        $35 = HEAP8[$27>>0]|0;
        $36 = ($35<<24>>24)==(0);
        do {
         if ($36) {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off025;
         } else {
          $37 = HEAP8[$26>>0]|0;
          $38 = ($37<<24>>24)==(0);
          if ($38) {
           $44 = HEAP32[$29>>2]|0;
           $45 = $44 & 1;
           $46 = ($45|0)==(0);
           if ($46) {
            $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$2$off0 = 1;
            label = 20;
            break L34;
           } else {
            $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$1$off0 = 1;
            break;
           }
          }
          $39 = HEAP32[$30>>2]|0;
          $40 = ($39|0)==(1);
          if ($40) {
           break L34;
          }
          $41 = HEAP32[$29>>2]|0;
          $42 = $41 & 2;
          $43 = ($42|0)==(0);
          if ($43) {
           break L34;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
          }
         }
        } while(0);
        $47 = ((($p$024)) + 8|0);
        $48 = ($47>>>0)<($25>>>0);
        if ($48) {
         $does_dst_type_point_to_our_static_type$0$off023 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off025 = $is_dst_type_derived_from_static_type$1$off0;$p$024 = $47;
        } else {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
         label = 20;
         break;
        }
       }
      } else {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0;$is_dst_type_derived_from_static_type$2$off0 = 0;
       label = 20;
      }
     } while(0);
     do {
      if ((label|0) == 20) {
       if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
        label = 24;
       } else {
        HEAP32[$14>>2] = $current_ptr;
        $49 = ((($info)) + 40|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = (($50) + 1)|0;
        HEAP32[$49>>2] = $51;
        $52 = ((($info)) + 36|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = ($53|0)==(1);
        if ($54) {
         $55 = HEAP32[$30>>2]|0;
         $56 = ($55|0)==(2);
         if ($56) {
          HEAP8[$28>>0] = 1;
          if ($is_dst_type_derived_from_static_type$2$off0) {
           break;
          }
         } else {
          label = 24;
         }
        } else {
         label = 24;
        }
       }
       if ((label|0) == 24) {
        if ($is_dst_type_derived_from_static_type$2$off0) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 511]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 255]($8,$info,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $43 = ((($this)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 255]($44,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 511]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off01 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off01 = 1;
       label = 13;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = ((($info)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($info)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($info)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($info)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
       if ((label|0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($info)) + 52|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ((($info)) + 53|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ((($this)) + 16|0);
  $8 = ((($this)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (((($this)) + 16|0) + ($9<<3)|0);
  HEAP8[$3>>0] = 0;
  HEAP8[$5>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $11 = ($9|0)>(1);
  L4: do {
   if ($11) {
    $12 = ((($this)) + 24|0);
    $13 = ((($info)) + 24|0);
    $14 = ((($this)) + 8|0);
    $15 = ((($info)) + 54|0);
    $p$0 = $12;
    while(1) {
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(0);
     if (!($17)) {
      break L4;
     }
     $18 = HEAP8[$3>>0]|0;
     $19 = ($18<<24>>24)==(0);
     if ($19) {
      $25 = HEAP8[$5>>0]|0;
      $26 = ($25<<24>>24)==(0);
      if (!($26)) {
       $27 = HEAP32[$14>>2]|0;
       $28 = $27 & 1;
       $29 = ($28|0)==(0);
       if ($29) {
        break L4;
       }
      }
     } else {
      $20 = HEAP32[$13>>2]|0;
      $21 = ($20|0)==(1);
      if ($21) {
       break L4;
      }
      $22 = HEAP32[$14>>2]|0;
      $23 = $22 & 2;
      $24 = ($23|0)==(0);
      if ($24) {
       break L4;
      }
     }
     HEAP8[$3>>0] = 0;
     HEAP8[$5>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
     $30 = ((($p$0)) + 8|0);
     $31 = ($30>>>0)<($10>>>0);
     if ($31) {
      $p$0 = $30;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$3>>0] = $4;
  HEAP8[$5>>0] = $6;
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 511]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 1023]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,688,736,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0);
 __ZNSt9bad_allocC2Ev($0);
 ___cxa_throw(($0|0),(608|0),(143|0));
 // unreachable;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 80|0);
   $5 = ((($2)) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    $36 = HEAP32[4272>>2]|0;
    HEAP32[$vararg_buffer7>>2] = $36;
    _abort_message(17140,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = ((($2)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[624>>2]|0;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 1023](624,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[4272>>2]|0;
    $31 = HEAP32[$29>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 1023]($29)|0);
    HEAP32[$vararg_buffer>>2] = $30;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(17054,$vararg_buffer);
    // unreachable;
   } else {
    $35 = HEAP32[4272>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $35;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(17099,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(17178,$vararg_buffer10);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((4264|0),(682|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(16951,$vararg_buffer);
  // unreachable;
 }
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$this>>2]|0;
  $6 = ((($5)) + -12|0);
  __ZdlPv($6);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[4264>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(17001,$vararg_buffer);
  // unreachable;
 }
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
  $3 = $4&1;
  return ($3|0);
 }
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(6);
 $4 = $2;
 $3 = $4&1;
 return ($3|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$122 = 0, $$123 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa130 = 0, $$lcssa131 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa135 = 0, $$sum = 0, $$sum14 = 0, $$sum1445 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum1865 = 0, $$sum19 = 0;
 var $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$124 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$371 = 0;
 var $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$753 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond40 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$082 = 0, $x$146 = 0, $x$266 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $282 = 0;$283 = 0;
  tempRet0 = ($282);
  return ($283|0);
 }
 $3 = ((($f)) + 4|0);
 $4 = ((($f)) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = ((($6)) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $$lcssa135 = $13;
   break;
  }
 }
 $16 = ($$lcssa135|0)==(45);
 L12: do {
  switch ($$lcssa135|0) {
  case 43: case 45:  {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = ((($18)) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break L12;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break L12;
   }
   break;
  }
  default: {
   $c$0 = $$lcssa135;$neg$0 = 0;
  }
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond5 = $27 & $28;
 do {
  if ($or$cond5) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = ((($29)) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    if ($25) {
     $$123 = 8;$c$124 = $37;
     label = 46;
     break;
    } else {
     $$1 = $base;$c$1 = $37;
     label = 32;
     break;
    }
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = ((($39)) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum20 = (($46) + 1)|0;
   $47 = (17199 + ($$sum20)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = ((($52)) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $282 = 0;$283 = 0;
     tempRet0 = ($282);
     return ($283|0);
    }
    if ($51) {
     $282 = 0;$283 = 0;
     tempRet0 = ($282);
     return ($283|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = ((($55)) + -1|0);
    HEAP32[$3>>2] = $56;
    $282 = 0;$283 = 0;
    tempRet0 = ($282);
    return ($283|0);
   } else {
    $$123 = 16;$c$124 = $46;
    label = 46;
   }
  } else {
   $$base21 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (17199 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base21>>>0);
   if ($60) {
    $$1 = $$base21;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = ((($63)) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $282 = 0;$283 = 0;
    tempRet0 = ($282);
    return ($283|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $71 = $67;$x$082 = 0;
    while(1) {
     $69 = ($x$082*10)|0;
     $70 = (($69) + ($71))|0;
     $72 = HEAP32[$3>>2]|0;
     $73 = HEAP32[$4>>2]|0;
     $74 = ($72>>>0)<($73>>>0);
     if ($74) {
      $75 = ((($72)) + 1|0);
      HEAP32[$3>>2] = $75;
      $76 = HEAP8[$72>>0]|0;
      $77 = $76&255;
      $c$2$be = $77;
     } else {
      $78 = (___shgetc($f)|0);
      $c$2$be = $78;
     }
     $79 = (($c$2$be) + -48)|0;
     $80 = ($79>>>0)<(10);
     $81 = ($70>>>0)<(429496729);
     $82 = $80 & $81;
     if ($82) {
      $71 = $79;$x$082 = $70;
     } else {
      $$lcssa134 = $70;$c$2$be$lcssa = $c$2$be;
      break;
     }
    }
    $284 = $$lcssa134;$285 = 0;$c$2$lcssa = $c$2$be$lcssa;
   } else {
    $284 = 0;$285 = 0;$c$2$lcssa = $c$1;
   }
   $83 = (($c$2$lcssa) + -48)|0;
   $84 = ($83>>>0)<(10);
   if ($84) {
    $85 = $284;$86 = $285;$90 = $83;$c$371 = $c$2$lcssa;
    while(1) {
     $87 = (___muldi3(($85|0),($86|0),10,0)|0);
     $88 = tempRet0;
     $89 = ($90|0)<(0);
     $91 = $89 << 31 >> 31;
     $92 = $90 ^ -1;
     $93 = $91 ^ -1;
     $94 = ($88>>>0)>($93>>>0);
     $95 = ($87>>>0)>($92>>>0);
     $96 = ($88|0)==($93|0);
     $97 = $96 & $95;
     $98 = $94 | $97;
     if ($98) {
      $$lcssa = $90;$286 = $85;$287 = $86;$c$3$lcssa = $c$371;
      break;
     }
     $99 = (_i64Add(($87|0),($88|0),($90|0),($91|0))|0);
     $100 = tempRet0;
     $101 = HEAP32[$3>>2]|0;
     $102 = HEAP32[$4>>2]|0;
     $103 = ($101>>>0)<($102>>>0);
     if ($103) {
      $104 = ((($101)) + 1|0);
      HEAP32[$3>>2] = $104;
      $105 = HEAP8[$101>>0]|0;
      $106 = $105&255;
      $c$3$be = $106;
     } else {
      $107 = (___shgetc($f)|0);
      $c$3$be = $107;
     }
     $108 = (($c$3$be) + -48)|0;
     $109 = ($108>>>0)<(10);
     $110 = ($100>>>0)<(429496729);
     $111 = ($99>>>0)<(2576980378);
     $112 = ($100|0)==(429496729);
     $113 = $112 & $111;
     $114 = $110 | $113;
     $or$cond7 = $109 & $114;
     if ($or$cond7) {
      $85 = $99;$86 = $100;$90 = $108;$c$371 = $c$3$be;
     } else {
      $$lcssa = $108;$286 = $99;$287 = $100;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $115 = ($$lcssa>>>0)>(9);
    if ($115) {
     $256 = $287;$258 = $286;
    } else {
     $$122 = 10;$288 = $286;$289 = $287;$c$8 = $c$3$lcssa;
     label = 72;
    }
   } else {
    $256 = $285;$258 = $284;
   }
  } else {
   $$123 = $$1;$c$124 = $c$1;
   label = 46;
  }
 }
 L69: do {
  if ((label|0) == 46) {
   $116 = (($$123) + -1)|0;
   $117 = $116 & $$123;
   $118 = ($117|0)==(0);
   if ($118) {
    $123 = ($$123*23)|0;
    $124 = $123 >>> 5;
    $125 = $124 & 7;
    $126 = (17456 + ($125)|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = $127 << 24 >> 24;
    $$sum1445 = (($c$124) + 1)|0;
    $129 = (17199 + ($$sum1445)|0);
    $130 = HEAP8[$129>>0]|0;
    $131 = $130&255;
    $132 = ($131>>>0)<($$123>>>0);
    if ($132) {
     $135 = $131;$x$146 = 0;
     while(1) {
      $133 = $x$146 << $128;
      $134 = $135 | $133;
      $136 = HEAP32[$3>>2]|0;
      $137 = HEAP32[$4>>2]|0;
      $138 = ($136>>>0)<($137>>>0);
      if ($138) {
       $139 = ((($136)) + 1|0);
       HEAP32[$3>>2] = $139;
       $140 = HEAP8[$136>>0]|0;
       $141 = $140&255;
       $c$4$be = $141;
      } else {
       $142 = (___shgetc($f)|0);
       $c$4$be = $142;
      }
      $$sum14 = (($c$4$be) + 1)|0;
      $143 = (17199 + ($$sum14)|0);
      $144 = HEAP8[$143>>0]|0;
      $145 = $144&255;
      $146 = ($145>>>0)<($$123>>>0);
      $147 = ($134>>>0)<(134217728);
      $148 = $147 & $146;
      if ($148) {
       $135 = $145;$x$146 = $134;
      } else {
       $$lcssa130 = $134;$$lcssa131 = $144;$c$4$be$lcssa = $c$4$be;
       break;
      }
     }
     $152 = $$lcssa131;$155 = 0;$157 = $$lcssa130;$c$4$lcssa = $c$4$be$lcssa;
    } else {
     $152 = $130;$155 = 0;$157 = 0;$c$4$lcssa = $c$124;
    }
    $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
    $150 = tempRet0;
    $151 = $152&255;
    $153 = ($151>>>0)>=($$123>>>0);
    $154 = ($155>>>0)>($150>>>0);
    $156 = ($157>>>0)>($149>>>0);
    $158 = ($155|0)==($150|0);
    $159 = $158 & $156;
    $160 = $154 | $159;
    $or$cond40 = $153 | $160;
    if ($or$cond40) {
     $$122 = $$123;$288 = $157;$289 = $155;$c$8 = $c$4$lcssa;
     label = 72;
     break;
    } else {
     $161 = $157;$162 = $155;$166 = $152;
    }
    while(1) {
     $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
     $164 = tempRet0;
     $165 = $166&255;
     $167 = $165 | $163;
     $168 = HEAP32[$3>>2]|0;
     $169 = HEAP32[$4>>2]|0;
     $170 = ($168>>>0)<($169>>>0);
     if ($170) {
      $171 = ((($168)) + 1|0);
      HEAP32[$3>>2] = $171;
      $172 = HEAP8[$168>>0]|0;
      $173 = $172&255;
      $c$5$be = $173;
     } else {
      $174 = (___shgetc($f)|0);
      $c$5$be = $174;
     }
     $$sum15 = (($c$5$be) + 1)|0;
     $175 = (17199 + ($$sum15)|0);
     $176 = HEAP8[$175>>0]|0;
     $177 = $176&255;
     $178 = ($177>>>0)>=($$123>>>0);
     $179 = ($164>>>0)>($150>>>0);
     $180 = ($167>>>0)>($149>>>0);
     $181 = ($164|0)==($150|0);
     $182 = $181 & $180;
     $183 = $179 | $182;
     $or$cond = $178 | $183;
     if ($or$cond) {
      $$122 = $$123;$288 = $167;$289 = $164;$c$8 = $c$5$be;
      label = 72;
      break L69;
     } else {
      $161 = $167;$162 = $164;$166 = $176;
     }
    }
   }
   $$sum1865 = (($c$124) + 1)|0;
   $119 = (17199 + ($$sum1865)|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = $120&255;
   $122 = ($121>>>0)<($$123>>>0);
   if ($122) {
    $186 = $121;$x$266 = 0;
    while(1) {
     $184 = Math_imul($x$266, $$123)|0;
     $185 = (($186) + ($184))|0;
     $187 = HEAP32[$3>>2]|0;
     $188 = HEAP32[$4>>2]|0;
     $189 = ($187>>>0)<($188>>>0);
     if ($189) {
      $190 = ((($187)) + 1|0);
      HEAP32[$3>>2] = $190;
      $191 = HEAP8[$187>>0]|0;
      $192 = $191&255;
      $c$6$be = $192;
     } else {
      $193 = (___shgetc($f)|0);
      $c$6$be = $193;
     }
     $$sum18 = (($c$6$be) + 1)|0;
     $194 = (17199 + ($$sum18)|0);
     $195 = HEAP8[$194>>0]|0;
     $196 = $195&255;
     $197 = ($196>>>0)<($$123>>>0);
     $198 = ($185>>>0)<(119304647);
     $199 = $198 & $197;
     if ($199) {
      $186 = $196;$x$266 = $185;
     } else {
      $$lcssa132 = $185;$$lcssa133 = $195;$c$6$be$lcssa = $c$6$be;
      break;
     }
    }
    $201 = $$lcssa133;$290 = $$lcssa132;$291 = 0;$c$6$lcssa = $c$6$be$lcssa;
   } else {
    $201 = $120;$290 = 0;$291 = 0;$c$6$lcssa = $c$124;
   }
   $200 = $201&255;
   $202 = ($200>>>0)<($$123>>>0);
   if ($202) {
    $203 = (___udivdi3(-1,-1,($$123|0),0)|0);
    $204 = tempRet0;
    $206 = $291;$208 = $290;$215 = $201;$c$753 = $c$6$lcssa;
    while(1) {
     $205 = ($206>>>0)>($204>>>0);
     $207 = ($208>>>0)>($203>>>0);
     $209 = ($206|0)==($204|0);
     $210 = $209 & $207;
     $211 = $205 | $210;
     if ($211) {
      $$122 = $$123;$288 = $208;$289 = $206;$c$8 = $c$753;
      label = 72;
      break L69;
     }
     $212 = (___muldi3(($208|0),($206|0),($$123|0),0)|0);
     $213 = tempRet0;
     $214 = $215&255;
     $216 = $214 ^ -1;
     $217 = ($213>>>0)>(4294967295);
     $218 = ($212>>>0)>($216>>>0);
     $219 = ($213|0)==(-1);
     $220 = $219 & $218;
     $221 = $217 | $220;
     if ($221) {
      $$122 = $$123;$288 = $208;$289 = $206;$c$8 = $c$753;
      label = 72;
      break L69;
     }
     $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
     $223 = tempRet0;
     $224 = HEAP32[$3>>2]|0;
     $225 = HEAP32[$4>>2]|0;
     $226 = ($224>>>0)<($225>>>0);
     if ($226) {
      $227 = ((($224)) + 1|0);
      HEAP32[$3>>2] = $227;
      $228 = HEAP8[$224>>0]|0;
      $229 = $228&255;
      $c$7$be = $229;
     } else {
      $230 = (___shgetc($f)|0);
      $c$7$be = $230;
     }
     $$sum19 = (($c$7$be) + 1)|0;
     $231 = (17199 + ($$sum19)|0);
     $232 = HEAP8[$231>>0]|0;
     $233 = $232&255;
     $234 = ($233>>>0)<($$123>>>0);
     if ($234) {
      $206 = $223;$208 = $222;$215 = $232;$c$753 = $c$7$be;
     } else {
      $$122 = $$123;$288 = $222;$289 = $223;$c$8 = $c$7$be;
      label = 72;
      break;
     }
    }
   } else {
    $$122 = $$123;$288 = $290;$289 = $291;$c$8 = $c$6$lcssa;
    label = 72;
   }
  }
 } while(0);
 if ((label|0) == 72) {
  $$sum16 = (($c$8) + 1)|0;
  $235 = (17199 + ($$sum16)|0);
  $236 = HEAP8[$235>>0]|0;
  $237 = $236&255;
  $238 = ($237>>>0)<($$122>>>0);
  if ($238) {
   while(1) {
    $239 = HEAP32[$3>>2]|0;
    $240 = HEAP32[$4>>2]|0;
    $241 = ($239>>>0)<($240>>>0);
    if ($241) {
     $242 = ((($239)) + 1|0);
     HEAP32[$3>>2] = $242;
     $243 = HEAP8[$239>>0]|0;
     $244 = $243&255;
     $c$9$be = $244;
    } else {
     $245 = (___shgetc($f)|0);
     $c$9$be = $245;
    }
    $$sum17 = (($c$9$be) + 1)|0;
    $246 = (17199 + ($$sum17)|0);
    $247 = HEAP8[$246>>0]|0;
    $248 = $247&255;
    $249 = ($248>>>0)<($$122>>>0);
    if (!($249)) {
     break;
    }
   }
   $250 = (___errno_location()|0);
   HEAP32[$250>>2] = 34;
   $256 = $1;$258 = $0;
  } else {
   $256 = $289;$258 = $288;
  }
 }
 $251 = HEAP32[$4>>2]|0;
 $252 = ($251|0)==(0|0);
 if (!($252)) {
  $253 = HEAP32[$3>>2]|0;
  $254 = ((($253)) + -1|0);
  HEAP32[$3>>2] = $254;
 }
 $255 = ($256>>>0)<($1>>>0);
 $257 = ($258>>>0)<($0>>>0);
 $259 = ($256|0)==($1|0);
 $260 = $259 & $257;
 $261 = $255 | $260;
 if (!($261)) {
  $262 = $0 & 1;
  $263 = ($262|0)!=(0);
  $264 = (0)!=(0);
  $265 = $263 | $264;
  $266 = ($neg$0|0)!=(0);
  $or$cond12 = $265 | $266;
  if (!($or$cond12)) {
   $267 = (___errno_location()|0);
   HEAP32[$267>>2] = 34;
   $268 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $269 = tempRet0;
   $282 = $269;$283 = $268;
   tempRet0 = ($282);
   return ($283|0);
  }
  $270 = ($256>>>0)>($1>>>0);
  $271 = ($258>>>0)>($0>>>0);
  $272 = ($256|0)==($1|0);
  $273 = $272 & $271;
  $274 = $270 | $273;
  if ($274) {
   $275 = (___errno_location()|0);
   HEAP32[$275>>2] = 34;
   $282 = $1;$283 = $0;
   tempRet0 = ($282);
   return ($283|0);
  }
 }
 $276 = ($neg$0|0)<(0);
 $277 = $276 << 31 >> 31;
 $278 = $258 ^ $neg$0;
 $279 = $256 ^ $277;
 $280 = (_i64Subtract(($278|0),($279|0),($neg$0|0),($277|0))|0);
 $281 = tempRet0;
 $282 = $281;$283 = $280;
 tempRet0 = ($282);
 return ($283|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$0$i25 = 0.0, $$010$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$11$i = 0, $$18$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3121$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa288 = 0;
 var $$lcssa289 = 0, $$lcssa308 = 0, $$lcssa308$lcssa = 0, $$lcssa309 = 0, $$lcssa309$lcssa = 0, $$lcssa322 = 0, $$lcssa323 = 0, $$lcssa333 = 0, $$lcssa50$i = 0, $$lnz$0$i = 0, $$neg32$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi42$iZ2D = 0.0, $$pre41$i = 0.0, $$promoted = 0, $$promoted$i = 0;
 var $$promoted185 = 0, $$sink$off0$us$i = 0, $$sink$off0$us93$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0.0;
 var $276 = 0.0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0.0, $419 = 0.0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0.0;
 var $474 = 0, $475 = 0.0, $476 = 0.0, $477 = 0, $478 = 0.0, $479 = 0, $48 = 0.0, $480 = 0.0, $481 = 0.0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0;
 var $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0, $496 = 0, $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0.0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0.0, $663 = 0, $664 = 0.0, $665 = 0.0, $666 = 0, $667 = 0, $668 = 0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0;
 var $672 = 0.0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0, $677 = 0.0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0.0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0.0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0.0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0.0, $702 = 0, $703 = 0, $704 = 0.0, $705 = 0.0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa177$i = 0, $a$0101$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph38$i = 0, $a$3$i = 0;
 var $a$3$i$lcssa300 = 0, $a$3$i301 = 0, $a$3$ph$i = 0, $a$3$ph183$i = 0, $a$478$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i23 = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge$i26 = 0, $brmerge187 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$185 = 0, $c$2 = 0;
 var $c$2$i = 0, $c$2$lcssa$i = 0, $c$4 = 0, $c$4$1 = 0, $c$6 = 0, $carry$0103$i = 0, $carry1$0$us$i = 0, $carry1$0$us89$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us$i$lcssa = 0, $carry1$1$us94$i = 0, $carry1$1$us94$i$lcssa = 0, $carry3$081$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0;
 var $e2$0$us$i = 0, $e2$0$us84$i = 0, $e2$1$i = 0, $e2$1$i298 = 0, $e2$1$ph$i = 0, $e2$1$ph182$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa294 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa331 = 0, $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0;
 var $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3117$i = 0, $gotdig$3117$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1118$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$084 = 0, $i$1 = 0, $i$4 = 0, $i$4$lcssa = 0;
 var $j$0$lcssa$i = 0, $j$0120$i = 0, $j$0120$i$lcssa = 0, $j$067$i = 0, $j$068$i = 0, $j$069$i = 0, $j$2$i = 0, $j$3110$i = 0, $k$0$lcssa$i = 0, $k$0119$i = 0, $k$0119$i$lcssa = 0, $k$063$i = 0, $k$064$i = 0, $k$065$i = 0, $k$2$i = 0, $k$3$i = 0, $k$4102$i = 0, $k$5$in$us$i = 0, $k$5$in$us88$i = 0, $k$5$us$i = 0;
 var $k$5$us90$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us96$i = 0, $k$679$i = 0, $lnz$0$lcssa$i = 0, $lnz$0116$i = 0, $lnz$0116$i$lcssa = 0, $lnz$057$i = 0, $lnz$058$i = 0, $lnz$059$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$us$i = 0;
 var $or$cond17$us95$i = 0, $or$cond19$i = 0, $or$cond20$i = 0, $or$cond216$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond9$i = 0, $or$cond9$not = 0, $rp$0$lcssa178$i = 0, $rp$0100$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph36$i = 0, $rp$3$ph$i = 0, $rp$3$ph34$i = 0, $rp$477$i = 0;
 var $rp$5$i = 0, $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0;
 var $y$0$i = 0.0, $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i22 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph37$i = 0, $z$1$us$i = 0, $z$1$us85$i = 0, $z$2$us$i = 0, $z$2$us87$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us$i$lcssa = 0;
 var $z$3$us97$i = 0, $z$3$us97$i$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 switch ($prec|0) {
 case 0:  {
  $bits$0$ph = 24;$emin$0$ph = -149;
  break;
 }
 case 1:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  break;
 }
 case 2:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  break;
 }
 default: {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 }
 $0 = ((($f)) + 4|0);
 $1 = ((($f)) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = ((($2)) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $$lcssa333 = $9;
   break;
  }
 }
 $12 = ($$lcssa333|0)==(45);
 L13: do {
  switch ($$lcssa333|0) {
  case 43: case 45:  {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = ((($16)) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break L13;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break L13;
   }
   break;
  }
  default: {
   $c$0 = $$lcssa333;$sign$0 = 1;
  }
  }
 } while(0);
 $c$185 = $c$0;$i$084 = 0;
 while(1) {
  $23 = $c$185 | 32;
  $24 = (17465 + ($i$084)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$185;$i$0$lcssa = $i$084;
   break;
  }
  $28 = ($i$084>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$185;
   }
  } while(0);
  $36 = (($i$084) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$185 = $c$2;$i$084 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 L29: do {
  switch ($i$0$lcssa|0) {
  case 8:  {
   break;
  }
  case 3:  {
   label = 23;
   break;
  }
  default: {
   $38 = ($i$0$lcssa>>>0)>(3);
   $39 = ($pok|0)!=(0);
   $or$cond5 = $39 & $38;
   if ($or$cond5) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break L29;
    } else {
     label = 23;
     break L29;
    }
   }
   $51 = ($i$0$lcssa|0)==(0);
   do {
    if ($51) {
     $52 = $c$1$lcssa | 32;
     $53 = ($52|0)==(110);
     if ($53) {
      $54 = HEAP32[$0>>2]|0;
      $55 = HEAP32[$1>>2]|0;
      $56 = ($54>>>0)<($55>>>0);
      if ($56) {
       $57 = ((($54)) + 1|0);
       HEAP32[$0>>2] = $57;
       $58 = HEAP8[$54>>0]|0;
       $59 = $58&255;
       $c$4 = $59;
      } else {
       $60 = (___shgetc($f)|0);
       $c$4 = $60;
      }
      $61 = $c$4 | 32;
      $62 = ($61|0)==(97);
      if (!($62)) {
       break;
      }
      $712 = HEAP32[$0>>2]|0;
      $713 = HEAP32[$1>>2]|0;
      $714 = ($712>>>0)<($713>>>0);
      if ($714) {
       $716 = ((($712)) + 1|0);
       HEAP32[$0>>2] = $716;
       $717 = HEAP8[$712>>0]|0;
       $718 = $717&255;
       $c$4$1 = $718;
      } else {
       $715 = (___shgetc($f)|0);
       $c$4$1 = $715;
      }
      $719 = $c$4$1 | 32;
      $720 = ($719|0)==(110);
      if (!($720)) {
       break;
      }
      $63 = HEAP32[$0>>2]|0;
      $64 = HEAP32[$1>>2]|0;
      $65 = ($63>>>0)<($64>>>0);
      if ($65) {
       $66 = ((($63)) + 1|0);
       HEAP32[$0>>2] = $66;
       $67 = HEAP8[$63>>0]|0;
       $68 = $67&255;
       $71 = $68;
      } else {
       $69 = (___shgetc($f)|0);
       $71 = $69;
      }
      $70 = ($71|0)==(40);
      if ($70) {
       $i$4 = 1;
      } else {
       $72 = HEAP32[$1>>2]|0;
       $73 = ($72|0)==(0|0);
       if ($73) {
        $$0 = nan;
        STACKTOP = sp;return (+$$0);
       }
       $74 = HEAP32[$0>>2]|0;
       $75 = ((($74)) + -1|0);
       HEAP32[$0>>2] = $75;
       $$0 = nan;
       STACKTOP = sp;return (+$$0);
      }
      while(1) {
       $76 = HEAP32[$0>>2]|0;
       $77 = HEAP32[$1>>2]|0;
       $78 = ($76>>>0)<($77>>>0);
       if ($78) {
        $79 = ((($76)) + 1|0);
        HEAP32[$0>>2] = $79;
        $80 = HEAP8[$76>>0]|0;
        $81 = $80&255;
        $84 = $81;
       } else {
        $82 = (___shgetc($f)|0);
        $84 = $82;
       }
       $83 = (($84) + -48)|0;
       $85 = ($83>>>0)<(10);
       $86 = (($84) + -65)|0;
       $87 = ($86>>>0)<(26);
       $or$cond = $85 | $87;
       if (!($or$cond)) {
        $88 = (($84) + -97)|0;
        $89 = ($88>>>0)<(26);
        $90 = ($84|0)==(95);
        $or$cond7 = $90 | $89;
        if (!($or$cond7)) {
         $$lcssa289 = $84;$i$4$lcssa = $i$4;
         break;
        }
       }
       $102 = (($i$4) + 1)|0;
       $i$4 = $102;
      }
      $91 = ($$lcssa289|0)==(41);
      if ($91) {
       $$0 = nan;
       STACKTOP = sp;return (+$$0);
      }
      $92 = HEAP32[$1>>2]|0;
      $93 = ($92|0)==(0|0);
      if (!($93)) {
       $94 = HEAP32[$0>>2]|0;
       $95 = ((($94)) + -1|0);
       HEAP32[$0>>2] = $95;
      }
      if (!($39)) {
       $97 = (___errno_location()|0);
       HEAP32[$97>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       STACKTOP = sp;return (+$$0);
      }
      $96 = ($i$4$lcssa|0)==(0);
      $brmerge187 = $96 | $93;
      if ($brmerge187) {
       $$0 = nan;
       STACKTOP = sp;return (+$$0);
      }
      $$promoted185 = HEAP32[$0>>2]|0;
      $$in = $i$4$lcssa;$100 = $$promoted185;
      while(1) {
       $98 = (($$in) + -1)|0;
       $99 = ((($100)) + -1|0);
       $101 = ($98|0)==(0);
       if ($101) {
        $$lcssa288 = $99;
        break;
       } else {
        $$in = $98;$100 = $99;
       }
      }
      HEAP32[$0>>2] = $$lcssa288;
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $108 = ($c$1$lcssa|0)==(48);
     do {
      if ($108) {
       $109 = HEAP32[$0>>2]|0;
       $110 = HEAP32[$1>>2]|0;
       $111 = ($109>>>0)<($110>>>0);
       if ($111) {
        $112 = ((($109)) + 1|0);
        HEAP32[$0>>2] = $112;
        $113 = HEAP8[$109>>0]|0;
        $114 = $113&255;
        $117 = $114;
       } else {
        $115 = (___shgetc($f)|0);
        $117 = $115;
       }
       $116 = $117 | 32;
       $118 = ($116|0)==(120);
       if (!($118)) {
        $320 = HEAP32[$1>>2]|0;
        $321 = ($320|0)==(0|0);
        if ($321) {
         $c$6 = 48;
         break;
        }
        $322 = HEAP32[$0>>2]|0;
        $323 = ((($322)) + -1|0);
        HEAP32[$0>>2] = $323;
        $c$6 = 48;
        break;
       }
       $119 = HEAP32[$0>>2]|0;
       $120 = HEAP32[$1>>2]|0;
       $121 = ($119>>>0)<($120>>>0);
       if ($121) {
        $122 = ((($119)) + 1|0);
        HEAP32[$0>>2] = $122;
        $123 = HEAP8[$119>>0]|0;
        $124 = $123&255;
        $c$0$i = $124;$gotdig$0$i = 0;
       } else {
        $125 = (___shgetc($f)|0);
        $c$0$i = $125;$gotdig$0$i = 0;
       }
       L99: while(1) {
        switch ($c$0$i|0) {
        case 46:  {
         $gotdig$0$i$lcssa294 = $gotdig$0$i;
         label = 71;
         break L99;
         break;
        }
        case 48:  {
         break;
        }
        default: {
         $163 = 0;$165 = 0;$721 = 0;$722 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         break L99;
        }
        }
        $126 = HEAP32[$0>>2]|0;
        $127 = HEAP32[$1>>2]|0;
        $128 = ($126>>>0)<($127>>>0);
        if ($128) {
         $129 = ((($126)) + 1|0);
         HEAP32[$0>>2] = $129;
         $130 = HEAP8[$126>>0]|0;
         $131 = $130&255;
         $c$0$i = $131;$gotdig$0$i = 1;
         continue;
        } else {
         $132 = (___shgetc($f)|0);
         $c$0$i = $132;$gotdig$0$i = 1;
         continue;
        }
       }
       if ((label|0) == 71) {
        $133 = HEAP32[$0>>2]|0;
        $134 = HEAP32[$1>>2]|0;
        $135 = ($133>>>0)<($134>>>0);
        if ($135) {
         $136 = ((($133)) + 1|0);
         HEAP32[$0>>2] = $136;
         $137 = HEAP8[$133>>0]|0;
         $138 = $137&255;
         $c$1$ph$i = $138;
        } else {
         $139 = (___shgetc($f)|0);
         $c$1$ph$i = $139;
        }
        $140 = ($c$1$ph$i|0)==(48);
        if ($140) {
         $148 = 0;$149 = 0;
         while(1) {
          $141 = HEAP32[$0>>2]|0;
          $142 = HEAP32[$1>>2]|0;
          $143 = ($141>>>0)<($142>>>0);
          if ($143) {
           $144 = ((($141)) + 1|0);
           HEAP32[$0>>2] = $144;
           $145 = HEAP8[$141>>0]|0;
           $146 = $145&255;
           $153 = $146;
          } else {
           $147 = (___shgetc($f)|0);
           $153 = $147;
          }
          $150 = (_i64Add(($148|0),($149|0),-1,-1)|0);
          $151 = tempRet0;
          $152 = ($153|0)==(48);
          if ($152) {
           $148 = $150;$149 = $151;
          } else {
           $163 = 0;$165 = 0;$721 = $150;$722 = $151;$c$2$i = $153;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
           break;
          }
         }
        } else {
         $163 = 0;$165 = 0;$721 = 0;$722 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa294;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        }
       }
       while(1) {
        $154 = (($c$2$i) + -48)|0;
        $155 = ($154>>>0)<(10);
        $$pre$i = $c$2$i | 32;
        if ($155) {
         label = 83;
        } else {
         $156 = (($$pre$i) + -97)|0;
         $157 = ($156>>>0)<(6);
         $158 = ($c$2$i|0)==(46);
         $or$cond6$i = $158 | $157;
         if (!($or$cond6$i)) {
          $207 = $165;$208 = $721;$210 = $163;$211 = $722;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
          break;
         }
         if ($158) {
          $159 = ($gotrad$0$i|0)==(0);
          if ($159) {
           $723 = $165;$724 = $163;$725 = $165;$726 = $163;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
          } else {
           $207 = $165;$208 = $721;$210 = $163;$211 = $722;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break;
          }
         } else {
          label = 83;
         }
        }
        if ((label|0) == 83) {
         label = 0;
         $160 = ($c$2$i|0)>(57);
         $161 = (($$pre$i) + -87)|0;
         $d$0$i = $160 ? $161 : $154;
         $162 = ($163|0)<(0);
         $164 = ($165>>>0)<(8);
         $166 = ($163|0)==(0);
         $167 = $166 & $164;
         $168 = $162 | $167;
         do {
          if ($168) {
           $169 = $x$0$i << 4;
           $170 = (($d$0$i) + ($169))|0;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $170;$y$1$i = $y$0$i;
          } else {
           $171 = ($163|0)<(0);
           $172 = ($165>>>0)<(14);
           $173 = ($163|0)==(0);
           $174 = $173 & $172;
           $175 = $171 | $174;
           if ($175) {
            $176 = (+($d$0$i|0));
            $177 = $scale$0$i * 0.0625;
            $178 = $177 * $176;
            $179 = $y$0$i + $178;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $177;$x$1$i = $x$0$i;$y$1$i = $179;
            break;
           }
           $180 = ($d$0$i|0)==(0);
           $181 = ($gottail$0$i|0)!=(0);
           $or$cond$i = $181 | $180;
           if ($or$cond$i) {
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
           } else {
            $182 = $scale$0$i * 0.5;
            $183 = $y$0$i + $182;
            $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $183;
           }
          }
         } while(0);
         $184 = (_i64Add(($165|0),($163|0),1,0)|0);
         $185 = tempRet0;
         $723 = $721;$724 = $722;$725 = $184;$726 = $185;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
        }
        $186 = HEAP32[$0>>2]|0;
        $187 = HEAP32[$1>>2]|0;
        $188 = ($186>>>0)<($187>>>0);
        if ($188) {
         $189 = ((($186)) + 1|0);
         HEAP32[$0>>2] = $189;
         $190 = HEAP8[$186>>0]|0;
         $191 = $190&255;
         $163 = $726;$165 = $725;$721 = $723;$722 = $724;$c$2$i = $191;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
         continue;
        } else {
         $192 = (___shgetc($f)|0);
         $163 = $726;$165 = $725;$721 = $723;$722 = $724;$c$2$i = $192;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
         continue;
        }
       }
       $193 = ($gotdig$2$i$lcssa|0)==(0);
       if ($193) {
        $194 = HEAP32[$1>>2]|0;
        $195 = ($194|0)==(0|0);
        if (!($195)) {
         $196 = HEAP32[$0>>2]|0;
         $197 = ((($196)) + -1|0);
         HEAP32[$0>>2] = $197;
        }
        $198 = ($pok|0)==(0);
        if ($198) {
         ___shlim($f,0);
        } else {
         if (!($195)) {
          $199 = HEAP32[$0>>2]|0;
          $200 = ((($199)) + -1|0);
          HEAP32[$0>>2] = $200;
          $201 = ($gotrad$0$i$lcssa|0)==(0);
          if (!($201)) {
           $202 = ((($199)) + -2|0);
           HEAP32[$0>>2] = $202;
          }
         }
        }
        $203 = (+($sign$0|0));
        $204 = $203 * 0.0;
        $$0 = $204;
        STACKTOP = sp;return (+$$0);
       }
       $205 = ($gotrad$0$i$lcssa|0)==(0);
       $206 = $205 ? $207 : $208;
       $209 = $205 ? $210 : $211;
       $212 = ($210|0)<(0);
       $213 = ($207>>>0)<(8);
       $214 = ($210|0)==(0);
       $215 = $214 & $213;
       $216 = $212 | $215;
       if ($216) {
        $218 = $207;$219 = $210;$x$324$i = $x$0$i$lcssa;
        while(1) {
         $217 = $x$324$i << 4;
         $220 = (_i64Add(($218|0),($219|0),1,0)|0);
         $221 = tempRet0;
         $222 = ($221|0)<(0);
         $223 = ($220>>>0)<(8);
         $224 = ($221|0)==(0);
         $225 = $224 & $223;
         $226 = $222 | $225;
         if ($226) {
          $218 = $220;$219 = $221;$x$324$i = $217;
         } else {
          $x$3$lcssa$i = $217;
          break;
         }
        }
       } else {
        $x$3$lcssa$i = $x$0$i$lcssa;
       }
       $227 = $c$2$lcssa$i | 32;
       $228 = ($227|0)==(112);
       do {
        if ($228) {
         $229 = (_scanexp($f,$pok)|0);
         $230 = tempRet0;
         $231 = ($229|0)==(0);
         $232 = ($230|0)==(-2147483648);
         $233 = $231 & $232;
         if ($233) {
          $234 = ($pok|0)==(0);
          if ($234) {
           ___shlim($f,0);
           $$0 = 0.0;
           STACKTOP = sp;return (+$$0);
          } else {
           $235 = HEAP32[$1>>2]|0;
           $236 = ($235|0)==(0|0);
           if ($236) {
            $247 = 0;$248 = 0;
            break;
           }
           $237 = HEAP32[$0>>2]|0;
           $238 = ((($237)) + -1|0);
           HEAP32[$0>>2] = $238;
           $247 = 0;$248 = 0;
           break;
          }
         } else {
          $247 = $229;$248 = $230;
         }
        } else {
         $239 = HEAP32[$1>>2]|0;
         $240 = ($239|0)==(0|0);
         if ($240) {
          $247 = 0;$248 = 0;
         } else {
          $241 = HEAP32[$0>>2]|0;
          $242 = ((($241)) + -1|0);
          HEAP32[$0>>2] = $242;
          $247 = 0;$248 = 0;
         }
        }
       } while(0);
       $243 = (_bitshift64Shl(($206|0),($209|0),2)|0);
       $244 = tempRet0;
       $245 = (_i64Add(($243|0),($244|0),-32,-1)|0);
       $246 = tempRet0;
       $249 = (_i64Add(($245|0),($246|0),($247|0),($248|0))|0);
       $250 = tempRet0;
       $251 = ($x$3$lcssa$i|0)==(0);
       if ($251) {
        $252 = (+($sign$0|0));
        $253 = $252 * 0.0;
        $$0 = $253;
        STACKTOP = sp;return (+$$0);
       }
       $254 = (0 - ($emin$0$ph))|0;
       $255 = ($250|0)>(0);
       $256 = ($249>>>0)>($254>>>0);
       $257 = ($250|0)==(0);
       $258 = $257 & $256;
       $259 = $255 | $258;
       if ($259) {
        $260 = (___errno_location()|0);
        HEAP32[$260>>2] = 34;
        $261 = (+($sign$0|0));
        $262 = $261 * 1.7976931348623157E+308;
        $263 = $262 * 1.7976931348623157E+308;
        $$0 = $263;
        STACKTOP = sp;return (+$$0);
       }
       $264 = (($emin$0$ph) + -106)|0;
       $265 = ($264|0)<(0);
       $266 = $265 << 31 >> 31;
       $267 = ($250|0)<($266|0);
       $268 = ($249>>>0)<($264>>>0);
       $269 = ($250|0)==($266|0);
       $270 = $269 & $268;
       $271 = $267 | $270;
       if ($271) {
        $273 = (___errno_location()|0);
        HEAP32[$273>>2] = 34;
        $274 = (+($sign$0|0));
        $275 = $274 * 2.2250738585072014E-308;
        $276 = $275 * 2.2250738585072014E-308;
        $$0 = $276;
        STACKTOP = sp;return (+$$0);
       }
       $272 = ($x$3$lcssa$i|0)>(-1);
       if ($272) {
        $282 = $249;$283 = $250;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i$lcssa;
        while(1) {
         $277 = !($y$320$i >= 0.5);
         $278 = $x$419$i << 1;
         $279 = $y$320$i + -1.0;
         $280 = $277&1;
         $281 = $280 | $278;
         $x$5$i = $281 ^ 1;
         $$pn$i = $277 ? $y$320$i : $279;
         $y$4$i = $y$320$i + $$pn$i;
         $284 = (_i64Add(($282|0),($283|0),-1,-1)|0);
         $285 = tempRet0;
         $286 = ($281|0)>(-1);
         if ($286) {
          $282 = $284;$283 = $285;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
         } else {
          $291 = $284;$292 = $285;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
          break;
         }
        }
       } else {
        $291 = $249;$292 = $250;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
       }
       $287 = ($emin$0$ph|0)<(0);
       $288 = $287 << 31 >> 31;
       $289 = (_i64Subtract(32,0,($emin$0$ph|0),($288|0))|0);
       $290 = tempRet0;
       $293 = (_i64Add(($291|0),($292|0),($289|0),($290|0))|0);
       $294 = tempRet0;
       $295 = (0)>($294|0);
       $296 = ($bits$0$ph>>>0)>($293>>>0);
       $297 = (0)==($294|0);
       $298 = $297 & $296;
       $299 = $295 | $298;
       if ($299) {
        $300 = ($293|0)<(0);
        if ($300) {
         $$0710$i = 0;
         label = 124;
        } else {
         $$07$i = $293;
         label = 122;
        }
       } else {
        $$07$i = $bits$0$ph;
        label = 122;
       }
       if ((label|0) == 122) {
        $301 = ($$07$i|0)<(53);
        if ($301) {
         $$0710$i = $$07$i;
         label = 124;
        } else {
         $$pre41$i = (+($sign$0|0));
         $$0711$i = $$07$i;$$pre$phi42$iZ2D = $$pre41$i;$bias$0$i = 0.0;
        }
       }
       if ((label|0) == 124) {
        $302 = (84 - ($$0710$i))|0;
        $303 = (+_scalbn(1.0,$302));
        $304 = (+($sign$0|0));
        $305 = (+_copysignl($303,$304));
        $$0711$i = $$0710$i;$$pre$phi42$iZ2D = $304;$bias$0$i = $305;
       }
       $306 = ($$0711$i|0)<(32);
       $307 = $y$3$lcssa$i != 0.0;
       $or$cond4$i = $307 & $306;
       $308 = $x$4$lcssa$i & 1;
       $309 = ($308|0)==(0);
       $or$cond9$i = $309 & $or$cond4$i;
       $310 = $or$cond9$i&1;
       $x$6$i = (($310) + ($x$4$lcssa$i))|0;
       $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
       $311 = (+($x$6$i>>>0));
       $312 = $$pre$phi42$iZ2D * $311;
       $313 = $bias$0$i + $312;
       $314 = $$pre$phi42$iZ2D * $y$5$i;
       $315 = $314 + $313;
       $316 = $315 - $bias$0$i;
       $317 = $316 != 0.0;
       if (!($317)) {
        $318 = (___errno_location()|0);
        HEAP32[$318>>2] = 34;
       }
       $319 = (+_scalbnl($316,$291));
       $$0 = $319;
       STACKTOP = sp;return (+$$0);
      } else {
       $c$6 = $c$1$lcssa;
      }
     } while(0);
     $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
     $324 = (0 - ($sum$i))|0;
     $$09$i = $c$6;$gotdig$0$i12 = 0;
     L195: while(1) {
      switch ($$09$i|0) {
      case 46:  {
       $gotdig$0$i12$lcssa331 = $gotdig$0$i12;
       label = 135;
       break L195;
       break;
      }
      case 48:  {
       break;
      }
      default: {
       $$2$i = $$09$i;$727 = 0;$728 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
       break L195;
      }
      }
      $325 = HEAP32[$0>>2]|0;
      $326 = HEAP32[$1>>2]|0;
      $327 = ($325>>>0)<($326>>>0);
      if ($327) {
       $328 = ((($325)) + 1|0);
       HEAP32[$0>>2] = $328;
       $329 = HEAP8[$325>>0]|0;
       $330 = $329&255;
       $$09$i = $330;$gotdig$0$i12 = 1;
       continue;
      } else {
       $331 = (___shgetc($f)|0);
       $$09$i = $331;$gotdig$0$i12 = 1;
       continue;
      }
     }
     if ((label|0) == 135) {
      $332 = HEAP32[$0>>2]|0;
      $333 = HEAP32[$1>>2]|0;
      $334 = ($332>>>0)<($333>>>0);
      if ($334) {
       $335 = ((($332)) + 1|0);
       HEAP32[$0>>2] = $335;
       $336 = HEAP8[$332>>0]|0;
       $337 = $336&255;
       $$1$ph$i = $337;
      } else {
       $338 = (___shgetc($f)|0);
       $$1$ph$i = $338;
      }
      $339 = ($$1$ph$i|0)==(48);
      if ($339) {
       $340 = 0;$341 = 0;
       while(1) {
        $342 = (_i64Add(($340|0),($341|0),-1,-1)|0);
        $343 = tempRet0;
        $344 = HEAP32[$0>>2]|0;
        $345 = HEAP32[$1>>2]|0;
        $346 = ($344>>>0)<($345>>>0);
        if ($346) {
         $347 = ((($344)) + 1|0);
         HEAP32[$0>>2] = $347;
         $348 = HEAP8[$344>>0]|0;
         $349 = $348&255;
         $$1$be$i = $349;
        } else {
         $350 = (___shgetc($f)|0);
         $$1$be$i = $350;
        }
        $351 = ($$1$be$i|0)==(48);
        if ($351) {
         $340 = $342;$341 = $343;
        } else {
         $$2$i = $$1$be$i;$727 = $342;$728 = $343;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
         break;
        }
       }
      } else {
       $$2$i = $$1$ph$i;$727 = 0;$728 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa331;$gotrad$0$i14 = 1;
      }
     }
     HEAP32[$x$i>>2] = 0;
     $352 = (($$2$i) + -48)|0;
     $353 = ($352>>>0)<(10);
     $354 = ($$2$i|0)==(46);
     $355 = $354 | $353;
     L214: do {
      if ($355) {
       $356 = ((($x$i)) + 496|0);
       $$3121$i = $$2$i;$359 = 0;$360 = 0;$729 = $354;$730 = $352;$731 = $727;$732 = $728;$gotdig$3117$i = $gotdig$2$i13;$gotrad$1118$i = $gotrad$0$i14;$j$0120$i = 0;$k$0119$i = 0;$lnz$0116$i = 0;
       L216: while(1) {
        do {
         if ($729) {
          $cond$i = ($gotrad$1118$i|0)==(0);
          if ($cond$i) {
           $733 = $359;$734 = $360;$735 = $359;$736 = $360;$gotdig$4$i = $gotdig$3117$i;$gotrad$2$i = 1;$j$2$i = $j$0120$i;$k$2$i = $k$0119$i;$lnz$2$i = $lnz$0116$i;
          } else {
           $737 = $731;$738 = $732;$739 = $359;$740 = $360;$gotdig$3117$i$lcssa = $gotdig$3117$i;$j$0120$i$lcssa = $j$0120$i;$k$0119$i$lcssa = $k$0119$i;$lnz$0116$i$lcssa = $lnz$0116$i;
           break L216;
          }
         } else {
          $358 = ($k$0119$i|0)<(125);
          $361 = (_i64Add(($359|0),($360|0),1,0)|0);
          $362 = tempRet0;
          $363 = ($$3121$i|0)!=(48);
          if (!($358)) {
           if (!($363)) {
            $733 = $731;$734 = $732;$735 = $361;$736 = $362;$gotdig$4$i = $gotdig$3117$i;$gotrad$2$i = $gotrad$1118$i;$j$2$i = $j$0120$i;$k$2$i = $k$0119$i;$lnz$2$i = $lnz$0116$i;
            break;
           }
           $373 = HEAP32[$356>>2]|0;
           $374 = $373 | 1;
           HEAP32[$356>>2] = $374;
           $733 = $731;$734 = $732;$735 = $361;$736 = $362;$gotdig$4$i = $gotdig$3117$i;$gotrad$2$i = $gotrad$1118$i;$j$2$i = $j$0120$i;$k$2$i = $k$0119$i;$lnz$2$i = $lnz$0116$i;
           break;
          }
          $$lnz$0$i = $363 ? $361 : $lnz$0116$i;
          $364 = ($j$0120$i|0)==(0);
          $365 = (($x$i) + ($k$0119$i<<2)|0);
          if ($364) {
           $storemerge$i = $730;
          } else {
           $366 = HEAP32[$365>>2]|0;
           $367 = ($366*10)|0;
           $368 = (($$3121$i) + -48)|0;
           $369 = (($368) + ($367))|0;
           $storemerge$i = $369;
          }
          HEAP32[$365>>2] = $storemerge$i;
          $370 = (($j$0120$i) + 1)|0;
          $371 = ($370|0)==(9);
          $372 = $371&1;
          $$k$0$i = (($372) + ($k$0119$i))|0;
          $$11$i = $371 ? 0 : $370;
          $733 = $731;$734 = $732;$735 = $361;$736 = $362;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1118$i;$j$2$i = $$11$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
         }
        } while(0);
        $375 = HEAP32[$0>>2]|0;
        $376 = HEAP32[$1>>2]|0;
        $377 = ($375>>>0)<($376>>>0);
        if ($377) {
         $378 = ((($375)) + 1|0);
         HEAP32[$0>>2] = $378;
         $379 = HEAP8[$375>>0]|0;
         $380 = $379&255;
         $$3$be$i = $380;
        } else {
         $381 = (___shgetc($f)|0);
         $$3$be$i = $381;
        }
        $382 = (($$3$be$i) + -48)|0;
        $383 = ($382>>>0)<(10);
        $384 = ($$3$be$i|0)==(46);
        $385 = $384 | $383;
        if ($385) {
         $$3121$i = $$3$be$i;$359 = $735;$360 = $736;$729 = $384;$730 = $382;$731 = $733;$732 = $734;$gotdig$3117$i = $gotdig$4$i;$gotrad$1118$i = $gotrad$2$i;$j$0120$i = $j$2$i;$k$0119$i = $k$2$i;$lnz$0116$i = $lnz$2$i;
        } else {
         $$3$lcssa$i = $$3$be$i;$388 = $735;$389 = $733;$391 = $736;$392 = $734;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
         label = 158;
         break L214;
        }
       }
       $357 = ($gotdig$3117$i$lcssa|0)!=(0);
       $741 = $739;$742 = $740;$743 = $737;$744 = $738;$745 = $357;$j$069$i = $j$0120$i$lcssa;$k$065$i = $k$0119$i$lcssa;$lnz$059$i = $lnz$0116$i$lcssa;
       label = 166;
      } else {
       $$3$lcssa$i = $$2$i;$388 = 0;$389 = $727;$391 = 0;$392 = $728;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
       label = 158;
      }
     } while(0);
     do {
      if ((label|0) == 158) {
       $386 = ($gotrad$1$lcssa$i|0)==(0);
       $387 = $386 ? $388 : $389;
       $390 = $386 ? $391 : $392;
       $393 = ($gotdig$3$lcssa$i|0)!=(0);
       $394 = $$3$lcssa$i | 32;
       $395 = ($394|0)==(101);
       $or$cond13$i = $395 & $393;
       if (!($or$cond13$i)) {
        $410 = ($$3$lcssa$i|0)>(-1);
        if ($410) {
         $741 = $388;$742 = $391;$743 = $387;$744 = $390;$745 = $393;$j$069$i = $j$0$lcssa$i;$k$065$i = $k$0$lcssa$i;$lnz$059$i = $lnz$0$lcssa$i;
         label = 166;
         break;
        } else {
         $746 = $388;$747 = $391;$748 = $393;$749 = $387;$750 = $390;$j$068$i = $j$0$lcssa$i;$k$064$i = $k$0$lcssa$i;$lnz$058$i = $lnz$0$lcssa$i;
         label = 168;
         break;
        }
       }
       $396 = (_scanexp($f,$pok)|0);
       $397 = tempRet0;
       $398 = ($396|0)==(0);
       $399 = ($397|0)==(-2147483648);
       $400 = $398 & $399;
       if ($400) {
        $401 = ($pok|0)==(0);
        if ($401) {
         ___shlim($f,0);
         $$0$i25 = 0.0;
         break;
        }
        $402 = HEAP32[$1>>2]|0;
        $403 = ($402|0)==(0|0);
        if ($403) {
         $406 = 0;$407 = 0;
        } else {
         $404 = HEAP32[$0>>2]|0;
         $405 = ((($404)) + -1|0);
         HEAP32[$0>>2] = $405;
         $406 = 0;$407 = 0;
        }
       } else {
        $406 = $396;$407 = $397;
       }
       $408 = (_i64Add(($406|0),($407|0),($387|0),($390|0))|0);
       $409 = tempRet0;
       $421 = $408;$422 = $388;$424 = $409;$425 = $391;$j$067$i = $j$0$lcssa$i;$k$063$i = $k$0$lcssa$i;$lnz$057$i = $lnz$0$lcssa$i;
       label = 170;
      }
     } while(0);
     if ((label|0) == 166) {
      $411 = HEAP32[$1>>2]|0;
      $412 = ($411|0)==(0|0);
      if ($412) {
       $746 = $741;$747 = $742;$748 = $745;$749 = $743;$750 = $744;$j$068$i = $j$069$i;$k$064$i = $k$065$i;$lnz$058$i = $lnz$059$i;
       label = 168;
      } else {
       $413 = HEAP32[$0>>2]|0;
       $414 = ((($413)) + -1|0);
       HEAP32[$0>>2] = $414;
       if ($745) {
        $421 = $743;$422 = $741;$424 = $744;$425 = $742;$j$067$i = $j$069$i;$k$063$i = $k$065$i;$lnz$057$i = $lnz$059$i;
        label = 170;
       } else {
        label = 169;
       }
      }
     }
     if ((label|0) == 168) {
      if ($748) {
       $421 = $749;$422 = $746;$424 = $750;$425 = $747;$j$067$i = $j$068$i;$k$063$i = $k$064$i;$lnz$057$i = $lnz$058$i;
       label = 170;
      } else {
       label = 169;
      }
     }
     do {
      if ((label|0) == 169) {
       $415 = (___errno_location()|0);
       HEAP32[$415>>2] = 22;
       ___shlim($f,0);
       $$0$i25 = 0.0;
      }
      else if ((label|0) == 170) {
       $416 = HEAP32[$x$i>>2]|0;
       $417 = ($416|0)==(0);
       if ($417) {
        $418 = (+($sign$0|0));
        $419 = $418 * 0.0;
        $$0$i25 = $419;
        break;
       }
       $420 = ($421|0)==($422|0);
       $423 = ($424|0)==($425|0);
       $426 = $420 & $423;
       $427 = ($425|0)<(0);
       $428 = ($422>>>0)<(10);
       $429 = ($425|0)==(0);
       $430 = $429 & $428;
       $431 = $427 | $430;
       $or$cond$i16 = $431 & $426;
       if ($or$cond$i16) {
        $432 = ($bits$0$ph>>>0)>(30);
        $433 = $416 >>> $bits$0$ph;
        $434 = ($433|0)==(0);
        $or$cond15$i = $432 | $434;
        if ($or$cond15$i) {
         $435 = (+($sign$0|0));
         $436 = (+($416>>>0));
         $437 = $435 * $436;
         $$0$i25 = $437;
         break;
        }
       }
       $438 = (($emin$0$ph|0) / -2)&-1;
       $439 = ($438|0)<(0);
       $440 = $439 << 31 >> 31;
       $441 = ($424|0)>($440|0);
       $442 = ($421>>>0)>($438>>>0);
       $443 = ($424|0)==($440|0);
       $444 = $443 & $442;
       $445 = $441 | $444;
       if ($445) {
        $446 = (___errno_location()|0);
        HEAP32[$446>>2] = 34;
        $447 = (+($sign$0|0));
        $448 = $447 * 1.7976931348623157E+308;
        $449 = $448 * 1.7976931348623157E+308;
        $$0$i25 = $449;
        break;
       }
       $450 = (($emin$0$ph) + -106)|0;
       $451 = ($450|0)<(0);
       $452 = $451 << 31 >> 31;
       $453 = ($424|0)<($452|0);
       $454 = ($421>>>0)<($450>>>0);
       $455 = ($424|0)==($452|0);
       $456 = $455 & $454;
       $457 = $453 | $456;
       if ($457) {
        $458 = (___errno_location()|0);
        HEAP32[$458>>2] = 34;
        $459 = (+($sign$0|0));
        $460 = $459 * 2.2250738585072014E-308;
        $461 = $460 * 2.2250738585072014E-308;
        $$0$i25 = $461;
        break;
       }
       $462 = ($j$067$i|0)==(0);
       if ($462) {
        $k$3$i = $k$063$i;
       } else {
        $463 = ($j$067$i|0)<(9);
        if ($463) {
         $464 = (($x$i) + ($k$063$i<<2)|0);
         $$promoted$i = HEAP32[$464>>2]|0;
         $466 = $$promoted$i;$j$3110$i = $j$067$i;
         while(1) {
          $465 = ($466*10)|0;
          $467 = (($j$3110$i) + 1)|0;
          $exitcond$i = ($467|0)==(9);
          if ($exitcond$i) {
           $$lcssa323 = $465;
           break;
          } else {
           $466 = $465;$j$3110$i = $467;
          }
         }
         HEAP32[$464>>2] = $$lcssa323;
        }
        $468 = (($k$063$i) + 1)|0;
        $k$3$i = $468;
       }
       $469 = ($lnz$057$i|0)<(9);
       if ($469) {
        $470 = ($lnz$057$i|0)<=($421|0);
        $471 = ($421|0)<(18);
        $or$cond3$i = $470 & $471;
        if ($or$cond3$i) {
         $472 = ($421|0)==(9);
         if ($472) {
          $473 = (+($sign$0|0));
          $474 = HEAP32[$x$i>>2]|0;
          $475 = (+($474>>>0));
          $476 = $473 * $475;
          $$0$i25 = $476;
          break;
         }
         $477 = ($421|0)<(9);
         if ($477) {
          $478 = (+($sign$0|0));
          $479 = HEAP32[$x$i>>2]|0;
          $480 = (+($479>>>0));
          $481 = $478 * $480;
          $482 = (8 - ($421))|0;
          $483 = (4276 + ($482<<2)|0);
          $484 = HEAP32[$483>>2]|0;
          $485 = (+($484|0));
          $486 = $481 / $485;
          $$0$i25 = $486;
          break;
         }
         $$neg32$i = (($bits$0$ph) + 27)|0;
         $487 = Math_imul($421, -3)|0;
         $488 = (($$neg32$i) + ($487))|0;
         $489 = ($488|0)>(30);
         $$pre$i17 = HEAP32[$x$i>>2]|0;
         $490 = $$pre$i17 >>> $488;
         $491 = ($490|0)==(0);
         $or$cond216$i = $489 | $491;
         if ($or$cond216$i) {
          $492 = (+($sign$0|0));
          $493 = (+($$pre$i17>>>0));
          $494 = $492 * $493;
          $495 = (($421) + -10)|0;
          $496 = (4276 + ($495<<2)|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = (+($497|0));
          $499 = $494 * $498;
          $$0$i25 = $499;
          break;
         }
        }
       }
       $500 = (($421|0) % 9)&-1;
       $501 = ($500|0)==(0);
       if ($501) {
        $a$2$ph38$i = 0;$e2$0$ph$i = 0;$rp$2$ph36$i = $421;$z$1$ph37$i = $k$3$i;
       } else {
        $502 = ($421|0)>(-1);
        $503 = (($500) + 9)|0;
        $504 = $502 ? $500 : $503;
        $505 = (8 - ($504))|0;
        $506 = (4276 + ($505<<2)|0);
        $507 = HEAP32[$506>>2]|0;
        $508 = ($k$3$i|0)==(0);
        if ($508) {
         $a$0$lcssa177$i = 0;$rp$0$lcssa178$i = $421;$z$0$i = 0;
        } else {
         $509 = (1000000000 / ($507|0))&-1;
         $a$0101$i = 0;$carry$0103$i = 0;$k$4102$i = 0;$rp$0100$i = $421;
         while(1) {
          $510 = (($x$i) + ($k$4102$i<<2)|0);
          $511 = HEAP32[$510>>2]|0;
          $512 = (($511>>>0) % ($507>>>0))&-1;
          $513 = (($511>>>0) / ($507>>>0))&-1;
          $514 = (($513) + ($carry$0103$i))|0;
          HEAP32[$510>>2] = $514;
          $515 = Math_imul($512, $509)|0;
          $516 = ($k$4102$i|0)==($a$0101$i|0);
          $517 = ($514|0)==(0);
          $or$cond16$i = $516 & $517;
          $518 = (($k$4102$i) + 1)|0;
          $519 = $518 & 127;
          $520 = (($rp$0100$i) + -9)|0;
          $rp$1$i18 = $or$cond16$i ? $520 : $rp$0100$i;
          $a$1$i = $or$cond16$i ? $519 : $a$0101$i;
          $521 = ($518|0)==($k$3$i|0);
          if ($521) {
           $$lcssa322 = $515;$a$1$i$lcssa = $a$1$i;$rp$1$i18$lcssa = $rp$1$i18;
           break;
          } else {
           $a$0101$i = $a$1$i;$carry$0103$i = $515;$k$4102$i = $518;$rp$0100$i = $rp$1$i18;
          }
         }
         $522 = ($$lcssa322|0)==(0);
         if ($522) {
          $a$0$lcssa177$i = $a$1$i$lcssa;$rp$0$lcssa178$i = $rp$1$i18$lcssa;$z$0$i = $k$3$i;
         } else {
          $523 = (($k$3$i) + 1)|0;
          $524 = (($x$i) + ($k$3$i<<2)|0);
          HEAP32[$524>>2] = $$lcssa322;
          $a$0$lcssa177$i = $a$1$i$lcssa;$rp$0$lcssa178$i = $rp$1$i18$lcssa;$z$0$i = $523;
         }
        }
        $525 = (9 - ($504))|0;
        $526 = (($525) + ($rp$0$lcssa178$i))|0;
        $a$2$ph38$i = $a$0$lcssa177$i;$e2$0$ph$i = 0;$rp$2$ph36$i = $526;$z$1$ph37$i = $z$0$i;
       }
       L295: while(1) {
        $527 = ($rp$2$ph36$i|0)<(18);
        $528 = (($x$i) + ($a$2$ph38$i<<2)|0);
        if ($527) {
         $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph37$i;
         while(1) {
          $530 = (($z$1$us$i) + 127)|0;
          $carry1$0$us$i = 0;$k$5$in$us$i = $530;$z$2$us$i = $z$1$us$i;
          while(1) {
           $k$5$us$i = $k$5$in$us$i & 127;
           $531 = (($x$i) + ($k$5$us$i<<2)|0);
           $532 = HEAP32[$531>>2]|0;
           $533 = (_bitshift64Shl(($532|0),0,29)|0);
           $534 = tempRet0;
           $535 = (_i64Add(($533|0),($534|0),($carry1$0$us$i|0),0)|0);
           $536 = tempRet0;
           $537 = ($536>>>0)>(0);
           $538 = ($535>>>0)>(1000000000);
           $539 = ($536|0)==(0);
           $540 = $539 & $538;
           $541 = $537 | $540;
           if ($541) {
            $542 = (___udivdi3(($535|0),($536|0),1000000000,0)|0);
            $543 = tempRet0;
            $544 = (___uremdi3(($535|0),($536|0),1000000000,0)|0);
            $545 = tempRet0;
            $$sink$off0$us$i = $544;$carry1$1$us$i = $542;
           } else {
            $$sink$off0$us$i = $535;$carry1$1$us$i = 0;
           }
           HEAP32[$531>>2] = $$sink$off0$us$i;
           $546 = (($z$2$us$i) + 127)|0;
           $547 = $546 & 127;
           $548 = ($k$5$us$i|0)!=($547|0);
           $549 = ($k$5$us$i|0)==($a$2$ph38$i|0);
           $or$cond17$us$i = $548 | $549;
           $550 = ($$sink$off0$us$i|0)==(0);
           $k$5$z$2$us$i = $550 ? $k$5$us$i : $z$2$us$i;
           $z$3$us$i = $or$cond17$us$i ? $z$2$us$i : $k$5$z$2$us$i;
           $551 = (($k$5$us$i) + -1)|0;
           if ($549) {
            $carry1$1$us$i$lcssa = $carry1$1$us$i;$z$3$us$i$lcssa = $z$3$us$i;
            break;
           } else {
            $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $551;$z$2$us$i = $z$3$us$i;
           }
          }
          $552 = (($e2$0$us$i) + -29)|0;
          $553 = ($carry1$1$us$i$lcssa|0)==(0);
          if ($553) {
           $e2$0$us$i = $552;$z$1$us$i = $z$3$us$i$lcssa;
          } else {
           $$lcssa50$i = $552;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i$lcssa;$z$3$lcssa$lcssa$i = $z$3$us$i$lcssa;
           break;
          }
         }
        } else {
         $529 = ($rp$2$ph36$i|0)==(18);
         if ($529) {
          $e2$0$us84$i = $e2$0$ph$i;$z$1$us85$i = $z$1$ph37$i;
         } else {
          $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph34$i = $rp$2$ph36$i;$z$5$ph$i = $z$1$ph37$i;
          break;
         }
         while(1) {
          $554 = HEAP32[$528>>2]|0;
          $555 = ($554>>>0)<(9007199);
          if (!($555)) {
           $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$us84$i;$rp$3$ph34$i = 18;$z$5$ph$i = $z$1$us85$i;
           break L295;
          }
          $556 = (($z$1$us85$i) + 127)|0;
          $carry1$0$us89$i = 0;$k$5$in$us88$i = $556;$z$2$us87$i = $z$1$us85$i;
          while(1) {
           $k$5$us90$i = $k$5$in$us88$i & 127;
           $557 = (($x$i) + ($k$5$us90$i<<2)|0);
           $558 = HEAP32[$557>>2]|0;
           $559 = (_bitshift64Shl(($558|0),0,29)|0);
           $560 = tempRet0;
           $561 = (_i64Add(($559|0),($560|0),($carry1$0$us89$i|0),0)|0);
           $562 = tempRet0;
           $563 = ($562>>>0)>(0);
           $564 = ($561>>>0)>(1000000000);
           $565 = ($562|0)==(0);
           $566 = $565 & $564;
           $567 = $563 | $566;
           if ($567) {
            $568 = (___udivdi3(($561|0),($562|0),1000000000,0)|0);
            $569 = tempRet0;
            $570 = (___uremdi3(($561|0),($562|0),1000000000,0)|0);
            $571 = tempRet0;
            $$sink$off0$us93$i = $570;$carry1$1$us94$i = $568;
           } else {
            $$sink$off0$us93$i = $561;$carry1$1$us94$i = 0;
           }
           HEAP32[$557>>2] = $$sink$off0$us93$i;
           $572 = (($z$2$us87$i) + 127)|0;
           $573 = $572 & 127;
           $574 = ($k$5$us90$i|0)!=($573|0);
           $575 = ($k$5$us90$i|0)==($a$2$ph38$i|0);
           $or$cond17$us95$i = $574 | $575;
           $576 = ($$sink$off0$us93$i|0)==(0);
           $k$5$z$2$us96$i = $576 ? $k$5$us90$i : $z$2$us87$i;
           $z$3$us97$i = $or$cond17$us95$i ? $z$2$us87$i : $k$5$z$2$us96$i;
           $577 = (($k$5$us90$i) + -1)|0;
           if ($575) {
            $carry1$1$us94$i$lcssa = $carry1$1$us94$i;$z$3$us97$i$lcssa = $z$3$us97$i;
            break;
           } else {
            $carry1$0$us89$i = $carry1$1$us94$i;$k$5$in$us88$i = $577;$z$2$us87$i = $z$3$us97$i;
           }
          }
          $578 = (($e2$0$us84$i) + -29)|0;
          $579 = ($carry1$1$us94$i$lcssa|0)==(0);
          if ($579) {
           $e2$0$us84$i = $578;$z$1$us85$i = $z$3$us97$i$lcssa;
          } else {
           $$lcssa50$i = $578;$carry1$1$lcssa$lcssa$i = $carry1$1$us94$i$lcssa;$z$3$lcssa$lcssa$i = $z$3$us97$i$lcssa;
           break;
          }
         }
        }
        $580 = (($rp$2$ph36$i) + 9)|0;
        $581 = (($a$2$ph38$i) + 127)|0;
        $582 = $581 & 127;
        $583 = ($582|0)==($z$3$lcssa$lcssa$i|0);
        if ($583) {
         $584 = (($z$3$lcssa$lcssa$i) + 127)|0;
         $585 = $584 & 127;
         $586 = (($x$i) + ($585<<2)|0);
         $587 = HEAP32[$586>>2]|0;
         $588 = (($z$3$lcssa$lcssa$i) + 126)|0;
         $589 = $588 & 127;
         $590 = (($x$i) + ($589<<2)|0);
         $591 = HEAP32[$590>>2]|0;
         $592 = $591 | $587;
         HEAP32[$590>>2] = $592;
         $z$4$i = $585;
        } else {
         $z$4$i = $z$3$lcssa$lcssa$i;
        }
        $593 = (($x$i) + ($582<<2)|0);
        HEAP32[$593>>2] = $carry1$1$lcssa$lcssa$i;
        $a$2$ph38$i = $582;$e2$0$ph$i = $$lcssa50$i;$rp$2$ph36$i = $580;$z$1$ph37$i = $z$4$i;
       }
       L320: while(1) {
        $624 = (($z$5$ph$i) + 1)|0;
        $622 = $624 & 127;
        $625 = (($z$5$ph$i) + 127)|0;
        $626 = $625 & 127;
        $627 = (($x$i) + ($626<<2)|0);
        $a$3$ph183$i = $a$3$ph$i;$e2$1$ph182$i = $e2$1$ph$i;$rp$3$ph$i = $rp$3$ph34$i;
        while(1) {
         $628 = ($rp$3$ph$i|0)==(18);
         $629 = ($rp$3$ph$i|0)>(27);
         $$18$i = $629 ? 9 : 1;
         $$not$i = $628 ^ 1;
         $a$3$i = $a$3$ph183$i;$e2$1$i = $e2$1$ph182$i;
         while(1) {
          $594 = $a$3$i & 127;
          $595 = ($594|0)==($z$5$ph$i|0);
          do {
           if ($595) {
            label = 220;
           } else {
            $596 = (($x$i) + ($594<<2)|0);
            $597 = HEAP32[$596>>2]|0;
            $598 = ($597>>>0)<(9007199);
            if ($598) {
             label = 220;
             break;
            }
            $599 = ($597>>>0)>(9007199);
            if ($599) {
             break;
            }
            $600 = (($a$3$i) + 1)|0;
            $601 = $600 & 127;
            $602 = ($601|0)==($z$5$ph$i|0);
            if ($602) {
             label = 220;
             break;
            }
            $708 = (($x$i) + ($601<<2)|0);
            $709 = HEAP32[$708>>2]|0;
            $710 = ($709>>>0)<(254740991);
            if ($710) {
             label = 220;
             break;
            }
            $711 = ($709>>>0)>(254740991);
            $brmerge$i26 = $711 | $$not$i;
            if (!($brmerge$i26)) {
             $635 = $594;$a$3$i301 = $a$3$i;$e2$1$i298 = $e2$1$i;$z$7$i = $z$5$ph$i;
             break L320;
            }
           }
          } while(0);
          if ((label|0) == 220) {
           label = 0;
           if ($628) {
            label = 221;
            break L320;
           }
          }
          $603 = (($e2$1$i) + ($$18$i))|0;
          $604 = ($a$3$i|0)==($z$5$ph$i|0);
          if ($604) {
           $a$3$i = $z$5$ph$i;$e2$1$i = $603;
          } else {
           $$lcssa308 = $603;$a$3$i$lcssa300 = $a$3$i;
           break;
          }
         }
         $605 = 1 << $$18$i;
         $606 = (($605) + -1)|0;
         $607 = 1000000000 >>> $$18$i;
         $a$478$i = $a$3$i$lcssa300;$carry3$081$i = 0;$k$679$i = $a$3$i$lcssa300;$rp$477$i = $rp$3$ph$i;
         while(1) {
          $608 = (($x$i) + ($k$679$i<<2)|0);
          $609 = HEAP32[$608>>2]|0;
          $610 = $609 & $606;
          $611 = $609 >>> $$18$i;
          $612 = (($611) + ($carry3$081$i))|0;
          HEAP32[$608>>2] = $612;
          $613 = Math_imul($610, $607)|0;
          $614 = ($k$679$i|0)==($a$478$i|0);
          $615 = ($612|0)==(0);
          $or$cond19$i = $614 & $615;
          $616 = (($k$679$i) + 1)|0;
          $617 = $616 & 127;
          $618 = (($rp$477$i) + -9)|0;
          $rp$5$i = $or$cond19$i ? $618 : $rp$477$i;
          $a$5$i = $or$cond19$i ? $617 : $a$478$i;
          $619 = ($617|0)==($z$5$ph$i|0);
          if ($619) {
           $$lcssa309 = $613;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
           break;
          } else {
           $a$478$i = $a$5$i;$carry3$081$i = $613;$k$679$i = $617;$rp$477$i = $rp$5$i;
          }
         }
         $620 = ($$lcssa309|0)==(0);
         if ($620) {
          $a$3$ph183$i = $a$5$i$lcssa;$e2$1$ph182$i = $$lcssa308;$rp$3$ph$i = $rp$5$i$lcssa;
          continue;
         }
         $621 = ($622|0)==($a$5$i$lcssa|0);
         if (!($621)) {
          $$lcssa308$lcssa = $$lcssa308;$$lcssa309$lcssa = $$lcssa309;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
          break;
         }
         $630 = HEAP32[$627>>2]|0;
         $631 = $630 | 1;
         HEAP32[$627>>2] = $631;
         $a$3$ph183$i = $a$5$i$lcssa;$e2$1$ph182$i = $$lcssa308;$rp$3$ph$i = $rp$5$i$lcssa;
        }
        $623 = (($x$i) + ($z$5$ph$i<<2)|0);
        HEAP32[$623>>2] = $$lcssa309$lcssa;
        $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa308$lcssa;$rp$3$ph34$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $622;
       }
       if ((label|0) == 221) {
        if ($595) {
         $632 = (($622) + -1)|0;
         $633 = (($x$i) + ($632<<2)|0);
         HEAP32[$633>>2] = 0;
         $635 = $z$5$ph$i;$a$3$i301 = $a$3$i;$e2$1$i298 = $e2$1$i;$z$7$i = $622;
        } else {
         $635 = $594;$a$3$i301 = $a$3$i;$e2$1$i298 = $e2$1$i;$z$7$i = $z$5$ph$i;
        }
       }
       $634 = (($x$i) + ($635<<2)|0);
       $636 = HEAP32[$634>>2]|0;
       $637 = (+($636>>>0));
       $638 = (($a$3$i301) + 1)|0;
       $639 = $638 & 127;
       $640 = ($639|0)==($z$7$i|0);
       if ($640) {
        $697 = (($a$3$i301) + 2)|0;
        $698 = $697 & 127;
        $699 = (($698) + -1)|0;
        $700 = (($x$i) + ($699<<2)|0);
        HEAP32[$700>>2] = 0;
        $z$7$1$i = $698;
       } else {
        $z$7$1$i = $z$7$i;
       }
       $701 = $637 * 1.0E+9;
       $702 = (($x$i) + ($639<<2)|0);
       $703 = HEAP32[$702>>2]|0;
       $704 = (+($703>>>0));
       $705 = $701 + $704;
       $661 = (+($sign$0|0));
       $643 = $661 * $705;
       $681 = (($e2$1$i298) + 53)|0;
       $687 = (($681) - ($emin$0$ph))|0;
       $688 = ($687|0)<($bits$0$ph|0);
       $706 = ($687|0)<(0);
       $$$i = $706 ? 0 : $687;
       $denormal$0$i = $688&1;
       $$010$i = $688 ? $$$i : $bits$0$ph;
       $707 = ($$010$i|0)<(53);
       if ($707) {
        $641 = (105 - ($$010$i))|0;
        $642 = (+_scalbn(1.0,$641));
        $644 = (+_copysignl($642,$643));
        $645 = (53 - ($$010$i))|0;
        $646 = (+_scalbn(1.0,$645));
        $647 = (+_fmodl($643,$646));
        $648 = $643 - $647;
        $649 = $644 + $648;
        $bias$0$i23 = $644;$frac$0$i = $647;$y$1$i22 = $649;
       } else {
        $bias$0$i23 = 0.0;$frac$0$i = 0.0;$y$1$i22 = $643;
       }
       $650 = (($a$3$i301) + 2)|0;
       $651 = $650 & 127;
       $652 = ($651|0)==($z$7$1$i|0);
       do {
        if ($652) {
         $frac$2$i = $frac$0$i;
        } else {
         $653 = (($x$i) + ($651<<2)|0);
         $654 = HEAP32[$653>>2]|0;
         $655 = ($654>>>0)<(500000000);
         do {
          if ($655) {
           $656 = ($654|0)==(0);
           if ($656) {
            $657 = (($a$3$i301) + 3)|0;
            $658 = $657 & 127;
            $659 = ($658|0)==($z$7$1$i|0);
            if ($659) {
             $frac$1$i = $frac$0$i;
             break;
            }
           }
           $660 = $661 * 0.25;
           $662 = $660 + $frac$0$i;
           $frac$1$i = $662;
          } else {
           $663 = ($654>>>0)>(500000000);
           if ($663) {
            $664 = $661 * 0.75;
            $665 = $664 + $frac$0$i;
            $frac$1$i = $665;
            break;
           }
           $666 = (($a$3$i301) + 3)|0;
           $667 = $666 & 127;
           $668 = ($667|0)==($z$7$1$i|0);
           if ($668) {
            $669 = $661 * 0.5;
            $670 = $669 + $frac$0$i;
            $frac$1$i = $670;
            break;
           } else {
            $671 = $661 * 0.75;
            $672 = $671 + $frac$0$i;
            $frac$1$i = $672;
            break;
           }
          }
         } while(0);
         $673 = (53 - ($$010$i))|0;
         $674 = ($673|0)>(1);
         if (!($674)) {
          $frac$2$i = $frac$1$i;
          break;
         }
         $675 = (+_fmodl($frac$1$i,1.0));
         $676 = $675 != 0.0;
         if ($676) {
          $frac$2$i = $frac$1$i;
          break;
         }
         $677 = $frac$1$i + 1.0;
         $frac$2$i = $677;
        }
       } while(0);
       $678 = $y$1$i22 + $frac$2$i;
       $679 = $678 - $bias$0$i23;
       $680 = $681 & 2147483647;
       $682 = (-2 - ($sum$i))|0;
       $683 = ($680|0)>($682|0);
       do {
        if ($683) {
         $684 = (+Math_abs((+$679)));
         $685 = !($684 >= 9007199254740992.0);
         if ($685) {
          $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i298;$y$2$i24 = $679;
         } else {
          $686 = ($$010$i|0)==($687|0);
          $or$cond20$i = $688 & $686;
          $denormal$1$i = $or$cond20$i ? 0 : $denormal$0$i;
          $689 = $679 * 0.5;
          $690 = (($e2$1$i298) + 1)|0;
          $denormal$2$i = $denormal$1$i;$e2$2$i = $690;$y$2$i24 = $689;
         }
         $691 = (($e2$2$i) + 50)|0;
         $692 = ($691|0)>($324|0);
         if (!($692)) {
          $693 = ($denormal$2$i|0)!=(0);
          $694 = $frac$2$i != 0.0;
          $or$cond8$i = $694 & $693;
          if (!($or$cond8$i)) {
           $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
           break;
          }
         }
         $695 = (___errno_location()|0);
         HEAP32[$695>>2] = 34;
         $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
        } else {
         $e2$3$i = $e2$1$i298;$y$3$i = $679;
        }
       } while(0);
       $696 = (+_scalbnl($y$3$i,$e2$3$i));
       $$0$i25 = $696;
      }
     } while(0);
     $$0 = $$0$i25;
     STACKTOP = sp;return (+$$0);
    }
   } while(0);
   $103 = HEAP32[$1>>2]|0;
   $104 = ($103|0)==(0|0);
   if (!($104)) {
    $105 = HEAP32[$0>>2]|0;
    $106 = ((($105)) + -1|0);
    HEAP32[$0>>2] = $106;
   }
   $107 = (___errno_location()|0);
   HEAP32[$107>>2] = 22;
   ___shlim($f,0);
   $$0 = 0.0;
   STACKTOP = sp;return (+$$0);
  }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = ((($43)) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond9$not = $notrhs | $notlhs;
  $brmerge = $or$cond9$not | $42;
  if (!($brmerge)) {
   $$promoted = HEAP32[$0>>2]|0;
   $46 = $$promoted;$i$1 = $i$0$lcssa;
   while(1) {
    $45 = ((($46)) + -1|0);
    $47 = (($i$1) + -1)|0;
    $$old8 = ($47>>>0)>(3);
    if ($$old8) {
     $46 = $45;$i$1 = $47;
    } else {
     $$lcssa = $45;
     break;
    }
   }
   HEAP32[$0>>2] = $$lcssa;
  }
 }
 $48 = (+($sign$0|0));
 $49 = $48 * inf;
 $50 = $49;
 $$0 = $50;
 STACKTOP = sp;return (+$$0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ((($f)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $11;
  return;
 } else {
  $13 = ((($f)) + 100|0);
  HEAP32[$13>>2] = $5;
  return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   if ($10) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $11 = $$pre;
    $26 = $$pre;$41 = $11;
    label = 9;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($f)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $12;
    $16 = $14;
    $17 = (($15) - ($16))|0;
    $18 = ((($f)) + 108|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($9) - ($19))|0;
    $21 = (($20) + -1)|0;
    $22 = ($17|0)>($21|0);
    if ($22) {
     $23 = (($14) + ($21)|0);
     $24 = ((($f)) + 100|0);
     HEAP32[$24>>2] = $23;
     $28 = $12;
    } else {
     $26 = $15;$41 = $12;
     label = 9;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($f)) + 100|0);
    HEAP32[$25>>2] = $26;
    $28 = $41;
   }
   $27 = ($28|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
   if (!($27)) {
    $29 = $28;
    $30 = $$pre4;
    $31 = ((($f)) + 108|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($29) + 1)|0;
    $34 = (($33) - ($30))|0;
    $35 = (($34) + ($32))|0;
    HEAP32[$31>>2] = $35;
   }
   $36 = ((($$pre4)) + -1|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
    return ($$0|0);
   }
   $40 = $6&255;
   HEAP8[$36>>0] = $40;
   $$0 = $6;
   return ($$0|0);
  }
 }
 $8 = ((($f)) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 return ($$0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0;
 var $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 if (!($15)) {
  $16 = $3 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($2>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  $22 = ($6|0)==(2047);
  $or$cond = $21 | $22;
  if (!($or$cond)) {
   $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
   $26 = tempRet0;
   $27 = ($26>>>0)>($12>>>0);
   $28 = ($25>>>0)>($11>>>0);
   $29 = ($26|0)==($12|0);
   $30 = $29 & $28;
   $31 = $27 | $30;
   if (!($31)) {
    $32 = ($25|0)==($11|0);
    $33 = ($26|0)==($12|0);
    $34 = $32 & $33;
    $35 = $x * 0.0;
    $$x = $34 ? $35 : $x;
    return (+$$x);
   }
   $36 = ($6|0)==(0);
   if ($36) {
    $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
    $38 = tempRet0;
    $39 = ($38|0)>(-1);
    $40 = ($37>>>0)>(4294967295);
    $41 = ($38|0)==(-1);
    $42 = $41 & $40;
    $43 = $39 | $42;
    if ($43) {
     $45 = $37;$46 = $38;$ex$026 = 0;
     while(1) {
      $44 = (($ex$026) + -1)|0;
      $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
      $48 = tempRet0;
      $49 = ($48|0)>(-1);
      $50 = ($47>>>0)>(4294967295);
      $51 = ($48|0)==(-1);
      $52 = $51 & $50;
      $53 = $49 | $52;
      if ($53) {
       $45 = $47;$46 = $48;$ex$026 = $44;
      } else {
       $ex$0$lcssa = $44;
       break;
      }
     }
    } else {
     $ex$0$lcssa = 0;
    }
    $54 = (1 - ($ex$0$lcssa))|0;
    $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
    $56 = tempRet0;
    $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
   } else {
    $57 = $1 & 1048575;
    $58 = $57 | 1048576;
    $83 = $0;$84 = $58;$ex$1 = $6;
   }
   $59 = ($9|0)==(0);
   if ($59) {
    $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
    $61 = tempRet0;
    $62 = ($61|0)>(-1);
    $63 = ($60>>>0)>(4294967295);
    $64 = ($61|0)==(-1);
    $65 = $64 & $63;
    $66 = $62 | $65;
    if ($66) {
     $68 = $60;$69 = $61;$ey$020 = 0;
     while(1) {
      $67 = (($ey$020) + -1)|0;
      $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
      $71 = tempRet0;
      $72 = ($71|0)>(-1);
      $73 = ($70>>>0)>(4294967295);
      $74 = ($71|0)==(-1);
      $75 = $74 & $73;
      $76 = $72 | $75;
      if ($76) {
       $68 = $70;$69 = $71;$ey$020 = $67;
      } else {
       $ey$0$lcssa = $67;
       break;
      }
     }
    } else {
     $ey$0$lcssa = 0;
    }
    $77 = (1 - ($ey$0$lcssa))|0;
    $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
    $79 = tempRet0;
    $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
   } else {
    $80 = $3 & 1048575;
    $81 = $80 | 1048576;
    $85 = $2;$86 = $81;$ey$1$ph = $9;
   }
   $82 = ($ex$1|0)>($ey$1$ph|0);
   $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
   $88 = tempRet0;
   $89 = ($88|0)>(-1);
   $90 = ($87>>>0)>(4294967295);
   $91 = ($88|0)==(-1);
   $92 = $91 & $90;
   $93 = $89 | $92;
   L23: do {
    if ($82) {
     $152 = $93;$153 = $87;$154 = $88;$95 = $83;$97 = $84;$ex$212 = $ex$1;
     while(1) {
      if ($152) {
       $94 = ($95|0)==($85|0);
       $96 = ($97|0)==($86|0);
       $98 = $94 & $96;
       if ($98) {
        break;
       } else {
        $100 = $153;$101 = $154;
       }
      } else {
       $100 = $95;$101 = $97;
      }
      $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
      $103 = tempRet0;
      $104 = (($ex$212) + -1)|0;
      $105 = ($104|0)>($ey$1$ph|0);
      $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
      $107 = tempRet0;
      $108 = ($107|0)>(-1);
      $109 = ($106>>>0)>(4294967295);
      $110 = ($107|0)==(-1);
      $111 = $110 & $109;
      $112 = $108 | $111;
      if ($105) {
       $152 = $112;$153 = $106;$154 = $107;$95 = $102;$97 = $103;$ex$212 = $104;
      } else {
       $$lcssa7 = $112;$114 = $102;$116 = $103;$155 = $106;$156 = $107;$ex$2$lcssa = $104;
       break L23;
      }
     }
     $99 = $x * 0.0;
     $$0 = $99;
     return (+$$0);
    } else {
     $$lcssa7 = $93;$114 = $83;$116 = $84;$155 = $87;$156 = $88;$ex$2$lcssa = $ex$1;
    }
   } while(0);
   if ($$lcssa7) {
    $113 = ($114|0)==($85|0);
    $115 = ($116|0)==($86|0);
    $117 = $113 & $115;
    if ($117) {
     $125 = $x * 0.0;
     $$0 = $125;
     return (+$$0);
    } else {
     $119 = $156;$121 = $155;
    }
   } else {
    $119 = $116;$121 = $114;
   }
   $118 = ($119>>>0)<(1048576);
   $120 = ($121>>>0)<(0);
   $122 = ($119|0)==(1048576);
   $123 = $122 & $120;
   $124 = $118 | $123;
   if ($124) {
    $126 = $121;$127 = $119;$ex$39 = $ex$2$lcssa;
    while(1) {
     $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
     $129 = tempRet0;
     $130 = (($ex$39) + -1)|0;
     $131 = ($129>>>0)<(1048576);
     $132 = ($128>>>0)<(0);
     $133 = ($129|0)==(1048576);
     $134 = $133 & $132;
     $135 = $131 | $134;
     if ($135) {
      $126 = $128;$127 = $129;$ex$39 = $130;
     } else {
      $137 = $128;$138 = $129;$ex$3$lcssa = $130;
      break;
     }
    }
   } else {
    $137 = $121;$138 = $119;$ex$3$lcssa = $ex$2$lcssa;
   }
   $136 = ($ex$3$lcssa|0)>(0);
   if ($136) {
    $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
    $140 = tempRet0;
    $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
    $142 = tempRet0;
    $143 = $139 | $141;
    $144 = $140 | $142;
    $149 = $144;$150 = $143;
   } else {
    $145 = (1 - ($ex$3$lcssa))|0;
    $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
    $147 = tempRet0;
    $149 = $147;$150 = $146;
   }
   $148 = $149 | $10;
   HEAP32[tempDoublePtr>>2] = $150;HEAP32[tempDoublePtr+4>>2] = $148;$151 = +HEAPF64[tempDoublePtr>>3];
   $$0 = $151;
   return (+$$0);
  }
 }
 $23 = $x * $y;
 $24 = $23 / $23;
 $$0 = $24;
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  return (+$$0);
  break;
 }
 case 2047:  {
  $$0 = $x;
  return (+$$0);
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = ((($s)) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = ((($s)) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = ((($s)) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 1023]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 1023]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $8 = $$pre;
    break;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $8 = $1;
  }
 } while(0);
 $5 = ((($f)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $8;
 $9 = $6;
 $10 = (($7) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = ((($f)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 1023]($f,$s,$l)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = ((($f)) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     $i$0$lcssa10 = $i$0;
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = ((($f)) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 1023]($f,$s,$i$0$lcssa10)|0);
   $26 = ($25>>>0)<($i$0$lcssa10>>>0);
   if ($26) {
    $$0 = $i$0$lcssa10;
    return ($$0|0);
   } else {
    $27 = (($s) + ($i$0$lcssa10)|0);
    $28 = (($l) - ($i$0$lcssa10))|0;
    $$pre6 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((($f)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = ((($f)) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = ((($f)) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = ((($f)) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = ((($internal_buf)) + 80|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = ((($f)) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 1023]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=4308; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = ((($f)) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = ((($f)) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = ((($f)) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = ((($f)) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($f)) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _atof($s) {
 $s = $s|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtod($s,0));
 return (+$0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit2 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp5 = 0, $n$0$lcssa = 0, $n$04 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = ((($$0)) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa9 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 switch ($6|0) {
 case 45:  {
  $neg$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $neg$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa9>>0]|0;
  $$1$ph = $$lcssa9;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $isdigittmp1 = (($7) + -48)|0;
 $isdigit2 = ($isdigittmp1>>>0)<(10);
 if ($isdigit2) {
  $$13 = $$1$ph;$isdigittmp5 = $isdigittmp1;$n$04 = 0;
 } else {
  $n$0$lcssa = 0;
  $14 = ($neg$1$ph|0)!=(0);
  $15 = (0 - ($n$0$lcssa))|0;
  $16 = $14 ? $n$0$lcssa : $15;
  return ($16|0);
 }
 while(1) {
  $9 = ($n$04*10)|0;
  $10 = ((($$13)) + 1|0);
  $11 = (($9) - ($isdigittmp5))|0;
  $12 = HEAP8[$10>>0]|0;
  $13 = $12 << 24 >> 24;
  $isdigittmp = (($13) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $$13 = $10;$isdigittmp5 = $isdigittmp;$n$04 = $11;
  } else {
   $n$0$lcssa = $11;
   break;
  }
 }
 $14 = ($neg$1$ph|0)!=(0);
 $15 = (0 - ($n$0$lcssa))|0;
 $16 = $14 ? $n$0$lcssa : $15;
 return ($16|0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 dest=$f$i; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f$i)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f$i)) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = ((($f$i)) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f$i)) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i,0);
 $4 = (+___floatscan($f$i,1,1));
 $5 = ((($f$i)) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)!=(0);
 $15 = (($s) + ($12)|0);
 $16 = $14 ? $15 : $s;
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtold_l($s,$p,$loc) {
 $s = $s|0;
 $p = $p|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i$i = sp;
 dest=$f$i$i; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f$i$i)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f$i$i)) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = ((($f$i$i)) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f$i$i)) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i$i,0);
 $4 = (+___floatscan($f$i$i,2,1));
 $5 = ((($f$i$i)) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)!=(0);
 $15 = (($s) + ($12)|0);
 $16 = $14 ? $15 : $s;
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = ((($f$i)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f$i)) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 $3 = ((($s)) + 2147483647|0);
 $$sink$i = $2 ? (-1) : $3;
 $4 = ((($f$i)) + 8|0);
 HEAP32[$4>>2] = $$sink$i;
 $5 = ((($f$i)) + 76|0);
 HEAP32[$5>>2] = -1;
 ___shlim($f$i,0);
 $6 = (___intscan($f$i,$base,1,-1,-1)|0);
 $7 = tempRet0;
 $8 = ($p|0)==(0|0);
 if ($8) {
  tempRet0 = ($7);
  STACKTOP = sp;return ($6|0);
 }
 $9 = ((($f$i)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$4>>2]|0;
 $13 = $11;
 $14 = $12;
 $15 = (($13) + ($10))|0;
 $16 = (($15) - ($14))|0;
 $17 = (($s) + ($16)|0);
 HEAP32[$p>>2] = $17;
 tempRet0 = ($7);
 STACKTOP = sp;return ($6|0);
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = ((($f$i)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f$i)) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 $3 = ((($s)) + 2147483647|0);
 $$sink$i = $2 ? (-1) : $3;
 $4 = ((($f$i)) + 8|0);
 HEAP32[$4>>2] = $$sink$i;
 $5 = ((($f$i)) + 76|0);
 HEAP32[$5>>2] = -1;
 ___shlim($f$i,0);
 $6 = (___intscan($f$i,$base,1,0,-2147483648)|0);
 $7 = tempRet0;
 $8 = ($p|0)==(0|0);
 if ($8) {
  tempRet0 = ($7);
  STACKTOP = sp;return ($6|0);
 }
 $9 = ((($f$i)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$4>>2]|0;
 $13 = $11;
 $14 = $12;
 $15 = (($13) + ($10))|0;
 $16 = (($15) - ($14))|0;
 $17 = (($s) + ($16)|0);
 HEAP32[$p>>2] = $17;
 tempRet0 = ($7);
 STACKTOP = sp;return ($6|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 switch ($10|0) {
 case 43: case 45:  {
  $11 = $9&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
  break;
 }
 default: {
  $c$0 = $10;$neg$0 = 0;
 }
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $98 = -2147483648;$99 = 0;
   tempRet0 = ($98);
   return ($99|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = ((($31)) + -1|0);
  HEAP32[$0>>2] = $32;
  $98 = -2147483648;$99 = 0;
  tempRet0 = ($98);
  return ($99|0);
 } else {
  $c$112 = $c$0;$x$013 = 0;
 }
 while(1) {
  $33 = ($x$013*10)|0;
  $34 = (($c$112) + -48)|0;
  $35 = (($34) + ($33))|0;
  $36 = HEAP32[$0>>2]|0;
  $37 = HEAP32[$2>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $39 = ((($36)) + 1|0);
   HEAP32[$0>>2] = $39;
   $40 = HEAP8[$36>>0]|0;
   $41 = $40&255;
   $c$1$be = $41;
  } else {
   $42 = (___shgetc($f)|0);
   $c$1$be = $42;
  }
  $43 = (($c$1$be) + -48)|0;
  $44 = ($43>>>0)<(10);
  $45 = ($35|0)<(214748364);
  $46 = $44 & $45;
  if ($46) {
   $c$112 = $c$1$be;$x$013 = $35;
  } else {
   $$lcssa22 = $35;$c$1$be$lcssa = $c$1$be;
   break;
  }
 }
 $47 = ($$lcssa22|0)<(0);
 $48 = $47 << 31 >> 31;
 $49 = (($c$1$be$lcssa) + -48)|0;
 $50 = ($49>>>0)<(10);
 if ($50) {
  $53 = $$lcssa22;$54 = $48;$c$27 = $c$1$be$lcssa;
  while(1) {
   $55 = (___muldi3(($53|0),($54|0),10,0)|0);
   $56 = tempRet0;
   $57 = ($c$27|0)<(0);
   $58 = $57 << 31 >> 31;
   $59 = (_i64Add(($c$27|0),($58|0),-48,-1)|0);
   $60 = tempRet0;
   $61 = (_i64Add(($59|0),($60|0),($55|0),($56|0))|0);
   $62 = tempRet0;
   $63 = HEAP32[$0>>2]|0;
   $64 = HEAP32[$2>>2]|0;
   $65 = ($63>>>0)<($64>>>0);
   if ($65) {
    $66 = ((($63)) + 1|0);
    HEAP32[$0>>2] = $66;
    $67 = HEAP8[$63>>0]|0;
    $68 = $67&255;
    $c$2$be = $68;
   } else {
    $69 = (___shgetc($f)|0);
    $c$2$be = $69;
   }
   $70 = (($c$2$be) + -48)|0;
   $71 = ($70>>>0)<(10);
   $72 = ($62|0)<(21474836);
   $73 = ($61>>>0)<(2061584302);
   $74 = ($62|0)==(21474836);
   $75 = $74 & $73;
   $76 = $72 | $75;
   $77 = $71 & $76;
   if ($77) {
    $53 = $61;$54 = $62;$c$27 = $c$2$be;
   } else {
    $92 = $61;$93 = $62;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $92 = $$lcssa22;$93 = $48;$c$2$lcssa = $c$1$be$lcssa;
 }
 $51 = (($c$2$lcssa) + -48)|0;
 $52 = ($51>>>0)<(10);
 if ($52) {
  while(1) {
   $78 = HEAP32[$0>>2]|0;
   $79 = HEAP32[$2>>2]|0;
   $80 = ($78>>>0)<($79>>>0);
   if ($80) {
    $81 = ((($78)) + 1|0);
    HEAP32[$0>>2] = $81;
    $82 = HEAP8[$78>>0]|0;
    $83 = $82&255;
    $c$3$be = $83;
   } else {
    $84 = (___shgetc($f)|0);
    $c$3$be = $84;
   }
   $85 = (($c$3$be) + -48)|0;
   $86 = ($85>>>0)<(10);
   if (!($86)) {
    break;
   }
  }
 }
 $87 = HEAP32[$2>>2]|0;
 $88 = ($87|0)==(0|0);
 if (!($88)) {
  $89 = HEAP32[$0>>2]|0;
  $90 = ((($89)) + -1|0);
  HEAP32[$0>>2] = $90;
 }
 $91 = ($neg$0|0)!=(0);
 $94 = (_i64Subtract(0,0,($92|0),($93|0))|0);
 $95 = tempRet0;
 $96 = $91 ? $94 : $92;
 $97 = $91 ? $95 : $93;
 $98 = $97;$99 = $96;
 tempRet0 = ($98);
 return ($99|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i104$i = 0, $$0$lcssa$i128$i = 0, $$0$lcssa$i143$i = 0, $$0$lcssa$i39$i = 0, $$0$lcssa$i46 = 0, $$0$lcssa$i46$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i51 = 0, $$0$lcssa$i53 = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i61 = 0, $$0$lcssa$i63$i = 0, $$0$lcssa$i68 = 0, $$0$lcssa$i69$i = 0;
 var $$0$lcssa$i75 = 0, $$0$lcssa$i76$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i85 = 0, $$0$lcssa$i97$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i102$i = 0, $$01$i126$i = 0, $$01$i141$i = 0, $$01$i37$i = 0, $$01$i44 = 0, $$01$i44$i = 0, $$01$i54$i = 0, $$01$i59 = 0, $$01$i61$i = 0, $$01$i66 = 0, $$01$i67$i = 0, $$01$i73 = 0, $$01$i74$i = 0;
 var $$01$i83 = 0, $$01$i95$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$03$i48 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$100 = 0, $$114$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0;
 var $$12$i119$i = 0, $$12$i134$i = 0, $$12$i134$i$lcssa = 0, $$12$i87$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$24 = 0, $$25 = 0, $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0;
 var $$412184$i = 0, $$5196$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us303$i = 0, $$a$3$us304$i = 0, $$a$3305$i = 0, $$a$3306$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa275$i = 0, $$lcssa443 = 0, $$lcssa448 = 0, $$lcssa449 = 0, $$lcssa450 = 0, $$lcssa451 = 0, $$lcssa452 = 0, $$lcssa454 = 0, $$lcssa455 = 0;
 var $$lcssa461 = 0, $$lcssa465 = 0, $$lcssa467 = 0, $$lcssa470 = 0, $$lcssa471 = 0, $$lcssa474 = 0.0, $$lcssa475 = 0, $$lcssa478 = 0, $$lcssa482 = 0, $$mask$i = 0, $$mask$i38 = 0, $$mask1$i = 0, $$mask1$i37 = 0, $$neg151$i = 0, $$neg152$i = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0;
 var $$pr146$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi302$iZ2D = 0, $$pre272 = 0, $$pre300$i = 0, $$pre301$i = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0;
 var $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0;
 var $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0;
 var $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0;
 var $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0;
 var $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0;
 var $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0;
 var $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0;
 var $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0;
 var $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0.0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0.0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0;
 var $1165$phi = 0, $1166 = 0, $1166$phi = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0.0, $427 = 0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0.0, $468 = 0.0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0.0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0.0, $556 = 0.0, $557 = 0.0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0.0, $571 = 0.0, $572 = 0.0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0.0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0.0, $636 = 0.0, $637 = 0.0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0.0, $777 = 0.0, $778 = 0, $779 = 0.0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0;
 var $a$1253$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3240$i = 0, $a$3240$us$i = 0, $a$5$lcssa$i = 0, $a$5215$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0;
 var $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0;
 var $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0246$i = 0;
 var $carry3$0234$i = 0, $carry3$0234$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0245$i = 0, $d$0247$i = 0, $d$1233$i = 0, $d$1233$us$i = 0, $d$2$lcssa$i = 0, $d$2214$i = 0, $d$3$i = 0, $d$4191$i = 0, $d$5183$i = 0, $d$6195$i = 0, $e$0229$i = 0, $e$1$i = 0, $e$2210$i = 0, $e$3$i = 0;
 var $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1201$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded101 = 0, $expanded102 = 0, $expanded103 = 0, $expanded105 = 0, $expanded106 = 0, $expanded108 = 0, $expanded109 = 0, $expanded110 = 0, $expanded112 = 0, $expanded113 = 0;
 var $expanded115 = 0, $expanded116 = 0, $expanded117 = 0, $expanded119 = 0, $expanded120 = 0, $expanded122 = 0, $expanded123 = 0, $expanded124 = 0, $expanded126 = 0, $expanded127 = 0, $expanded129 = 0, $expanded130 = 0, $expanded131 = 0, $expanded133 = 0, $expanded134 = 0, $expanded136 = 0, $expanded137 = 0, $expanded138 = 0, $expanded140 = 0, $expanded141 = 0;
 var $expanded143 = 0, $expanded144 = 0, $expanded145 = 0, $expanded147 = 0, $expanded148 = 0, $expanded150 = 0, $expanded151 = 0, $expanded152 = 0, $expanded154 = 0, $expanded155 = 0, $expanded157 = 0, $expanded158 = 0, $expanded159 = 0, $expanded161 = 0, $expanded162 = 0, $expanded164 = 0, $expanded165 = 0, $expanded166 = 0, $expanded168 = 0, $expanded169 = 0;
 var $expanded171 = 0, $expanded172 = 0, $expanded173 = 0, $expanded175 = 0, $expanded176 = 0, $expanded178 = 0, $expanded179 = 0, $expanded180 = 0, $expanded182 = 0, $expanded183 = 0, $expanded185 = 0, $expanded186 = 0, $expanded187 = 0, $expanded189 = 0, $expanded190 = 0, $expanded192 = 0, $expanded193 = 0, $expanded194 = 0, $expanded196 = 0, $expanded197 = 0;
 var $expanded199 = 0, $expanded200 = 0, $expanded201 = 0, $expanded203 = 0, $expanded204 = 0, $expanded206 = 0, $expanded207 = 0, $expanded208 = 0, $expanded210 = 0, $expanded211 = 0, $expanded213 = 0, $expanded214 = 0, $expanded215 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0, $expanded70 = 0, $expanded71 = 0, $expanded73 = 0;
 var $expanded74 = 0, $expanded75 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded82 = 0, $expanded84 = 0, $expanded85 = 0, $expanded87 = 0, $expanded88 = 0, $expanded89 = 0, $expanded91 = 0, $expanded92 = 0, $expanded94 = 0, $expanded95 = 0, $expanded96 = 0, $expanded98 = 0, $expanded99 = 0, $fl$0115 = 0;
 var $fl$0175 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt87$lcssa = 0, $fmt87167 = 0, $fmt88 = 0, $fmt89 = 0, $fmt90 = 0, $fmt92 = 0, $fmt92$lcssa446 = 0, $fmt93 = 0, $i$0$lcssa = 0, $i$0$lcssa275 = 0, $i$0180 = 0, $i$0228$i = 0, $i$03$i = 0, $i$03$i30 = 0;
 var $i$1$lcssa$i = 0, $i$1191 = 0, $i$1222$i = 0, $i$2166 = 0, $i$2166$lcssa = 0, $i$2209$i = 0, $i$3164 = 0, $i$3205$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i32 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i28 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i31 = 0, $isdigittmp1$i = 0;
 var $isdigittmp1$i27 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i29 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0221$i = 0, $j$0223$i = 0, $j$1206$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1179 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0;
 var $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i100$i = 0, $or$cond$i35$i = 0, $or$cond$i42$i = 0, $or$cond$i52$i = 0, $or$cond$i57 = 0, $or$cond$i59$i = 0, $or$cond$i64 = 0, $or$cond$i71 = 0, $or$cond$i72$i = 0, $or$cond$i79 = 0, $or$cond$i81 = 0, $or$cond$i93$i = 0, $or$cond15 = 0;
 var $or$cond19 = 0, $or$cond22 = 0, $or$cond29$i = 0, $or$cond331 = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4274 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0;
 var $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$1179$i = 0, $round$0178$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0188$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0180$i = 0, $s9$0$i = 0;
 var $s9$1192$i = 0, $s9$2$i = 0, $sext = 0, $sext101 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa447 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8113 = 0, $storemerge8174 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0;
 var $ws$0181 = 0, $ws$1192 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0168 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1252$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3239$i = 0, $z$3239$us$i = 0;
 var $z$4$i = 0, $z$4$us$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 836|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824|0;
 $pad$i = sp + 568|0;
 $buf = sp + 528|0;
 $wc = sp;
 $mb = sp + 520|0;
 $1 = ($f|0)!=(0|0);
 $2 = ((($buf)) + 40|0);
 $3 = $2;
 $4 = ((($buf)) + 39|0);
 $5 = ((($wc)) + 4|0);
 $6 = $wc;
 $7 = ((($ebuf0$i)) + 12|0);
 $8 = ((($ebuf0$i)) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = ((($big$i)) + 288|0);
 $14 = ((($buf$i)) + 9|0);
 $15 = $14;
 $16 = ((($buf$i)) + 8|0);
 $1165 = 0;$1166 = 0;$cnt$0 = 0;$fmt89 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$fmt89>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 344;
   break;
  } else {
   $24 = $22;$fmt88 = $fmt89;
  }
  L9: while(1) {
   switch ($24<<24>>24) {
   case 37:  {
    $fmt87167 = $fmt88;$z$0168 = $fmt88;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $fmt87$lcssa = $fmt88;$z$0$lcssa = $fmt88;
    break L9;
    break;
   }
   default: {
   }
   }
   $25 = ((($fmt88)) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $24 = $$pre;$fmt88 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($fmt87167)) + 1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = ($27<<24>>24)==(37);
     if (!($28)) {
      $fmt87$lcssa = $fmt87167;$z$0$lcssa = $z$0168;
      break L12;
     }
     $29 = ((($z$0168)) + 1|0);
     $30 = ((($fmt87167)) + 2|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = ($31<<24>>24)==(37);
     if ($32) {
      $fmt87167 = $30;$z$0168 = $29;
      label = 9;
     } else {
      $fmt87$lcssa = $30;$z$0$lcssa = $29;
      break;
     }
    }
   }
  } while(0);
  $33 = $z$0$lcssa;
  $34 = $fmt89;
  $35 = (($33) - ($34))|0;
  if ($1) {
   (___fwritex($fmt89,$35,$f)|0);
  }
  $36 = ($z$0$lcssa|0)==($fmt89|0);
  if (!($36)) {
   $l10n$0$phi = $l10n$0;$1166$phi = $1166;$1165$phi = $1165;$cnt$0 = $cnt$1;$fmt89 = $fmt87$lcssa;$l$0 = $35;$l10n$0 = $l10n$0$phi;$1166 = $1166$phi;$1165 = $1165$phi;
   continue;
  }
  $37 = ((($fmt87$lcssa)) + 1|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38 << 24 >> 24;
  $isdigittmp = (($39) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $40 = ((($fmt87$lcssa)) + 2|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = ($41<<24>>24)==(36);
   $43 = ((($fmt87$lcssa)) + 3|0);
   $$100 = $42 ? $43 : $37;
   $$l10n$0 = $42 ? 1 : $l10n$0;
   $isdigittmp$ = $42 ? $isdigittmp : -1;
   $$pre272 = HEAP8[$$100>>0]|0;
   $45 = $$pre272;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$100;
  } else {
   $45 = $38;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $37;
  }
  $44 = $45 << 24 >> 24;
  $46 = $44 & -32;
  $47 = ($46|0)==(32);
  L24: do {
   if ($47) {
    $49 = $44;$54 = $45;$fl$0175 = 0;$storemerge8174 = $storemerge;
    while(1) {
     $48 = (($49) + -32)|0;
     $50 = 1 << $48;
     $51 = $50 & 75913;
     $52 = ($51|0)==(0);
     if ($52) {
      $64 = $54;$fl$0115 = $fl$0175;$storemerge8113 = $storemerge8174;
      break L24;
     }
     $53 = $54 << 24 >> 24;
     $55 = (($53) + -32)|0;
     $56 = 1 << $55;
     $57 = $56 | $fl$0175;
     $58 = ((($storemerge8174)) + 1|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = $59 << 24 >> 24;
     $61 = $60 & -32;
     $62 = ($61|0)==(32);
     if ($62) {
      $49 = $60;$54 = $59;$fl$0175 = $57;$storemerge8174 = $58;
     } else {
      $64 = $59;$fl$0115 = $57;$storemerge8113 = $58;
      break;
     }
    }
   } else {
    $64 = $45;$fl$0115 = 0;$storemerge8113 = $storemerge;
   }
  } while(0);
  $63 = ($64<<24>>24)==(42);
  do {
   if ($63) {
    $65 = ((($storemerge8113)) + 1|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66 << 24 >> 24;
    $isdigittmp11 = (($67) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $68 = ((($storemerge8113)) + 2|0);
     $69 = HEAP8[$68>>0]|0;
     $70 = ($69<<24>>24)==(36);
     if ($70) {
      $71 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$71>>2] = 10;
      $72 = HEAP8[$65>>0]|0;
      $73 = $72 << 24 >> 24;
      $74 = (($73) + -48)|0;
      $75 = (($nl_arg) + ($74<<3)|0);
      $76 = $75;
      $77 = $76;
      $78 = HEAP32[$77>>2]|0;
      $79 = (($76) + 4)|0;
      $80 = $79;
      $81 = HEAP32[$80>>2]|0;
      $82 = ((($storemerge8113)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $82;$w$0 = $78;
     } else {
      label = 23;
     }
    } else {
     label = 23;
    }
    if ((label|0) == 23) {
     label = 0;
     $83 = ($l10n$1|0)==(0);
     if (!($83)) {
      $$0 = -1;
      label = 363;
      break L1;
     }
     if (!($1)) {
      $fl$1 = $fl$0115;$fmt90 = $65;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $84 = $arglist_current;
     $85 = ((0) + 4|0);
     $expanded64 = $85;
     $expanded = (($expanded64) - 1)|0;
     $86 = (($84) + ($expanded))|0;
     $87 = ((0) + 4|0);
     $expanded68 = $87;
     $expanded67 = (($expanded68) - 1)|0;
     $expanded66 = $expanded67 ^ -1;
     $88 = $86 & $expanded66;
     $89 = $88;
     $90 = HEAP32[$89>>2]|0;
     $arglist_next = ((($89)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $65;$w$0 = $90;
    }
    $91 = ($w$0|0)<(0);
    if ($91) {
     $92 = $fl$0115 | 8192;
     $93 = (0 - ($w$0))|0;
     $fl$1 = $92;$fmt90 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $93;
    } else {
     $fl$1 = $fl$0115;$fmt90 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $94 = $64 << 24 >> 24;
    $isdigittmp1$i = (($94) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $98 = $storemerge8113;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $95 = ($i$03$i*10)|0;
      $96 = (($95) + ($isdigittmp4$i))|0;
      $97 = ((($98)) + 1|0);
      $99 = HEAP8[$97>>0]|0;
      $100 = $99 << 24 >> 24;
      $isdigittmp$i = (($100) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $98 = $97;$i$03$i = $96;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $96;$$lcssa443 = $97;
       break;
      }
     }
     $101 = ($$lcssa|0)<(0);
     if ($101) {
      $$0 = -1;
      label = 363;
      break L1;
     } else {
      $fl$1 = $fl$0115;$fmt90 = $$lcssa443;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$0115;$fmt90 = $storemerge8113;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $102 = HEAP8[$fmt90>>0]|0;
  $103 = ($102<<24>>24)==(46);
  L45: do {
   if ($103) {
    $104 = ((($fmt90)) + 1|0);
    $105 = HEAP8[$104>>0]|0;
    $106 = ($105<<24>>24)==(42);
    if (!($106)) {
     $133 = $105 << 24 >> 24;
     $isdigittmp1$i27 = (($133) + -48)|0;
     $isdigit2$i28 = ($isdigittmp1$i27>>>0)<(10);
     if ($isdigit2$i28) {
      $137 = $104;$i$03$i30 = 0;$isdigittmp4$i29 = $isdigittmp1$i27;
     } else {
      $fmt93 = $104;$p$0 = 0;
      break;
     }
     while(1) {
      $134 = ($i$03$i30*10)|0;
      $135 = (($134) + ($isdigittmp4$i29))|0;
      $136 = ((($137)) + 1|0);
      $138 = HEAP8[$136>>0]|0;
      $139 = $138 << 24 >> 24;
      $isdigittmp$i31 = (($139) + -48)|0;
      $isdigit$i32 = ($isdigittmp$i31>>>0)<(10);
      if ($isdigit$i32) {
       $137 = $136;$i$03$i30 = $135;$isdigittmp4$i29 = $isdigittmp$i31;
      } else {
       $fmt93 = $136;$p$0 = $135;
       break L45;
      }
     }
    }
    $107 = ((($fmt90)) + 2|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = $108 << 24 >> 24;
    $isdigittmp9 = (($109) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $110 = ((($fmt90)) + 3|0);
     $111 = HEAP8[$110>>0]|0;
     $112 = ($111<<24>>24)==(36);
     if ($112) {
      $113 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$113>>2] = 10;
      $114 = HEAP8[$107>>0]|0;
      $115 = $114 << 24 >> 24;
      $116 = (($115) + -48)|0;
      $117 = (($nl_arg) + ($116<<3)|0);
      $118 = $117;
      $119 = $118;
      $120 = HEAP32[$119>>2]|0;
      $121 = (($118) + 4)|0;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = ((($fmt90)) + 4|0);
      $fmt93 = $124;$p$0 = $120;
      break;
     }
    }
    $125 = ($l10n$3|0)==(0);
    if (!($125)) {
     $$0 = -1;
     label = 363;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $126 = $arglist_current2;
     $127 = ((0) + 4|0);
     $expanded71 = $127;
     $expanded70 = (($expanded71) - 1)|0;
     $128 = (($126) + ($expanded70))|0;
     $129 = ((0) + 4|0);
     $expanded75 = $129;
     $expanded74 = (($expanded75) - 1)|0;
     $expanded73 = $expanded74 ^ -1;
     $130 = $128 & $expanded73;
     $131 = $130;
     $132 = HEAP32[$131>>2]|0;
     $arglist_next3 = ((($131)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt93 = $107;$p$0 = $132;
    } else {
     $fmt93 = $107;$p$0 = 0;
    }
   } else {
    $fmt93 = $fmt90;$p$0 = -1;
   }
  } while(0);
  $fmt92 = $fmt93;$st$0 = 0;
  while(1) {
   $140 = HEAP8[$fmt92>>0]|0;
   $141 = $140 << 24 >> 24;
   $142 = (($141) + -65)|0;
   $143 = ($142>>>0)>(57);
   if ($143) {
    $$0 = -1;
    label = 363;
    break L1;
   }
   $144 = ((($fmt92)) + 1|0);
   $145 = ((17474 + (($st$0*58)|0)|0) + ($142)|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = $146&255;
   $148 = (($147) + -1)|0;
   $149 = ($148>>>0)<(8);
   if ($149) {
    $fmt92 = $144;$st$0 = $147;
   } else {
    $$lcssa448 = $144;$$lcssa449 = $146;$$lcssa450 = $147;$fmt92$lcssa446 = $fmt92;$st$0$lcssa447 = $st$0;
    break;
   }
  }
  $150 = ($$lcssa449<<24>>24)==(0);
  if ($150) {
   $$0 = -1;
   label = 363;
   break;
  }
  $151 = ($$lcssa449<<24>>24)==(19);
  $152 = ($argpos$0|0)>(-1);
  L64: do {
   if ($151) {
    if ($152) {
     $$0 = -1;
     label = 363;
     break L1;
    } else {
     $1167 = $1165;$1168 = $1166;
     label = 62;
    }
   } else {
    if ($152) {
     $153 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$153>>2] = $$lcssa450;
     $154 = (($nl_arg) + ($argpos$0<<3)|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($154)) + 4|0);
     $157 = HEAP32[$156>>2]|0;
     $1167 = $157;$1168 = $155;
     label = 62;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 363;
     break L1;
    }
    $158 = ($$lcssa449&255)>(20);
    if ($158) {
     $261 = $1166;$288 = $1165;
    } else {
     do {
      switch ($$lcssa450|0) {
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $159 = $arglist_current5;
       $160 = ((0) + 4|0);
       $expanded78 = $160;
       $expanded77 = (($expanded78) - 1)|0;
       $161 = (($159) + ($expanded77))|0;
       $162 = ((0) + 4|0);
       $expanded82 = $162;
       $expanded81 = (($expanded82) - 1)|0;
       $expanded80 = $expanded81 ^ -1;
       $163 = $161 & $expanded80;
       $164 = $163;
       $165 = HEAP32[$164>>2]|0;
       $arglist_next6 = ((($164)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $166 = $165;
       $261 = $166;$288 = $1165;
       break L64;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $167 = $arglist_current8;
       $168 = ((0) + 4|0);
       $expanded85 = $168;
       $expanded84 = (($expanded85) - 1)|0;
       $169 = (($167) + ($expanded84))|0;
       $170 = ((0) + 4|0);
       $expanded89 = $170;
       $expanded88 = (($expanded89) - 1)|0;
       $expanded87 = $expanded88 ^ -1;
       $171 = $169 & $expanded87;
       $172 = $171;
       $173 = HEAP32[$172>>2]|0;
       $arglist_next9 = ((($172)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $174 = ($173|0)<(0);
       $175 = $174 << 31 >> 31;
       $261 = $173;$288 = $175;
       break L64;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $176 = $arglist_current11;
       $177 = ((0) + 4|0);
       $expanded92 = $177;
       $expanded91 = (($expanded92) - 1)|0;
       $178 = (($176) + ($expanded91))|0;
       $179 = ((0) + 4|0);
       $expanded96 = $179;
       $expanded95 = (($expanded96) - 1)|0;
       $expanded94 = $expanded95 ^ -1;
       $180 = $178 & $expanded94;
       $181 = $180;
       $182 = HEAP32[$181>>2]|0;
       $arglist_next12 = ((($181)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $261 = $182;$288 = 0;
       break L64;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $183 = $arglist_current14;
       $184 = ((0) + 8|0);
       $expanded99 = $184;
       $expanded98 = (($expanded99) - 1)|0;
       $185 = (($183) + ($expanded98))|0;
       $186 = ((0) + 8|0);
       $expanded103 = $186;
       $expanded102 = (($expanded103) - 1)|0;
       $expanded101 = $expanded102 ^ -1;
       $187 = $185 & $expanded101;
       $188 = $187;
       $189 = $188;
       $190 = $189;
       $191 = HEAP32[$190>>2]|0;
       $192 = (($189) + 4)|0;
       $193 = $192;
       $194 = HEAP32[$193>>2]|0;
       $arglist_next15 = ((($188)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $261 = $191;$288 = $194;
       break L64;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $195 = $arglist_current17;
       $196 = ((0) + 4|0);
       $expanded106 = $196;
       $expanded105 = (($expanded106) - 1)|0;
       $197 = (($195) + ($expanded105))|0;
       $198 = ((0) + 4|0);
       $expanded110 = $198;
       $expanded109 = (($expanded110) - 1)|0;
       $expanded108 = $expanded109 ^ -1;
       $199 = $197 & $expanded108;
       $200 = $199;
       $201 = HEAP32[$200>>2]|0;
       $arglist_next18 = ((($200)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $202 = $201&65535;
       $203 = $202 << 16 >> 16;
       $204 = ($203|0)<(0);
       $205 = $204 << 31 >> 31;
       $sext101 = $201 << 16;
       $206 = $sext101 >> 16;
       $261 = $206;$288 = $205;
       break L64;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $207 = $arglist_current20;
       $208 = ((0) + 4|0);
       $expanded113 = $208;
       $expanded112 = (($expanded113) - 1)|0;
       $209 = (($207) + ($expanded112))|0;
       $210 = ((0) + 4|0);
       $expanded117 = $210;
       $expanded116 = (($expanded117) - 1)|0;
       $expanded115 = $expanded116 ^ -1;
       $211 = $209 & $expanded115;
       $212 = $211;
       $213 = HEAP32[$212>>2]|0;
       $arglist_next21 = ((($212)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i37 = $213 & 65535;
       $261 = $$mask1$i37;$288 = 0;
       break L64;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $214 = $arglist_current23;
       $215 = ((0) + 4|0);
       $expanded120 = $215;
       $expanded119 = (($expanded120) - 1)|0;
       $216 = (($214) + ($expanded119))|0;
       $217 = ((0) + 4|0);
       $expanded124 = $217;
       $expanded123 = (($expanded124) - 1)|0;
       $expanded122 = $expanded123 ^ -1;
       $218 = $216 & $expanded122;
       $219 = $218;
       $220 = HEAP32[$219>>2]|0;
       $arglist_next24 = ((($219)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $221 = $220&255;
       $222 = $221 << 24 >> 24;
       $223 = ($222|0)<(0);
       $224 = $223 << 31 >> 31;
       $sext = $220 << 24;
       $225 = $sext >> 24;
       $261 = $225;$288 = $224;
       break L64;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $226 = $arglist_current26;
       $227 = ((0) + 4|0);
       $expanded127 = $227;
       $expanded126 = (($expanded127) - 1)|0;
       $228 = (($226) + ($expanded126))|0;
       $229 = ((0) + 4|0);
       $expanded131 = $229;
       $expanded130 = (($expanded131) - 1)|0;
       $expanded129 = $expanded130 ^ -1;
       $230 = $228 & $expanded129;
       $231 = $230;
       $232 = HEAP32[$231>>2]|0;
       $arglist_next27 = ((($231)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i38 = $232 & 255;
       $261 = $$mask$i38;$288 = 0;
       break L64;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       $233 = $arglist_current29;
       $234 = ((0) + 8|0);
       $expanded134 = $234;
       $expanded133 = (($expanded134) - 1)|0;
       $235 = (($233) + ($expanded133))|0;
       $236 = ((0) + 8|0);
       $expanded138 = $236;
       $expanded137 = (($expanded138) - 1)|0;
       $expanded136 = $expanded137 ^ -1;
       $237 = $235 & $expanded136;
       $238 = $237;
       $239 = +HEAPF64[$238>>3];
       $arglist_next30 = ((($238)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $239;$240 = HEAP32[tempDoublePtr>>2]|0;
       $241 = HEAP32[tempDoublePtr+4>>2]|0;
       $261 = $240;$288 = $241;
       break L64;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       $242 = $arglist_current32;
       $243 = ((0) + 8|0);
       $expanded141 = $243;
       $expanded140 = (($expanded141) - 1)|0;
       $244 = (($242) + ($expanded140))|0;
       $245 = ((0) + 8|0);
       $expanded145 = $245;
       $expanded144 = (($expanded145) - 1)|0;
       $expanded143 = $expanded144 ^ -1;
       $246 = $244 & $expanded143;
       $247 = $246;
       $248 = +HEAPF64[$247>>3];
       $arglist_next33 = ((($247)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $248;$249 = HEAP32[tempDoublePtr>>2]|0;
       $250 = HEAP32[tempDoublePtr+4>>2]|0;
       $261 = $249;$288 = $250;
       break L64;
       break;
      }
      default: {
       $261 = $1166;$288 = $1165;
       break L64;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 62) {
   label = 0;
   if ($1) {
    $261 = $1168;$288 = $1167;
   } else {
    $1165 = $1167;$1166 = $1168;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $35;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $251 = HEAP8[$fmt92$lcssa446>>0]|0;
  $252 = $251 << 24 >> 24;
  $253 = ($st$0$lcssa447|0)!=(0);
  $254 = $252 & 15;
  $255 = ($254|0)==(3);
  $or$cond15 = $253 & $255;
  $256 = $252 & -33;
  $t$0 = $or$cond15 ? $256 : $252;
  $257 = $fl$1 & 8192;
  $258 = ($257|0)==(0);
  $259 = $fl$1 & -65537;
  $fl$1$ = $258 ? $fl$1 : $259;
  L86: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa447|0) {
    case 0:  {
     $260 = $261;
     HEAP32[$260>>2] = $cnt$1;
     $1165 = $288;$1166 = $261;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $35;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $262 = $261;
     HEAP32[$262>>2] = $cnt$1;
     $1165 = $288;$1166 = $261;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $35;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $263 = ($cnt$1|0)<(0);
     $264 = $263 << 31 >> 31;
     $265 = $261;
     $266 = $265;
     $267 = $266;
     HEAP32[$267>>2] = $cnt$1;
     $268 = (($266) + 4)|0;
     $269 = $268;
     HEAP32[$269>>2] = $264;
     $1165 = $288;$1166 = $261;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $35;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $270 = $cnt$1&65535;
     $271 = $261;
     HEAP16[$271>>1] = $270;
     $1165 = $288;$1166 = $261;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $35;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $272 = $cnt$1&255;
     $273 = $261;
     HEAP8[$273>>0] = $272;
     $1165 = $288;$1166 = $261;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $35;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $274 = $261;
     HEAP32[$274>>2] = $cnt$1;
     $1165 = $288;$1166 = $261;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $35;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $275 = ($cnt$1|0)<(0);
     $276 = $275 << 31 >> 31;
     $277 = $261;
     $278 = $277;
     $279 = $278;
     HEAP32[$279>>2] = $cnt$1;
     $280 = (($278) + 4)|0;
     $281 = $280;
     HEAP32[$281>>2] = $276;
     $1165 = $288;$1166 = $261;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $35;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1165 = $288;$1166 = $261;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $35;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $282 = ($p$0>>>0)>(8);
    $283 = $282 ? $p$0 : 8;
    $284 = $fl$1$ | 8;
    $fl$3 = $284;$p$1 = $283;$t$1 = 120;
    label = 73;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 73;
    break;
   }
   case 111:  {
    $308 = ($261|0)==(0);
    $309 = ($288|0)==(0);
    $310 = $308 & $309;
    if ($310) {
     $$0$lcssa$i51 = $2;
    } else {
     $$03$i48 = $2;$312 = $261;$316 = $288;
     while(1) {
      $311 = $312 & 7;
      $313 = $311 | 48;
      $314 = $313&255;
      $315 = ((($$03$i48)) + -1|0);
      HEAP8[$315>>0] = $314;
      $317 = (_bitshift64Lshr(($312|0),($316|0),3)|0);
      $318 = tempRet0;
      $319 = ($317|0)==(0);
      $320 = ($318|0)==(0);
      $321 = $319 & $320;
      if ($321) {
       $$0$lcssa$i51 = $315;
       break;
      } else {
       $$03$i48 = $315;$312 = $317;$316 = $318;
      }
     }
    }
    $322 = $fl$1$ & 8;
    $323 = ($322|0)==(0);
    $or$cond19 = $323 | $310;
    $$24 = $or$cond19 ? 17954 : (17959);
    $324 = $or$cond19&1;
    $$25 = $324 ^ 1;
    $363 = $261;$365 = $288;$a$0 = $$0$lcssa$i51;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$25;$prefix$1 = $$24;
    label = 89;
    break;
   }
   case 105: case 100:  {
    $325 = ($288|0)<(0);
    if ($325) {
     $326 = (_i64Subtract(0,0,($261|0),($288|0))|0);
     $327 = tempRet0;
     $333 = $327;$335 = $326;$pl$0 = 1;$prefix$0 = 17954;
     label = 84;
     break L86;
    }
    $328 = $fl$1$ & 2048;
    $329 = ($328|0)==(0);
    if ($329) {
     $330 = $fl$1$ & 1;
     $331 = ($330|0)==(0);
     $$ = $331 ? 17954 : (17956);
     $333 = $288;$335 = $261;$pl$0 = $330;$prefix$0 = $$;
     label = 84;
    } else {
     $333 = $288;$335 = $261;$pl$0 = 1;$prefix$0 = (17955);
     label = 84;
    }
    break;
   }
   case 117:  {
    $333 = $288;$335 = $261;$pl$0 = 0;$prefix$0 = 17954;
    label = 84;
    break;
   }
   case 99:  {
    $374 = $261&255;
    HEAP8[$4>>0] = $374;
    $1169 = $288;$1170 = $261;$a$2 = $4;$fl$6 = $259;$p$5 = 1;$pl$2 = 0;$prefix$2 = 17954;$z$2 = $2;
    break;
   }
   case 109:  {
    $375 = (___errno_location()|0);
    $376 = HEAP32[$375>>2]|0;
    $377 = (_strerror(($376|0))|0);
    $a$1 = $377;
    label = 94;
    break;
   }
   case 115:  {
    $378 = $261;
    $379 = ($261|0)!=(0);
    $380 = $379 ? $378 : 17964;
    $a$1 = $380;
    label = 94;
    break;
   }
   case 67:  {
    HEAP32[$wc>>2] = $261;
    HEAP32[$5>>2] = 0;
    $1173 = $wc;$1174 = $6;$p$4274 = -1;
    label = 97;
    break;
   }
   case 83:  {
    $387 = $261;
    $388 = ($p$0|0)==(0);
    if ($388) {
     $1175 = $261;$1176 = $387;$i$0$lcssa275 = 0;
     label = 102;
    } else {
     $1173 = $387;$1174 = $261;$p$4274 = $p$0;
     label = 97;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $261;HEAP32[tempDoublePtr+4>>2] = $288;$426 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $427 = ($288|0)<(0);
    if ($427) {
     $428 = -$426;
     $$07$i = $428;$pl$0$i = 1;$prefix$0$i = 17971;
    } else {
     $429 = $fl$1$ & 2048;
     $430 = ($429|0)==(0);
     if ($430) {
      $431 = $fl$1$ & 1;
      $432 = ($431|0)==(0);
      $$$i = $432 ? (17972) : (17977);
      $$07$i = $426;$pl$0$i = $431;$prefix$0$i = $$$i;
     } else {
      $$07$i = $426;$pl$0$i = 1;$prefix$0$i = (17974);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$433 = HEAP32[tempDoublePtr>>2]|0;
    $434 = HEAP32[tempDoublePtr+4>>2]|0;
    $435 = $434 & 2146435072;
    $436 = ($435>>>0)<(2146435072);
    $437 = (0)<(0);
    $438 = ($435|0)==(2146435072);
    $439 = $438 & $437;
    $440 = $436 | $439;
    do {
     if ($440) {
      $467 = (+_frexpl($$07$i,$e2$i));
      $468 = $467 * 2.0;
      $469 = $468 != 0.0;
      if ($469) {
       $470 = HEAP32[$e2$i>>2]|0;
       $471 = (($470) + -1)|0;
       HEAP32[$e2$i>>2] = $471;
      }
      $472 = $t$0 | 32;
      $473 = ($472|0)==(97);
      if ($473) {
       $474 = $t$0 & 32;
       $475 = ($474|0)==(0);
       $476 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $475 ? $prefix$0$i : $476;
       $477 = $pl$0$i | 2;
       $478 = ($p$0>>>0)>(11);
       $479 = (12 - ($p$0))|0;
       $480 = ($479|0)==(0);
       $481 = $478 | $480;
       do {
        if ($481) {
         $$1$i = $468;
        } else {
         $re$1179$i = $479;$round$0178$i = 8.0;
         while(1) {
          $482 = (($re$1179$i) + -1)|0;
          $483 = $round$0178$i * 16.0;
          $484 = ($482|0)==(0);
          if ($484) {
           $$lcssa474 = $483;
           break;
          } else {
           $re$1179$i = $482;$round$0178$i = $483;
          }
         }
         $485 = HEAP8[$prefix$0$$i>>0]|0;
         $486 = ($485<<24>>24)==(45);
         if ($486) {
          $487 = -$468;
          $488 = $487 - $$lcssa474;
          $489 = $$lcssa474 + $488;
          $490 = -$489;
          $$1$i = $490;
          break;
         } else {
          $491 = $468 + $$lcssa474;
          $492 = $491 - $$lcssa474;
          $$1$i = $492;
          break;
         }
        }
       } while(0);
       $493 = HEAP32[$e2$i>>2]|0;
       $494 = ($493|0)<(0);
       $495 = (0 - ($493))|0;
       $496 = $494 ? $495 : $493;
       $497 = ($496|0)<(0);
       if ($497) {
        $498 = ($496|0)<(0);
        $499 = $498 << 31 >> 31;
        $$05$i$i = $7;$500 = $496;$501 = $499;
        while(1) {
         $502 = (___uremdi3(($500|0),($501|0),10,0)|0);
         $503 = tempRet0;
         $504 = $502 | 48;
         $505 = $504&255;
         $506 = ((($$05$i$i)) + -1|0);
         HEAP8[$506>>0] = $505;
         $507 = (___udivdi3(($500|0),($501|0),10,0)|0);
         $508 = tempRet0;
         $509 = ($501>>>0)>(9);
         $510 = ($500>>>0)>(4294967295);
         $511 = ($501|0)==(9);
         $512 = $511 & $510;
         $513 = $509 | $512;
         if ($513) {
          $$05$i$i = $506;$500 = $507;$501 = $508;
         } else {
          $$lcssa475 = $506;$1177 = $507;$1178 = $508;
          break;
         }
        }
        $$0$lcssa$i48$i = $$lcssa475;$$01$lcssa$off0$i$i = $1177;
       } else {
        $$0$lcssa$i48$i = $7;$$01$lcssa$off0$i$i = $496;
       }
       $514 = ($$01$lcssa$off0$i$i|0)==(0);
       if ($514) {
        $$1$lcssa$i$i = $$0$lcssa$i48$i;
       } else {
        $$12$i$i = $$0$lcssa$i48$i;$y$03$i$i = $$01$lcssa$off0$i$i;
        while(1) {
         $515 = (($y$03$i$i>>>0) % 10)&-1;
         $516 = $515 | 48;
         $517 = $516&255;
         $518 = ((($$12$i$i)) + -1|0);
         HEAP8[$518>>0] = $517;
         $519 = (($y$03$i$i>>>0) / 10)&-1;
         $520 = ($y$03$i$i>>>0)<(10);
         if ($520) {
          $$1$lcssa$i$i = $518;
          break;
         } else {
          $$12$i$i = $518;$y$03$i$i = $519;
         }
        }
       }
       $521 = ($$1$lcssa$i$i|0)==($7|0);
       if ($521) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $$1$lcssa$i$i;
       }
       $522 = HEAP32[$e2$i>>2]|0;
       $523 = $522 >> 31;
       $524 = $523 & 2;
       $525 = (($524) + 43)|0;
       $526 = $525&255;
       $527 = ((($estr$0$i)) + -1|0);
       HEAP8[$527>>0] = $526;
       $528 = (($t$0) + 15)|0;
       $529 = $528&255;
       $530 = ((($estr$0$i)) + -2|0);
       HEAP8[$530>>0] = $529;
       $531 = $fl$1$ & 8;
       $532 = ($531|0)==(0);
       if ($532) {
        $notrhs$i = ($p$0|0)<(1);
        if ($notrhs$i) {
         $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
         while(1) {
          $533 = (~~(($$2$us$us$i)));
          $534 = (17938 + ($533)|0);
          $535 = HEAP8[$534>>0]|0;
          $536 = $535&255;
          $537 = $536 | $474;
          $538 = $537&255;
          $539 = ((($s$0$us$us$i)) + 1|0);
          HEAP8[$s$0$us$us$i>>0] = $538;
          $540 = (+($533|0));
          $541 = $$2$us$us$i - $540;
          $542 = $541 * 16.0;
          $543 = $539;
          $544 = (($543) - ($0))|0;
          $545 = ($544|0)!=(1);
          $notlhs$us$us$i = $542 == 0.0;
          $or$cond$i79 = $545 | $notlhs$us$us$i;
          if ($or$cond$i79) {
           $s$1$us$us$i = $539;
          } else {
           $546 = ((($s$0$us$us$i)) + 2|0);
           HEAP8[$539>>0] = 46;
           $s$1$us$us$i = $546;
          }
          $547 = $542 != 0.0;
          if ($547) {
           $$2$us$us$i = $542;$s$0$us$us$i = $s$1$us$us$i;
          } else {
           $s$1$lcssa$i = $s$1$us$us$i;
           break;
          }
         }
        } else {
         $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
         while(1) {
          $548 = (~~(($$2$us$i)));
          $549 = (17938 + ($548)|0);
          $550 = HEAP8[$549>>0]|0;
          $551 = $550&255;
          $552 = $551 | $474;
          $553 = $552&255;
          $554 = ((($s$0$us$i)) + 1|0);
          HEAP8[$s$0$us$i>>0] = $553;
          $555 = (+($548|0));
          $556 = $$2$us$i - $555;
          $557 = $556 * 16.0;
          $558 = $554;
          $559 = (($558) - ($0))|0;
          $560 = ($559|0)==(1);
          if ($560) {
           $561 = ((($s$0$us$i)) + 2|0);
           HEAP8[$554>>0] = 46;
           $s$1$us$i = $561;
          } else {
           $s$1$us$i = $554;
          }
          $562 = $557 != 0.0;
          if ($562) {
           $$2$us$i = $557;$s$0$us$i = $s$1$us$i;
          } else {
           $s$1$lcssa$i = $s$1$us$i;
           break;
          }
         }
        }
       } else {
        $$2$i = $$1$i;$s$0$i = $buf$i;
        while(1) {
         $563 = (~~(($$2$i)));
         $564 = (17938 + ($563)|0);
         $565 = HEAP8[$564>>0]|0;
         $566 = $565&255;
         $567 = $566 | $474;
         $568 = $567&255;
         $569 = ((($s$0$i)) + 1|0);
         HEAP8[$s$0$i>>0] = $568;
         $570 = (+($563|0));
         $571 = $$2$i - $570;
         $572 = $571 * 16.0;
         $573 = $569;
         $574 = (($573) - ($0))|0;
         $575 = ($574|0)==(1);
         if ($575) {
          $576 = ((($s$0$i)) + 2|0);
          HEAP8[$569>>0] = 46;
          $s$1$i = $576;
         } else {
          $s$1$i = $569;
         }
         $577 = $572 != 0.0;
         if ($577) {
          $$2$i = $572;$s$0$i = $s$1$i;
         } else {
          $s$1$lcssa$i = $s$1$i;
          break;
         }
        }
       }
       $578 = ($p$0|0)!=(0);
       $$pre300$i = $s$1$lcssa$i;
       $579 = (($11) + ($$pre300$i))|0;
       $580 = ($579|0)<($p$0|0);
       $or$cond331 = $578 & $580;
       $581 = $530;
       $582 = (($12) + ($p$0))|0;
       $583 = (($582) - ($581))|0;
       $584 = $530;
       $585 = (($10) - ($584))|0;
       $586 = (($585) + ($$pre300$i))|0;
       $l$0$i = $or$cond331 ? $583 : $586;
       $587 = (($l$0$i) + ($477))|0;
       $588 = $fl$1$ & 73728;
       $589 = ($588|0)==(0);
       $590 = ($w$1|0)>($587|0);
       $or$cond$i52$i = $589 & $590;
       if ($or$cond$i52$i) {
        $591 = (($w$1) - ($587))|0;
        $592 = ($591>>>0)>(256);
        $593 = $592 ? 256 : $591;
        _memset(($pad$i|0),32,($593|0))|0;
        $594 = ($591>>>0)>(255);
        if ($594) {
         $$01$i54$i = $591;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $595 = (($$01$i54$i) + -256)|0;
          $596 = ($595>>>0)>(255);
          if ($596) {
           $$01$i54$i = $595;
          } else {
           break;
          }
         }
         $597 = $591 & 255;
         $$0$lcssa$i56$i = $597;
        } else {
         $$0$lcssa$i56$i = $591;
        }
        (___fwritex($pad$i,$$0$lcssa$i56$i,$f)|0);
       }
       (___fwritex($prefix$0$$i,$477,$f)|0);
       $598 = ($588|0)==(65536);
       $or$cond$i59$i = $598 & $590;
       if ($or$cond$i59$i) {
        $599 = (($w$1) - ($587))|0;
        $600 = ($599>>>0)>(256);
        $601 = $600 ? 256 : $599;
        _memset(($pad$i|0),48,($601|0))|0;
        $602 = ($599>>>0)>(255);
        if ($602) {
         $$01$i61$i = $599;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $603 = (($$01$i61$i) + -256)|0;
          $604 = ($603>>>0)>(255);
          if ($604) {
           $$01$i61$i = $603;
          } else {
           break;
          }
         }
         $605 = $599 & 255;
         $$0$lcssa$i63$i = $605;
        } else {
         $$0$lcssa$i63$i = $599;
        }
        (___fwritex($pad$i,$$0$lcssa$i63$i,$f)|0);
       }
       $606 = (($$pre300$i) - ($0))|0;
       (___fwritex($buf$i,$606,$f)|0);
       $607 = $530;
       $608 = (($9) - ($607))|0;
       $609 = (($l$0$i) - ($608))|0;
       $610 = (($609) - ($606))|0;
       $611 = ($610|0)>(0);
       if ($611) {
        $612 = ($610>>>0)>(256);
        $613 = $612 ? 256 : $610;
        _memset(($pad$i|0),48,($613|0))|0;
        $614 = ($610>>>0)>(255);
        if ($614) {
         $$01$i67$i = $610;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $615 = (($$01$i67$i) + -256)|0;
          $616 = ($615>>>0)>(255);
          if ($616) {
           $$01$i67$i = $615;
          } else {
           break;
          }
         }
         $617 = $610 & 255;
         $$0$lcssa$i69$i = $617;
        } else {
         $$0$lcssa$i69$i = $610;
        }
        (___fwritex($pad$i,$$0$lcssa$i69$i,$f)|0);
       }
       (___fwritex($530,$608,$f)|0);
       $618 = ($588|0)==(8192);
       $or$cond$i72$i = $618 & $590;
       if ($or$cond$i72$i) {
        $619 = (($w$1) - ($587))|0;
        $620 = ($619>>>0)>(256);
        $621 = $620 ? 256 : $619;
        _memset(($pad$i|0),32,($621|0))|0;
        $622 = ($619>>>0)>(255);
        if ($622) {
         $$01$i74$i = $619;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $623 = (($$01$i74$i) + -256)|0;
          $624 = ($623>>>0)>(255);
          if ($624) {
           $$01$i74$i = $623;
          } else {
           break;
          }
         }
         $625 = $619 & 255;
         $$0$lcssa$i76$i = $625;
        } else {
         $$0$lcssa$i76$i = $619;
        }
        (___fwritex($pad$i,$$0$lcssa$i76$i,$f)|0);
       }
       $w$$i = $590 ? $w$1 : $587;
       $$0$i = $w$$i;
       break;
      }
      $626 = ($p$0|0)<(0);
      $$p$i = $626 ? 6 : $p$0;
      if ($469) {
       $627 = $468 * 268435456.0;
       $628 = HEAP32[$e2$i>>2]|0;
       $629 = (($628) + -28)|0;
       HEAP32[$e2$i>>2] = $629;
       $$3$i = $627;$631 = $629;
      } else {
       $$pre$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $468;$631 = $$pre$i;
      }
      $630 = ($631|0)<(0);
      $$31$i = $630 ? $big$i : $13;
      $632 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $633 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $633;
       $634 = ((($z$0$i)) + 4|0);
       $635 = (+($633>>>0));
       $636 = $$4$i - $635;
       $637 = $636 * 1.0E+9;
       $638 = $637 != 0.0;
       if ($638) {
        $$4$i = $637;$z$0$i = $634;
       } else {
        $$lcssa451 = $634;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $639 = ($$pr$i|0)>(0);
      if ($639) {
       $641 = $$pr$i;$a$1253$i = $$31$i;$z$1252$i = $$lcssa451;
       while(1) {
        $640 = ($641|0)>(29);
        $642 = $640 ? 29 : $641;
        $d$0245$i = ((($z$1252$i)) + -4|0);
        $643 = ($d$0245$i>>>0)<($a$1253$i>>>0);
        do {
         if ($643) {
          $a$2$ph$i = $a$1253$i;
         } else {
          $carry$0246$i = 0;$d$0247$i = $d$0245$i;
          while(1) {
           $644 = HEAP32[$d$0247$i>>2]|0;
           $645 = (_bitshift64Shl(($644|0),0,($642|0))|0);
           $646 = tempRet0;
           $647 = (_i64Add(($645|0),($646|0),($carry$0246$i|0),0)|0);
           $648 = tempRet0;
           $649 = (___uremdi3(($647|0),($648|0),1000000000,0)|0);
           $650 = tempRet0;
           HEAP32[$d$0247$i>>2] = $649;
           $651 = (___udivdi3(($647|0),($648|0),1000000000,0)|0);
           $652 = tempRet0;
           $d$0$i = ((($d$0247$i)) + -4|0);
           $653 = ($d$0$i>>>0)<($a$1253$i>>>0);
           if ($653) {
            $$lcssa452 = $651;
            break;
           } else {
            $carry$0246$i = $651;$d$0247$i = $d$0$i;
           }
          }
          $654 = ($$lcssa452|0)==(0);
          if ($654) {
           $a$2$ph$i = $a$1253$i;
           break;
          }
          $655 = ((($a$1253$i)) + -4|0);
          HEAP32[$655>>2] = $$lcssa452;
          $a$2$ph$i = $655;
         }
        } while(0);
        $z$2$i = $z$1252$i;
        while(1) {
         $656 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($656)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $657 = ((($z$2$i)) + -4|0);
         $658 = HEAP32[$657>>2]|0;
         $659 = ($658|0)==(0);
         if ($659) {
          $z$2$i = $657;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $660 = HEAP32[$e2$i>>2]|0;
        $661 = (($660) - ($642))|0;
        HEAP32[$e2$i>>2] = $661;
        $662 = ($661|0)>(0);
        if ($662) {
         $641 = $661;$a$1253$i = $a$2$ph$i;$z$1252$i = $z$2$i$lcssa;
        } else {
         $$pr146$i = $661;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr146$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa451;
      }
      $663 = ($$pr146$i|0)<(0);
      L220: do {
       if ($663) {
        $664 = (($$p$i) + 25)|0;
        $665 = (($664|0) / 9)&-1;
        $666 = (($665) + 1)|0;
        $667 = ($472|0)==(102);
        if (!($667)) {
         $700 = $$pr146$i;$a$3240$i = $a$1$lcssa$i;$z$3239$i = $z$1$lcssa$i;
         while(1) {
          $699 = (0 - ($700))|0;
          $701 = ($699|0)>(9);
          $702 = $701 ? 9 : $699;
          $703 = ($a$3240$i>>>0)<($z$3239$i>>>0);
          do {
           if ($703) {
            $707 = 1 << $702;
            $708 = (($707) + -1)|0;
            $709 = 1000000000 >>> $702;
            $carry3$0234$i = 0;$d$1233$i = $a$3240$i;
            while(1) {
             $710 = HEAP32[$d$1233$i>>2]|0;
             $711 = $710 & $708;
             $712 = $710 >>> $702;
             $713 = (($712) + ($carry3$0234$i))|0;
             HEAP32[$d$1233$i>>2] = $713;
             $714 = Math_imul($711, $709)|0;
             $715 = ((($d$1233$i)) + 4|0);
             $716 = ($715>>>0)<($z$3239$i>>>0);
             if ($716) {
              $carry3$0234$i = $714;$d$1233$i = $715;
             } else {
              $$lcssa454 = $714;
              break;
             }
            }
            $717 = HEAP32[$a$3240$i>>2]|0;
            $718 = ($717|0)==(0);
            $719 = ((($a$3240$i)) + 4|0);
            $$a$3$i = $718 ? $719 : $a$3240$i;
            $720 = ($$lcssa454|0)==(0);
            if ($720) {
             $$a$3306$i = $$a$3$i;$z$4$i = $z$3239$i;
             break;
            }
            $721 = ((($z$3239$i)) + 4|0);
            HEAP32[$z$3239$i>>2] = $$lcssa454;
            $$a$3306$i = $$a$3$i;$z$4$i = $721;
           } else {
            $704 = HEAP32[$a$3240$i>>2]|0;
            $705 = ($704|0)==(0);
            $706 = ((($a$3240$i)) + 4|0);
            $$a$3305$i = $705 ? $706 : $a$3240$i;
            $$a$3306$i = $$a$3305$i;$z$4$i = $z$3239$i;
           }
          } while(0);
          $722 = $z$4$i;
          $723 = $$a$3306$i;
          $724 = (($722) - ($723))|0;
          $725 = $724 >> 2;
          $726 = ($725|0)>($666|0);
          $727 = (($$a$3306$i) + ($666<<2)|0);
          $$z$4$i = $726 ? $727 : $z$4$i;
          $728 = HEAP32[$e2$i>>2]|0;
          $729 = (($728) + ($702))|0;
          HEAP32[$e2$i>>2] = $729;
          $730 = ($729|0)<(0);
          if ($730) {
           $700 = $729;$a$3240$i = $$a$3306$i;$z$3239$i = $$z$4$i;
          } else {
           $a$3$lcssa$i = $$a$3306$i;$z$3$lcssa$i = $$z$4$i;
           break L220;
          }
         }
        }
        $668 = (($$31$i) + ($666<<2)|0);
        $670 = $$pr146$i;$a$3240$us$i = $a$1$lcssa$i;$z$3239$us$i = $z$1$lcssa$i;
        while(1) {
         $669 = (0 - ($670))|0;
         $671 = ($669|0)>(9);
         $672 = $671 ? 9 : $669;
         $673 = ($a$3240$us$i>>>0)<($z$3239$us$i>>>0);
         do {
          if ($673) {
           $698 = 1 << $672;
           $691 = (($698) + -1)|0;
           $695 = 1000000000 >>> $672;
           $carry3$0234$us$i = 0;$d$1233$us$i = $a$3240$us$i;
           while(1) {
            $689 = HEAP32[$d$1233$us$i>>2]|0;
            $690 = $689 & $691;
            $692 = $689 >>> $672;
            $693 = (($692) + ($carry3$0234$us$i))|0;
            HEAP32[$d$1233$us$i>>2] = $693;
            $694 = Math_imul($690, $695)|0;
            $696 = ((($d$1233$us$i)) + 4|0);
            $697 = ($696>>>0)<($z$3239$us$i>>>0);
            if ($697) {
             $carry3$0234$us$i = $694;$d$1233$us$i = $696;
            } else {
             $$lcssa455 = $694;
             break;
            }
           }
           $677 = HEAP32[$a$3240$us$i>>2]|0;
           $678 = ($677|0)==(0);
           $679 = ((($a$3240$us$i)) + 4|0);
           $$a$3$us$i = $678 ? $679 : $a$3240$us$i;
           $680 = ($$lcssa455|0)==(0);
           if ($680) {
            $$a$3$us304$i = $$a$3$us$i;$z$4$us$i = $z$3239$us$i;
            break;
           }
           $681 = ((($z$3239$us$i)) + 4|0);
           HEAP32[$z$3239$us$i>>2] = $$lcssa455;
           $$a$3$us304$i = $$a$3$us$i;$z$4$us$i = $681;
          } else {
           $674 = HEAP32[$a$3240$us$i>>2]|0;
           $675 = ($674|0)==(0);
           $676 = ((($a$3240$us$i)) + 4|0);
           $$a$3$us303$i = $675 ? $676 : $a$3240$us$i;
           $$a$3$us304$i = $$a$3$us303$i;$z$4$us$i = $z$3239$us$i;
          }
         } while(0);
         $682 = $z$4$us$i;
         $683 = (($682) - ($632))|0;
         $684 = $683 >> 2;
         $685 = ($684|0)>($666|0);
         $$z$4$us$i = $685 ? $668 : $z$4$us$i;
         $686 = HEAP32[$e2$i>>2]|0;
         $687 = (($686) + ($672))|0;
         HEAP32[$e2$i>>2] = $687;
         $688 = ($687|0)<(0);
         if ($688) {
          $670 = $687;$a$3240$us$i = $$a$3$us304$i;$z$3239$us$i = $$z$4$us$i;
         } else {
          $a$3$lcssa$i = $$a$3$us304$i;$z$3$lcssa$i = $$z$4$us$i;
          break;
         }
        }
       } else {
        $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
       }
      } while(0);
      $731 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($731) {
        $732 = $a$3$lcssa$i;
        $733 = (($632) - ($732))|0;
        $734 = $733 >> 2;
        $735 = ($734*9)|0;
        $736 = HEAP32[$a$3$lcssa$i>>2]|0;
        $737 = ($736>>>0)<(10);
        if ($737) {
         $e$1$i = $735;
         break;
        } else {
         $e$0229$i = $735;$i$0228$i = 10;
        }
        while(1) {
         $738 = ($i$0228$i*10)|0;
         $739 = (($e$0229$i) + 1)|0;
         $740 = ($736>>>0)<($738>>>0);
         if ($740) {
          $e$1$i = $739;
          break;
         } else {
          $e$0229$i = $739;$i$0228$i = $738;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $741 = ($472|0)!=(102);
      $742 = $741 ? $e$1$i : 0;
      $743 = (($$p$i) - ($742))|0;
      $744 = ($472|0)==(103);
      $745 = ($$p$i|0)!=(0);
      $746 = $745 & $744;
      $$neg151$i = $746 << 31 >> 31;
      $747 = (($743) + ($$neg151$i))|0;
      $748 = $z$3$lcssa$i;
      $749 = (($748) - ($632))|0;
      $750 = $749 >> 2;
      $751 = ($750*9)|0;
      $752 = (($751) + -9)|0;
      $753 = ($747|0)<($752|0);
      if ($753) {
       $754 = (($747) + 9216)|0;
       $755 = (($754|0) / 9)&-1;
       $$sum$i = (($755) + -1023)|0;
       $756 = (($$31$i) + ($$sum$i<<2)|0);
       $757 = (($754|0) % 9)&-1;
       $j$0221$i = (($757) + 1)|0;
       $758 = ($j$0221$i|0)<(9);
       if ($758) {
        $i$1222$i = 10;$j$0223$i = $j$0221$i;
        while(1) {
         $759 = ($i$1222$i*10)|0;
         $j$0$i = (($j$0223$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $759;
          break;
         } else {
          $i$1222$i = $759;$j$0223$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $760 = HEAP32[$756>>2]|0;
       $761 = (($760>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $762 = ($761|0)==(0);
       if ($762) {
        $$sum15$i = (($755) + -1022)|0;
        $763 = (($$31$i) + ($$sum15$i<<2)|0);
        $764 = ($763|0)==($z$3$lcssa$i|0);
        if ($764) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $756;$e$3$i = $e$1$i;
        } else {
         label = 221;
        }
       } else {
        label = 221;
       }
       do {
        if ((label|0) == 221) {
         label = 0;
         $765 = (($760>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $766 = $765 & 1;
         $767 = ($766|0)==(0);
         $$20$i = $767 ? 9007199254740992.0 : 9007199254740994.0;
         $768 = (($i$1$lcssa$i|0) / 2)&-1;
         $769 = ($761>>>0)<($768>>>0);
         do {
          if ($769) {
           $small$0$i = 0.5;
          } else {
           $770 = ($761|0)==($768|0);
           if ($770) {
            $$sum16$i = (($755) + -1022)|0;
            $771 = (($$31$i) + ($$sum16$i<<2)|0);
            $772 = ($771|0)==($z$3$lcssa$i|0);
            if ($772) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $773 = ($pl$0$i|0)==(0);
         do {
          if ($773) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $774 = HEAP8[$prefix$0$i>>0]|0;
           $775 = ($774<<24>>24)==(45);
           if (!($775)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $776 = -$$20$i;
           $777 = -$small$0$i;
           $round6$1$i = $776;$small$1$i = $777;
          }
         } while(0);
         $778 = (($760) - ($761))|0;
         HEAP32[$756>>2] = $778;
         $779 = $round6$1$i + $small$1$i;
         $780 = $779 != $round6$1$i;
         if (!($780)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $756;$e$3$i = $e$1$i;
          break;
         }
         $781 = (($778) + ($i$1$lcssa$i))|0;
         HEAP32[$756>>2] = $781;
         $782 = ($781>>>0)>(999999999);
         if ($782) {
          $a$5215$i = $a$3$lcssa$i;$d$2214$i = $756;
          while(1) {
           $783 = ((($d$2214$i)) + -4|0);
           HEAP32[$d$2214$i>>2] = 0;
           $784 = ($783>>>0)<($a$5215$i>>>0);
           if ($784) {
            $785 = ((($a$5215$i)) + -4|0);
            HEAP32[$785>>2] = 0;
            $a$6$i = $785;
           } else {
            $a$6$i = $a$5215$i;
           }
           $786 = HEAP32[$783>>2]|0;
           $787 = (($786) + 1)|0;
           HEAP32[$783>>2] = $787;
           $788 = ($787>>>0)>(999999999);
           if ($788) {
            $a$5215$i = $a$6$i;$d$2214$i = $783;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $783;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $756;
         }
         $789 = $a$5$lcssa$i;
         $790 = (($632) - ($789))|0;
         $791 = $790 >> 2;
         $792 = ($791*9)|0;
         $793 = HEAP32[$a$5$lcssa$i>>2]|0;
         $794 = ($793>>>0)<(10);
         if ($794) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $792;
          break;
         } else {
          $e$2210$i = $792;$i$2209$i = 10;
         }
         while(1) {
          $795 = ($i$2209$i*10)|0;
          $796 = (($e$2210$i) + 1)|0;
          $797 = ($793>>>0)<($795>>>0);
          if ($797) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $796;
           break;
          } else {
           $e$2210$i = $796;$i$2209$i = $795;
          }
         }
        }
       } while(0);
       $798 = ((($d$3$i)) + 4|0);
       $799 = ($z$3$lcssa$i>>>0)>($798>>>0);
       $$z$3$i = $799 ? $798 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $800 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $801 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($801)) {
        $$lcssa275$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $802 = ((($z$6$i)) + -4|0);
       $803 = HEAP32[$802>>2]|0;
       $804 = ($803|0)==(0);
       if ($804) {
        $z$6$i = $802;
       } else {
        $$lcssa275$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($744) {
        $805 = $745&1;
        $806 = $805 ^ 1;
        $$p$$i = (($806) + ($$p$i))|0;
        $807 = ($$p$$i|0)>($e$4$ph$i|0);
        $808 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $807 & $808;
        if ($or$cond6$i) {
         $809 = (($t$0) + -1)|0;
         $$neg152$i = (($$p$$i) + -1)|0;
         $810 = (($$neg152$i) - ($e$4$ph$i))|0;
         $$013$i = $809;$$210$i = $810;
        } else {
         $811 = (($t$0) + -2)|0;
         $812 = (($$p$$i) + -1)|0;
         $$013$i = $811;$$210$i = $812;
        }
        $813 = $fl$1$ & 8;
        $814 = ($813|0)==(0);
        if (!($814)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi302$iZ2D = $813;
         break;
        }
        do {
         if ($$lcssa275$i) {
          $815 = ((($z$6$i$lcssa)) + -4|0);
          $816 = HEAP32[$815>>2]|0;
          $817 = ($816|0)==(0);
          if ($817) {
           $j$2$i = 9;
           break;
          }
          $818 = (($816>>>0) % 10)&-1;
          $819 = ($818|0)==(0);
          if ($819) {
           $i$3205$i = 10;$j$1206$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $820 = ($i$3205$i*10)|0;
           $821 = (($j$1206$i) + 1)|0;
           $822 = (($816>>>0) % ($820>>>0))&-1;
           $823 = ($822|0)==(0);
           if ($823) {
            $i$3205$i = $820;$j$1206$i = $821;
           } else {
            $j$2$i = $821;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $824 = $$013$i | 32;
        $825 = ($824|0)==(102);
        $826 = $z$6$i$lcssa;
        $827 = (($826) - ($632))|0;
        $828 = $827 >> 2;
        $829 = ($828*9)|0;
        $830 = (($829) + -9)|0;
        if ($825) {
         $831 = (($830) - ($j$2$i))|0;
         $832 = ($831|0)<(0);
         $$21$i = $832 ? 0 : $831;
         $833 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $833 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi302$iZ2D = 0;
         break;
        } else {
         $834 = (($830) + ($e$4$ph$i))|0;
         $835 = (($834) - ($j$2$i))|0;
         $836 = ($835|0)<(0);
         $$23$i = $836 ? 0 : $835;
         $837 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $837 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi302$iZ2D = 0;
         break;
        }
       } else {
        $$pre301$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi302$iZ2D = $$pre301$i;
       }
      } while(0);
      $838 = $$311$i | $$pre$phi302$iZ2D;
      $839 = ($838|0)!=(0);
      $840 = $839&1;
      $841 = $$114$i | 32;
      $842 = ($841|0)==(102);
      if ($842) {
       $843 = ($e$4$ph$i|0)>(0);
       $844 = $843 ? $e$4$ph$i : 0;
       $$pn$i = $844;$estr$2$i = 0;
      } else {
       $845 = ($e$4$ph$i|0)<(0);
       $846 = $845 ? $800 : $e$4$ph$i;
       $847 = ($846|0)<(0);
       if ($847) {
        $848 = ($846|0)<(0);
        $849 = $848 << 31 >> 31;
        $$05$i79$i = $7;$850 = $846;$851 = $849;
        while(1) {
         $852 = (___uremdi3(($850|0),($851|0),10,0)|0);
         $853 = tempRet0;
         $854 = $852 | 48;
         $855 = $854&255;
         $856 = ((($$05$i79$i)) + -1|0);
         HEAP8[$856>>0] = $855;
         $857 = (___udivdi3(($850|0),($851|0),10,0)|0);
         $858 = tempRet0;
         $859 = ($851>>>0)>(9);
         $860 = ($850>>>0)>(4294967295);
         $861 = ($851|0)==(9);
         $862 = $861 & $860;
         $863 = $859 | $862;
         if ($863) {
          $$05$i79$i = $856;$850 = $857;$851 = $858;
         } else {
          $$lcssa461 = $856;$1179 = $857;$1180 = $858;
          break;
         }
        }
        $$0$lcssa$i84$i = $$lcssa461;$$01$lcssa$off0$i85$i = $1179;
       } else {
        $$0$lcssa$i84$i = $7;$$01$lcssa$off0$i85$i = $846;
       }
       $864 = ($$01$lcssa$off0$i85$i|0)==(0);
       if ($864) {
        $estr$1$ph$i = $$0$lcssa$i84$i;
       } else {
        $$12$i87$i = $$0$lcssa$i84$i;$y$03$i86$i = $$01$lcssa$off0$i85$i;
        while(1) {
         $865 = (($y$03$i86$i>>>0) % 10)&-1;
         $866 = $865 | 48;
         $867 = $866&255;
         $868 = ((($$12$i87$i)) + -1|0);
         HEAP8[$868>>0] = $867;
         $869 = (($y$03$i86$i>>>0) / 10)&-1;
         $870 = ($y$03$i86$i>>>0)<(10);
         if ($870) {
          $estr$1$ph$i = $868;
          break;
         } else {
          $$12$i87$i = $868;$y$03$i86$i = $869;
         }
        }
       }
       $871 = $estr$1$ph$i;
       $872 = (($9) - ($871))|0;
       $873 = ($872|0)<(2);
       if ($873) {
        $estr$1201$i = $estr$1$ph$i;
        while(1) {
         $874 = ((($estr$1201$i)) + -1|0);
         HEAP8[$874>>0] = 48;
         $875 = $874;
         $876 = (($9) - ($875))|0;
         $877 = ($876|0)<(2);
         if ($877) {
          $estr$1201$i = $874;
         } else {
          $estr$1$lcssa$i = $874;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $estr$1$ph$i;
       }
       $878 = $e$4$ph$i >> 31;
       $879 = $878 & 2;
       $880 = (($879) + 43)|0;
       $881 = $880&255;
       $882 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$882>>0] = $881;
       $883 = $$114$i&255;
       $884 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$884>>0] = $883;
       $885 = $884;
       $886 = (($9) - ($885))|0;
       $$pn$i = $886;$estr$2$i = $884;
      }
      $887 = (($pl$0$i) + 1)|0;
      $888 = (($887) + ($$311$i))|0;
      $l$1$i = (($888) + ($840))|0;
      $889 = (($l$1$i) + ($$pn$i))|0;
      $890 = $fl$1$ & 73728;
      $891 = ($890|0)==(0);
      $892 = ($w$1|0)>($889|0);
      $or$cond$i93$i = $891 & $892;
      if ($or$cond$i93$i) {
       $893 = (($w$1) - ($889))|0;
       $894 = ($893>>>0)>(256);
       $895 = $894 ? 256 : $893;
       _memset(($pad$i|0),32,($895|0))|0;
       $896 = ($893>>>0)>(255);
       if ($896) {
        $$01$i95$i = $893;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $897 = (($$01$i95$i) + -256)|0;
         $898 = ($897>>>0)>(255);
         if ($898) {
          $$01$i95$i = $897;
         } else {
          break;
         }
        }
        $899 = $893 & 255;
        $$0$lcssa$i97$i = $899;
       } else {
        $$0$lcssa$i97$i = $893;
       }
       (___fwritex($pad$i,$$0$lcssa$i97$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      $900 = ($890|0)==(65536);
      $or$cond$i100$i = $900 & $892;
      if ($or$cond$i100$i) {
       $901 = (($w$1) - ($889))|0;
       $902 = ($901>>>0)>(256);
       $903 = $902 ? 256 : $901;
       _memset(($pad$i|0),48,($903|0))|0;
       $904 = ($901>>>0)>(255);
       if ($904) {
        $$01$i102$i = $901;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $905 = (($$01$i102$i) + -256)|0;
         $906 = ($905>>>0)>(255);
         if ($906) {
          $$01$i102$i = $905;
         } else {
          break;
         }
        }
        $907 = $901 & 255;
        $$0$lcssa$i104$i = $907;
       } else {
        $$0$lcssa$i104$i = $901;
       }
       (___fwritex($pad$i,$$0$lcssa$i104$i,$f)|0);
      }
      if ($842) {
       $908 = ($a$8$ph$i>>>0)>($$31$i>>>0);
       $r$0$a$8$i = $908 ? $$31$i : $a$8$ph$i;
       $d$4191$i = $r$0$a$8$i;
       while(1) {
        $909 = HEAP32[$d$4191$i>>2]|0;
        $910 = ($909|0)==(0);
        if ($910) {
         $$1$lcssa$i112$i = $14;
        } else {
         $$12$i110$i = $14;$y$03$i109$i = $909;
         while(1) {
          $911 = (($y$03$i109$i>>>0) % 10)&-1;
          $912 = $911 | 48;
          $913 = $912&255;
          $914 = ((($$12$i110$i)) + -1|0);
          HEAP8[$914>>0] = $913;
          $915 = (($y$03$i109$i>>>0) / 10)&-1;
          $916 = ($y$03$i109$i>>>0)<(10);
          if ($916) {
           $$1$lcssa$i112$i = $914;
           break;
          } else {
           $$12$i110$i = $914;$y$03$i109$i = $915;
          }
         }
        }
        $917 = ($d$4191$i|0)==($r$0$a$8$i|0);
        do {
         if ($917) {
          $921 = ($$1$lcssa$i112$i|0)==($14|0);
          if (!($921)) {
           $s7$1$i = $$1$lcssa$i112$i;
           break;
          }
          HEAP8[$16>>0] = 48;
          $s7$1$i = $16;
         } else {
          $918 = ($$1$lcssa$i112$i>>>0)>($buf$i>>>0);
          if ($918) {
           $s7$0188$i = $$1$lcssa$i112$i;
          } else {
           $s7$1$i = $$1$lcssa$i112$i;
           break;
          }
          while(1) {
           $919 = ((($s7$0188$i)) + -1|0);
           HEAP8[$919>>0] = 48;
           $920 = ($919>>>0)>($buf$i>>>0);
           if ($920) {
            $s7$0188$i = $919;
           } else {
            $s7$1$i = $919;
            break;
           }
          }
         }
        } while(0);
        $922 = $s7$1$i;
        $923 = (($15) - ($922))|0;
        (___fwritex($s7$1$i,$923,$f)|0);
        $924 = ((($d$4191$i)) + 4|0);
        $925 = ($924>>>0)>($$31$i>>>0);
        if ($925) {
         $$lcssa470 = $924;
         break;
        } else {
         $d$4191$i = $924;
        }
       }
       $926 = ($838|0)==(0);
       if (!($926)) {
        (___fwritex(18006,1,$f)|0);
       }
       $927 = ($$lcssa470>>>0)<($z$6$i$lcssa>>>0);
       $928 = ($$311$i|0)>(0);
       $929 = $928 & $927;
       if ($929) {
        $$412184$i = $$311$i;$d$5183$i = $$lcssa470;
        while(1) {
         $930 = HEAP32[$d$5183$i>>2]|0;
         $931 = ($930|0)==(0);
         if ($931) {
          $s8$0180$i = $14;
          label = 289;
         } else {
          $$12$i119$i = $14;$y$03$i118$i = $930;
          while(1) {
           $932 = (($y$03$i118$i>>>0) % 10)&-1;
           $933 = $932 | 48;
           $934 = $933&255;
           $935 = ((($$12$i119$i)) + -1|0);
           HEAP8[$935>>0] = $934;
           $936 = (($y$03$i118$i>>>0) / 10)&-1;
           $937 = ($y$03$i118$i>>>0)<(10);
           if ($937) {
            $$lcssa471 = $935;
            break;
           } else {
            $$12$i119$i = $935;$y$03$i118$i = $936;
           }
          }
          $938 = ($$lcssa471>>>0)>($buf$i>>>0);
          if ($938) {
           $s8$0180$i = $$lcssa471;
           label = 289;
          } else {
           $s8$0$lcssa$i = $$lcssa471;
          }
         }
         if ((label|0) == 289) {
          while(1) {
           label = 0;
           $939 = ((($s8$0180$i)) + -1|0);
           HEAP8[$939>>0] = 48;
           $940 = ($939>>>0)>($buf$i>>>0);
           if ($940) {
            $s8$0180$i = $939;
            label = 289;
           } else {
            $s8$0$lcssa$i = $939;
            break;
           }
          }
         }
         $941 = ($$412184$i|0)>(9);
         $942 = $941 ? 9 : $$412184$i;
         (___fwritex($s8$0$lcssa$i,$942,$f)|0);
         $943 = ((($d$5183$i)) + 4|0);
         $944 = (($$412184$i) + -9)|0;
         $945 = ($943>>>0)<($z$6$i$lcssa>>>0);
         $946 = $941 & $945;
         if ($946) {
          $$412184$i = $944;$d$5183$i = $943;
         } else {
          $$412$lcssa$i = $944;
          break;
         }
        }
       } else {
        $$412$lcssa$i = $$311$i;
       }
       $947 = ($$412$lcssa$i|0)>(0);
       if ($947) {
        $948 = ($$412$lcssa$i>>>0)>(256);
        $949 = $948 ? 256 : $$412$lcssa$i;
        _memset(($pad$i|0),48,($949|0))|0;
        $950 = ($$412$lcssa$i>>>0)>(255);
        if ($950) {
         $$01$i126$i = $$412$lcssa$i;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $951 = (($$01$i126$i) + -256)|0;
          $952 = ($951>>>0)>(255);
          if ($952) {
           $$01$i126$i = $951;
          } else {
           break;
          }
         }
         $953 = $$412$lcssa$i & 255;
         $$0$lcssa$i128$i = $953;
        } else {
         $$0$lcssa$i128$i = $$412$lcssa$i;
        }
        (___fwritex($pad$i,$$0$lcssa$i128$i,$f)|0);
       }
      } else {
       $954 = ((($a$8$ph$i)) + 4|0);
       $z$6$$i = $$lcssa275$i ? $z$6$i$lcssa : $954;
       $955 = ($$311$i|0)>(-1);
       do {
        if ($955) {
         $956 = ($$pre$phi302$iZ2D|0)==(0);
         $$5196$i = $$311$i;$d$6195$i = $a$8$ph$i;
         while(1) {
          $957 = HEAP32[$d$6195$i>>2]|0;
          $958 = ($957|0)==(0);
          if ($958) {
           label = 303;
          } else {
           $$12$i134$i = $14;$y$03$i133$i = $957;
           while(1) {
            $959 = (($y$03$i133$i>>>0) % 10)&-1;
            $960 = $959 | 48;
            $961 = $960&255;
            $962 = ((($$12$i134$i)) + -1|0);
            HEAP8[$962>>0] = $961;
            $963 = (($y$03$i133$i>>>0) / 10)&-1;
            $964 = ($y$03$i133$i>>>0)<(10);
            if ($964) {
             $$12$i134$i$lcssa = $$12$i134$i;$$lcssa465 = $962;
             break;
            } else {
             $$12$i134$i = $962;$y$03$i133$i = $963;
            }
           }
           $965 = ($$lcssa465|0)==($14|0);
           if ($965) {
            label = 303;
           } else {
            $1181 = $$12$i134$i$lcssa;$s9$0$i = $$lcssa465;
           }
          }
          if ((label|0) == 303) {
           label = 0;
           HEAP8[$16>>0] = 48;
           $1181 = $14;$s9$0$i = $16;
          }
          $966 = ($d$6195$i|0)==($a$8$ph$i|0);
          do {
           if ($966) {
            (___fwritex($s9$0$i,1,$f)|0);
            $970 = ($$5196$i|0)<(1);
            $or$cond29$i = $956 & $970;
            if ($or$cond29$i) {
             $s9$2$i = $1181;
             break;
            }
            (___fwritex(18006,1,$f)|0);
            $s9$2$i = $1181;
           } else {
            $967 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($967) {
             $s9$1192$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $968 = ((($s9$1192$i)) + -1|0);
             HEAP8[$968>>0] = 48;
             $969 = ($968>>>0)>($buf$i>>>0);
             if ($969) {
              $s9$1192$i = $968;
             } else {
              $s9$2$i = $968;
              break;
             }
            }
           }
          } while(0);
          $971 = $s9$2$i;
          $972 = (($15) - ($971))|0;
          $973 = ($$5196$i|0)>($972|0);
          $974 = $973 ? $972 : $$5196$i;
          (___fwritex($s9$2$i,$974,$f)|0);
          $975 = (($$5196$i) - ($972))|0;
          $976 = ((($d$6195$i)) + 4|0);
          $977 = ($976>>>0)<($z$6$$i>>>0);
          $978 = ($975|0)>(-1);
          $979 = $977 & $978;
          if ($979) {
           $$5196$i = $975;$d$6195$i = $976;
          } else {
           $$lcssa467 = $975;
           break;
          }
         }
         $980 = ($$lcssa467|0)>(0);
         if (!($980)) {
          break;
         }
         $981 = ($$lcssa467>>>0)>(256);
         $982 = $981 ? 256 : $$lcssa467;
         _memset(($pad$i|0),48,($982|0))|0;
         $983 = ($$lcssa467>>>0)>(255);
         if ($983) {
          $$01$i141$i = $$lcssa467;
          while(1) {
           (___fwritex($pad$i,256,$f)|0);
           $984 = (($$01$i141$i) + -256)|0;
           $985 = ($984>>>0)>(255);
           if ($985) {
            $$01$i141$i = $984;
           } else {
            break;
           }
          }
          $986 = $$lcssa467 & 255;
          $$0$lcssa$i143$i = $986;
         } else {
          $$0$lcssa$i143$i = $$lcssa467;
         }
         (___fwritex($pad$i,$$0$lcssa$i143$i,$f)|0);
        } else {
        }
       } while(0);
       $987 = $estr$2$i;
       $988 = (($9) - ($987))|0;
       (___fwritex($estr$2$i,$988,$f)|0);
      }
      $989 = ($890|0)==(8192);
      $or$cond$i$i = $989 & $892;
      if ($or$cond$i$i) {
       $990 = (($w$1) - ($889))|0;
       $991 = ($990>>>0)>(256);
       $992 = $991 ? 256 : $990;
       _memset(($pad$i|0),32,($992|0))|0;
       $993 = ($990>>>0)>(255);
       if ($993) {
        $$01$i$i = $990;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $994 = (($$01$i$i) + -256)|0;
         $995 = ($994>>>0)>(255);
         if ($995) {
          $$01$i$i = $994;
         } else {
          break;
         }
        }
        $996 = $990 & 255;
        $$0$lcssa$i$i = $996;
       } else {
        $$0$lcssa$i$i = $990;
       }
       (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
      }
      $w$30$i = $892 ? $w$1 : $889;
      $$0$i = $w$30$i;
     } else {
      $441 = $t$0 & 32;
      $442 = ($441|0)!=(0);
      $443 = $442 ? 17990 : 17994;
      $444 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $445 = $442 ? 17998 : 18002;
      $pl$1$i = $444 ? 0 : $pl$0$i;
      $s1$0$i = $444 ? $445 : $443;
      $446 = (($pl$1$i) + 3)|0;
      $447 = $fl$1$ & 8192;
      $448 = ($447|0)==(0);
      $449 = ($w$1|0)>($446|0);
      $or$cond$i35$i = $448 & $449;
      if ($or$cond$i35$i) {
       $450 = (($w$1) - ($446))|0;
       $451 = ($450>>>0)>(256);
       $452 = $451 ? 256 : $450;
       _memset(($pad$i|0),32,($452|0))|0;
       $453 = ($450>>>0)>(255);
       if ($453) {
        $$01$i37$i = $450;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $454 = (($$01$i37$i) + -256)|0;
         $455 = ($454>>>0)>(255);
         if ($455) {
          $$01$i37$i = $454;
         } else {
          break;
         }
        }
        $456 = $450 & 255;
        $$0$lcssa$i39$i = $456;
       } else {
        $$0$lcssa$i39$i = $450;
       }
       (___fwritex($pad$i,$$0$lcssa$i39$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
      (___fwritex($s1$0$i,3,$f)|0);
      $457 = $fl$1$ & 73728;
      $458 = ($457|0)==(8192);
      $or$cond$i42$i = $458 & $449;
      if ($or$cond$i42$i) {
       $459 = (($w$1) - ($446))|0;
       $460 = ($459>>>0)>(256);
       $461 = $460 ? 256 : $459;
       _memset(($pad$i|0),32,($461|0))|0;
       $462 = ($459>>>0)>(255);
       if ($462) {
        $$01$i44$i = $459;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $463 = (($$01$i44$i) + -256)|0;
         $464 = ($463>>>0)>(255);
         if ($464) {
          $$01$i44$i = $463;
         } else {
          break;
         }
        }
        $465 = $459 & 255;
        $$0$lcssa$i46$i = $465;
       } else {
        $$0$lcssa$i46$i = $459;
       }
       (___fwritex($pad$i,$$0$lcssa$i46$i,$f)|0);
      }
      $466 = $449 ? $w$1 : $446;
      $$0$i = $466;
     }
    } while(0);
    $1165 = $288;$1166 = $261;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $1169 = $288;$1170 = $261;$a$2 = $fmt89;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 17954;$z$2 = $2;
   }
   }
  } while(0);
  if ((label|0) == 73) {
   label = 0;
   $285 = $t$1 & 32;
   $286 = ($261|0)==(0);
   $287 = ($288|0)==(0);
   $289 = $286 & $287;
   if ($289) {
    $363 = $261;$365 = $288;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 17954;
    label = 89;
   } else {
    $$012$i = $2;$291 = $261;$298 = $288;
    while(1) {
     $290 = $291 & 15;
     $292 = (17938 + ($290)|0);
     $293 = HEAP8[$292>>0]|0;
     $294 = $293&255;
     $295 = $294 | $285;
     $296 = $295&255;
     $297 = ((($$012$i)) + -1|0);
     HEAP8[$297>>0] = $296;
     $299 = (_bitshift64Lshr(($291|0),($298|0),4)|0);
     $300 = tempRet0;
     $301 = ($299|0)==(0);
     $302 = ($300|0)==(0);
     $303 = $301 & $302;
     if ($303) {
      $$lcssa482 = $297;
      break;
     } else {
      $$012$i = $297;$291 = $299;$298 = $300;
     }
    }
    $304 = $fl$3 & 8;
    $305 = ($304|0)==(0);
    if ($305) {
     $363 = $261;$365 = $288;$a$0 = $$lcssa482;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 17954;
     label = 89;
    } else {
     $306 = $t$1 >> 4;
     $307 = (17954 + ($306)|0);
     $363 = $261;$365 = $288;$a$0 = $$lcssa482;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $307;
     label = 89;
    }
   }
  }
  else if ((label|0) == 84) {
   label = 0;
   $332 = ($333>>>0)>(0);
   $334 = ($335>>>0)>(4294967295);
   $336 = ($333|0)==(0);
   $337 = $336 & $334;
   $338 = $332 | $337;
   if ($338) {
    $$05$i = $2;$339 = $335;$340 = $333;
    while(1) {
     $341 = (___uremdi3(($339|0),($340|0),10,0)|0);
     $342 = tempRet0;
     $343 = $341 | 48;
     $344 = $343&255;
     $345 = ((($$05$i)) + -1|0);
     HEAP8[$345>>0] = $344;
     $346 = (___udivdi3(($339|0),($340|0),10,0)|0);
     $347 = tempRet0;
     $348 = ($340>>>0)>(9);
     $349 = ($339>>>0)>(4294967295);
     $350 = ($340|0)==(9);
     $351 = $350 & $349;
     $352 = $348 | $351;
     if ($352) {
      $$05$i = $345;$339 = $346;$340 = $347;
     } else {
      $$lcssa478 = $345;$1171 = $346;$1172 = $347;
      break;
     }
    }
    $$0$lcssa$i53 = $$lcssa478;$$01$lcssa$off0$i = $1171;
   } else {
    $$0$lcssa$i53 = $2;$$01$lcssa$off0$i = $335;
   }
   $353 = ($$01$lcssa$off0$i|0)==(0);
   if ($353) {
    $363 = $335;$365 = $333;$a$0 = $$0$lcssa$i53;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 89;
   } else {
    $$12$i = $$0$lcssa$i53;$y$03$i = $$01$lcssa$off0$i;
    while(1) {
     $354 = (($y$03$i>>>0) % 10)&-1;
     $355 = $354 | 48;
     $356 = $355&255;
     $357 = ((($$12$i)) + -1|0);
     HEAP8[$357>>0] = $356;
     $358 = (($y$03$i>>>0) / 10)&-1;
     $359 = ($y$03$i>>>0)<(10);
     if ($359) {
      $363 = $335;$365 = $333;$a$0 = $357;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
      label = 89;
      break;
     } else {
      $$12$i = $357;$y$03$i = $358;
     }
    }
   }
  }
  else if ((label|0) == 94) {
   label = 0;
   $381 = (_memchr($a$1,0,$p$0)|0);
   $382 = ($381|0)==(0|0);
   $383 = $381;
   $384 = $a$1;
   $385 = (($383) - ($384))|0;
   $386 = (($a$1) + ($p$0)|0);
   $z$1 = $382 ? $386 : $381;
   $p$3 = $382 ? $p$0 : $385;
   $1169 = $288;$1170 = $261;$a$2 = $a$1;$fl$6 = $259;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 17954;$z$2 = $z$1;
  }
  else if ((label|0) == 97) {
   label = 0;
   $i$0180 = 0;$l$1179 = 0;$ws$0181 = $1173;
   while(1) {
    $389 = HEAP32[$ws$0181>>2]|0;
    $390 = ($389|0)==(0);
    if ($390) {
     $i$0$lcssa = $i$0180;$l$2 = $l$1179;
     break;
    }
    $391 = (_wctomb($mb,$389)|0);
    $392 = ($391|0)<(0);
    $393 = (($p$4274) - ($i$0180))|0;
    $394 = ($391>>>0)>($393>>>0);
    $or$cond22 = $392 | $394;
    if ($or$cond22) {
     $i$0$lcssa = $i$0180;$l$2 = $391;
     break;
    }
    $395 = ((($ws$0181)) + 4|0);
    $396 = (($391) + ($i$0180))|0;
    $397 = ($p$4274>>>0)>($396>>>0);
    if ($397) {
     $i$0180 = $396;$l$1179 = $391;$ws$0181 = $395;
    } else {
     $i$0$lcssa = $396;$l$2 = $391;
     break;
    }
   }
   $398 = ($l$2|0)<(0);
   if ($398) {
    $$0 = -1;
    label = 363;
    break;
   } else {
    $1175 = $1174;$1176 = $1173;$i$0$lcssa275 = $i$0$lcssa;
    label = 102;
   }
  }
  if ((label|0) == 89) {
   label = 0;
   $360 = ($p$2|0)>(-1);
   $361 = $fl$4 & -65537;
   $$fl$4 = $360 ? $361 : $fl$4;
   $362 = ($363|0)!=(0);
   $364 = ($365|0)!=(0);
   $366 = $362 | $364;
   $367 = ($p$2|0)!=(0);
   $or$cond = $366 | $367;
   if ($or$cond) {
    $368 = $a$0;
    $369 = (($3) - ($368))|0;
    $370 = $366&1;
    $371 = $370 ^ 1;
    $372 = (($371) + ($369))|0;
    $373 = ($p$2|0)>($372|0);
    $p$2$ = $373 ? $p$2 : $372;
    $1169 = $365;$1170 = $363;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1169 = $365;$1170 = $363;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 102) {
   label = 0;
   $399 = $fl$1$ & 73728;
   $400 = ($399|0)==(0);
   $401 = ($w$1|0)>($i$0$lcssa275|0);
   $or$cond$i64 = $400 & $401;
   if ($or$cond$i64) {
    $402 = (($w$1) - ($i$0$lcssa275))|0;
    $403 = ($402>>>0)>(256);
    $404 = $403 ? 256 : $402;
    _memset(($pad$i|0),32,($404|0))|0;
    $405 = ($402>>>0)>(255);
    if ($405) {
     $$01$i66 = $402;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $406 = (($$01$i66) + -256)|0;
      $407 = ($406>>>0)>(255);
      if ($407) {
       $$01$i66 = $406;
      } else {
       break;
      }
     }
     $408 = $402 & 255;
     $$0$lcssa$i68 = $408;
    } else {
     $$0$lcssa$i68 = $402;
    }
    (___fwritex($pad$i,$$0$lcssa$i68,$f)|0);
   }
   $409 = ($i$0$lcssa275|0)==(0);
   L465: do {
    if (!($409)) {
     $i$1191 = 0;$ws$1192 = $1176;
     while(1) {
      $410 = HEAP32[$ws$1192>>2]|0;
      $411 = ($410|0)==(0);
      if ($411) {
       break L465;
      }
      $412 = (_wctomb($mb,$410)|0);
      $413 = (($412) + ($i$1191))|0;
      $414 = ($413|0)>($i$0$lcssa275|0);
      if ($414) {
       break L465;
      }
      $415 = ((($ws$1192)) + 4|0);
      (___fwritex($mb,$412,$f)|0);
      $416 = ($413>>>0)<($i$0$lcssa275>>>0);
      if ($416) {
       $i$1191 = $413;$ws$1192 = $415;
      } else {
       break;
      }
     }
    }
   } while(0);
   $417 = ($399|0)==(8192);
   $or$cond$i71 = $417 & $401;
   if ($or$cond$i71) {
    $418 = (($w$1) - ($i$0$lcssa275))|0;
    $419 = ($418>>>0)>(256);
    $420 = $419 ? 256 : $418;
    _memset(($pad$i|0),32,($420|0))|0;
    $421 = ($418>>>0)>(255);
    if ($421) {
     $$01$i73 = $418;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $422 = (($$01$i73) + -256)|0;
      $423 = ($422>>>0)>(255);
      if ($423) {
       $$01$i73 = $422;
      } else {
       break;
      }
     }
     $424 = $418 & 255;
     $$0$lcssa$i75 = $424;
    } else {
     $$0$lcssa$i75 = $418;
    }
    (___fwritex($pad$i,$$0$lcssa$i75,$f)|0);
   }
   $425 = $401 ? $w$1 : $i$0$lcssa275;
   $1165 = $288;$1166 = $1175;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $425;$l10n$0 = $l10n$3;
   continue;
  }
  $997 = $z$2;
  $998 = $a$2;
  $999 = (($997) - ($998))|0;
  $1000 = ($p$5|0)<($999|0);
  $$p$5 = $1000 ? $999 : $p$5;
  $1001 = (($pl$2) + ($$p$5))|0;
  $1002 = ($w$1|0)<($1001|0);
  $w$2 = $1002 ? $1001 : $w$1;
  $1003 = $fl$6 & 73728;
  $1004 = ($1003|0)==(0);
  $1005 = ($w$2|0)>($1001|0);
  $or$cond$i81 = $1004 & $1005;
  if ($or$cond$i81) {
   $1006 = (($w$2) - ($1001))|0;
   $1007 = ($1006>>>0)>(256);
   $1008 = $1007 ? 256 : $1006;
   _memset(($pad$i|0),32,($1008|0))|0;
   $1009 = ($1006>>>0)>(255);
   if ($1009) {
    $$01$i83 = $1006;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1010 = (($$01$i83) + -256)|0;
     $1011 = ($1010>>>0)>(255);
     if ($1011) {
      $$01$i83 = $1010;
     } else {
      break;
     }
    }
    $1012 = $1006 & 255;
    $$0$lcssa$i85 = $1012;
   } else {
    $$0$lcssa$i85 = $1006;
   }
   (___fwritex($pad$i,$$0$lcssa$i85,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $1013 = ($1003|0)==(65536);
  $or$cond$i57 = $1013 & $1005;
  if ($or$cond$i57) {
   $1014 = (($w$2) - ($1001))|0;
   $1015 = ($1014>>>0)>(256);
   $1016 = $1015 ? 256 : $1014;
   _memset(($pad$i|0),48,($1016|0))|0;
   $1017 = ($1014>>>0)>(255);
   if ($1017) {
    $$01$i59 = $1014;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1018 = (($$01$i59) + -256)|0;
     $1019 = ($1018>>>0)>(255);
     if ($1019) {
      $$01$i59 = $1018;
     } else {
      break;
     }
    }
    $1020 = $1014 & 255;
    $$0$lcssa$i61 = $1020;
   } else {
    $$0$lcssa$i61 = $1014;
   }
   (___fwritex($pad$i,$$0$lcssa$i61,$f)|0);
  }
  $1021 = ($$p$5|0)>($999|0);
  if ($1021) {
   $1022 = (($$p$5) - ($999))|0;
   $1023 = ($1022>>>0)>(256);
   $1024 = $1023 ? 256 : $1022;
   _memset(($pad$i|0),48,($1024|0))|0;
   $1025 = ($1022>>>0)>(255);
   if ($1025) {
    $$01$i44 = $1022;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1026 = (($$01$i44) + -256)|0;
     $1027 = ($1026>>>0)>(255);
     if ($1027) {
      $$01$i44 = $1026;
     } else {
      break;
     }
    }
    $1028 = $1022 & 255;
    $$0$lcssa$i46 = $1028;
   } else {
    $$0$lcssa$i46 = $1022;
   }
   (___fwritex($pad$i,$$0$lcssa$i46,$f)|0);
  }
  (___fwritex($a$2,$999,$f)|0);
  $1029 = ($1003|0)==(8192);
  $or$cond$i = $1029 & $1005;
  if ($or$cond$i) {
   $1030 = (($w$2) - ($1001))|0;
   $1031 = ($1030>>>0)>(256);
   $1032 = $1031 ? 256 : $1030;
   _memset(($pad$i|0),32,($1032|0))|0;
   $1033 = ($1030>>>0)>(255);
   if ($1033) {
    $$01$i = $1030;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1034 = (($$01$i) + -256)|0;
     $1035 = ($1034>>>0)>(255);
     if ($1035) {
      $$01$i = $1034;
     } else {
      break;
     }
    }
    $1036 = $1030 & 255;
    $$0$lcssa$i = $1036;
   } else {
    $$0$lcssa$i = $1030;
   }
   (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  }
  $1165 = $1169;$1166 = $1170;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 344) {
  $1037 = ($f|0)==(0|0);
  if (!($1037)) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  $1038 = ($l10n$0$lcssa|0)==(0);
  if ($1038) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$2166 = 1;
  }
  while(1) {
   $1039 = (($nl_type) + ($i$2166<<2)|0);
   $1040 = HEAP32[$1039>>2]|0;
   $1041 = ($1040|0)==(0);
   if ($1041) {
    $i$2166$lcssa = $i$2166;
    break;
   }
   $1043 = (($nl_arg) + ($i$2166<<3)|0);
   $1044 = ($1040>>>0)>(20);
   L523: do {
    if (!($1044)) {
     do {
      switch ($1040|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $1045 = $arglist_current35;
       $1046 = ((0) + 4|0);
       $expanded148 = $1046;
       $expanded147 = (($expanded148) - 1)|0;
       $1047 = (($1045) + ($expanded147))|0;
       $1048 = ((0) + 4|0);
       $expanded152 = $1048;
       $expanded151 = (($expanded152) - 1)|0;
       $expanded150 = $expanded151 ^ -1;
       $1049 = $1047 & $expanded150;
       $1050 = $1049;
       $1051 = HEAP32[$1050>>2]|0;
       $arglist_next36 = ((($1050)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$1043>>2] = $1051;
       break L523;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $1052 = $arglist_current38;
       $1053 = ((0) + 4|0);
       $expanded155 = $1053;
       $expanded154 = (($expanded155) - 1)|0;
       $1054 = (($1052) + ($expanded154))|0;
       $1055 = ((0) + 4|0);
       $expanded159 = $1055;
       $expanded158 = (($expanded159) - 1)|0;
       $expanded157 = $expanded158 ^ -1;
       $1056 = $1054 & $expanded157;
       $1057 = $1056;
       $1058 = HEAP32[$1057>>2]|0;
       $arglist_next39 = ((($1057)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $1059 = ($1058|0)<(0);
       $1060 = $1059 << 31 >> 31;
       $1061 = $1043;
       $1062 = $1061;
       HEAP32[$1062>>2] = $1058;
       $1063 = (($1061) + 4)|0;
       $1064 = $1063;
       HEAP32[$1064>>2] = $1060;
       break L523;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $1065 = $arglist_current41;
       $1066 = ((0) + 4|0);
       $expanded162 = $1066;
       $expanded161 = (($expanded162) - 1)|0;
       $1067 = (($1065) + ($expanded161))|0;
       $1068 = ((0) + 4|0);
       $expanded166 = $1068;
       $expanded165 = (($expanded166) - 1)|0;
       $expanded164 = $expanded165 ^ -1;
       $1069 = $1067 & $expanded164;
       $1070 = $1069;
       $1071 = HEAP32[$1070>>2]|0;
       $arglist_next42 = ((($1070)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $1072 = $1043;
       $1073 = $1072;
       HEAP32[$1073>>2] = $1071;
       $1074 = (($1072) + 4)|0;
       $1075 = $1074;
       HEAP32[$1075>>2] = 0;
       break L523;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $1076 = $arglist_current44;
       $1077 = ((0) + 8|0);
       $expanded169 = $1077;
       $expanded168 = (($expanded169) - 1)|0;
       $1078 = (($1076) + ($expanded168))|0;
       $1079 = ((0) + 8|0);
       $expanded173 = $1079;
       $expanded172 = (($expanded173) - 1)|0;
       $expanded171 = $expanded172 ^ -1;
       $1080 = $1078 & $expanded171;
       $1081 = $1080;
       $1082 = $1081;
       $1083 = $1082;
       $1084 = HEAP32[$1083>>2]|0;
       $1085 = (($1082) + 4)|0;
       $1086 = $1085;
       $1087 = HEAP32[$1086>>2]|0;
       $arglist_next45 = ((($1081)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1088 = $1043;
       $1089 = $1088;
       HEAP32[$1089>>2] = $1084;
       $1090 = (($1088) + 4)|0;
       $1091 = $1090;
       HEAP32[$1091>>2] = $1087;
       break L523;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1092 = $arglist_current47;
       $1093 = ((0) + 4|0);
       $expanded176 = $1093;
       $expanded175 = (($expanded176) - 1)|0;
       $1094 = (($1092) + ($expanded175))|0;
       $1095 = ((0) + 4|0);
       $expanded180 = $1095;
       $expanded179 = (($expanded180) - 1)|0;
       $expanded178 = $expanded179 ^ -1;
       $1096 = $1094 & $expanded178;
       $1097 = $1096;
       $1098 = HEAP32[$1097>>2]|0;
       $arglist_next48 = ((($1097)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1099 = $1098&65535;
       $1100 = $1099 << 16 >> 16;
       $1101 = ($1100|0)<(0);
       $1102 = $1101 << 31 >> 31;
       $1103 = $1043;
       $1104 = $1103;
       HEAP32[$1104>>2] = $1100;
       $1105 = (($1103) + 4)|0;
       $1106 = $1105;
       HEAP32[$1106>>2] = $1102;
       break L523;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1107 = $arglist_current50;
       $1108 = ((0) + 4|0);
       $expanded183 = $1108;
       $expanded182 = (($expanded183) - 1)|0;
       $1109 = (($1107) + ($expanded182))|0;
       $1110 = ((0) + 4|0);
       $expanded187 = $1110;
       $expanded186 = (($expanded187) - 1)|0;
       $expanded185 = $expanded186 ^ -1;
       $1111 = $1109 & $expanded185;
       $1112 = $1111;
       $1113 = HEAP32[$1112>>2]|0;
       $arglist_next51 = ((($1112)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1113 & 65535;
       $1114 = $1043;
       $1115 = $1114;
       HEAP32[$1115>>2] = $$mask1$i;
       $1116 = (($1114) + 4)|0;
       $1117 = $1116;
       HEAP32[$1117>>2] = 0;
       break L523;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1118 = $arglist_current53;
       $1119 = ((0) + 4|0);
       $expanded190 = $1119;
       $expanded189 = (($expanded190) - 1)|0;
       $1120 = (($1118) + ($expanded189))|0;
       $1121 = ((0) + 4|0);
       $expanded194 = $1121;
       $expanded193 = (($expanded194) - 1)|0;
       $expanded192 = $expanded193 ^ -1;
       $1122 = $1120 & $expanded192;
       $1123 = $1122;
       $1124 = HEAP32[$1123>>2]|0;
       $arglist_next54 = ((($1123)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1125 = $1124&255;
       $1126 = $1125 << 24 >> 24;
       $1127 = ($1126|0)<(0);
       $1128 = $1127 << 31 >> 31;
       $1129 = $1043;
       $1130 = $1129;
       HEAP32[$1130>>2] = $1126;
       $1131 = (($1129) + 4)|0;
       $1132 = $1131;
       HEAP32[$1132>>2] = $1128;
       break L523;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1133 = $arglist_current56;
       $1134 = ((0) + 4|0);
       $expanded197 = $1134;
       $expanded196 = (($expanded197) - 1)|0;
       $1135 = (($1133) + ($expanded196))|0;
       $1136 = ((0) + 4|0);
       $expanded201 = $1136;
       $expanded200 = (($expanded201) - 1)|0;
       $expanded199 = $expanded200 ^ -1;
       $1137 = $1135 & $expanded199;
       $1138 = $1137;
       $1139 = HEAP32[$1138>>2]|0;
       $arglist_next57 = ((($1138)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1139 & 255;
       $1140 = $1043;
       $1141 = $1140;
       HEAP32[$1141>>2] = $$mask$i;
       $1142 = (($1140) + 4)|0;
       $1143 = $1142;
       HEAP32[$1143>>2] = 0;
       break L523;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       $1144 = $arglist_current59;
       $1145 = ((0) + 8|0);
       $expanded204 = $1145;
       $expanded203 = (($expanded204) - 1)|0;
       $1146 = (($1144) + ($expanded203))|0;
       $1147 = ((0) + 8|0);
       $expanded208 = $1147;
       $expanded207 = (($expanded208) - 1)|0;
       $expanded206 = $expanded207 ^ -1;
       $1148 = $1146 & $expanded206;
       $1149 = $1148;
       $1150 = +HEAPF64[$1149>>3];
       $arglist_next60 = ((($1149)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$1043>>3] = $1150;
       break L523;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       $1151 = $arglist_current62;
       $1152 = ((0) + 8|0);
       $expanded211 = $1152;
       $expanded210 = (($expanded211) - 1)|0;
       $1153 = (($1151) + ($expanded210))|0;
       $1154 = ((0) + 8|0);
       $expanded215 = $1154;
       $expanded214 = (($expanded215) - 1)|0;
       $expanded213 = $expanded214 ^ -1;
       $1155 = $1153 & $expanded213;
       $1156 = $1155;
       $1157 = +HEAPF64[$1156>>3];
       $arglist_next63 = ((($1156)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$1043>>3] = $1157;
       break L523;
       break;
      }
      default: {
       break L523;
      }
      }
     } while(0);
    }
   } while(0);
   $1158 = (($i$2166) + 1)|0;
   $1159 = ($1158|0)<(10);
   if ($1159) {
    $i$2166 = $1158;
   } else {
    $$0 = 1;
    label = 363;
    break;
   }
  }
  if ((label|0) == 363) {
   STACKTOP = sp;return ($$0|0);
  }
  $1042 = ($i$2166$lcssa|0)<(10);
  if ($1042) {
   $i$3164 = $i$2166$lcssa;
  } else {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1162 = (($nl_type) + ($i$3164<<2)|0);
   $1163 = HEAP32[$1162>>2]|0;
   $1164 = ($1163|0)==(0);
   $1161 = (($i$3164) + 1)|0;
   if (!($1164)) {
    $$0 = -1;
    label = 363;
    break;
   }
   $1160 = ($1161|0)<(10);
   if ($1160) {
    $i$3164 = $1161;
   } else {
    $$0 = 1;
    label = 363;
    break;
   }
  }
  if ((label|0) == 363) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 363) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[4420>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (4460 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (4460 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[4420>>2] = $22;
     } else {
      $23 = HEAP32[(4436)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(4428)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (4460 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (4460 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[4420>>2] = $74;
       $89 = $34;
      } else {
       $75 = HEAP32[(4436)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(4428)>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = ($89|0)==(0);
     if (!($88)) {
      $90 = HEAP32[(4440)>>2]|0;
      $91 = $89 >>> 3;
      $92 = $91 << 1;
      $93 = (4460 + ($92<<2)|0);
      $94 = HEAP32[4420>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[4420>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (4460 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (4460 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(4436)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(4428)>>2] = $81;
     HEAP32[(4440)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(4424)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (4724 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(4436)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (4724 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(4424)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(4424)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(4436)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(4436)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(4436)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(4428)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(4440)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (4460 + ($229<<2)|0);
       $231 = HEAP32[4420>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[4420>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (4460 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (4460 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(4436)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(4428)>>2] = $rsize$0$i$lcssa;
      HEAP32[(4440)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(4424)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (4724 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (4724 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(4428)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(4436)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (4724 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(4424)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(4424)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(4436)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(4436)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(4436)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (4460 + ($424<<2)|0);
          $426 = HEAP32[4420>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[4420>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (4460 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (4460 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(4436)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (4724 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(4424)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(4424)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(4436)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(4436)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(4428)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(4440)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(4440)>>2] = $514;
   HEAP32[(4428)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(4428)>>2] = 0;
   HEAP32[(4440)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(4432)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(4432)>>2] = $528;
  $529 = HEAP32[(4444)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(4444)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[4892>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(4900)>>2] = $538;
    HEAP32[(4896)>>2] = $538;
    HEAP32[(4904)>>2] = -1;
    HEAP32[(4908)>>2] = -1;
    HEAP32[(4912)>>2] = 0;
    HEAP32[(4864)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[4892>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(4900)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(4860)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(4852)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(4864)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(4444)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (4868);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(4432)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(4896)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(4852)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(4860)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(4900)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(4864)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(4864)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(4852)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(4852)>>2] = $632;
  $633 = HEAP32[(4856)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(4856)>>2] = $632;
  }
  $635 = HEAP32[(4444)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(4436)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(4436)>>2] = $tbase$255$i;
    }
    HEAP32[(4868)>>2] = $tbase$255$i;
    HEAP32[(4872)>>2] = $tsize$254$i;
    HEAP32[(4880)>>2] = 0;
    $640 = HEAP32[4892>>2]|0;
    HEAP32[(4456)>>2] = $640;
    HEAP32[(4452)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (4460 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (4460 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (4460 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(4444)>>2] = $654;
    HEAP32[(4432)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(4908)>>2]|0;
    HEAP32[(4448)>>2] = $659;
   } else {
    $sp$084$i = (4868);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(4432)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(4444)>>2] = $684;
       HEAP32[(4432)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(4908)>>2]|0;
       HEAP32[(4448)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(4436)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(4436)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (4868);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (4868);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(4432)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(4432)>>2] = $730;
        HEAP32[(4444)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(4440)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(4428)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(4428)>>2] = $736;
         HEAP32[(4440)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L332: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (4460 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[4420>>2]|0;
            $763 = $762 & $761;
            HEAP32[4420>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (4724 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(4424)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(4424)>>2] = $806;
             break L332;
            } else {
             $807 = HEAP32[(4436)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L332;
             }
            }
           } while(0);
           $814 = HEAP32[(4436)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(4436)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (4460 + ($840<<2)|0);
         $842 = HEAP32[4420>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[4420>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (4460 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (4460 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(4436)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (4724 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(4424)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(4424)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L418: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(4436)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(4436)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (4868);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(4444)>>2] = $953;
    HEAP32[(4432)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(4908)>>2]|0;
    HEAP32[(4448)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(4868)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(4868)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(4868)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(4868)+12>>2]|0;
    HEAP32[(4868)>>2] = $tbase$255$i;
    HEAP32[(4872)>>2] = $tsize$254$i;
    HEAP32[(4880)>>2] = 0;
    HEAP32[(4876)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (4460 + ($977<<2)|0);
      $979 = HEAP32[4420>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[4420>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (4460 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (4460 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(4436)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (4724 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(4424)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(4424)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(4436)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(4436)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(4432)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(4432)>>2] = $1062;
   $1063 = HEAP32[(4444)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(4444)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(4436)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(4440)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(4428)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (4460 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[4420>>2]|0;
     $36 = $35 & $34;
     HEAP32[4420>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (4724 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(4424)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(4424)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(4436)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(4436)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(4436)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(4444)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(4432)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(4432)>>2] = $120;
   HEAP32[(4444)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(4440)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(4440)>>2] = 0;
   HEAP32[(4428)>>2] = 0;
   return;
  }
  $125 = HEAP32[(4440)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(4428)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(4428)>>2] = $128;
   HEAP32[(4440)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (4460 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(4436)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[4420>>2]|0;
     $152 = $151 & $150;
     HEAP32[4420>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(4436)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(4436)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(4436)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (4724 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(4424)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(4424)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(4436)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(4436)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(4436)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(4440)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(4428)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (4460 + ($233<<2)|0);
  $235 = HEAP32[4420>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[4420>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (4460 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (4460 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(4436)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (4724 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(4424)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(4424)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(4436)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(4436)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(4452)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(4452)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (4876);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(4452)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(4436)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(4900)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[(4444)>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[(4432)>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[(4444)>>2] = $36;
  HEAP32[(4432)>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[(4440)>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[(4428)>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[(4428)>>2] = $storemerge21;
  HEAP32[(4440)>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = (4460 + ($77<<2)|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = ((($74)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[4420>>2]|0;
    $88 = $87 & $86;
    HEAP32[4420>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = ((($76)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($76)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = ((($74)) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = ((($R$0)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = ((($R$0)) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = ((($101)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = ((($98)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (4724 + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[(4424)>>2]|0;
      $131 = $130 & $129;
      HEAP32[(4424)>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[(4436)>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = ((($96)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = ((($96)) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[(4436)>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = ((($R$1)) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = ((($R$1)) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = ((($143)) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[(4436)>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = ((($R$1)) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = ((($149)) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(4436)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(4440)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[(4428)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (4460 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[4420>>2]|0;
     $32 = $31 & $30;
     HEAP32[4420>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre51 = ((($20)) + 8|0);
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi52Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = ((($R$0)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = ((($R$0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (4724 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(4424)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(4424)>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(4436)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[(4436)>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$1)) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$1)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[(4436)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$1)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[(4436)>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[(4444)>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[(4432)>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[(4432)>>2] = $115;
   HEAP32[(4444)>>2] = $$0;
   $116 = $115 | 1;
   $117 = ((($$0)) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[(4440)>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[(4440)>>2] = 0;
   HEAP32[(4428)>>2] = 0;
   return;
  }
  $120 = HEAP32[(4440)>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(4428)>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[(4428)>>2] = $123;
   HEAP32[(4440)>>2] = $$0;
   $124 = $123 | 1;
   $125 = ((($$0)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = (4460 + ($135<<2)|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($132)) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[4420>>2]|0;
     $146 = $145 & $144;
     HEAP32[4420>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre49 = ((($134)) + 8|0);
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($134)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = ((($132)) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi50Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = ((($R7$0)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = ((($R7$0)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = ((($159)) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = ((($156)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (4724 + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond39 = ($R7$1|0)==(0|0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[(4424)>>2]|0;
       $189 = $188 & $187;
       HEAP32[(4424)>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[(4436)>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = ((($154)) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = ((($154)) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[(4436)>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($R7$1)) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($R7$1)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(4436)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($R7$1)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = ((($$0)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[(4440)>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[(4428)>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = ((($$0)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (4460 + ($224<<2)|0);
  $226 = HEAP32[4420>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[4420>>2] = $230;
   $$pre = (($224) + 2)|0;
   $$pre48 = (4460 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre48;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = (4460 + ($$sum7<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(4436)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = ((($F16$0)) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = ((($$0)) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = ((($$0)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = (4724 + ($I19$0<<2)|0);
 $264 = ((($$0)) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = ((($$0)) + 16|0);
 $266 = ((($$0)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(4424)>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(4424)>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = ((($$0)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$0)) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = ((($$0)) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ((($275)) + 4|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & -8;
 $279 = ($278|0)==($$1|0);
 L191: do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0|0)==(31);
   $281 = $I19$0 >>> 1;
   $282 = (25 - ($281))|0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;$T$042 = $275;
   while(1) {
    $291 = $K20$043 >>> 31;
    $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = ((($287)) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;$T$042 = $287;
    }
   }
   $294 = HEAP32[(4436)>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = ((($$0)) + 24|0);
   HEAP32[$296>>2] = $T$042$lcssa;
   $297 = ((($$0)) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = ((($$0)) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = ((($T$0$lcssa)) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[(4436)>>2]|0;
 $302 = ($300>>>0)>=($301>>>0);
 $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = $302 & $not$;
 if (!($303)) {
  _abort();
  // unreachable;
 }
 $304 = ((($300)) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = ((($$0)) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = ((($$0)) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = ((($$0)) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function __ZNSt3__18ios_base4InitC2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum$i = 0, $$sum$i1 = 0, $$sum$i11 = 0, $$sum$i9 = 0, $$sum1$i = 0, $$sum1$i10 = 0, $$sum1$i12 = 0, $$sum1$i2 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[_stdin>>2]|0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(5596,$0,5652);
 HEAP32[4916>>2] = (6360);
 HEAP32[(4924)>>2] = (6380);
 HEAP32[(4920)>>2] = 0;
 $1 = HEAP32[6348>>2]|0;
 $2 = (4916 + ($1)|0);
 __THREW__ = 0;
 invoke_vii(490,($2|0),(5596|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev((4924));
  ___resumeException($5|0);
  // unreachable;
 }
 $$sum$i = (($1) + 72)|0;
 $7 = (4916 + ($$sum$i)|0);
 HEAP32[$7>>2] = 0;
 $$sum1$i = (($1) + 76)|0;
 $8 = (4916 + ($$sum1$i)|0);
 HEAP32[$8>>2] = -1;
 $9 = HEAP32[_stdout>>2]|0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(5700,$9,(5660));
 HEAP32[5004>>2] = (6440);
 HEAP32[(5008)>>2] = (6460);
 $10 = HEAP32[6428>>2]|0;
 $11 = (5004 + ($10)|0);
 __THREW__ = 0;
 invoke_vii(490,($11|0),(5700|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev((5008));
  ___resumeException($14|0);
  // unreachable;
 }
 $$sum$i1 = (($10) + 72)|0;
 $16 = (5004 + ($$sum$i1)|0);
 HEAP32[$16>>2] = 0;
 $$sum1$i2 = (($10) + 76)|0;
 $17 = (5004 + ($$sum1$i2)|0);
 HEAP32[$17>>2] = -1;
 $18 = HEAP32[_stderr>>2]|0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(5748,$18,(5668));
 HEAP32[5088>>2] = (6440);
 HEAP32[(5092)>>2] = (6460);
 $19 = (5088 + ($10)|0);
 __THREW__ = 0;
 invoke_vii(490,($19|0),(5748|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev((5092));
  ___resumeException($22|0);
  // unreachable;
 }
 $24 = (5088 + ($$sum$i1)|0);
 HEAP32[$24>>2] = 0;
 $25 = (5088 + ($$sum1$i2)|0);
 HEAP32[$25>>2] = -1;
 $26 = HEAP32[5088>>2]|0;
 $27 = ((($26)) + -12|0);
 $28 = HEAP32[$27>>2]|0;
 $$sum = (($28) + 24)|0;
 $29 = (5088 + ($$sum)|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP32[5172>>2] = (6440);
 HEAP32[(5176)>>2] = (6460);
 $31 = (5172 + ($10)|0);
 __THREW__ = 0;
 invoke_vii(490,($31|0),($30|0));
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 if ($33) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev((5176));
  ___resumeException($34|0);
  // unreachable;
 }
 $36 = (5172 + ($$sum$i1)|0);
 HEAP32[$36>>2] = 0;
 $37 = (5172 + ($$sum1$i2)|0);
 HEAP32[$37>>2] = -1;
 $38 = HEAP32[4916>>2]|0;
 $39 = ((($38)) + -12|0);
 $40 = HEAP32[$39>>2]|0;
 $$sum19 = (($40) + 72)|0;
 $41 = (4916 + ($$sum19)|0);
 HEAP32[$41>>2] = 5004;
 $42 = HEAP32[5088>>2]|0;
 $43 = ((($42)) + -12|0);
 $44 = HEAP32[$43>>2]|0;
 $$sum20 = (($44) + 4)|0;
 $45 = (5088 + ($$sum20)|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 | 8192;
 HEAP32[$45>>2] = $47;
 $48 = HEAP32[5088>>2]|0;
 $49 = ((($48)) + -12|0);
 $50 = HEAP32[$49>>2]|0;
 $$sum21 = (($50) + 72)|0;
 $51 = (5088 + ($$sum21)|0);
 HEAP32[$51>>2] = 5004;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(5796,$0,(5676));
 HEAP32[5256>>2] = (6400);
 HEAP32[(5264)>>2] = (6420);
 HEAP32[(5260)>>2] = 0;
 $52 = HEAP32[6388>>2]|0;
 $53 = (5256 + ($52)|0);
 __THREW__ = 0;
 invoke_vii(490,($53|0),(5796|0));
 $54 = __THREW__; __THREW__ = 0;
 $55 = $54&1;
 if ($55) {
  $56 = ___cxa_find_matching_catch()|0;
  $57 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev((5264));
  ___resumeException($56|0);
  // unreachable;
 }
 $$sum$i9 = (($52) + 72)|0;
 $58 = (5256 + ($$sum$i9)|0);
 HEAP32[$58>>2] = 0;
 $$sum1$i10 = (($52) + 76)|0;
 $59 = (5256 + ($$sum1$i10)|0);
 HEAP32[$59>>2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(5852,$9,(5684));
 HEAP32[5344>>2] = (6480);
 HEAP32[(5348)>>2] = (6500);
 $60 = HEAP32[6468>>2]|0;
 $61 = (5344 + ($60)|0);
 __THREW__ = 0;
 invoke_vii(490,($61|0),(5852|0));
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if ($63) {
  $64 = ___cxa_find_matching_catch()|0;
  $65 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev((5348));
  ___resumeException($64|0);
  // unreachable;
 }
 $$sum$i11 = (($60) + 72)|0;
 $66 = (5344 + ($$sum$i11)|0);
 HEAP32[$66>>2] = 0;
 $$sum1$i12 = (($60) + 76)|0;
 $67 = (5344 + ($$sum1$i12)|0);
 HEAP32[$67>>2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(5900,$18,(5692));
 HEAP32[5428>>2] = (6480);
 HEAP32[(5432)>>2] = (6500);
 $68 = (5428 + ($60)|0);
 __THREW__ = 0;
 invoke_vii(490,($68|0),(5900|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch()|0;
  $72 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev((5432));
  ___resumeException($71|0);
  // unreachable;
 }
 $73 = (5428 + ($$sum$i11)|0);
 HEAP32[$73>>2] = 0;
 $74 = (5428 + ($$sum1$i12)|0);
 HEAP32[$74>>2] = -1;
 $75 = HEAP32[5428>>2]|0;
 $76 = ((($75)) + -12|0);
 $77 = HEAP32[$76>>2]|0;
 $$sum22 = (($77) + 24)|0;
 $78 = (5428 + ($$sum22)|0);
 $79 = HEAP32[$78>>2]|0;
 HEAP32[5512>>2] = (6480);
 HEAP32[(5516)>>2] = (6500);
 $80 = (5512 + ($60)|0);
 __THREW__ = 0;
 invoke_vii(490,($80|0),($79|0));
 $81 = __THREW__; __THREW__ = 0;
 $82 = $81&1;
 if ($82) {
  $83 = ___cxa_find_matching_catch()|0;
  $84 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev((5516));
  ___resumeException($83|0);
  // unreachable;
 } else {
  $85 = (5512 + ($$sum$i11)|0);
  HEAP32[$85>>2] = 0;
  $86 = (5512 + ($$sum1$i12)|0);
  HEAP32[$86>>2] = -1;
  $87 = HEAP32[5256>>2]|0;
  $88 = ((($87)) + -12|0);
  $89 = HEAP32[$88>>2]|0;
  $$sum23 = (($89) + 72)|0;
  $90 = (5256 + ($$sum23)|0);
  HEAP32[$90>>2] = 5344;
  $91 = HEAP32[5428>>2]|0;
  $92 = ((($91)) + -12|0);
  $93 = HEAP32[$92>>2]|0;
  $$sum24 = (($93) + 4)|0;
  $94 = (5428 + ($$sum24)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $95 | 8192;
  HEAP32[$94>>2] = $96;
  $97 = HEAP32[5428>>2]|0;
  $98 = ((($97)) + -12|0);
  $99 = HEAP32[$98>>2]|0;
  $$sum25 = (($99) + 72)|0;
  $100 = (5428 + ($$sum25)|0);
  HEAP32[$100>>2] = 5344;
  return;
 }
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 (invoke_ii(683,(5004|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  (invoke_ii(683,(5172|0))|0);
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   __THREW__ = 0;
   (invoke_ii(684,(5344|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    __THREW__ = 0;
    (invoke_ii(684,(5512|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     return;
    }
   }
  }
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = (6148);
 $2 = ((($this)) + 32|0);
 HEAP32[$2>>2] = $__fp;
 $3 = ((($this)) + 40|0);
 HEAP32[$3>>2] = $__st;
 $4 = ((($this)) + 48|0);
 HEAP32[$4>>2] = -1;
 $5 = ((($this)) + 52|0);
 HEAP8[$5>>0] = 0;
 $6 = ((($this)) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$6);
 $7 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $7;
 __THREW__ = 0;
 invoke_vii(205,($this|0),($1|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  __ZNSt3__16localeD2Ev($1);
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
  ___resumeException($10|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($1);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = (6084);
 $2 = ((($this)) + 32|0);
 HEAP32[$2>>2] = $__fp;
 $3 = ((($this)) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$3);
 $4 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $4;
 __THREW__ = 0;
 $5 = (invoke_iii(495,($1|0),(7748|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  __ZNSt3__16localeD2Ev($1);
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
  ___resumeException($16|0);
  // unreachable;
 } else {
  $8 = ((($this)) + 36|0);
  __ZNSt3__16localeD2Ev($1);
  HEAP32[$8>>2] = $5;
  $9 = ((($this)) + 40|0);
  HEAP32[$9>>2] = $__st;
  $10 = ((($this)) + 44|0);
  $11 = HEAP32[$5>>2]|0;
  $12 = ((($11)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_ii[$13 & 1023]($5)|0);
  $15 = $14&1;
  HEAP8[$10>>0] = $15;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this>>2] = (6020);
 $2 = ((($this)) + 32|0);
 HEAP32[$2>>2] = $__fp;
 $3 = ((($this)) + 40|0);
 HEAP32[$3>>2] = $__st;
 $4 = ((($this)) + 48|0);
 HEAP32[$4>>2] = -1;
 $5 = ((($this)) + 52|0);
 HEAP8[$5>>0] = 0;
 $6 = ((($this)) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$6);
 $7 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $7;
 __THREW__ = 0;
 invoke_vii(187,($this|0),($1|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  __ZNSt3__16localeD2Ev($1);
  __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
  ___resumeException($10|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($1);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this>>2] = (5956);
 $2 = ((($this)) + 32|0);
 HEAP32[$2>>2] = $__fp;
 $3 = ((($this)) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$3);
 $4 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $4;
 __THREW__ = 0;
 $5 = (invoke_iii(495,($1|0),(7756|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  __ZNSt3__16localeD2Ev($1);
  __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
  ___resumeException($16|0);
  // unreachable;
 } else {
  $8 = ((($this)) + 36|0);
  __ZNSt3__16localeD2Ev($1);
  HEAP32[$8>>2] = $5;
  $9 = ((($this)) + 40|0);
  HEAP32[$9>>2] = $__st;
  $10 = ((($this)) + 44|0);
  $11 = HEAP32[$5>>2]|0;
  $12 = ((($11)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_ii[$13 & 1023]($5)|0);
  $15 = $14&1;
  HEAP8[$10>>0] = $15;
  STACKTOP = sp;return;
 }
}
function __GLOBAL__sub_I_iostream_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_base4InitC2Ev(0);
 (___cxa_atexit((685|0),(18008|0),(___dso_handle|0))|0);
 return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,7756)|0);
 $4 = ((($this)) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
 $9 = ((($this)) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = ((($this)) + 36|0);
 $1 = ((($this)) + 40|0);
 $2 = ((($__extbuf)) + 8|0);
 $3 = $__extbuf;
 $4 = ((($this)) + 32|0);
 L1: while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = ((($7)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 1023]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   break;
  }
  switch ($10|0) {
  case 1:  {
   break;
  }
  case 2:  {
   $$0 = -1;
   break L1;
   break;
  }
  default: {
   label = 4;
   break L1;
  }
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L1: do {
  if ($2) {
   $3 = ($__n|0)>(0);
   if ($3) {
    $$012 = $__s;$__i$03 = 0;
    while(1) {
     $7 = HEAP32[$this>>2]|0;
     $8 = ((($7)) + 52|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = HEAP32[$$012>>2]|0;
     $11 = (FUNCTION_TABLE_iii[$9 & 1023]($this,$10)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      $$0 = $__i$03;
      break L1;
     }
     $13 = (($__i$03) + 1)|0;
     $14 = ((($$012)) + 4|0);
     $15 = ($13|0)<($__n|0);
     if ($15) {
      $$012 = $14;$__i$03 = $13;
     } else {
      $$0 = $13;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  } else {
   $4 = ((($this)) + 32|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (_fwrite(($__s|0),4,($__n|0),($5|0))|0);
   $$0 = $6;
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__e = 0;
 var $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, $pbase$0$lcssa12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if ($0) {
   label = 11;
  } else {
   HEAP32[$__1buf>>2] = $__c;
   $1 = ((($this)) + 44|0);
   $2 = HEAP8[$1>>0]|0;
   $3 = ($2<<24>>24)==(0);
   if (!($3)) {
    $4 = ((($this)) + 32|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (_fwrite(($__1buf|0),4,1,($5|0))|0);
    $7 = ($6|0)==(1);
    if ($7) {
     label = 11;
     break;
    } else {
     $$0 = -1;
     break;
    }
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $8 = ((($__1buf)) + 4|0);
   $9 = ((($this)) + 36|0);
   $10 = ((($this)) + 40|0);
   $11 = ((($__extbuf)) + 8|0);
   $12 = $__extbuf;
   $13 = ((($this)) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $14 = HEAP32[$9>>2]|0;
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$14>>2]|0;
    $17 = ((($16)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 511]($14,$15,$pbase$0,$8,$__e,$__extbuf,$11,$__extbe)|0);
    $20 = HEAP32[$__e>>2]|0;
    $21 = ($20|0)==($pbase$0|0);
    if ($21) {
     $$0 = -1;
     break L1;
    }
    $22 = ($19|0)==(3);
    if ($22) {
     $pbase$0$lcssa12 = $pbase$0;
     break;
    }
    $26 = ($19|0)==(1);
    $27 = ($19>>>0)<(2);
    if (!($27)) {
     $$0 = -1;
     break L1;
    }
    $28 = HEAP32[$__extbe>>2]|0;
    $29 = $28;
    $30 = (($29) - ($12))|0;
    $31 = HEAP32[$13>>2]|0;
    $32 = (_fwrite(($__extbuf|0),1,($30|0),($31|0))|0);
    $33 = ($32|0)==($30|0);
    if (!($33)) {
     $$0 = -1;
     break L1;
    }
    $34 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $26 ? $34 : $pbase$0;
    if ($26) {
     $pbase$0 = $$pbase$0;
    } else {
     label = 11;
     break L1;
    }
   }
   $23 = HEAP32[$13>>2]|0;
   $24 = (_fwrite(($pbase$0$lcssa12|0),1,1,($23|0))|0);
   $25 = ($24|0)==(1);
   if ($25) {
    label = 11;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $$__c$i = $0 ? 0 : $__c;
  $$0 = $$__c$i;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,7756)|0);
 $1 = ((($this)) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $6 = ((($this)) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = ((($this)) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if ($15) {
  __ZNSt3__121__throw_runtime_errorEPKc(18034);
 }
 return;
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,0)|0);
 return ($0|0);
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,1)|0);
 return ($0|0);
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__enxt = sp + 8|0;
 $__ci = sp + 4|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = ((($this)) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 L1: do {
  if ($0) {
   if ($3) {
    $$01 = -1;
   } else {
    $4 = ((($this)) + 48|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)!=(-1);
    $7 = $6&1;
    HEAP8[$1>>0] = $7;
    $$01 = $5;
   }
  } else {
   $8 = ((($this)) + 48|0);
   L5: do {
    if ($3) {
     $9 = HEAP32[$8>>2]|0;
     HEAP32[$__ci>>2] = $9;
     $10 = ((($this)) + 36|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ((($this)) + 40|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ((($__ci)) + 4|0);
     $15 = ((($__extbuf)) + 8|0);
     $16 = HEAP32[$11>>2]|0;
     $17 = ((($16)) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 511]($11,$13,$__ci,$14,$__inxt,$__extbuf,$15,$__enxt)|0);
     switch ($19|0) {
     case 1: case 2:  {
      $$01 = -1;
      break L1;
      break;
     }
     case 3:  {
      $20 = HEAP32[$8>>2]|0;
      $21 = $20&255;
      HEAP8[$__extbuf>>0] = $21;
      $22 = ((($__extbuf)) + 1|0);
      HEAP32[$__enxt>>2] = $22;
      break;
     }
     default: {
     }
     }
     $23 = ((($this)) + 32|0);
     while(1) {
      $24 = HEAP32[$__enxt>>2]|0;
      $25 = ($24>>>0)>($__extbuf>>>0);
      if (!($25)) {
       break L5;
      }
      $26 = ((($24)) + -1|0);
      HEAP32[$__enxt>>2] = $26;
      $27 = HEAP8[$26>>0]|0;
      $28 = $27 << 24 >> 24;
      $29 = HEAP32[$23>>2]|0;
      $30 = (_ungetc(($28|0),($29|0))|0);
      $31 = ($30|0)==(-1);
      if ($31) {
       $$01 = -1;
       break L1;
      }
     }
    }
   } while(0);
   HEAP32[$8>>2] = $__c;
   HEAP8[$1>>0] = 1;
   $$01 = $__c;
  }
 } while(0);
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$019 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$0$lcssa24 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = ((($this)) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L1: do {
  if ($2) {
   $5 = ((($this)) + 44|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)>(1);
   $8 = $7 ? $6 : 1;
   $9 = ((($this)) + 32|0);
   $10 = ($8|0)>(0);
   if ($10) {
    $__i$019 = 0;
    while(1) {
     $11 = HEAP32[$9>>2]|0;
     $12 = (_getc(($11|0))|0);
     $13 = ($12|0)==(-1);
     if ($13) {
      $$0 = -1;
      break L1;
     }
     $14 = $12&255;
     $15 = (($__extbuf) + ($__i$019)|0);
     HEAP8[$15>>0] = $14;
     $16 = (($__i$019) + 1)|0;
     $17 = ($16|0)<($8|0);
     if ($17) {
      $__i$019 = $16;
     } else {
      break;
     }
    }
   }
   $18 = ((($this)) + 53|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)==(0);
   L8: do {
    if ($20) {
     $21 = ((($this)) + 40|0);
     $22 = ((($this)) + 36|0);
     $23 = ((($__1buf)) + 4|0);
     $__nread$0 = $8;
     L10: while(1) {
      $26 = HEAP32[$21>>2]|0;
      $27 = $26;
      $28 = $27;
      $29 = HEAP32[$28>>2]|0;
      $30 = (($27) + 4)|0;
      $31 = $30;
      $32 = HEAP32[$31>>2]|0;
      $33 = HEAP32[$22>>2]|0;
      $34 = (($__extbuf) + ($__nread$0)|0);
      $35 = HEAP32[$33>>2]|0;
      $36 = ((($35)) + 16|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = (FUNCTION_TABLE_iiiiiiiii[$37 & 511]($33,$26,$__extbuf,$34,$__enxt,$__1buf,$23,$__inxt)|0);
      switch ($38|0) {
      case 2:  {
       $$0 = -1;
       break L1;
       break;
      }
      case 3:  {
       $__nread$0$lcssa24 = $__nread$0;
       break L10;
       break;
      }
      case 1:  {
       break;
      }
      default: {
       $__nread$2 = $__nread$0;
       break L8;
      }
      }
      $39 = HEAP32[$21>>2]|0;
      $40 = $39;
      $41 = $40;
      HEAP32[$41>>2] = $29;
      $42 = (($40) + 4)|0;
      $43 = $42;
      HEAP32[$43>>2] = $32;
      $44 = ($__nread$0|0)==(8);
      if ($44) {
       $$0 = -1;
       break L1;
      }
      $45 = HEAP32[$9>>2]|0;
      $46 = (_getc(($45|0))|0);
      $47 = ($46|0)==(-1);
      if ($47) {
       $$0 = -1;
       break L1;
      }
      $50 = $46&255;
      HEAP8[$34>>0] = $50;
      $51 = (($__nread$0) + 1)|0;
      $__nread$0 = $51;
     }
     $48 = HEAP8[$__extbuf>>0]|0;
     $49 = $48 << 24 >> 24;
     HEAP32[$__1buf>>2] = $49;
     $__nread$2 = $__nread$0$lcssa24;
    } else {
     $24 = HEAP8[$__extbuf>>0]|0;
     $25 = $24 << 24 >> 24;
     HEAP32[$__1buf>>2] = $25;
     $__nread$2 = $8;
    }
   } while(0);
   if ($__consume) {
    $60 = HEAP32[$__1buf>>2]|0;
    $61 = ((($this)) + 48|0);
    HEAP32[$61>>2] = $60;
    $$0 = $60;
    break;
   } else {
    $__i2$0 = $__nread$2;
   }
   while(1) {
    $52 = ($__i2$0|0)>(0);
    if (!($52)) {
     break;
    }
    $53 = (($__i2$0) + -1)|0;
    $54 = (($__extbuf) + ($53)|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55 << 24 >> 24;
    $57 = HEAP32[$9>>2]|0;
    $58 = (_ungetc(($56|0),($57|0))|0);
    $59 = ($58|0)==(-1);
    if ($59) {
     $$0 = -1;
     break L1;
    } else {
     $__i2$0 = $53;
    }
   }
   $$pre = HEAP32[$__1buf>>2]|0;
   $$0 = $$pre;
  } else {
   $3 = ((($this)) + 48|0);
   $4 = HEAP32[$3>>2]|0;
   if ($__consume) {
    HEAP32[$3>>2] = -1;
    HEAP8[$0>>0] = 0;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,7748)|0);
 $4 = ((($this)) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
 $9 = ((($this)) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = ((($this)) + 36|0);
 $1 = ((($this)) + 40|0);
 $2 = ((($__extbuf)) + 8|0);
 $3 = $__extbuf;
 $4 = ((($this)) + 32|0);
 L1: while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = ((($7)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 1023]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   break;
  }
  switch ($10|0) {
  case 1:  {
   break;
  }
  case 2:  {
   $$0 = -1;
   break L1;
   break;
  }
  default: {
   label = 4;
   break L1;
  }
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L1: do {
  if ($2) {
   $3 = ($__n|0)>(0);
   if ($3) {
    $$012 = $__s;$__i$03 = 0;
    while(1) {
     $7 = HEAP32[$this>>2]|0;
     $8 = ((($7)) + 52|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = HEAP8[$$012>>0]|0;
     $11 = $10&255;
     $12 = (FUNCTION_TABLE_iii[$9 & 1023]($this,$11)|0);
     $13 = ($12|0)==(-1);
     if ($13) {
      $$0 = $__i$03;
      break L1;
     }
     $14 = (($__i$03) + 1)|0;
     $15 = ((($$012)) + 1|0);
     $16 = ($14|0)<($__n|0);
     if ($16) {
      $$012 = $15;$__i$03 = $14;
     } else {
      $$0 = $14;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  } else {
   $4 = ((($this)) + 32|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (_fwrite(($__s|0),1,($__n|0),($5|0))|0);
   $$0 = $6;
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0;
 var $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, $pbase$0$lcssa12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if ($0) {
   label = 11;
  } else {
   $1 = $__c&255;
   HEAP8[$__1buf>>0] = $1;
   $2 = ((($this)) + 44|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if (!($4)) {
    $5 = ((($this)) + 32|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (_fwrite(($__1buf|0),1,1,($6|0))|0);
    $8 = ($7|0)==(1);
    if ($8) {
     label = 11;
     break;
    } else {
     $$0 = -1;
     break;
    }
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $9 = ((($__1buf)) + 1|0);
   $10 = ((($this)) + 36|0);
   $11 = ((($this)) + 40|0);
   $12 = ((($__extbuf)) + 8|0);
   $13 = $__extbuf;
   $14 = ((($this)) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$11>>2]|0;
    $17 = HEAP32[$15>>2]|0;
    $18 = ((($17)) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($15,$16,$pbase$0,$9,$__e,$__extbuf,$12,$__extbe)|0);
    $21 = HEAP32[$__e>>2]|0;
    $22 = ($21|0)==($pbase$0|0);
    if ($22) {
     $$0 = -1;
     break L1;
    }
    $23 = ($20|0)==(3);
    if ($23) {
     $pbase$0$lcssa12 = $pbase$0;
     break;
    }
    $27 = ($20|0)==(1);
    $28 = ($20>>>0)<(2);
    if (!($28)) {
     $$0 = -1;
     break L1;
    }
    $29 = HEAP32[$__extbe>>2]|0;
    $30 = $29;
    $31 = (($30) - ($13))|0;
    $32 = HEAP32[$14>>2]|0;
    $33 = (_fwrite(($__extbuf|0),1,($31|0),($32|0))|0);
    $34 = ($33|0)==($31|0);
    if (!($34)) {
     $$0 = -1;
     break L1;
    }
    $35 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $27 ? $35 : $pbase$0;
    if ($27) {
     $pbase$0 = $$pbase$0;
    } else {
     label = 11;
     break L1;
    }
   }
   $24 = HEAP32[$14>>2]|0;
   $25 = (_fwrite(($pbase$0$lcssa12|0),1,1,($24|0))|0);
   $26 = ($25|0)==(1);
   if ($26) {
    label = 11;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $$__c$i = $0 ? 0 : $__c;
  $$0 = $$__c$i;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,7748)|0);
 $1 = ((($this)) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $6 = ((($this)) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = ((($this)) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if ($15) {
  __ZNSt3__121__throw_runtime_errorEPKc(18034);
 }
 return;
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,0)|0);
 return ($0|0);
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,1)|0);
 return ($0|0);
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__enxt = sp + 4|0;
 $__ci = sp + 8|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = ((($this)) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 L1: do {
  if ($0) {
   if ($3) {
    $$01 = -1;
   } else {
    $4 = ((($this)) + 48|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)!=(-1);
    $7 = $6&1;
    HEAP8[$1>>0] = $7;
    $$01 = $5;
   }
  } else {
   $8 = ((($this)) + 48|0);
   L5: do {
    if ($3) {
     $9 = HEAP32[$8>>2]|0;
     $10 = $9&255;
     HEAP8[$__ci>>0] = $10;
     $11 = ((($this)) + 36|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ((($this)) + 40|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ((($__ci)) + 1|0);
     $16 = ((($__extbuf)) + 8|0);
     $17 = HEAP32[$12>>2]|0;
     $18 = ((($17)) + 12|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($12,$14,$__ci,$15,$__inxt,$__extbuf,$16,$__enxt)|0);
     switch ($20|0) {
     case 1: case 2:  {
      $$01 = -1;
      break L1;
      break;
     }
     case 3:  {
      $21 = HEAP32[$8>>2]|0;
      $22 = $21&255;
      HEAP8[$__extbuf>>0] = $22;
      $23 = ((($__extbuf)) + 1|0);
      HEAP32[$__enxt>>2] = $23;
      break;
     }
     default: {
     }
     }
     $24 = ((($this)) + 32|0);
     while(1) {
      $25 = HEAP32[$__enxt>>2]|0;
      $26 = ($25>>>0)>($__extbuf>>>0);
      if (!($26)) {
       break L5;
      }
      $27 = ((($25)) + -1|0);
      HEAP32[$__enxt>>2] = $27;
      $28 = HEAP8[$27>>0]|0;
      $29 = $28 << 24 >> 24;
      $30 = HEAP32[$24>>2]|0;
      $31 = (_ungetc(($29|0),($30|0))|0);
      $32 = ($31|0)==(-1);
      if ($32) {
       $$01 = -1;
       break L1;
      }
     }
    }
   } while(0);
   HEAP32[$8>>2] = $__c;
   HEAP8[$1>>0] = 1;
   $$01 = $__c;
  }
 } while(0);
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$019 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$0$lcssa24 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = ((($this)) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L1: do {
  if ($2) {
   $5 = ((($this)) + 44|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)>(1);
   $8 = $7 ? $6 : 1;
   $9 = ((($this)) + 32|0);
   $10 = ($8|0)>(0);
   if ($10) {
    $__i$019 = 0;
    while(1) {
     $11 = HEAP32[$9>>2]|0;
     $12 = (_getc(($11|0))|0);
     $13 = ($12|0)==(-1);
     if ($13) {
      $$0 = -1;
      break L1;
     }
     $14 = $12&255;
     $15 = (($__extbuf) + ($__i$019)|0);
     HEAP8[$15>>0] = $14;
     $16 = (($__i$019) + 1)|0;
     $17 = ($16|0)<($8|0);
     if ($17) {
      $__i$019 = $16;
     } else {
      break;
     }
    }
   }
   $18 = ((($this)) + 53|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)==(0);
   L8: do {
    if ($20) {
     $21 = ((($this)) + 40|0);
     $22 = ((($this)) + 36|0);
     $23 = ((($__1buf)) + 1|0);
     $__nread$0 = $8;
     L10: while(1) {
      $25 = HEAP32[$21>>2]|0;
      $26 = $25;
      $27 = $26;
      $28 = HEAP32[$27>>2]|0;
      $29 = (($26) + 4)|0;
      $30 = $29;
      $31 = HEAP32[$30>>2]|0;
      $32 = HEAP32[$22>>2]|0;
      $33 = (($__extbuf) + ($__nread$0)|0);
      $34 = HEAP32[$32>>2]|0;
      $35 = ((($34)) + 16|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = (FUNCTION_TABLE_iiiiiiiii[$36 & 511]($32,$25,$__extbuf,$33,$__enxt,$__1buf,$23,$__inxt)|0);
      switch ($37|0) {
      case 2:  {
       $$0 = -1;
       break L1;
       break;
      }
      case 3:  {
       $__nread$0$lcssa24 = $__nread$0;
       break L10;
       break;
      }
      case 1:  {
       break;
      }
      default: {
       $__nread$2 = $__nread$0;
       break L8;
      }
      }
      $38 = HEAP32[$21>>2]|0;
      $39 = $38;
      $40 = $39;
      HEAP32[$40>>2] = $28;
      $41 = (($39) + 4)|0;
      $42 = $41;
      HEAP32[$42>>2] = $31;
      $43 = ($__nread$0|0)==(8);
      if ($43) {
       $$0 = -1;
       break L1;
      }
      $44 = HEAP32[$9>>2]|0;
      $45 = (_getc(($44|0))|0);
      $46 = ($45|0)==(-1);
      if ($46) {
       $$0 = -1;
       break L1;
      }
      $48 = $45&255;
      HEAP8[$33>>0] = $48;
      $49 = (($__nread$0) + 1)|0;
      $__nread$0 = $49;
     }
     $47 = HEAP8[$__extbuf>>0]|0;
     HEAP8[$__1buf>>0] = $47;
     $__nread$2 = $__nread$0$lcssa24;
    } else {
     $24 = HEAP8[$__extbuf>>0]|0;
     HEAP8[$__1buf>>0] = $24;
     $__nread$2 = $8;
    }
   } while(0);
   if ($__consume) {
    $58 = HEAP8[$__1buf>>0]|0;
    $59 = $58&255;
    $60 = ((($this)) + 48|0);
    HEAP32[$60>>2] = $59;
    $62 = $58;
   } else {
    $__i2$0 = $__nread$2;
    while(1) {
     $50 = ($__i2$0|0)>(0);
     if (!($50)) {
      break;
     }
     $51 = (($__i2$0) + -1)|0;
     $52 = (($__extbuf) + ($51)|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = $53&255;
     $55 = HEAP32[$9>>2]|0;
     $56 = (_ungetc(($54|0),($55|0))|0);
     $57 = ($56|0)==(-1);
     if ($57) {
      $$0 = -1;
      break L1;
     } else {
      $__i2$0 = $51;
     }
    }
    $$pre = HEAP8[$__1buf>>0]|0;
    $62 = $$pre;
   }
   $61 = $62&255;
   $$0 = $61;
  } else {
   $3 = ((($this)) + 48|0);
   $4 = HEAP32[$3>>2]|0;
   if ($__consume) {
    HEAP32[$3>>2] = -1;
    HEAP8[$0>>0] = 0;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt11logic_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (4092);
 $0 = ((($this)) + 4|0);
 $1 = HEAP8[$msg>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = ((($msg)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($msg)) + 1|0);
 $7 = $3 ? $6 : $5;
 __THREW__ = 0;
 invoke_vii(686,($0|0),($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  ___resumeException($10|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (4112);
 $0 = ((($this)) + 4|0);
 $1 = HEAP8[$msg>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = ((($msg)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($msg)) + 1|0);
 $7 = $3 ? $6 : $5;
 __THREW__ = 0;
 invoke_vii(686,($0|0),($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  ___resumeException($10|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (4112);
 $0 = ((($this)) + 4|0);
 __THREW__ = 0;
 invoke_vii(686,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt3__118__libcpp_refstringC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($msg|0))|0);
 $1 = (($0) + 13)|0;
 $2 = (__Znwj($1)|0);
 HEAP32[$2>>2] = $0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 12|0);
 $6 = (($0) + 1)|0;
 _memcpy(($5|0),($msg|0),($6|0))|0;
 HEAP32[$this>>2] = $5;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this>>2]=HEAP32[$__str>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
 } else {
  $3 = ((($__str)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($__str)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$4,$6);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(11);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__n;
  $__p$0 = $7;
 }
 _memset(($__p$0|0),($__c|0),($__n|0))|0;
 $11 = (($__p$0) + ($__n)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==($__str|0);
 if (!($0)) {
  $1 = HEAP8[$__str>>0]|0;
  $2 = $1 & 1;
  $3 = ($2<<24>>24)==(0);
  $4 = ((($__str)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($__str)) + 1|0);
  $7 = $3 ? $6 : $5;
  $8 = ((($__str)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $1&255;
  $11 = $10 >>> 1;
  $12 = $3 ? $11 : $9;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$7,$12)|0);
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = 10;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $7 = $phitmp$i;$9 = $5;
 }
 $6 = ($7>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($6) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = ((($this)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($7))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$7,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = ((($this)) + 1|0);
    $14 = $13;
   } else {
    $11 = ((($this)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   _memmove(($14|0),($__s|0),($__n|0))|0;
   $15 = (($14) + ($__n)|0);
   HEAP8[$15>>0] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = ((($this)) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = ((($this)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8>>>0)<($__n>>>0);
 do {
  if ($7) {
   $9 = (($__n) - ($8))|0;
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$9,$__c)|0);
  } else {
   if ($2) {
    $14 = (((($this)) + 1|0) + ($__n)|0);
    HEAP8[$14>>0] = 0;
    $15 = $__n << 1;
    $16 = $15&255;
    HEAP8[$this>>0] = $16;
    break;
   } else {
    $10 = ((($this)) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($11) + ($__n)|0);
    HEAP8[$12>>0] = 0;
    $13 = ((($this)) + 4|0);
    HEAP32[$13>>2] = $__n;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)==(0);
 if (!($0)) {
  $1 = HEAP8[$this>>0]|0;
  $2 = $1 & 1;
  $3 = ($2<<24>>24)==(0);
  if ($3) {
   $15 = 10;$8 = $1;
  } else {
   $4 = HEAP32[$this>>2]|0;
   $5 = $4 & -2;
   $phitmp$i = (($5) + -1)|0;
   $6 = $4&255;
   $15 = $phitmp$i;$8 = $6;
  }
  $7 = $8 & 1;
  $9 = ($7<<24>>24)==(0);
  if ($9) {
   $12 = $8&255;
   $13 = $12 >>> 1;
   $16 = $13;
  } else {
   $10 = ((($this)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $16 = $11;
  }
  $14 = (($15) - ($16))|0;
  $17 = ($14>>>0)<($__n>>>0);
  if ($17) {
   $18 = (($__n) - ($15))|0;
   $19 = (($18) + ($16))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
   $$pre = HEAP8[$this>>0]|0;
   $21 = $$pre;
  } else {
   $21 = $8;
  }
  $20 = $21 & 1;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   $25 = ((($this)) + 1|0);
   $27 = $25;
  } else {
   $23 = ((($this)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $27 = $24;
  }
  $26 = (($27) + ($16)|0);
  _memset(($26|0),($__c|0),($__n|0))|0;
  $28 = (($16) + ($__n))|0;
  $29 = HEAP8[$this>>0]|0;
  $30 = $29 & 1;
  $31 = ($30<<24>>24)==(0);
  if ($31) {
   $33 = $28 << 1;
   $34 = $33&255;
   HEAP8[$this>>0] = $34;
  } else {
   $32 = ((($this)) + 4|0);
   HEAP32[$32>>2] = $28;
  }
  $35 = (($27) + ($28)|0);
  HEAP8[$35>>0] = 0;
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0;
 var $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = ((($this)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>($__res_arg>>>0);
 $16 = $14 ? $15 : $__res_arg;
 $17 = ($16>>>0)<(11);
 if ($17) {
  $21 = 10;
 } else {
  $18 = (($16) + 16)|0;
  $19 = $18 & -16;
  $phitmp$i2 = (($19) + -1)|0;
  $21 = $phitmp$i2;
 }
 $20 = ($21|0)==($22|0);
 L14: do {
  if (!($20)) {
   $23 = ($21|0)==(10);
   do {
    if ($23) {
     $24 = ((($this)) + 1|0);
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
    } else {
     $27 = ($21>>>0)>($22>>>0);
     $28 = (($21) + 1)|0;
     if ($27) {
      $29 = (__Znwj($28)|0);
      $__new_data$0 = $29;
     } else {
      __THREW__ = 0;
      $30 = (invoke_ii(687,($28|0))|0);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       $33 = ___cxa_find_matching_catch(0|0)|0;
       $34 = tempRet0;
       (___cxa_begin_catch(($33|0))|0);
       ___cxa_end_catch();
       break L14;
      } else {
       $__new_data$0 = $30;
      }
     }
     $35 = $8 & 1;
     $36 = ($35<<24>>24)==(0);
     if ($36) {
      $39 = ((($this)) + 1|0);
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 0;
      break;
     } else {
      $37 = ((($this)) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $38;$__was_long$0$off0 = 1;
      break;
     }
    }
   } while(0);
   $40 = $8 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    $44 = $8&255;
    $45 = $44 >>> 1;
    $47 = $45;
   } else {
    $42 = ((($this)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $47 = $43;
   }
   $46 = (($47) + 1)|0;
   _memcpy(($__new_data$1|0),($__p$0|0),($46|0))|0;
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0);
   }
   if ($__now_long$0$off0) {
    $48 = (($21) + 1)|0;
    $49 = $48 | 1;
    HEAP32[$this>>2] = $49;
    $50 = ((($this)) + 4|0);
    HEAP32[$50>>2] = $15;
    $51 = ((($this)) + 8|0);
    HEAP32[$51>>2] = $__new_data$1;
    break;
   } else {
    $52 = $15 << 1;
    $53 = $52&255;
    HEAP8[$this>>0] = $53;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = ((($this)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = ((($this)) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $$pre;
 }
 else if ((label|0) == 8) {
  $18 = ((($this)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = ((($this)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
 }
 $__p$0 = (($$pn) + ($__sz$0)|0);
 HEAP8[$__p$0>>0] = $__c;
 $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
 HEAP8[$22>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $14 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $14 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = ((($this)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $15 = $10;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($14))|0;
  $34 = (($33) + ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$14,$34,$15,$15,0,$__n,$__s);
 } else {
  $17 = ($__n|0)==(0);
  if (!($17)) {
   $18 = $7 & 1;
   $19 = ($18<<24>>24)==(0);
   if ($19) {
    $22 = ((($this)) + 1|0);
    $24 = $22;
   } else {
    $20 = ((($this)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $24 = $21;
   }
   $23 = (($24) + ($15)|0);
   _memcpy(($23|0),($__s|0),($__n|0))|0;
   $25 = (($15) + ($__n))|0;
   $26 = HEAP8[$this>>0]|0;
   $27 = $26 & 1;
   $28 = ($27<<24>>24)==(0);
   if ($28) {
    $30 = $25 << 1;
    $31 = $30&255;
    HEAP8[$this>>0] = $31;
   } else {
    $29 = ((($this)) + 4|0);
    HEAP32[$29>>2] = $25;
   }
   $32 = (($24) + ($25)|0);
   HEAP8[$32>>0] = 0;
  }
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (__Znwj($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy)|0);
  _memcpy(($22|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $26 = (($18) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $27 = (($20) + ($$sum1)|0);
  _memcpy(($26|0),($27|0),($25|0))|0;
 }
 $28 = ($__old_cap|0)==(10);
 if (!($28)) {
  __ZdlPv($20);
 }
 $29 = ((($this)) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 $31 = (($23) + ($__n_add))|0;
 $32 = ((($this)) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = (($18) + ($31)|0);
 HEAP8[$33>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (__Znwj($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = (($__old_sz) - ($__n_del))|0;
 $22 = ($21|0)==($__n_copy|0);
 if (!($22)) {
  $23 = (($21) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $24 = (($18) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $25 = (($20) + ($$sum1)|0);
  _memcpy(($24|0),($25|0),($23|0))|0;
 }
 $26 = ($__old_cap|0)==(10);
 if (!($26)) {
  __ZdlPv($20);
 }
 $27 = ((($this)) + 8|0);
 HEAP32[$27>>2] = $18;
 $28 = $17 | 1;
 HEAP32[$this>>2] = $28;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(2);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = ((($this)) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = ((($this)) + 4|0);
  HEAP32[$11>>2] = $__sz;
  $__p$0 = $8;
 }
 (_wmemcpy($__p$0,$__s,$__sz)|0);
 $12 = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$12>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(2);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = ((($this)) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = ((($this)) + 4|0);
  HEAP32[$11>>2] = $__n;
  $__p$0 = $8;
 }
 (_wmemset($__p$0,$__c,$__n)|0);
 $12 = (($__p$0) + ($__n<<2)|0);
 HEAP32[$12>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = 1;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $7 = $phitmp$i;$9 = $5;
 }
 $6 = ($7>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($6) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = ((($this)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($7))|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$7,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = ((($this)) + 4|0);
    $14 = $13;
   } else {
    $11 = ((($this)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   (_wmemmove($14,$__s,$__n)|0);
   $15 = (($14) + ($__n<<2)|0);
   HEAP32[$15>>2] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = ((($this)) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0;
 var $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 1;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = ((($this)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>($__res_arg>>>0);
 $16 = $14 ? $15 : $__res_arg;
 $17 = ($16>>>0)<(2);
 if ($17) {
  $21 = 1;
 } else {
  $18 = (($16) + 4)|0;
  $19 = $18 & -4;
  $phitmp$i2 = (($19) + -1)|0;
  $21 = $phitmp$i2;
 }
 $20 = ($21|0)==($22|0);
 L14: do {
  if (!($20)) {
   $23 = ($21|0)==(1);
   do {
    if ($23) {
     $24 = ((($this)) + 4|0);
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
    } else {
     $27 = ($21>>>0)>($22>>>0);
     $28 = $21 << 2;
     $29 = (($28) + 4)|0;
     if ($27) {
      $30 = (__Znwj($29)|0);
      $$sink = $30;
     } else {
      __THREW__ = 0;
      $31 = (invoke_ii(687,($29|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       $34 = ___cxa_find_matching_catch(0|0)|0;
       $35 = tempRet0;
       (___cxa_begin_catch(($34|0))|0);
       ___cxa_end_catch();
       break L14;
      } else {
       $$sink = $31;
      }
     }
     $36 = $8 & 1;
     $37 = ($36<<24>>24)==(0);
     if ($37) {
      $40 = ((($this)) + 4|0);
      $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $40;$__was_long$0$off0 = 0;
      break;
     } else {
      $38 = ((($this)) + 8|0);
      $39 = HEAP32[$38>>2]|0;
      $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 1;
      break;
     }
    }
   } while(0);
   $41 = $8 & 1;
   $42 = ($41<<24>>24)==(0);
   if ($42) {
    $45 = $8&255;
    $46 = $45 >>> 1;
    $48 = $46;
   } else {
    $43 = ((($this)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $48 = $44;
   }
   $47 = (($48) + 1)|0;
   (_wmemcpy($__new_data$1,$__p$0,$47)|0);
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0);
   }
   if ($__now_long$0$off0) {
    $49 = (($21) + 1)|0;
    $50 = $49 | 1;
    HEAP32[$this>>2] = $50;
    $51 = ((($this)) + 4|0);
    HEAP32[$51>>2] = $15;
    $52 = ((($this)) + 8|0);
    HEAP32[$52>>2] = $__new_data$1;
    break;
   } else {
    $53 = $15 << 1;
    $54 = $53&255;
    HEAP8[$this>>0] = $54;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = ((($this)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 1;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = ((($this)) + 4|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $$pre;
 }
 else if ((label|0) == 8) {
  $18 = ((($this)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = ((($this)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
 }
 $__p$0 = (($$pn) + ($__sz$0<<2)|0);
 HEAP32[$__p$0>>2] = $__c;
 $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
 HEAP32[$22>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741806 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 4|0);
  $21 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $21 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  $14 = (($12) + 4)|0;
  $15 = $14 & -4;
  $16 = $13 ? 2 : $15;
  $18 = $16;
 } else {
  $18 = 1073741807;
 }
 $17 = $18 << 2;
 $19 = (__Znwj($17)|0);
 $20 = ($__n_copy|0)==(0);
 if (!($20)) {
  (_wmemcpy($19,$21,$__n_copy)|0);
 }
 $22 = ($__n_add|0)==(0);
 if (!($22)) {
  $23 = (($19) + ($__n_copy<<2)|0);
  (_wmemcpy($23,$__p_new_stuff,$__n_add)|0);
 }
 $24 = (($__old_sz) - ($__n_del))|0;
 $25 = ($24|0)==($__n_copy|0);
 if (!($25)) {
  $26 = (($24) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $27 = (($19) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $28 = (($21) + ($$sum1<<2)|0);
  (_wmemcpy($27,$28,$26)|0);
 }
 $29 = ($__old_cap|0)==(1);
 if (!($29)) {
  __ZdlPv($21);
 }
 $30 = ((($this)) + 8|0);
 HEAP32[$30>>2] = $19;
 $31 = $18 | 1;
 HEAP32[$this>>2] = $31;
 $32 = (($24) + ($__n_add))|0;
 $33 = ((($this)) + 4|0);
 HEAP32[$33>>2] = $32;
 $34 = (($19) + ($32<<2)|0);
 HEAP32[$34>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741807 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 4|0);
  $21 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $21 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  $14 = (($12) + 4)|0;
  $15 = $14 & -4;
  $16 = $13 ? 2 : $15;
  $18 = $16;
 } else {
  $18 = 1073741807;
 }
 $17 = $18 << 2;
 $19 = (__Znwj($17)|0);
 $20 = ($__n_copy|0)==(0);
 if (!($20)) {
  (_wmemcpy($19,$21,$__n_copy)|0);
 }
 $22 = (($__old_sz) - ($__n_del))|0;
 $23 = ($22|0)==($__n_copy|0);
 if (!($23)) {
  $24 = (($22) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $25 = (($19) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $26 = (($21) + ($$sum1<<2)|0);
  (_wmemcpy($25,$26,$24)|0);
 }
 $27 = ($__old_cap|0)==(1);
 if (!($27)) {
  __ZdlPv($21);
 }
 $28 = ((($this)) + 8|0);
 HEAP32[$28>>2] = $19;
 $29 = $18 | 1;
 HEAP32[$this>>2] = $29;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__p$0$ph = 0, $__p$03 = 0, $scevgep2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$this>>0] = $6;
  $7 = ((($this)) + 1|0);
  $__p$0$ph = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = ((($this)) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$this>>2] = $12;
  $13 = ((($this)) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$ph = $10;
 }
 $14 = $__last;
 $15 = (($14) - ($0))|0;
 $16 = ($__first|0)==($__last|0);
 if (!($16)) {
  $$04 = $__first;$__p$03 = $__p$0$ph;
  while(1) {
   $17 = HEAP8[$$04>>0]|0;
   HEAP8[$__p$03>>0] = $17;
   $18 = ((($$04)) + 1|0);
   $19 = ((($__p$03)) + 1|0);
   $20 = ($18|0)==($__last|0);
   if ($20) {
    break;
   } else {
    $$04 = $18;$__p$03 = $19;
   }
  }
 }
 $scevgep2 = (($__p$0$ph) + ($15)|0);
 HEAP8[$scevgep2>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$ph = 0, $__p$03 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $5 = ($3>>>0)<(2);
 if ($5) {
  $6 = $2 >>> 1;
  $7 = $6&255;
  HEAP8[$this>>0] = $7;
  $8 = ((($this)) + 4|0);
  $__p$0$ph = $8;
 } else {
  $9 = (($3) + 4)|0;
  $10 = $9 & -4;
  $11 = $10 << 2;
  $12 = (__Znwj($11)|0);
  $13 = ((($this)) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = $10 | 1;
  HEAP32[$this>>2] = $14;
  $15 = ((($this)) + 4|0);
  HEAP32[$15>>2] = $3;
  $__p$0$ph = $12;
 }
 $16 = $__last;
 $17 = (($16) - ($0))|0;
 $18 = $17 >>> 2;
 $19 = ($__first|0)==($__last|0);
 if (!($19)) {
  $$04 = $__first;$__p$03 = $__p$0$ph;
  while(1) {
   $20 = HEAP32[$$04>>2]|0;
   HEAP32[$__p$03>>2] = $20;
   $21 = ((($$04)) + 4|0);
   $22 = ((($__p$03)) + 4|0);
   $23 = ($21|0)==($__last|0);
   if ($23) {
    break;
   } else {
    $$04 = $21;$__p$03 = $22;
   }
  }
 }
 $scevgep = (($__p$0$ph) + ($18<<2)|0);
 HEAP32[$scevgep>>2] = 0;
 return;
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $$state = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 $4 = $3&1;
 $$state = $4 | $state;
 $5 = ((($this)) + 16|0);
 HEAP32[$5>>2] = $$state;
 $6 = $3&1;
 $7 = $6 | $state;
 $8 = ((($this)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $7 & $9;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = (___cxa_allocate_exception(16)|0);
 (__ZNSt3__117iostream_categoryEv()|0);
 HEAP32[$0>>2] = 1;
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = (6580);
 __THREW__ = 0;
 invoke_viii(688,($12|0),(18589|0),($0|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  ___cxa_free_exception(($12|0));
  ___resumeException($16|0);
  // unreachable;
 } else {
  ___cxa_throw(($12|0),(848|0),(223|0));
  // unreachable;
 }
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6536);
 __THREW__ = 0;
 invoke_vii(689,($this|0),0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  $2 = ((($this)) + 28|0);
  __ZNSt3__16localeD2Ev($2);
  $3 = ((($this)) + 32|0);
  $4 = HEAP32[$3>>2]|0;
  _free($4);
  $5 = ((($this)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  _free($6);
  $7 = ((($this)) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  _free($8);
  $9 = ((($this)) + 60|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  return;
 }
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this,$ev) {
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 32|0);
 $3 = ((($this)) + 36|0);
 $4 = ($1|0)==(0);
 if (!($4)) {
  $i$01 = $1;
  while(1) {
   $5 = (($i$01) + -1)|0;
   $6 = HEAP32[$2>>2]|0;
   $7 = (($6) + ($5<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$3>>2]|0;
   $10 = (($9) + ($5<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   FUNCTION_TABLE_viii[$8 & 1023]($ev,$this,$11);
   $12 = ($5|0)==(0);
   if ($12) {
    break;
   } else {
    $i$01 = $5;
   }
  }
 }
 return;
}
function __ZNKSt3__18ios_base6getlocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 28|0);
 __ZNSt3__16localeC2ERKS0_($0,$1);
 $2 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__18ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 HEAP32[$0>>2] = $sb;
 $not$ = ($sb|0)==(0|0);
 $1 = $not$&1;
 $2 = ((($this)) + 16|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($this)) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 4|0);
 HEAP32[$4>>2] = 4098;
 $5 = ((($this)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 8|0);
 HEAP32[$6>>2] = 6;
 $7 = ((($this)) + 32|0);
 $8 = ((($this)) + 28|0);
 dest=$7; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev($8);
 return;
}
function __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 return;
}
function __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6228);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6228);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6228);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = ((($this)) + 8|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($agg$result)) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($agg$result)) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = ((($this)) + 16|0);
 $2 = ($__n|0)>(0);
 L1: do {
  if ($2) {
   $$01 = $__s;$__i$02 = 0;
   while(1) {
    $3 = HEAP32[$0>>2]|0;
    $4 = HEAP32[$1>>2]|0;
    $5 = ($3>>>0)<($4>>>0);
    if ($5) {
     $6 = ((($3)) + 1|0);
     HEAP32[$0>>2] = $6;
     $7 = HEAP8[$3>>0]|0;
     $storemerge = $7;
    } else {
     $8 = HEAP32[$this>>2]|0;
     $9 = ((($8)) + 40|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      $__i$0$lcssa = $__i$02;
      break L1;
     }
     $13 = $11&255;
     $storemerge = $13;
    }
    HEAP8[$$01>>0] = $storemerge;
    $14 = (($__i$02) + 1)|0;
    $15 = ((($$01)) + 1|0);
    $16 = ($14|0)<($__n|0);
    if ($16) {
     $$01 = $15;$__i$02 = $14;
    } else {
     $__i$0$lcssa = $14;
     break;
    }
   }
  } else {
   $__i$0$lcssa = 0;
  }
 } while(0);
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
 } else {
  $5 = ((($this)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $7;
  $8 = HEAP8[$6>>0]|0;
  $9 = $8&255;
  $$0 = $9;
 }
 return ($$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0;
 var $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 $1 = ((($this)) + 28|0);
 $2 = ($__n|0)>(0);
 L1: do {
  if ($2) {
   $$02 = $__s;$__i$01 = 0;
   while(1) {
    $3 = HEAP32[$0>>2]|0;
    $4 = HEAP32[$1>>2]|0;
    $5 = ($3>>>0)<($4>>>0);
    if ($5) {
     $6 = HEAP8[$$02>>0]|0;
     $7 = ((($3)) + 1|0);
     HEAP32[$0>>2] = $7;
     HEAP8[$3>>0] = $6;
    } else {
     $8 = HEAP32[$this>>2]|0;
     $9 = ((($8)) + 52|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = HEAP8[$$02>>0]|0;
     $12 = $11&255;
     $13 = (FUNCTION_TABLE_iii[$10 & 1023]($this,$12)|0);
     $14 = ($13|0)==(-1);
     if ($14) {
      $__i$0$lcssa = $__i$01;
      break L1;
     }
    }
    $15 = ((($$02)) + 1|0);
    $16 = (($__i$01) + 1)|0;
    $17 = ($16|0)<($__n|0);
    if ($17) {
     $$02 = $15;$__i$01 = $16;
    } else {
     $__i$0$lcssa = $16;
     break;
    }
   }
  } else {
   $__i$0$lcssa = 0;
  }
 } while(0);
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6292);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6292);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6292);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = ((($this)) + 8|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($this|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($agg$result)) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($agg$result)) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = ((($this)) + 16|0);
 $2 = ($__n|0)>(0);
 L1: do {
  if ($2) {
   $$01 = $__s;$__i$02 = 0;
   while(1) {
    $3 = HEAP32[$0>>2]|0;
    $4 = HEAP32[$1>>2]|0;
    $5 = ($3>>>0)<($4>>>0);
    if ($5) {
     $6 = ((($3)) + 4|0);
     HEAP32[$0>>2] = $6;
     $7 = HEAP32[$3>>2]|0;
     $storemerge = $7;
    } else {
     $8 = HEAP32[$this>>2]|0;
     $9 = ((($8)) + 40|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      $__i$0$lcssa = $__i$02;
      break L1;
     } else {
      $storemerge = $11;
     }
    }
    HEAP32[$$01>>2] = $storemerge;
    $13 = (($__i$02) + 1)|0;
    $14 = ((($$01)) + 4|0);
    $15 = ($13|0)<($__n|0);
    if ($15) {
     $$01 = $14;$__i$02 = $13;
    } else {
     $__i$0$lcssa = $13;
     break;
    }
   }
  } else {
   $__i$0$lcssa = 0;
  }
 } while(0);
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
 } else {
  $5 = ((($this)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 4|0);
  HEAP32[$5>>2] = $7;
  $8 = HEAP32[$6>>2]|0;
  $$0 = $8;
 }
 return ($$0|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 $1 = ((($this)) + 28|0);
 $2 = ($__n|0)>(0);
 L1: do {
  if ($2) {
   $$02 = $__s;$__i$01 = 0;
   while(1) {
    $3 = HEAP32[$0>>2]|0;
    $4 = HEAP32[$1>>2]|0;
    $5 = ($3>>>0)<($4>>>0);
    if ($5) {
     $6 = HEAP32[$$02>>2]|0;
     $7 = ((($3)) + 4|0);
     HEAP32[$0>>2] = $7;
     HEAP32[$3>>2] = $6;
    } else {
     $8 = HEAP32[$this>>2]|0;
     $9 = ((($8)) + 52|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = HEAP32[$$02>>2]|0;
     $12 = (FUNCTION_TABLE_iii[$10 & 1023]($this,$11)|0);
     $13 = ($12|0)==(-1);
     if ($13) {
      $__i$0$lcssa = $__i$01;
      break L1;
     }
    }
    $14 = ((($$02)) + 4|0);
    $15 = (($__i$01) + 1)|0;
    $16 = ($15|0)<($__n|0);
    if ($16) {
     $$02 = $14;$__i$01 = $15;
    } else {
     $__i$0$lcssa = $15;
     break;
    }
   }
  } else {
   $__i$0$lcssa = 0;
  }
 } while(0);
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($3);
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($this,$__is,$__noskipws) {
 $this = $this|0;
 $__is = $__is|0;
 $__noskipws = $__noskipws|0;
 var $$ = 0, $$0$i$i = 0, $$in = 0, $$ph = 0, $$ph18 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum$i = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP8[$this>>0] = 0;
 $1 = HEAP32[$__is>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__is) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$sum13 = (($3) + 72)|0;
  $7 = (($__is) + ($$sum13)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($8)|0);
  }
  do {
   if (!($__noskipws)) {
    $10 = HEAP32[$__is>>2]|0;
    $11 = ((($10)) + -12|0);
    $12 = HEAP32[$11>>2]|0;
    $$sum14 = (($12) + 4)|0;
    $13 = (($__is) + ($$sum14)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14 & 4096;
    $16 = ($15|0)==(0);
    if (!($16)) {
     $17 = (($__is) + ($12)|0);
     $18 = (__ZNKSt3__18ios_base6getlocEv($17)|0);
     HEAP32[$0>>2] = $18;
     __THREW__ = 0;
     $19 = (invoke_iii(495,($0|0),(7688|0))|0);
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if ($21) {
      $61 = ___cxa_find_matching_catch()|0;
      $62 = tempRet0;
      __ZNSt3__16localeD2Ev($0);
      ___resumeException($61|0);
      // unreachable;
     }
     __ZNSt3__16localeD2Ev($0);
     $22 = HEAP32[$__is>>2]|0;
     $23 = ((($22)) + -12|0);
     $24 = HEAP32[$23>>2]|0;
     $$sum$i = (($24) + 24)|0;
     $25 = (($__is) + ($$sum$i)|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ((($19)) + 8|0);
     $28 = ($26|0)==(0);
     L12: do {
      if ($28) {
       $$ph = 0;
       label = 10;
      } else {
       $$in = $26;
       while(1) {
        $29 = $$in;
        $30 = ((($29)) + 12|0);
        $31 = HEAP32[$30>>2]|0;
        $32 = ((($29)) + 16|0);
        $33 = HEAP32[$32>>2]|0;
        $34 = ($31|0)==($33|0);
        if ($34) {
         $35 = $$in;
         $36 = HEAP32[$35>>2]|0;
         $37 = ((($36)) + 36|0);
         $38 = HEAP32[$37>>2]|0;
         $39 = (FUNCTION_TABLE_ii[$38 & 1023]($29)|0);
         $40 = ($39|0)==(-1);
         $$ = $40 ? 0 : $$in;
         if ($40) {
          $$ph = $$;
          label = 10;
          break L12;
         } else {
          $$ph18 = $$;
         }
        } else {
         $$ph18 = $$in;
        }
        $41 = $$ph18;
        $42 = ((($41)) + 12|0);
        $43 = HEAP32[$42>>2]|0;
        $44 = ((($41)) + 16|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = ($43|0)==($45|0);
        if ($46) {
         $47 = $$ph18;
         $48 = HEAP32[$47>>2]|0;
         $49 = ((($48)) + 36|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = (FUNCTION_TABLE_ii[$50 & 1023]($41)|0);
         $$0$i$i = $51;
        } else {
         $52 = HEAP8[$43>>0]|0;
         $53 = $52&255;
         $$0$i$i = $53;
        }
        $54 = $$0$i$i&255;
        $isascii1$i = ($54<<24>>24)>(-1);
        if (!($isascii1$i)) {
         $$pre$phiZ2D = $41;$73 = $$ph18;
         break L12;
        }
        $sext = $$0$i$i << 24;
        $55 = $sext >> 24;
        $56 = HEAP32[$27>>2]|0;
        $57 = (($56) + ($55<<1)|0);
        $58 = HEAP16[$57>>1]|0;
        $59 = $58 & 8192;
        $60 = ($59<<16>>16)==(0);
        if ($60) {
         $$pre$phiZ2D = $41;$73 = $$ph18;
         break L12;
        }
        $63 = HEAP32[$42>>2]|0;
        $64 = HEAP32[$44>>2]|0;
        $65 = ($63|0)==($64|0);
        if ($65) {
         $66 = $$ph18;
         $67 = HEAP32[$66>>2]|0;
         $68 = ((($67)) + 40|0);
         $69 = HEAP32[$68>>2]|0;
         (FUNCTION_TABLE_ii[$69 & 1023]($41)|0);
        } else {
         $71 = ((($63)) + 1|0);
         HEAP32[$42>>2] = $71;
        }
        $70 = ($$ph18|0)==(0);
        if ($70) {
         $$ph = 0;
         label = 10;
         break;
        } else {
         $$in = $$ph18;
        }
       }
      }
     } while(0);
     if ((label|0) == 10) {
      $$pre = $$ph;
      $$pre$phiZ2D = $$pre;$73 = $$ph;
     }
     $72 = ($73|0)==(0);
     if (!($72)) {
      $74 = ((($$pre$phiZ2D)) + 12|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = ((($$pre$phiZ2D)) + 16|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = ($75|0)==($77|0);
      if (!($78)) {
       break;
      }
      $79 = $73;
      $80 = HEAP32[$79>>2]|0;
      $81 = ((($80)) + 36|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (FUNCTION_TABLE_ii[$82 & 1023]($$pre$phiZ2D)|0);
      $84 = ($83|0)==(-1);
      if (!($84)) {
       break;
      }
     }
     $85 = HEAP32[$__is>>2]|0;
     $86 = ((($85)) + -12|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (($__is) + ($87)|0);
     $$sum16 = (($87) + 16)|0;
     $89 = (($__is) + ($$sum16)|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = $90 | 6;
     __ZNSt3__18ios_base5clearEj($88,$91);
    }
   }
  } while(0);
  $92 = HEAP32[$__is>>2]|0;
  $93 = ((($92)) + -12|0);
  $94 = HEAP32[$93>>2]|0;
  $$sum15 = (($94) + 16)|0;
  $95 = (($__is) + ($$sum15)|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ($96|0)==(0);
  $98 = $97&1;
  HEAP8[$this>>0] = $98;
 } else {
  $99 = (($__is) + ($3)|0);
  $100 = $5 | 4;
  __ZNSt3__18ios_base5clearEj($99,$100);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 L1: do {
  if (!($5)) {
   __THREW__ = 0;
   invoke_vii(539,($__s|0),($this|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   L3: do {
    if ($7) {
     $31 = ___cxa_find_matching_catch(0|0)|0;
     $32 = tempRet0;
     $$0 = $31;
    } else {
     $8 = HEAP8[$__s>>0]|0;
     $9 = ($8<<24>>24)==(0);
     do {
      if (!($9)) {
       $10 = HEAP32[$this>>2]|0;
       $11 = ((($10)) + -12|0);
       $12 = HEAP32[$11>>2]|0;
       $$sum1 = (($12) + 24)|0;
       $13 = (($this) + ($$sum1)|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = HEAP32[$14>>2]|0;
       $16 = ((($15)) + 24|0);
       $17 = HEAP32[$16>>2]|0;
       __THREW__ = 0;
       $18 = (invoke_ii($17|0,($14|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if (!($20)) {
        $21 = ($18|0)==(-1);
        if (!($21)) {
         break;
        }
        $22 = HEAP32[$this>>2]|0;
        $23 = ((($22)) + -12|0);
        $24 = HEAP32[$23>>2]|0;
        $25 = (($this) + ($24)|0);
        $$sum2 = (($24) + 16)|0;
        $26 = (($this) + ($$sum2)|0);
        $27 = HEAP32[$26>>2]|0;
        $28 = $27 | 1;
        __THREW__ = 0;
        invoke_vii(493,($25|0),($28|0));
        $29 = __THREW__; __THREW__ = 0;
        $30 = $29&1;
        if (!($30)) {
         break;
        }
       }
       $33 = ___cxa_find_matching_catch(0|0)|0;
       $34 = tempRet0;
       __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
       $$0 = $33;
       break L3;
      }
     } while(0);
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     break L1;
    }
   } while(0);
   (___cxa_begin_catch(($$0|0))|0);
   $35 = HEAP32[$this>>2]|0;
   $36 = ((($35)) + -12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($this) + ($37)|0);
   __THREW__ = 0;
   invoke_vi(542,($38|0));
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if (!($40)) {
    ___cxa_end_catch();
    break;
   }
   $41 = ___cxa_find_matching_catch()|0;
   $42 = tempRet0;
   __THREW__ = 0;
   invoke_v(543);
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if ($44) {
    $45 = ___cxa_find_matching_catch(0|0)|0;
    $46 = tempRet0;
    ___clang_call_terminate($45);
    // unreachable;
   } else {
    ___resumeException($41|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 | 1;
 HEAP32[$0>>2] = $2;
 $3 = ((($this)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  return;
 } else {
  ___cxa_rethrow();
  // unreachable;
 }
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre$phi5Z2D = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__err = 0, $__s = 0, $__temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 24|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__s = sp + 28|0;
 $__err = sp + 8|0;
 $__temp = sp + 4|0;
 $2 = sp;
 __THREW__ = 0;
 invoke_viii(566,($__s|0),($this|0),0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 6;
  } else {
   $5 = HEAP8[$__s>>0]|0;
   $6 = ($5<<24>>24)==(0);
   if (!($6)) {
    HEAP32[$__err>>2] = 0;
    $7 = HEAP32[$this>>2]|0;
    $8 = ((($7)) + -12|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($this) + ($9)|0);
    $11 = (__ZNKSt3__18ios_base6getlocEv($10)|0);
    HEAP32[$2>>2] = $11;
    __THREW__ = 0;
    $12 = (invoke_iii(495,($2|0),(6728|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     $15 = HEAP32[$this>>2]|0;
     $16 = ((($15)) + -12|0);
     $17 = HEAP32[$16>>2]|0;
     $$sum$i = (($17) + 24)|0;
     $18 = (($this) + ($$sum$i)|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (($this) + ($17)|0);
     $21 = HEAP32[$12>>2]|0;
     $22 = ((($21)) + 16|0);
     $23 = HEAP32[$22>>2]|0;
     HEAP32[$0>>2] = $19;
     HEAP32[$1>>2] = 0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
     ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
     (invoke_iiiiiii($23|0,($12|0),($$byval_copy|0),($$byval_copy1|0),($20|0),($__err|0),($__temp|0))|0);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if (!($25)) {
      __ZNSt3__16localeD2Ev($2);
      $26 = HEAP32[$__temp>>2]|0;
      HEAP32[$__n>>2] = $26;
      $27 = HEAP32[$this>>2]|0;
      $28 = ((($27)) + -12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($this) + ($29)|0);
      $31 = HEAP32[$__err>>2]|0;
      $$sum = (($29) + 16)|0;
      $32 = (($this) + ($$sum)|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = $33 | $31;
      __THREW__ = 0;
      invoke_vii(493,($30|0),($34|0));
      $35 = __THREW__; __THREW__ = 0;
      $36 = $35&1;
      if ($36) {
       label = 6;
       break;
      } else {
       break;
      }
     }
    }
    $39 = ___cxa_find_matching_catch(0|0)|0;
    $40 = tempRet0;
    __ZNSt3__16localeD2Ev($2);
    $$0 = $39;$$pre$phi5Z2D = $this;$$pre$phiZ2D = $this;
    label = 8;
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $37 = ___cxa_find_matching_catch(0|0)|0;
  $38 = tempRet0;
  $$0 = $37;$$pre$phi5Z2D = $this;$$pre$phiZ2D = $this;
  label = 8;
 }
 do {
  if ((label|0) == 8) {
   (___cxa_begin_catch(($$0|0))|0);
   $41 = HEAP32[$$pre$phiZ2D>>2]|0;
   $42 = ((($41)) + -12|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($$pre$phi5Z2D) + ($43)|0);
   __THREW__ = 0;
   invoke_vi(542,($44|0));
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   if (!($46)) {
    ___cxa_end_catch();
    break;
   }
   $47 = ___cxa_find_matching_catch()|0;
   $48 = tempRet0;
   __THREW__ = 0;
   invoke_v(543);
   $49 = __THREW__; __THREW__ = 0;
   $50 = $49&1;
   if ($50) {
    $51 = ___cxa_find_matching_catch(0|0)|0;
    $52 = tempRet0;
    ___clang_call_terminate($51);
    // unreachable;
   } else {
    ___resumeException($47|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERd($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre$phi5Z2D = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__err = 0;
 var $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $__s = sp + 24|0;
 $__err = sp + 4|0;
 $2 = sp;
 __THREW__ = 0;
 invoke_viii(566,($__s|0),($this|0),0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 6;
  } else {
   $5 = HEAP8[$__s>>0]|0;
   $6 = ($5<<24>>24)==(0);
   if (!($6)) {
    HEAP32[$__err>>2] = 0;
    $7 = HEAP32[$this>>2]|0;
    $8 = ((($7)) + -12|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($this) + ($9)|0);
    $11 = (__ZNKSt3__18ios_base6getlocEv($10)|0);
    HEAP32[$2>>2] = $11;
    __THREW__ = 0;
    $12 = (invoke_iii(495,($2|0),(6728|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     $15 = HEAP32[$this>>2]|0;
     $16 = ((($15)) + -12|0);
     $17 = HEAP32[$16>>2]|0;
     $$sum$i = (($17) + 24)|0;
     $18 = (($this) + ($$sum$i)|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (($this) + ($17)|0);
     $21 = HEAP32[$12>>2]|0;
     $22 = ((($21)) + 44|0);
     $23 = HEAP32[$22>>2]|0;
     HEAP32[$0>>2] = $19;
     HEAP32[$1>>2] = 0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
     ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
     (invoke_iiiiiii($23|0,($12|0),($$byval_copy|0),($$byval_copy1|0),($20|0),($__err|0),($__n|0))|0);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if (!($25)) {
      __ZNSt3__16localeD2Ev($2);
      $26 = HEAP32[$this>>2]|0;
      $27 = ((($26)) + -12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = (($this) + ($28)|0);
      $30 = HEAP32[$__err>>2]|0;
      $$sum = (($28) + 16)|0;
      $31 = (($this) + ($$sum)|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = $32 | $30;
      __THREW__ = 0;
      invoke_vii(493,($29|0),($33|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       label = 6;
       break;
      } else {
       break;
      }
     }
    }
    $38 = ___cxa_find_matching_catch(0|0)|0;
    $39 = tempRet0;
    __ZNSt3__16localeD2Ev($2);
    $$0 = $38;$$pre$phi5Z2D = $this;$$pre$phiZ2D = $this;
    label = 8;
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $36 = ___cxa_find_matching_catch(0|0)|0;
  $37 = tempRet0;
  $$0 = $36;$$pre$phi5Z2D = $this;$$pre$phiZ2D = $this;
  label = 8;
 }
 do {
  if ((label|0) == 8) {
   (___cxa_begin_catch(($$0|0))|0);
   $40 = HEAP32[$$pre$phiZ2D>>2]|0;
   $41 = ((($40)) + -12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($$pre$phi5Z2D) + ($42)|0);
   __THREW__ = 0;
   invoke_vi(542,($43|0));
   $44 = __THREW__; __THREW__ = 0;
   $45 = $44&1;
   if (!($45)) {
    ___cxa_end_catch();
    break;
   }
   $46 = ___cxa_find_matching_catch()|0;
   $47 = tempRet0;
   __THREW__ = 0;
   invoke_v(543);
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   if ($49) {
    $50 = ___cxa_find_matching_catch(0|0)|0;
    $51 = tempRet0;
    ___clang_call_terminate($50);
    // unreachable;
   } else {
    ___resumeException($46|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE4peekEv($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__r$1 = 0, $__sen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sen = sp;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = 0;
 __THREW__ = 0;
 invoke_viii(566,($__sen|0),($this|0),1);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if ($2) {
   label = 8;
  } else {
   $3 = HEAP8[$__sen>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $__r$1 = -1;
   } else {
    $5 = HEAP32[$this>>2]|0;
    $6 = ((($5)) + -12|0);
    $7 = HEAP32[$6>>2]|0;
    $$sum = (($7) + 24)|0;
    $8 = (($this) + ($$sum)|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ((($9)) + 12|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($9)) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11|0)==($13|0);
    if (!($14)) {
     $21 = HEAP8[$11>>0]|0;
     $22 = $21&255;
     $__r$1 = $22;
     break;
    }
    $15 = HEAP32[$9>>2]|0;
    $16 = ((($15)) + 36|0);
    $17 = HEAP32[$16>>2]|0;
    __THREW__ = 0;
    $18 = (invoke_ii($17|0,($9|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     label = 8;
    } else {
     $23 = ($18|0)==(-1);
     if ($23) {
      $24 = HEAP32[$this>>2]|0;
      $25 = ((($24)) + -12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (($this) + ($26)|0);
      $$sum1 = (($26) + 16)|0;
      $28 = (($this) + ($$sum1)|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = $29 | 2;
      __THREW__ = 0;
      invoke_vii(493,($27|0),($30|0));
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       label = 8;
      } else {
       $__r$1 = -1;
      }
     } else {
      $__r$1 = $18;
     }
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 8) {
   $33 = ___cxa_find_matching_catch(0|0)|0;
   $34 = tempRet0;
   (___cxa_begin_catch(($33|0))|0);
   $35 = HEAP32[$this>>2]|0;
   $36 = ((($35)) + -12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($this) + ($37)|0);
   __THREW__ = 0;
   invoke_vi(542,($38|0));
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if (!($40)) {
    ___cxa_end_catch();
    $__r$1 = -1;
    break;
   }
   $41 = ___cxa_find_matching_catch()|0;
   $42 = tempRet0;
   __THREW__ = 0;
   invoke_v(543);
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if ($44) {
    $45 = ___cxa_find_matching_catch(0|0)|0;
    $46 = tempRet0;
    ___clang_call_terminate($45);
    // unreachable;
   } else {
    ___resumeException($41|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($__r$1|0);
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 L1: do {
  if (!($5)) {
   __THREW__ = 0;
   invoke_vii(690,($__s|0),($this|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   L3: do {
    if ($7) {
     $31 = ___cxa_find_matching_catch(0|0)|0;
     $32 = tempRet0;
     $$0 = $31;
    } else {
     $8 = HEAP8[$__s>>0]|0;
     $9 = ($8<<24>>24)==(0);
     do {
      if (!($9)) {
       $10 = HEAP32[$this>>2]|0;
       $11 = ((($10)) + -12|0);
       $12 = HEAP32[$11>>2]|0;
       $$sum1 = (($12) + 24)|0;
       $13 = (($this) + ($$sum1)|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = HEAP32[$14>>2]|0;
       $16 = ((($15)) + 24|0);
       $17 = HEAP32[$16>>2]|0;
       __THREW__ = 0;
       $18 = (invoke_ii($17|0,($14|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if (!($20)) {
        $21 = ($18|0)==(-1);
        if (!($21)) {
         break;
        }
        $22 = HEAP32[$this>>2]|0;
        $23 = ((($22)) + -12|0);
        $24 = HEAP32[$23>>2]|0;
        $25 = (($this) + ($24)|0);
        $$sum2 = (($24) + 16)|0;
        $26 = (($this) + ($$sum2)|0);
        $27 = HEAP32[$26>>2]|0;
        $28 = $27 | 1;
        __THREW__ = 0;
        invoke_vii(493,($25|0),($28|0));
        $29 = __THREW__; __THREW__ = 0;
        $30 = $29&1;
        if (!($30)) {
         break;
        }
       }
       $33 = ___cxa_find_matching_catch(0|0)|0;
       $34 = tempRet0;
       __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
       $$0 = $33;
       break L3;
      }
     } while(0);
     __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
     break L1;
    }
   } while(0);
   (___cxa_begin_catch(($$0|0))|0);
   $35 = HEAP32[$this>>2]|0;
   $36 = ((($35)) + -12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($this) + ($37)|0);
   __THREW__ = 0;
   invoke_vi(542,($38|0));
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if (!($40)) {
    ___cxa_end_catch();
    break;
   }
   $41 = ___cxa_find_matching_catch()|0;
   $42 = tempRet0;
   __THREW__ = 0;
   invoke_v(543);
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if ($44) {
    $45 = ___cxa_find_matching_catch(0|0)|0;
    $46 = tempRet0;
    ___clang_call_terminate($45);
    // unreachable;
   } else {
    ___resumeException($41|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__os) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$sum1 = (($3) + 72)|0;
  $7 = (($__os) + ($$sum1)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($8)|0);
  }
  HEAP8[$this>>0] = 1;
 }
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 do {
  if (!($7)) {
   $$sum1 = (($4) + 16)|0;
   $8 = (($1) + ($$sum1)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0);
   if ($10) {
    $$sum2 = (($4) + 4)|0;
    $11 = (($1) + ($$sum2)|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $12 & 8192;
    $14 = ($13|0)==(0);
    if (!($14)) {
     $15 = (__ZSt18uncaught_exceptionv()|0);
     if (!($15)) {
      $16 = HEAP32[$0>>2]|0;
      $17 = HEAP32[$16>>2]|0;
      $18 = ((($17)) + -12|0);
      $19 = HEAP32[$18>>2]|0;
      $$sum3 = (($19) + 24)|0;
      $20 = (($16) + ($$sum3)|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = HEAP32[$21>>2]|0;
      $23 = ((($22)) + 24|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($21|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $28 = ($25|0)==(-1);
       if (!($28)) {
        break;
       }
       $29 = HEAP32[$0>>2]|0;
       $30 = HEAP32[$29>>2]|0;
       $31 = ((($30)) + -12|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = (($29) + ($32)|0);
       $$sum4 = (($32) + 16)|0;
       $34 = (($29) + ($$sum4)|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = $35 | 1;
       __THREW__ = 0;
       invoke_vii(493,($33|0),($36|0));
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if (!($38)) {
        break;
       }
      }
      $39 = ___cxa_find_matching_catch(0|0)|0;
      $40 = tempRet0;
      (___cxa_begin_catch(($39|0))|0);
      __THREW__ = 0;
      invoke_v(543);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       $43 = ___cxa_find_matching_catch(0|0)|0;
       $44 = tempRet0;
       ___clang_call_terminate($43);
       // unreachable;
      }
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$pre$phi6Z2D = 0, $$pre$phi8Z2D = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum$i = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $8 = 0, $9 = 0, $__s = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $__s = sp + 8|0;
 $2 = sp;
 __THREW__ = 0;
 invoke_vii(539,($__s|0),($this|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   $55 = ___cxa_find_matching_catch(0|0)|0;
   $56 = tempRet0;
   $$1 = $55;$$pre$phi6Z2D = $this;$$pre$phiZ2D = $this;
   label = 19;
  } else {
   $5 = HEAP8[$__s>>0]|0;
   $6 = ($5<<24>>24)==(0);
   do {
    if (!($6)) {
     $7 = HEAP32[$this>>2]|0;
     $8 = ((($7)) + -12|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (($this) + ($9)|0);
     $11 = (__ZNKSt3__18ios_base6getlocEv($10)|0);
     HEAP32[$2>>2] = $11;
     __THREW__ = 0;
     $12 = (invoke_iii(495,($2|0),(6860|0))|0);
     $13 = __THREW__; __THREW__ = 0;
     $14 = $13&1;
     if ($14) {
      $59 = ___cxa_find_matching_catch(0|0)|0;
      $60 = tempRet0;
      __ZNSt3__16localeD2Ev($2);
      $$0 = $59;
     } else {
      __ZNSt3__16localeD2Ev($2);
      $15 = HEAP32[$this>>2]|0;
      $16 = ((($15)) + -12|0);
      $17 = HEAP32[$16>>2]|0;
      $$sum$i = (($17) + 24)|0;
      $18 = (($this) + ($$sum$i)|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (($this) + ($17)|0);
      $$sum = (($17) + 76)|0;
      $21 = (($this) + ($$sum)|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($22|0)==(-1);
      do {
       if ($23) {
        $24 = (__ZNKSt3__18ios_base6getlocEv($20)|0);
        HEAP32[$1>>2] = $24;
        __THREW__ = 0;
        $25 = (invoke_iii(495,($1|0),(7688|0))|0);
        $26 = __THREW__; __THREW__ = 0;
        $27 = $26&1;
        if (!($27)) {
         $28 = HEAP32[$25>>2]|0;
         $29 = ((($28)) + 28|0);
         $30 = HEAP32[$29>>2]|0;
         __THREW__ = 0;
         $31 = (invoke_iii($30|0,($25|0),32)|0);
         $32 = __THREW__; __THREW__ = 0;
         $33 = $32&1;
         if (!($33)) {
          __ZNSt3__16localeD2Ev($1);
          $36 = $31 << 24 >> 24;
          HEAP32[$21>>2] = $36;
          $$pre$phi8Z2D = $20;$38 = $36;
          label = 10;
          break;
         }
        }
        $34 = ___cxa_find_matching_catch(0|0)|0;
        $35 = tempRet0;
        __ZNSt3__16localeD2Ev($1);
        $eh$lpad$body$indexZ2D = $34;
       } else {
        $$pre$phi8Z2D = $20;$38 = $22;
        label = 10;
       }
      } while(0);
      if ((label|0) == 10) {
       $37 = $38&255;
       $39 = HEAP32[$12>>2]|0;
       $40 = ((($39)) + 16|0);
       $41 = HEAP32[$40>>2]|0;
       HEAP32[$0>>2] = $19;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
       $42 = (invoke_iiiiii($41|0,($12|0),($$byval_copy|0),($$pre$phi8Z2D|0),($37|0),($__n|0))|0);
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if (!($44)) {
        $45 = ($42|0)==(0|0);
        if (!($45)) {
         break;
        }
        $46 = HEAP32[$this>>2]|0;
        $47 = ((($46)) + -12|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = (($this) + ($48)|0);
        $$sum4 = (($48) + 16)|0;
        $50 = (($this) + ($$sum4)|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = $51 | 5;
        __THREW__ = 0;
        invoke_vii(493,($49|0),($52|0));
        $53 = __THREW__; __THREW__ = 0;
        $54 = $53&1;
        if (!($54)) {
         break;
        }
       }
       $57 = ___cxa_find_matching_catch(0|0)|0;
       $58 = tempRet0;
       $eh$lpad$body$indexZ2D = $57;
      }
      $$0 = $eh$lpad$body$indexZ2D;
     }
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     $$1 = $$0;$$pre$phi6Z2D = $this;$$pre$phiZ2D = $this;
     label = 19;
     break L1;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
  }
 } while(0);
 do {
  if ((label|0) == 19) {
   (___cxa_begin_catch(($$1|0))|0);
   $61 = HEAP32[$$pre$phiZ2D>>2]|0;
   $62 = ((($61)) + -12|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($$pre$phi6Z2D) + ($63)|0);
   __THREW__ = 0;
   invoke_vi(542,($64|0));
   $65 = __THREW__; __THREW__ = 0;
   $66 = $65&1;
   if (!($66)) {
    ___cxa_end_catch();
    break;
   }
   $67 = ___cxa_find_matching_catch()|0;
   $68 = tempRet0;
   __THREW__ = 0;
   invoke_v(543);
   $69 = __THREW__; __THREW__ = 0;
   $70 = $69&1;
   if ($70) {
    $71 = ___cxa_find_matching_catch(0|0)|0;
    $72 = tempRet0;
    ___clang_call_terminate($71);
    // unreachable;
   } else {
    ___resumeException($67|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEd($this,$__n) {
 $this = $this|0;
 $__n = +$__n;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$pre$phi5Z2D = 0, $$pre$phi7Z2D = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum$i = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $8 = 0, $9 = 0, $__s = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $__s = sp + 8|0;
 $2 = sp;
 __THREW__ = 0;
 invoke_vii(539,($__s|0),($this|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   $55 = ___cxa_find_matching_catch(0|0)|0;
   $56 = tempRet0;
   $$1 = $55;$$pre$phi5Z2D = $this;$$pre$phiZ2D = $this;
   label = 19;
  } else {
   $5 = HEAP8[$__s>>0]|0;
   $6 = ($5<<24>>24)==(0);
   do {
    if (!($6)) {
     $7 = HEAP32[$this>>2]|0;
     $8 = ((($7)) + -12|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (($this) + ($9)|0);
     $11 = (__ZNKSt3__18ios_base6getlocEv($10)|0);
     HEAP32[$2>>2] = $11;
     __THREW__ = 0;
     $12 = (invoke_iii(495,($2|0),(6860|0))|0);
     $13 = __THREW__; __THREW__ = 0;
     $14 = $13&1;
     if ($14) {
      $59 = ___cxa_find_matching_catch(0|0)|0;
      $60 = tempRet0;
      __ZNSt3__16localeD2Ev($2);
      $$0 = $59;
     } else {
      __ZNSt3__16localeD2Ev($2);
      $15 = HEAP32[$this>>2]|0;
      $16 = ((($15)) + -12|0);
      $17 = HEAP32[$16>>2]|0;
      $$sum$i = (($17) + 24)|0;
      $18 = (($this) + ($$sum$i)|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (($this) + ($17)|0);
      $$sum = (($17) + 76)|0;
      $21 = (($this) + ($$sum)|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($22|0)==(-1);
      do {
       if ($23) {
        $24 = (__ZNKSt3__18ios_base6getlocEv($20)|0);
        HEAP32[$1>>2] = $24;
        __THREW__ = 0;
        $25 = (invoke_iii(495,($1|0),(7688|0))|0);
        $26 = __THREW__; __THREW__ = 0;
        $27 = $26&1;
        if (!($27)) {
         $28 = HEAP32[$25>>2]|0;
         $29 = ((($28)) + 28|0);
         $30 = HEAP32[$29>>2]|0;
         __THREW__ = 0;
         $31 = (invoke_iii($30|0,($25|0),32)|0);
         $32 = __THREW__; __THREW__ = 0;
         $33 = $32&1;
         if (!($33)) {
          __ZNSt3__16localeD2Ev($1);
          $36 = $31 << 24 >> 24;
          HEAP32[$21>>2] = $36;
          $$pre$phi7Z2D = $20;$38 = $36;
          label = 10;
          break;
         }
        }
        $34 = ___cxa_find_matching_catch(0|0)|0;
        $35 = tempRet0;
        __ZNSt3__16localeD2Ev($1);
        $eh$lpad$body$indexZ2D = $34;
       } else {
        $$pre$phi7Z2D = $20;$38 = $22;
        label = 10;
       }
      } while(0);
      if ((label|0) == 10) {
       $37 = $38&255;
       $39 = HEAP32[$12>>2]|0;
       $40 = ((($39)) + 32|0);
       $41 = HEAP32[$40>>2]|0;
       HEAP32[$0>>2] = $19;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
       $42 = (invoke_iiiiid($41|0,($12|0),($$byval_copy|0),($$pre$phi7Z2D|0),($37|0),(+$__n))|0);
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if (!($44)) {
        $45 = ($42|0)==(0|0);
        if (!($45)) {
         break;
        }
        $46 = HEAP32[$this>>2]|0;
        $47 = ((($46)) + -12|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = (($this) + ($48)|0);
        $$sum3 = (($48) + 16)|0;
        $50 = (($this) + ($$sum3)|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = $51 | 5;
        __THREW__ = 0;
        invoke_vii(493,($49|0),($52|0));
        $53 = __THREW__; __THREW__ = 0;
        $54 = $53&1;
        if (!($54)) {
         break;
        }
       }
       $57 = ___cxa_find_matching_catch(0|0)|0;
       $58 = tempRet0;
       $eh$lpad$body$indexZ2D = $57;
      }
      $$0 = $eh$lpad$body$indexZ2D;
     }
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     $$1 = $$0;$$pre$phi5Z2D = $this;$$pre$phiZ2D = $this;
     label = 19;
     break L1;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
  }
 } while(0);
 do {
  if ((label|0) == 19) {
   (___cxa_begin_catch(($$1|0))|0);
   $61 = HEAP32[$$pre$phiZ2D>>2]|0;
   $62 = ((($61)) + -12|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($$pre$phi5Z2D) + ($63)|0);
   __THREW__ = 0;
   invoke_vi(542,($64|0));
   $65 = __THREW__; __THREW__ = 0;
   $66 = $65&1;
   if (!($66)) {
    ___cxa_end_catch();
    break;
   }
   $67 = ___cxa_find_matching_catch()|0;
   $68 = tempRet0;
   __THREW__ = 0;
   invoke_v(543);
   $69 = __THREW__; __THREW__ = 0;
   $70 = $69&1;
   if ($70) {
    $71 = ___cxa_find_matching_catch(0|0)|0;
    $72 = tempRet0;
    ___clang_call_terminate($71);
    // unreachable;
   } else {
    ___resumeException($67|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$pre$phi3Z2D = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 __THREW__ = 0;
 invoke_vii(539,($__s|0),($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   $35 = ___cxa_find_matching_catch(0|0)|0;
   $36 = tempRet0;
   $$0 = $35;$$pre$phi3Z2D = $this;$$pre$phiZ2D = $this;
   label = 11;
  } else {
   $2 = HEAP8[$__s>>0]|0;
   $3 = ($2<<24>>24)==(0);
   do {
    if (!($3)) {
     $4 = HEAP32[$this>>2]|0;
     $5 = ((($4)) + -12|0);
     $6 = HEAP32[$5>>2]|0;
     $$sum$i = (($6) + 24)|0;
     $7 = (($this) + ($$sum$i)|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = $8;
     $10 = ($8|0)==(0);
     if ($10) {
      label = 8;
     } else {
      $11 = ((($9)) + 24|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = ((($9)) + 28|0);
      $14 = HEAP32[$13>>2]|0;
      $15 = ($12|0)==($14|0);
      if (!($15)) {
       $16 = ((($12)) + 1|0);
       HEAP32[$11>>2] = $16;
       HEAP8[$12>>0] = $__c;
       break;
      }
      $17 = $8;
      $18 = HEAP32[$17>>2]|0;
      $19 = ((($18)) + 52|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = $__c&255;
      __THREW__ = 0;
      $22 = (invoke_iii($20|0,($9|0),($21|0))|0);
      $23 = __THREW__; __THREW__ = 0;
      $24 = $23&1;
      if (!($24)) {
       $25 = ($22|0)==(-1);
       if ($25) {
        label = 8;
       } else {
        break;
       }
      }
     }
     if ((label|0) == 8) {
      $26 = HEAP32[$this>>2]|0;
      $27 = ((($26)) + -12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = (($this) + ($28)|0);
      $$sum = (($28) + 16)|0;
      $30 = (($this) + ($$sum)|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = $31 | 1;
      __THREW__ = 0;
      invoke_vii(493,($29|0),($32|0));
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if (!($34)) {
       break;
      }
     }
     $37 = ___cxa_find_matching_catch(0|0)|0;
     $38 = tempRet0;
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     $$0 = $37;$$pre$phi3Z2D = $this;$$pre$phiZ2D = $this;
     label = 11;
     break L1;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
  }
 } while(0);
 do {
  if ((label|0) == 11) {
   (___cxa_begin_catch(($$0|0))|0);
   $39 = HEAP32[$$pre$phiZ2D>>2]|0;
   $40 = ((($39)) + -12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($$pre$phi3Z2D) + ($41)|0);
   __THREW__ = 0;
   invoke_vi(542,($42|0));
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if (!($44)) {
    ___cxa_end_catch();
    break;
   }
   $45 = ___cxa_find_matching_catch()|0;
   $46 = tempRet0;
   __THREW__ = 0;
   invoke_v(543);
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if ($48) {
    $49 = ___cxa_find_matching_catch(0|0)|0;
    $50 = tempRet0;
    ___clang_call_terminate($49);
    // unreachable;
   } else {
    ___resumeException($45|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__os) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$sum1 = (($3) + 72)|0;
  $7 = (($__os) + ($$sum1)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   (__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($8)|0);
  }
  HEAP8[$this>>0] = 1;
 }
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 do {
  if (!($7)) {
   $$sum1 = (($4) + 16)|0;
   $8 = (($1) + ($$sum1)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0);
   if ($10) {
    $$sum2 = (($4) + 4)|0;
    $11 = (($1) + ($$sum2)|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $12 & 8192;
    $14 = ($13|0)==(0);
    if (!($14)) {
     $15 = (__ZSt18uncaught_exceptionv()|0);
     if (!($15)) {
      $16 = HEAP32[$0>>2]|0;
      $17 = HEAP32[$16>>2]|0;
      $18 = ((($17)) + -12|0);
      $19 = HEAP32[$18>>2]|0;
      $$sum3 = (($19) + 24)|0;
      $20 = (($16) + ($$sum3)|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = HEAP32[$21>>2]|0;
      $23 = ((($22)) + 24|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($21|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $28 = ($25|0)==(-1);
       if (!($28)) {
        break;
       }
       $29 = HEAP32[$0>>2]|0;
       $30 = HEAP32[$29>>2]|0;
       $31 = ((($30)) + -12|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = (($29) + ($32)|0);
       $$sum4 = (($32) + 16)|0;
       $34 = (($29) + ($$sum4)|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = $35 | 1;
       __THREW__ = 0;
       invoke_vii(493,($33|0),($36|0));
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if (!($38)) {
        break;
       }
      }
      $39 = ___cxa_find_matching_catch(0|0)|0;
      $40 = tempRet0;
      (___cxa_begin_catch(($39|0))|0);
      __THREW__ = 0;
      invoke_v(543);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       $43 = ___cxa_find_matching_catch(0|0)|0;
       $44 = tempRet0;
       ___clang_call_terminate($43);
       // unreachable;
      }
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (18605|0);
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)!=(1);
 $1 = ($ev|0)<(257);
 $or$cond = $0 & $1;
 if ($or$cond) {
  __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev);
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,18614,35);
 }
 return;
}
function __ZNSt3__117iostream_categoryEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[1032>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((1032|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   HEAP32[6580>>2] = (6552);
   (___cxa_atexit((227|0),(6580|0),(___dso_handle|0))|0);
   ___cxa_guard_release((1032|0));
  }
 }
 return (6580|0);
}
function __ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE($this,$msg,$ec) {
 $this = $this|0;
 $msg = $msg|0;
 $ec = $ec|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmpcast$byval_copy = sp + 8|0;
 $0 = sp;
 $1 = $ec;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$tmpcast$byval_copy,$msg);
 HEAP32[$this>>2] = (6516);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__17collateIcED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$018 = 0, $$02$lcssa = 0, $$027 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$018 = $__lo2;$$027 = $__lo1;
   while(1) {
    $1 = ($$027|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP8[$$027>>0]|0;
    $3 = HEAP8[$$018>>0]|0;
    $4 = ($2<<24>>24)<($3<<24>>24);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3<<24>>24)<($2<<24>>24);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = ((($$027)) + 1|0);
    $7 = ((($$018)) + 1|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$018 = $7;$$027 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 return ($$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
  while(1) {
   $1 = $__h$02 << 4;
   $2 = HEAP8[$__p$01>>0]|0;
   $3 = $2 << 24 >> 24;
   $4 = (($3) + ($1))|0;
   $5 = $4 & -268435456;
   $6 = $5 >>> 24;
   $7 = $6 | $5;
   $8 = $7 ^ $4;
   $9 = ((($__p$01)) + 1|0);
   $10 = ($9|0)==($__hi|0);
   if ($10) {
    $__h$0$lcssa = $8;
    break;
   } else {
    $__h$02 = $8;$__p$01 = $9;
   }
  }
 }
 return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$018 = 0, $$02$lcssa = 0, $$027 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$018 = $__lo2;$$027 = $__lo1;
   while(1) {
    $1 = ($$027|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP32[$$027>>2]|0;
    $3 = HEAP32[$$018>>2]|0;
    $4 = ($2|0)<($3|0);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3|0)<($2|0);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = ((($$027)) + 4|0);
    $7 = ((($$018)) + 4|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$018 = $7;$$027 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 return ($$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
  while(1) {
   $1 = $__h$02 << 4;
   $2 = HEAP32[$__p$01>>2]|0;
   $3 = (($2) + ($1))|0;
   $4 = $3 & -268435456;
   $5 = $4 >>> 24;
   $6 = $5 | $4;
   $7 = $6 ^ $3;
   $8 = ((($__p$01)) + 4|0);
   $9 = ($8|0)==($__hi|0);
   if ($9) {
    $__h$0$lcssa = $7;
    break;
   } else {
    $__h$02 = $7;$__p$01 = $8;
   }
  }
 }
 return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$sroa$01$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 60|0;
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 52|0;
 $__lv = sp + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $__names = sp + 8|0;
 $4 = sp;
 $5 = ((($__iob)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   HEAP32[$__lv>>2] = -1;
   $9 = HEAP32[$this>>2]|0;
   $10 = ((($9)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$__b>>2]|0;
   HEAP32[$0>>2] = $12;
   $13 = HEAP32[$__e>>2]|0;
   HEAP32[$1>>2] = $13;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
   $14 = (FUNCTION_TABLE_iiiiiii[$11 & 1023]($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv)|0);
   HEAP32[$__b>>2] = $14;
   $15 = HEAP32[$__lv>>2]|0;
   switch ($15|0) {
   case 0:  {
    HEAP8[$__v>>0] = 0;
    $$sroa$01$0 = $14;
    break L1;
    break;
   }
   case 1:  {
    HEAP8[$__v>>0] = 1;
    $$sroa$01$0 = $14;
    break L1;
    break;
   }
   default: {
    HEAP8[$__v>>0] = 1;
    HEAP32[$__err>>2] = 4;
    $$sroa$01$0 = $14;
    break L1;
   }
   }
  } else {
   $16 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$2>>2] = $16;
   __THREW__ = 0;
   $17 = (invoke_iii(495,($2|0),(7688|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   do {
    if ($19) {
     $44 = ___cxa_find_matching_catch()|0;
     $45 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $$0 = $44;$$03 = $45;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $20 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
     HEAP32[$3>>2] = $20;
     __THREW__ = 0;
     $21 = (invoke_iii(495,($3|0),(7828|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      $46 = ___cxa_find_matching_catch()|0;
      $47 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
      $$0 = $46;$$03 = $47;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
     $24 = HEAP32[$21>>2]|0;
     $25 = ((($24)) + 24|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     invoke_vii($26|0,($__names|0),($21|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $$02 = $__names;
     } else {
      $29 = ((($__names)) + 12|0);
      $30 = HEAP32[$21>>2]|0;
      $31 = ((($30)) + 28|0);
      $32 = HEAP32[$31>>2]|0;
      __THREW__ = 0;
      invoke_vii($32|0,($29|0),($21|0));
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       $$02 = $29;
      } else {
       $35 = HEAP32[$__e>>2]|0;
       HEAP32[$4>>2] = $35;
       $36 = ((($__names)) + 24|0);
       __THREW__ = 0;
       ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
       $37 = (invoke_iiiiiiii(691,($__b|0),($$byval_copy2|0),($__names|0),($36|0),($17|0),($__err|0),1)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        $54 = ___cxa_find_matching_catch()|0;
        $55 = tempRet0;
        $56 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($56);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__names);
        $$0 = $54;$$03 = $55;
        break;
       } else {
        $40 = ($37|0)==($__names|0);
        $41 = $40&1;
        HEAP8[$__v>>0] = $41;
        $42 = HEAP32[$__b>>2]|0;
        $43 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($43);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__names);
        $$sroa$01$0 = $42;
        break L1;
       }
      }
     }
     $48 = ___cxa_find_matching_catch()|0;
     $49 = tempRet0;
     $50 = ($__names|0)==($$02|0);
     if ($50) {
      $$0 = $48;$$03 = $49;
     } else {
      $52 = $$02;
      while(1) {
       $51 = ((($52)) + -12|0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($51);
       $53 = ($51|0)==($__names|0);
       if ($53) {
        $$0 = $48;$$03 = $49;
        break;
       } else {
        $52 = $51;
       }
      }
     }
    }
   } while(0);
   ___resumeException($$0|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$01$0|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i10 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0;
 var $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i26 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $0 = sp + 192|0;
 $__buf = sp + 180|0;
 $__a_end = sp + 176|0;
 $__g = sp + 16|0;
 $__g_end = sp + 8|0;
 $__dc = sp + 4|0;
 HEAP32[$__grouping>>2] = 0;
 $1 = ((($__grouping)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__grouping)) + 8|0);
 HEAP32[$2>>2] = 0;
 __THREW__ = 0;
 $3 = (invoke_ii(494,($__iob|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   $87 = ___cxa_find_matching_catch()|0;
   $88 = tempRet0;
   $$0 = $87;$$01 = $88;
  } else {
   HEAP32[$0>>2] = $3;
   __THREW__ = 0;
   $6 = (invoke_iii(495,($0|0),(7688|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    $9 = HEAP32[$6>>2]|0;
    $10 = ((($9)) + 32|0);
    $11 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($11|0,($6|0),(18650|0),((18676)|0),($__atoms|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
     HEAP32[$__buf>>2] = 0;
     $14 = ((($__buf)) + 4|0);
     HEAP32[$14>>2] = 0;
     $15 = ((($__buf)) + 8|0);
     HEAP32[$15>>2] = 0;
     $16 = HEAP8[$__buf>>0]|0;
     $17 = $16 & 1;
     $18 = ($17<<24>>24)==(0);
     if ($18) {
      $21 = 10;
     } else {
      $19 = HEAP32[$__buf>>2]|0;
      $20 = $19 & -2;
      $phitmp$i = (($20) + -1)|0;
      $21 = $phitmp$i;
     }
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($21|0),0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     L10: do {
      if ($23) {
       label = 30;
      } else {
       $24 = HEAP8[$__buf>>0]|0;
       $25 = $24 & 1;
       $26 = ($25<<24>>24)==(0);
       $27 = ((($__buf)) + 8|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ((($__buf)) + 1|0);
       $30 = $26 ? $29 : $28;
       HEAP32[$__a_end>>2] = $30;
       HEAP32[$__g_end>>2] = $__g;
       HEAP32[$__dc>>2] = 0;
       $31 = ((($__buf)) + 4|0);
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i10 = $$pre;$__a$0 = $30;
       L12: while(1) {
        $32 = ($$pre$i$i$i10|0)==(0|0);
        if ($32) {
         $$pre$i$i$i = 0;
        } else {
         $33 = ((($$pre$i$i$i10)) + 12|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = ((($$pre$i$i$i10)) + 16|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ($34|0)==($36|0);
         if ($37) {
          $38 = HEAP32[$$pre$i$i$i10>>2]|0;
          $39 = ((($38)) + 36|0);
          $40 = HEAP32[$39>>2]|0;
          __THREW__ = 0;
          $41 = (invoke_ii($40|0,($$pre$i$i$i10|0))|0);
          $42 = __THREW__; __THREW__ = 0;
          $43 = $42&1;
          if ($43) {
           label = 29;
           break;
          }
          $44 = ($41|0)==(-1);
          if ($44) {
           HEAP32[$__b>>2] = 0;
           $$pre$i$i$i = 0;
          } else {
           $$pre$i$i$i = $$pre$i$i$i10;
          }
         } else {
          $$pre$i$i$i = $$pre$i$i$i10;
         }
        }
        $45 = ($$pre$i$i$i|0)==(0|0);
        $46 = HEAP32[$__e>>2]|0;
        $47 = ($46|0)==(0|0);
        do {
         if ($47) {
          label = 19;
         } else {
          $48 = ((($46)) + 12|0);
          $49 = HEAP32[$48>>2]|0;
          $50 = ((($46)) + 16|0);
          $51 = HEAP32[$50>>2]|0;
          $52 = ($49|0)==($51|0);
          if (!($52)) {
           if ($45) {
            $169 = $46;
            break;
           } else {
            $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $46;$__a$2 = $__a$0;
            break L12;
           }
          }
          $53 = HEAP32[$46>>2]|0;
          $54 = ((($53)) + 36|0);
          $55 = HEAP32[$54>>2]|0;
          __THREW__ = 0;
          $56 = (invoke_ii($55|0,($46|0))|0);
          $57 = __THREW__; __THREW__ = 0;
          $58 = $57&1;
          if ($58) {
           label = 29;
           break L12;
          }
          $59 = ($56|0)==(-1);
          if ($59) {
           HEAP32[$__e>>2] = 0;
           label = 19;
           break;
          } else {
           if ($45) {
            $169 = $46;
            break;
           } else {
            $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $46;$__a$2 = $__a$0;
            break L12;
           }
          }
         }
        } while(0);
        if ((label|0) == 19) {
         label = 0;
         if ($45) {
          $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
          break;
         } else {
          $169 = 0;
         }
        }
        $60 = HEAP32[$__a_end>>2]|0;
        $61 = HEAP8[$__buf>>0]|0;
        $62 = $61 & 1;
        $63 = ($62<<24>>24)==(0);
        $64 = HEAP32[$31>>2]|0;
        $65 = $61&255;
        $66 = $65 >>> 1;
        $67 = $63 ? $66 : $64;
        $68 = (($__a$0) + ($67)|0);
        $69 = ($60|0)==($68|0);
        if ($69) {
         $70 = $67 << 1;
         __THREW__ = 0;
         invoke_viii(575,($__buf|0),($70|0),0);
         $71 = __THREW__; __THREW__ = 0;
         $72 = $71&1;
         if ($72) {
          label = 29;
          break;
         }
         $73 = HEAP8[$__buf>>0]|0;
         $74 = $73 & 1;
         $75 = ($74<<24>>24)==(0);
         if ($75) {
          $78 = 10;
         } else {
          $76 = HEAP32[$__buf>>2]|0;
          $77 = $76 & -2;
          $phitmp$i26 = (($77) + -1)|0;
          $78 = $phitmp$i26;
         }
         __THREW__ = 0;
         invoke_viii(575,($__buf|0),($78|0),0);
         $79 = __THREW__; __THREW__ = 0;
         $80 = $79&1;
         if ($80) {
          label = 29;
          break;
         }
         $81 = HEAP8[$__buf>>0]|0;
         $82 = $81 & 1;
         $83 = ($82<<24>>24)==(0);
         $84 = HEAP32[$27>>2]|0;
         $85 = $83 ? $29 : $84;
         $86 = (($85) + ($67)|0);
         HEAP32[$__a_end>>2] = $86;
         $__a$1 = $85;
        } else {
         $__a$1 = $__a$0;
        }
        $95 = ((($$pre$i$i$i)) + 12|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = ((($$pre$i$i$i)) + 16|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = ($96|0)==($98|0);
        if ($99) {
         $100 = HEAP32[$$pre$i$i$i>>2]|0;
         $101 = ((($100)) + 36|0);
         $102 = HEAP32[$101>>2]|0;
         __THREW__ = 0;
         $103 = (invoke_ii($102|0,($$pre$i$i$i|0))|0);
         $104 = __THREW__; __THREW__ = 0;
         $105 = $104&1;
         if ($105) {
          label = 29;
          break;
         } else {
          $$0$i$i = $103;
         }
        } else {
         $106 = HEAP8[$96>>0]|0;
         $107 = $106&255;
         $$0$i$i = $107;
        }
        $108 = $$0$i$i&255;
        $109 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($108,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
        $110 = ($109|0)==(0);
        if (!($110)) {
         $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $169;$__a$2 = $__a$1;
         break;
        }
        $111 = HEAP32[$95>>2]|0;
        $112 = HEAP32[$97>>2]|0;
        $113 = ($111|0)==($112|0);
        if ($113) {
         $114 = HEAP32[$$pre$i$i$i>>2]|0;
         $115 = ((($114)) + 40|0);
         $116 = HEAP32[$115>>2]|0;
         __THREW__ = 0;
         (invoke_ii($116|0,($$pre$i$i$i|0))|0);
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         if ($118) {
          label = 29;
          break;
         } else {
          $$pre$i$i$i10 = $$pre$i$i$i;$__a$0 = $__a$1;
          continue;
         }
        } else {
         $119 = ((($111)) + 1|0);
         HEAP32[$95>>2] = $119;
         $$pre$i$i$i10 = $$pre$i$i$i;$__a$0 = $__a$1;
         continue;
        }
       }
       if ((label|0) == 29) {
        $91 = ___cxa_find_matching_catch()|0;
        $92 = tempRet0;
        $lpad$phi$index = $91;$lpad$phi$index2 = $92;
        break;
       }
       $120 = HEAP32[$__a_end>>2]|0;
       $121 = $120;
       $122 = $__a$2;
       $123 = (($121) - ($122))|0;
       __THREW__ = 0;
       invoke_viii(575,($__buf|0),($123|0),0);
       $124 = __THREW__; __THREW__ = 0;
       $125 = $124&1;
       if ($125) {
        label = 30;
       } else {
        $126 = HEAP8[$__buf>>0]|0;
        $127 = HEAP32[$27>>2]|0;
        __THREW__ = 0;
        $128 = (invoke_i(692)|0);
        $129 = __THREW__; __THREW__ = 0;
        $130 = $129&1;
        if ($130) {
         label = 30;
        } else {
         $131 = $126 & 1;
         $132 = ($131<<24>>24)==(0);
         $133 = $132 ? $29 : $127;
         __THREW__ = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $134 = (invoke_iiiii(693,($133|0),($128|0),(20034|0),($vararg_buffer|0))|0);
         $135 = __THREW__; __THREW__ = 0;
         $136 = $135&1;
         if ($136) {
          label = 30;
         } else {
          $137 = ($134|0)==(1);
          if (!($137)) {
           HEAP32[$__err>>2] = 4;
          }
          $138 = ($$pre$i$i$i$lcssa|0)==(0|0);
          if ($138) {
           $152 = 0;
          } else {
           $139 = ((($$pre$i$i$i$lcssa)) + 12|0);
           $140 = HEAP32[$139>>2]|0;
           $141 = ((($$pre$i$i$i$lcssa)) + 16|0);
           $142 = HEAP32[$141>>2]|0;
           $143 = ($140|0)==($142|0);
           if ($143) {
            $144 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
            $145 = ((($144)) + 36|0);
            $146 = HEAP32[$145>>2]|0;
            __THREW__ = 0;
            $147 = (invoke_ii($146|0,($$pre$i$i$i$lcssa|0))|0);
            $148 = __THREW__; __THREW__ = 0;
            $149 = $148&1;
            if ($149) {
             label = 30;
             break;
            }
            $150 = ($147|0)==(-1);
            if ($150) {
             HEAP32[$__b>>2] = 0;
             $152 = 0;
            } else {
             $152 = $$pre$i$i$i$lcssa;
            }
           } else {
            $152 = $$pre$i$i$i$lcssa;
           }
          }
          $151 = ($152|0)==(0|0);
          $153 = ($$pre$i2$i$i|0)==(0|0);
          do {
           if ($153) {
            label = 55;
           } else {
            $154 = ((($$pre$i2$i$i)) + 12|0);
            $155 = HEAP32[$154>>2]|0;
            $156 = ((($$pre$i2$i$i)) + 16|0);
            $157 = HEAP32[$156>>2]|0;
            $158 = ($155|0)==($157|0);
            if ($158) {
             $159 = HEAP32[$$pre$i2$i$i>>2]|0;
             $160 = ((($159)) + 36|0);
             $161 = HEAP32[$160>>2]|0;
             __THREW__ = 0;
             $162 = (invoke_ii($161|0,($$pre$i2$i$i|0))|0);
             $163 = __THREW__; __THREW__ = 0;
             $164 = $163&1;
             if ($164) {
              label = 30;
              break L10;
             }
             $165 = ($162|0)==(-1);
             if ($165) {
              HEAP32[$__e>>2] = 0;
              label = 55;
              break;
             }
            }
            if (!($151)) {
             label = 56;
            }
           }
          } while(0);
          if ((label|0) == 55) {
           if ($151) {
            label = 56;
           }
          }
          if ((label|0) == 56) {
           $166 = HEAP32[$__err>>2]|0;
           $167 = $166 | 2;
           HEAP32[$__err>>2] = $167;
          }
          $168 = HEAP32[$__b>>2]|0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
          STACKTOP = sp;return ($168|0);
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 30) {
      $93 = ___cxa_find_matching_catch()|0;
      $94 = tempRet0;
      $lpad$phi$index = $93;$lpad$phi$index2 = $94;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
     $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
     break;
    }
   }
   $89 = ___cxa_find_matching_catch()|0;
   $90 = tempRet0;
   (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
   $$0 = $89;$$01 = $90;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$i2 = 0, $$0$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = ((($__atoms)) + 24|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==($__ct<<24>>24);
   if (!($4)) {
    $5 = ((($__atoms)) + 25|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==($__ct<<24>>24);
    if (!($7)) {
     label = 5;
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = ((($__a)) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $10 = HEAP8[$__grouping>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__grouping)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $10&255;
   $16 = $15 >>> 1;
   $17 = $12 ? $16 : $14;
   $18 = ($17|0)!=(0);
   $19 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
   $or$cond = $19 & $18;
   if ($or$cond) {
    $20 = HEAP32[$__g_end>>2]|0;
    $21 = $20;
    $22 = $__g;
    $23 = (($21) - ($22))|0;
    $24 = ($23|0)<(160);
    if (!($24)) {
     $$0 = 0;
     break;
    }
    $25 = HEAP32[$__dc>>2]|0;
    $26 = ((($20)) + 4|0);
    HEAP32[$__g_end>>2] = $26;
    HEAP32[$20>>2] = $25;
    HEAP32[$__dc>>2] = 0;
    $$0 = 0;
    break;
   }
   $27 = ((($__atoms)) + 26|0);
   $$0$i2 = $__atoms;
   while(1) {
    $28 = HEAP8[$$0$i2>>0]|0;
    $29 = ($28<<24>>24)==($__ct<<24>>24);
    if ($29) {
     $$0$lcssa$i = $$0$i2;
     break;
    }
    $30 = ((($$0$i2)) + 1|0);
    $31 = ($30|0)==($27|0);
    if ($31) {
     $$0$lcssa$i = $27;
     break;
    } else {
     $$0$i2 = $30;
    }
   }
   $32 = $$0$lcssa$i;
   $33 = $__atoms;
   $34 = (($32) - ($33))|0;
   $35 = ($34|0)>(23);
   if ($35) {
    $$0 = -1;
   } else {
    switch ($__base|0) {
    case 10: case 8:  {
     $36 = ($34|0)<($__base|0);
     if (!($36)) {
      $$0 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $37 = ($34|0)<(22);
     if (!($37)) {
      if ($1) {
       $$0 = -1;
       break L6;
      }
      $38 = $0;
      $39 = $__a;
      $40 = (($38) - ($39))|0;
      $41 = ($40|0)<(3);
      if (!($41)) {
       $$0 = -1;
       break L6;
      }
      $42 = ((($0)) + -1|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = ($43<<24>>24)==(48);
      if (!($44)) {
       $$0 = -1;
       break L6;
      }
      HEAP32[$__dc>>2] = 0;
      $45 = (18650 + ($34)|0);
      $46 = HEAP8[$45>>0]|0;
      $47 = ((($0)) + 1|0);
      HEAP32[$__a_end>>2] = $47;
      HEAP8[$0>>0] = $46;
      $$0 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $48 = (18650 + ($34)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = ((($0)) + 1|0);
    HEAP32[$__a_end>>2] = $50;
    HEAP8[$0>>0] = $49;
    $51 = HEAP32[$__dc>>2]|0;
    $52 = (($51) + 1)|0;
    HEAP32[$__dc>>2] = $52;
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__16__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[1952>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((1952|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_iiii(694,2147483647,(20037|0),(0|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch()|0;
     $9 = tempRet0;
     ___cxa_guard_abort((1952|0));
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[8252>>2] = $4;
     ___cxa_guard_release((1952|0));
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[8252>>2]|0;
 return ($7|0);
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$sroa$01$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 60|0;
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 52|0;
 $__lv = sp + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $__names = sp + 8|0;
 $4 = sp;
 $5 = ((($__iob)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   HEAP32[$__lv>>2] = -1;
   $9 = HEAP32[$this>>2]|0;
   $10 = ((($9)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$__b>>2]|0;
   HEAP32[$0>>2] = $12;
   $13 = HEAP32[$__e>>2]|0;
   HEAP32[$1>>2] = $13;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
   $14 = (FUNCTION_TABLE_iiiiiii[$11 & 1023]($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv)|0);
   HEAP32[$__b>>2] = $14;
   $15 = HEAP32[$__lv>>2]|0;
   switch ($15|0) {
   case 0:  {
    HEAP8[$__v>>0] = 0;
    $$sroa$01$0 = $14;
    break L1;
    break;
   }
   case 1:  {
    HEAP8[$__v>>0] = 1;
    $$sroa$01$0 = $14;
    break L1;
    break;
   }
   default: {
    HEAP8[$__v>>0] = 1;
    HEAP32[$__err>>2] = 4;
    $$sroa$01$0 = $14;
    break L1;
   }
   }
  } else {
   $16 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$2>>2] = $16;
   __THREW__ = 0;
   $17 = (invoke_iii(495,($2|0),(7680|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   do {
    if ($19) {
     $44 = ___cxa_find_matching_catch()|0;
     $45 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $$0 = $44;$$03 = $45;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $20 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
     HEAP32[$3>>2] = $20;
     __THREW__ = 0;
     $21 = (invoke_iii(495,($3|0),(7836|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      $46 = ___cxa_find_matching_catch()|0;
      $47 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
      $$0 = $46;$$03 = $47;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
     $24 = HEAP32[$21>>2]|0;
     $25 = ((($24)) + 24|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     invoke_vii($26|0,($__names|0),($21|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $$02 = $__names;
     } else {
      $29 = ((($__names)) + 12|0);
      $30 = HEAP32[$21>>2]|0;
      $31 = ((($30)) + 28|0);
      $32 = HEAP32[$31>>2]|0;
      __THREW__ = 0;
      invoke_vii($32|0,($29|0),($21|0));
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       $$02 = $29;
      } else {
       $35 = HEAP32[$__e>>2]|0;
       HEAP32[$4>>2] = $35;
       $36 = ((($__names)) + 24|0);
       __THREW__ = 0;
       ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
       $37 = (invoke_iiiiiiii(695,($__b|0),($$byval_copy2|0),($__names|0),($36|0),($17|0),($__err|0),1)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        $54 = ___cxa_find_matching_catch()|0;
        $55 = tempRet0;
        $56 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($56);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__names);
        $$0 = $54;$$03 = $55;
        break;
       } else {
        $40 = ($37|0)==($__names|0);
        $41 = $40&1;
        HEAP8[$__v>>0] = $41;
        $42 = HEAP32[$__b>>2]|0;
        $43 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($43);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__names);
        $$sroa$01$0 = $42;
        break L1;
       }
      }
     }
     $48 = ___cxa_find_matching_catch()|0;
     $49 = tempRet0;
     $50 = ($__names|0)==($$02|0);
     if ($50) {
      $$0 = $48;$$03 = $49;
     } else {
      $52 = $$02;
      while(1) {
       $51 = ((($52)) + -12|0);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($51);
       $53 = ($51|0)==($__names|0);
       if ($53) {
        $$0 = $48;$$03 = $49;
        break;
       } else {
        $52 = $51;
       }
      }
     }
    }
   } while(0);
   ___resumeException($$0|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$01$0|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i9 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i15 = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i11 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i30 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $0 = sp + 192|0;
 $__buf = sp + 180|0;
 $__a_end = sp + 176|0;
 $__g = sp + 16|0;
 $__g_end = sp + 8|0;
 $__dc = sp + 4|0;
 HEAP32[$__grouping>>2] = 0;
 $1 = ((($__grouping)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__grouping)) + 8|0);
 HEAP32[$2>>2] = 0;
 __THREW__ = 0;
 $3 = (invoke_ii(494,($__iob|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   $88 = ___cxa_find_matching_catch()|0;
   $89 = tempRet0;
   $$0 = $88;$$01 = $89;
  } else {
   HEAP32[$0>>2] = $3;
   __THREW__ = 0;
   $6 = (invoke_iii(495,($0|0),(7680|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    $9 = HEAP32[$6>>2]|0;
    $10 = ((($9)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($11|0,($6|0),(18650|0),((18676)|0),($__atoms|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
     HEAP32[$__buf>>2] = 0;
     $14 = ((($__buf)) + 4|0);
     HEAP32[$14>>2] = 0;
     $15 = ((($__buf)) + 8|0);
     HEAP32[$15>>2] = 0;
     $16 = HEAP8[$__buf>>0]|0;
     $17 = $16 & 1;
     $18 = ($17<<24>>24)==(0);
     if ($18) {
      $21 = 10;
     } else {
      $19 = HEAP32[$__buf>>2]|0;
      $20 = $19 & -2;
      $phitmp$i = (($20) + -1)|0;
      $21 = $phitmp$i;
     }
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($21|0),0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     L10: do {
      if ($23) {
       label = 31;
      } else {
       $24 = HEAP8[$__buf>>0]|0;
       $25 = $24 & 1;
       $26 = ($25<<24>>24)==(0);
       $27 = ((($__buf)) + 8|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ((($__buf)) + 1|0);
       $30 = $26 ? $29 : $28;
       HEAP32[$__a_end>>2] = $30;
       HEAP32[$__g_end>>2] = $__g;
       HEAP32[$__dc>>2] = 0;
       $31 = ((($__buf)) + 4|0);
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i11 = $$pre;$__a$0 = $30;
       L12: while(1) {
        $32 = ($$pre$i$i$i11|0)==(0|0);
        if ($32) {
         $$pre$i$i$i = 0;$168 = 1;
        } else {
         $33 = ((($$pre$i$i$i11)) + 12|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = ((($$pre$i$i$i11)) + 16|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ($34|0)==($36|0);
         if ($37) {
          $38 = HEAP32[$$pre$i$i$i11>>2]|0;
          $39 = ((($38)) + 36|0);
          $40 = HEAP32[$39>>2]|0;
          __THREW__ = 0;
          $41 = (invoke_ii($40|0,($$pre$i$i$i11|0))|0);
          $42 = __THREW__; __THREW__ = 0;
          $43 = $42&1;
          if ($43) {
           label = 30;
           break;
          } else {
           $$0$i$i$i$i9 = $41;
          }
         } else {
          $44 = HEAP32[$34>>2]|0;
          $$0$i$i$i$i9 = $44;
         }
         $45 = ($$0$i$i$i$i9|0)==(-1);
         if ($45) {
          HEAP32[$__b>>2] = 0;
          $$pre$i$i$i = 0;$168 = 1;
         } else {
          $$pre$i$i$i = $$pre$i$i$i11;$168 = 0;
         }
        }
        $46 = HEAP32[$__e>>2]|0;
        $47 = ($46|0)==(0|0);
        do {
         if ($47) {
          label = 20;
         } else {
          $48 = ((($46)) + 12|0);
          $49 = HEAP32[$48>>2]|0;
          $50 = ((($46)) + 16|0);
          $51 = HEAP32[$50>>2]|0;
          $52 = ($49|0)==($51|0);
          if ($52) {
           $53 = HEAP32[$46>>2]|0;
           $54 = ((($53)) + 36|0);
           $55 = HEAP32[$54>>2]|0;
           __THREW__ = 0;
           $56 = (invoke_ii($55|0,($46|0))|0);
           $57 = __THREW__; __THREW__ = 0;
           $58 = $57&1;
           if ($58) {
            label = 30;
            break L12;
           } else {
            $$0$i$i1$i$i15 = $56;
           }
          } else {
           $59 = HEAP32[$49>>2]|0;
           $$0$i$i1$i$i15 = $59;
          }
          $60 = ($$0$i$i1$i$i15|0)==(-1);
          if ($60) {
           HEAP32[$__e>>2] = 0;
           label = 20;
           break;
          } else {
           if ($168) {
            $169 = $46;
            break;
           } else {
            $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $46;$__a$2 = $__a$0;
            break L12;
           }
          }
         }
        } while(0);
        if ((label|0) == 20) {
         label = 0;
         if ($168) {
          $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
          break;
         } else {
          $169 = 0;
         }
        }
        $61 = HEAP32[$__a_end>>2]|0;
        $62 = HEAP8[$__buf>>0]|0;
        $63 = $62 & 1;
        $64 = ($63<<24>>24)==(0);
        $65 = HEAP32[$31>>2]|0;
        $66 = $62&255;
        $67 = $66 >>> 1;
        $68 = $64 ? $67 : $65;
        $69 = (($__a$0) + ($68)|0);
        $70 = ($61|0)==($69|0);
        if ($70) {
         $71 = $68 << 1;
         __THREW__ = 0;
         invoke_viii(575,($__buf|0),($71|0),0);
         $72 = __THREW__; __THREW__ = 0;
         $73 = $72&1;
         if ($73) {
          label = 30;
          break;
         }
         $74 = HEAP8[$__buf>>0]|0;
         $75 = $74 & 1;
         $76 = ($75<<24>>24)==(0);
         if ($76) {
          $79 = 10;
         } else {
          $77 = HEAP32[$__buf>>2]|0;
          $78 = $77 & -2;
          $phitmp$i30 = (($78) + -1)|0;
          $79 = $phitmp$i30;
         }
         __THREW__ = 0;
         invoke_viii(575,($__buf|0),($79|0),0);
         $80 = __THREW__; __THREW__ = 0;
         $81 = $80&1;
         if ($81) {
          label = 30;
          break;
         }
         $82 = HEAP8[$__buf>>0]|0;
         $83 = $82 & 1;
         $84 = ($83<<24>>24)==(0);
         $85 = HEAP32[$27>>2]|0;
         $86 = $84 ? $29 : $85;
         $87 = (($86) + ($68)|0);
         HEAP32[$__a_end>>2] = $87;
         $__a$1 = $86;
        } else {
         $__a$1 = $__a$0;
        }
        $96 = ((($$pre$i$i$i)) + 12|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = ((($$pre$i$i$i)) + 16|0);
        $99 = HEAP32[$98>>2]|0;
        $100 = ($97|0)==($99|0);
        if ($100) {
         $101 = HEAP32[$$pre$i$i$i>>2]|0;
         $102 = ((($101)) + 36|0);
         $103 = HEAP32[$102>>2]|0;
         __THREW__ = 0;
         $104 = (invoke_ii($103|0,($$pre$i$i$i|0))|0);
         $105 = __THREW__; __THREW__ = 0;
         $106 = $105&1;
         if ($106) {
          label = 30;
          break;
         } else {
          $$0$i$i = $104;
         }
        } else {
         $107 = HEAP32[$97>>2]|0;
         $$0$i$i = $107;
        }
        $108 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
        $109 = ($108|0)==(0);
        if (!($109)) {
         $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $169;$__a$2 = $__a$1;
         break;
        }
        $110 = HEAP32[$96>>2]|0;
        $111 = HEAP32[$98>>2]|0;
        $112 = ($110|0)==($111|0);
        if ($112) {
         $113 = HEAP32[$$pre$i$i$i>>2]|0;
         $114 = ((($113)) + 40|0);
         $115 = HEAP32[$114>>2]|0;
         __THREW__ = 0;
         (invoke_ii($115|0,($$pre$i$i$i|0))|0);
         $116 = __THREW__; __THREW__ = 0;
         $117 = $116&1;
         if ($117) {
          label = 30;
          break;
         } else {
          $$pre$i$i$i11 = $$pre$i$i$i;$__a$0 = $__a$1;
          continue;
         }
        } else {
         $118 = ((($110)) + 4|0);
         HEAP32[$96>>2] = $118;
         $$pre$i$i$i11 = $$pre$i$i$i;$__a$0 = $__a$1;
         continue;
        }
       }
       if ((label|0) == 30) {
        $92 = ___cxa_find_matching_catch()|0;
        $93 = tempRet0;
        $lpad$phi$index = $92;$lpad$phi$index2 = $93;
        break;
       }
       $119 = HEAP32[$__a_end>>2]|0;
       $120 = $119;
       $121 = $__a$2;
       $122 = (($120) - ($121))|0;
       __THREW__ = 0;
       invoke_viii(575,($__buf|0),($122|0),0);
       $123 = __THREW__; __THREW__ = 0;
       $124 = $123&1;
       if ($124) {
        label = 31;
       } else {
        $125 = HEAP8[$__buf>>0]|0;
        $126 = HEAP32[$27>>2]|0;
        __THREW__ = 0;
        $127 = (invoke_i(692)|0);
        $128 = __THREW__; __THREW__ = 0;
        $129 = $128&1;
        if ($129) {
         label = 31;
        } else {
         $130 = $125 & 1;
         $131 = ($130<<24>>24)==(0);
         $132 = $131 ? $29 : $126;
         __THREW__ = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $133 = (invoke_iiiii(693,($132|0),($127|0),(20034|0),($vararg_buffer|0))|0);
         $134 = __THREW__; __THREW__ = 0;
         $135 = $134&1;
         if ($135) {
          label = 31;
         } else {
          $136 = ($133|0)==(1);
          if (!($136)) {
           HEAP32[$__err>>2] = 4;
          }
          $137 = ($$pre$i$i$i$lcssa|0)==(0|0);
          if ($137) {
           $170 = 1;
          } else {
           $138 = ((($$pre$i$i$i$lcssa)) + 12|0);
           $139 = HEAP32[$138>>2]|0;
           $140 = ((($$pre$i$i$i$lcssa)) + 16|0);
           $141 = HEAP32[$140>>2]|0;
           $142 = ($139|0)==($141|0);
           if ($142) {
            $143 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
            $144 = ((($143)) + 36|0);
            $145 = HEAP32[$144>>2]|0;
            __THREW__ = 0;
            $146 = (invoke_ii($145|0,($$pre$i$i$i$lcssa|0))|0);
            $147 = __THREW__; __THREW__ = 0;
            $148 = $147&1;
            if ($148) {
             label = 31;
             break;
            } else {
             $$0$i$i$i$i = $146;
            }
           } else {
            $149 = HEAP32[$139>>2]|0;
            $$0$i$i$i$i = $149;
           }
           $150 = ($$0$i$i$i$i|0)==(-1);
           if ($150) {
            HEAP32[$__b>>2] = 0;
            $170 = 1;
           } else {
            $170 = 0;
           }
          }
          $151 = ($$pre$i3$i$i|0)==(0|0);
          do {
           if ($151) {
            label = 57;
           } else {
            $152 = ((($$pre$i3$i$i)) + 12|0);
            $153 = HEAP32[$152>>2]|0;
            $154 = ((($$pre$i3$i$i)) + 16|0);
            $155 = HEAP32[$154>>2]|0;
            $156 = ($153|0)==($155|0);
            if ($156) {
             $157 = HEAP32[$$pre$i3$i$i>>2]|0;
             $158 = ((($157)) + 36|0);
             $159 = HEAP32[$158>>2]|0;
             __THREW__ = 0;
             $160 = (invoke_ii($159|0,($$pre$i3$i$i|0))|0);
             $161 = __THREW__; __THREW__ = 0;
             $162 = $161&1;
             if ($162) {
              label = 31;
              break L10;
             } else {
              $$0$i$i1$i$i = $160;
             }
            } else {
             $163 = HEAP32[$153>>2]|0;
             $$0$i$i1$i$i = $163;
            }
            $164 = ($$0$i$i1$i$i|0)==(-1);
            if ($164) {
             HEAP32[$__e>>2] = 0;
             label = 57;
             break;
            } else {
             if ($170) {
              break;
             } else {
              label = 59;
              break;
             }
            }
           }
          } while(0);
          if ((label|0) == 57) {
           if ($170) {
            label = 59;
           }
          }
          if ((label|0) == 59) {
           $165 = HEAP32[$__err>>2]|0;
           $166 = $165 | 2;
           HEAP32[$__err>>2] = $166;
          }
          $167 = HEAP32[$__b>>2]|0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
          STACKTOP = sp;return ($167|0);
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 31) {
      $94 = ___cxa_find_matching_catch()|0;
      $95 = tempRet0;
      $lpad$phi$index = $94;$lpad$phi$index2 = $95;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
     $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
     break;
    }
   }
   $90 = ___cxa_find_matching_catch()|0;
   $91 = tempRet0;
   (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
   $$0 = $90;$$01 = $91;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$i2 = 0, $$0$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = ((($__atoms)) + 96|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($__ct|0);
   if (!($4)) {
    $5 = ((($__atoms)) + 100|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($__ct|0);
    if (!($7)) {
     label = 5;
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = ((($__a)) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $10 = HEAP8[$__grouping>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__grouping)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $10&255;
   $16 = $15 >>> 1;
   $17 = $12 ? $16 : $14;
   $18 = ($17|0)!=(0);
   $19 = ($__ct|0)==($__thousands_sep|0);
   $or$cond = $19 & $18;
   if ($or$cond) {
    $20 = HEAP32[$__g_end>>2]|0;
    $21 = $20;
    $22 = $__g;
    $23 = (($21) - ($22))|0;
    $24 = ($23|0)<(160);
    if (!($24)) {
     $$0 = 0;
     break;
    }
    $25 = HEAP32[$__dc>>2]|0;
    $26 = ((($20)) + 4|0);
    HEAP32[$__g_end>>2] = $26;
    HEAP32[$20>>2] = $25;
    HEAP32[$__dc>>2] = 0;
    $$0 = 0;
    break;
   }
   $27 = ((($__atoms)) + 104|0);
   $$0$i2 = $__atoms;
   while(1) {
    $28 = HEAP32[$$0$i2>>2]|0;
    $29 = ($28|0)==($__ct|0);
    if ($29) {
     $$0$lcssa$i = $$0$i2;
     break;
    }
    $30 = ((($$0$i2)) + 4|0);
    $31 = ($30|0)==($27|0);
    if ($31) {
     $$0$lcssa$i = $27;
     break;
    } else {
     $$0$i2 = $30;
    }
   }
   $32 = $$0$lcssa$i;
   $33 = $__atoms;
   $34 = (($32) - ($33))|0;
   $35 = $34 >> 2;
   $36 = ($34|0)>(92);
   if ($36) {
    $$0 = -1;
   } else {
    switch ($__base|0) {
    case 10: case 8:  {
     $37 = ($35|0)<($__base|0);
     if (!($37)) {
      $$0 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $38 = ($34|0)<(88);
     if (!($38)) {
      if ($1) {
       $$0 = -1;
       break L6;
      }
      $39 = $0;
      $40 = $__a;
      $41 = (($39) - ($40))|0;
      $42 = ($41|0)<(3);
      if (!($42)) {
       $$0 = -1;
       break L6;
      }
      $43 = ((($0)) + -1|0);
      $44 = HEAP8[$43>>0]|0;
      $45 = ($44<<24>>24)==(48);
      if (!($45)) {
       $$0 = -1;
       break L6;
      }
      HEAP32[$__dc>>2] = 0;
      $46 = (18650 + ($35)|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = ((($0)) + 1|0);
      HEAP32[$__a_end>>2] = $48;
      HEAP8[$0>>0] = $47;
      $$0 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $49 = (18650 + ($35)|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = ((($0)) + 1|0);
    HEAP32[$__a_end>>2] = $51;
    HEAP8[$0>>0] = $50;
    $52 = HEAP32[$__dc>>2]|0;
    $53 = (($52) + 1)|0;
    HEAP32[$__dc>>2] = $53;
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(495,($__loc|0),(7688|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(18650|0),((18676)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(495,($__loc|0),(7828|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP8[$__thousands_sep>>0] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 20|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     invoke_vii($20|0,($agg$result|0),($9|0));
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(495,($__loc|0),(7688|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(18650|0),((18682)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(495,($__loc|0),(7828|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP8[$__decimal_point>>0] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     $21 = (invoke_ii($20|0,($9|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      HEAP8[$__thousands_sep>>0] = $21;
      $24 = HEAP32[$9>>2]|0;
      $25 = ((($24)) + 20|0);
      $26 = HEAP32[$25>>2]|0;
      __THREW__ = 0;
      invoke_vii($26|0,($agg$result|0),($9|0));
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if (!($28)) {
       (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$i3 = 0, $$0$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 L1: do {
  if ($0) {
   $1 = HEAP8[$__in_units>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    $$0 = -1;
   } else {
    HEAP8[$__in_units>>0] = 0;
    $3 = HEAP32[$__a_end>>2]|0;
    $4 = ((($3)) + 1|0);
    HEAP32[$__a_end>>2] = $4;
    HEAP8[$3>>0] = 46;
    $5 = HEAP8[$__grouping>>0]|0;
    $6 = $5 & 1;
    $7 = ($6<<24>>24)==(0);
    $8 = ((($__grouping)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $5&255;
    $11 = $10 >>> 1;
    $12 = $7 ? $11 : $9;
    $13 = ($12|0)==(0);
    if ($13) {
     $$0 = 0;
    } else {
     $14 = HEAP32[$__g_end>>2]|0;
     $15 = $14;
     $16 = $__g;
     $17 = (($15) - ($16))|0;
     $18 = ($17|0)<(160);
     if ($18) {
      $19 = HEAP32[$__dc>>2]|0;
      $20 = ((($14)) + 4|0);
      HEAP32[$__g_end>>2] = $20;
      HEAP32[$14>>2] = $19;
      $$0 = 0;
     } else {
      $$0 = 0;
     }
    }
   }
  } else {
   $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
   if ($21) {
    $22 = HEAP8[$__grouping>>0]|0;
    $23 = $22 & 1;
    $24 = ($23<<24>>24)==(0);
    $25 = ((($__grouping)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $22&255;
    $28 = $27 >>> 1;
    $29 = $24 ? $28 : $26;
    $30 = ($29|0)==(0);
    if (!($30)) {
     $31 = HEAP8[$__in_units>>0]|0;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$0 = -1;
      break;
     }
     $33 = HEAP32[$__g_end>>2]|0;
     $34 = $33;
     $35 = $__g;
     $36 = (($34) - ($35))|0;
     $37 = ($36|0)<(160);
     if (!($37)) {
      $$0 = 0;
      break;
     }
     $38 = HEAP32[$__dc>>2]|0;
     $39 = ((($33)) + 4|0);
     HEAP32[$__g_end>>2] = $39;
     HEAP32[$33>>2] = $38;
     HEAP32[$__dc>>2] = 0;
     $$0 = 0;
     break;
    }
   }
   $40 = ((($__atoms)) + 32|0);
   $$0$i3 = $__atoms;
   while(1) {
    $41 = HEAP8[$$0$i3>>0]|0;
    $42 = ($41<<24>>24)==($__ct<<24>>24);
    if ($42) {
     $$0$lcssa$i = $$0$i3;
     break;
    }
    $43 = ((($$0$i3)) + 1|0);
    $44 = ($43|0)==($40|0);
    if ($44) {
     $$0$lcssa$i = $40;
     break;
    } else {
     $$0$i3 = $43;
    }
   }
   $45 = $$0$lcssa$i;
   $46 = $__atoms;
   $47 = (($45) - ($46))|0;
   $48 = ($47|0)>(31);
   if ($48) {
    $$0 = -1;
   } else {
    $49 = (18650 + ($47)|0);
    $50 = HEAP8[$49>>0]|0;
    switch ($47|0) {
    case 24: case 25:  {
     $51 = HEAP32[$__a_end>>2]|0;
     $52 = ($51|0)==($__a|0);
     if (!($52)) {
      $53 = ((($51)) + -1|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = $54&255;
      $56 = $55 & 95;
      $57 = HEAP8[$__exp>>0]|0;
      $58 = $57&255;
      $59 = $58 & 127;
      $60 = ($56|0)==($59|0);
      if (!($60)) {
       $$0 = -1;
       break L1;
      }
     }
     $61 = ((($51)) + 1|0);
     HEAP32[$__a_end>>2] = $61;
     HEAP8[$51>>0] = $50;
     $$0 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$__exp>>0] = 80;
     $62 = HEAP32[$__a_end>>2]|0;
     $63 = ((($62)) + 1|0);
     HEAP32[$__a_end>>2] = $63;
     HEAP8[$62>>0] = $50;
     $$0 = 0;
     break L1;
     break;
    }
    default: {
     $64 = $50&255;
     $65 = $64 & 95;
     $66 = HEAP8[$__exp>>0]|0;
     $67 = $66 << 24 >> 24;
     $68 = ($65|0)==($67|0);
     if ($68) {
      $69 = $65 | 128;
      $70 = $69&255;
      HEAP8[$__exp>>0] = $70;
      $71 = HEAP8[$__in_units>>0]|0;
      $72 = ($71<<24>>24)==(0);
      if (!($72)) {
       HEAP8[$__in_units>>0] = 0;
       $73 = HEAP8[$__grouping>>0]|0;
       $74 = $73 & 1;
       $75 = ($74<<24>>24)==(0);
       $76 = ((($__grouping)) + 4|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = $73&255;
       $79 = $78 >>> 1;
       $80 = $75 ? $79 : $77;
       $81 = ($80|0)==(0);
       if (!($81)) {
        $82 = HEAP32[$__g_end>>2]|0;
        $83 = $82;
        $84 = $__g;
        $85 = (($83) - ($84))|0;
        $86 = ($85|0)<(160);
        if ($86) {
         $87 = HEAP32[$__dc>>2]|0;
         $88 = ((($82)) + 4|0);
         HEAP32[$__g_end>>2] = $88;
         HEAP32[$82>>2] = $87;
        }
       }
      }
     }
     $89 = HEAP32[$__a_end>>2]|0;
     $90 = ((($89)) + 1|0);
     HEAP32[$__a_end>>2] = $90;
     HEAP8[$89>>0] = $50;
     $91 = ($47|0)>(21);
     if ($91) {
      $$0 = 0;
      break L1;
     }
     $92 = HEAP32[$__dc>>2]|0;
     $93 = (($92) + 1)|0;
     HEAP32[$__dc>>2] = $93;
     $$0 = 0;
     break L1;
    }
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(495,($__loc|0),(7680|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 48|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(18650|0),((18676)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(495,($__loc|0),(7836|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP32[$__thousands_sep>>2] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 20|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     invoke_vii($20|0,($agg$result|0),($9|0));
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(495,($__loc|0),(7680|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 48|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(18650|0),((18682)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(495,($__loc|0),(7836|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP32[$__decimal_point>>2] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     $21 = (invoke_ii($20|0,($9|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      HEAP32[$__thousands_sep>>2] = $21;
      $24 = HEAP32[$9>>2]|0;
      $25 = ((($24)) + 20|0);
      $26 = HEAP32[$25>>2]|0;
      __THREW__ = 0;
      invoke_vii($26|0,($agg$result|0),($9|0));
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if (!($28)) {
       (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$i3 = 0, $$0$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct|0)==($__decimal_point|0);
 L1: do {
  if ($0) {
   $1 = HEAP8[$__in_units>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    $$0 = -1;
   } else {
    HEAP8[$__in_units>>0] = 0;
    $3 = HEAP32[$__a_end>>2]|0;
    $4 = ((($3)) + 1|0);
    HEAP32[$__a_end>>2] = $4;
    HEAP8[$3>>0] = 46;
    $5 = HEAP8[$__grouping>>0]|0;
    $6 = $5 & 1;
    $7 = ($6<<24>>24)==(0);
    $8 = ((($__grouping)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $5&255;
    $11 = $10 >>> 1;
    $12 = $7 ? $11 : $9;
    $13 = ($12|0)==(0);
    if ($13) {
     $$0 = 0;
    } else {
     $14 = HEAP32[$__g_end>>2]|0;
     $15 = $14;
     $16 = $__g;
     $17 = (($15) - ($16))|0;
     $18 = ($17|0)<(160);
     if ($18) {
      $19 = HEAP32[$__dc>>2]|0;
      $20 = ((($14)) + 4|0);
      HEAP32[$__g_end>>2] = $20;
      HEAP32[$14>>2] = $19;
      $$0 = 0;
     } else {
      $$0 = 0;
     }
    }
   }
  } else {
   $21 = ($__ct|0)==($__thousands_sep|0);
   if ($21) {
    $22 = HEAP8[$__grouping>>0]|0;
    $23 = $22 & 1;
    $24 = ($23<<24>>24)==(0);
    $25 = ((($__grouping)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $22&255;
    $28 = $27 >>> 1;
    $29 = $24 ? $28 : $26;
    $30 = ($29|0)==(0);
    if (!($30)) {
     $31 = HEAP8[$__in_units>>0]|0;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$0 = -1;
      break;
     }
     $33 = HEAP32[$__g_end>>2]|0;
     $34 = $33;
     $35 = $__g;
     $36 = (($34) - ($35))|0;
     $37 = ($36|0)<(160);
     if (!($37)) {
      $$0 = 0;
      break;
     }
     $38 = HEAP32[$__dc>>2]|0;
     $39 = ((($33)) + 4|0);
     HEAP32[$__g_end>>2] = $39;
     HEAP32[$33>>2] = $38;
     HEAP32[$__dc>>2] = 0;
     $$0 = 0;
     break;
    }
   }
   $40 = ((($__atoms)) + 128|0);
   $$0$i3 = $__atoms;
   while(1) {
    $41 = HEAP32[$$0$i3>>2]|0;
    $42 = ($41|0)==($__ct|0);
    if ($42) {
     $$0$lcssa$i = $$0$i3;
     break;
    }
    $43 = ((($$0$i3)) + 4|0);
    $44 = ($43|0)==($40|0);
    if ($44) {
     $$0$lcssa$i = $40;
     break;
    } else {
     $$0$i3 = $43;
    }
   }
   $45 = $$0$lcssa$i;
   $46 = $__atoms;
   $47 = (($45) - ($46))|0;
   $48 = $47 >> 2;
   $49 = ($47|0)>(124);
   if ($49) {
    $$0 = -1;
   } else {
    $50 = (18650 + ($48)|0);
    $51 = HEAP8[$50>>0]|0;
    switch ($48|0) {
    case 24: case 25:  {
     $52 = HEAP32[$__a_end>>2]|0;
     $53 = ($52|0)==($__a|0);
     if (!($53)) {
      $54 = ((($52)) + -1|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55&255;
      $57 = $56 & 95;
      $58 = HEAP8[$__exp>>0]|0;
      $59 = $58&255;
      $60 = $59 & 127;
      $61 = ($57|0)==($60|0);
      if (!($61)) {
       $$0 = -1;
       break L1;
      }
     }
     $62 = ((($52)) + 1|0);
     HEAP32[$__a_end>>2] = $62;
     HEAP8[$52>>0] = $51;
     $$0 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$__exp>>0] = 80;
     break;
    }
    default: {
     $63 = $51&255;
     $64 = $63 & 95;
     $65 = HEAP8[$__exp>>0]|0;
     $66 = $65 << 24 >> 24;
     $67 = ($64|0)==($66|0);
     if ($67) {
      $68 = $64 | 128;
      $69 = $68&255;
      HEAP8[$__exp>>0] = $69;
      $70 = HEAP8[$__in_units>>0]|0;
      $71 = ($70<<24>>24)==(0);
      if (!($71)) {
       HEAP8[$__in_units>>0] = 0;
       $72 = HEAP8[$__grouping>>0]|0;
       $73 = $72 & 1;
       $74 = ($73<<24>>24)==(0);
       $75 = ((($__grouping)) + 4|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = $72&255;
       $78 = $77 >>> 1;
       $79 = $74 ? $78 : $76;
       $80 = ($79|0)==(0);
       if (!($80)) {
        $81 = HEAP32[$__g_end>>2]|0;
        $82 = $81;
        $83 = $__g;
        $84 = (($82) - ($83))|0;
        $85 = ($84|0)<(160);
        if ($85) {
         $86 = HEAP32[$__dc>>2]|0;
         $87 = ((($81)) + 4|0);
         HEAP32[$__g_end>>2] = $87;
         HEAP32[$81>>2] = $86;
        }
       }
      }
     }
    }
    }
    $88 = HEAP32[$__a_end>>2]|0;
    $89 = ((($88)) + 1|0);
    HEAP32[$__a_end>>2] = $89;
    HEAP8[$88>>0] = $51;
    $90 = ($47|0)>(84);
    if ($90) {
     $$0 = 0;
    } else {
     $91 = HEAP32[$__dc>>2]|0;
     $92 = (($91) + 1)|0;
     HEAP32[$__dc>>2] = $92;
     $$0 = 0;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre2 = 0, $$pre2$val = 0, $$pre2$val7 = 0, $$pre5 = 0, $$sroa$0$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = ((($__iob)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = HEAP32[$this>>2]|0;
   $7 = ((($6)) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$__s>>2]|0;
   HEAP32[$0>>2] = $9;
   $10 = $__v&1;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $11 = (FUNCTION_TABLE_iiiiii[$8 & 1023]($this,$$byval_copy,$__iob,$__fl,$10)|0);
   $$sroa$0$0 = $11;
  } else {
   $12 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$1>>2] = $12;
   __THREW__ = 0;
   $13 = (invoke_iii(495,($1|0),(7828|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   L4: do {
    if ($15) {
     $65 = ___cxa_find_matching_catch()|0;
     $66 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $$0 = $66;$$01 = $65;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $16 = HEAP32[$13>>2]|0;
     if ($__v) {
      $17 = ((($16)) + 24|0);
      $18 = HEAP32[$17>>2]|0;
      FUNCTION_TABLE_vii[$18 & 1023]($__nm,$13);
     } else {
      $19 = ((($16)) + 28|0);
      $20 = HEAP32[$19>>2]|0;
      FUNCTION_TABLE_vii[$20 & 1023]($__nm,$13);
     }
     $21 = HEAP8[$__nm>>0]|0;
     $22 = $21 & 1;
     $23 = ($22<<24>>24)==(0);
     $24 = ((($__nm)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $$pre5 = ((($__nm)) + 1|0);
     $26 = ((($__nm)) + 1|0);
     $$pre2 = ((($__nm)) + 8|0);
     $$pre$phi6Z2D = $23 ? $26 : $$pre5;
     $$ph = $23 ? $26 : $25;
     $27 = ((($__nm)) + 4|0);
     $28 = $21 & 1;
     $29 = ($28<<24>>24)==(0);
     $$pre2$val7 = HEAP32[$$pre2>>2]|0;
     $30 = HEAP32[$27>>2]|0;
     $31 = $21&255;
     $32 = $31 >>> 1;
     $33 = $29 ? $$pre$phi6Z2D : $$pre2$val7;
     $34 = $29 ? $32 : $30;
     $35 = (($33) + ($34)|0);
     $36 = ($$ph|0)==($35|0);
     L11: do {
      if (!($36)) {
       $38 = $$ph;
       L12: while(1) {
        $37 = HEAP8[$38>>0]|0;
        $39 = HEAP32[$__s>>2]|0;
        $40 = ($39|0)==(0|0);
        do {
         if (!($40)) {
          $41 = ((($39)) + 24|0);
          $42 = HEAP32[$41>>2]|0;
          $43 = ((($39)) + 28|0);
          $44 = HEAP32[$43>>2]|0;
          $45 = ($42|0)==($44|0);
          if (!($45)) {
           $46 = ((($42)) + 1|0);
           HEAP32[$41>>2] = $46;
           HEAP8[$42>>0] = $37;
           break;
          }
          $47 = HEAP32[$39>>2]|0;
          $48 = ((($47)) + 52|0);
          $49 = HEAP32[$48>>2]|0;
          $50 = $37&255;
          __THREW__ = 0;
          $51 = (invoke_iii($49|0,($39|0),($50|0))|0);
          $52 = __THREW__; __THREW__ = 0;
          $53 = $52&1;
          if ($53) {
           break L12;
          }
          $54 = ($51|0)==(-1);
          if ($54) {
           HEAP32[$__s>>2] = 0;
          }
         }
        } while(0);
        $55 = ((($38)) + 1|0);
        $$pre = HEAP8[$__nm>>0]|0;
        $56 = $$pre & 1;
        $57 = ($56<<24>>24)==(0);
        $$pre2$val = HEAP32[$$pre2>>2]|0;
        $58 = HEAP32[$27>>2]|0;
        $59 = $$pre&255;
        $60 = $59 >>> 1;
        $61 = $57 ? $$pre$phi6Z2D : $$pre2$val;
        $62 = $57 ? $60 : $58;
        $63 = (($61) + ($62)|0);
        $64 = ($55|0)==($63|0);
        if ($64) {
         break L11;
        } else {
         $38 = $55;
        }
       }
       $67 = ___cxa_find_matching_catch()|0;
       $68 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nm);
       $$0 = $68;$$01 = $67;
       break L4;
      }
     } while(0);
     $69 = HEAP32[$__s>>2]|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nm);
     $$sroa$0$0 = $69;
     break L1;
    }
   } while(0);
   ___resumeException($$01|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 60|0;
 $__nar = sp + 48|0;
 $__o = sp + 24|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[20039>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[20039+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[20039+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[20039+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[20039+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[20039+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,20045,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(696,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp,$__len,$__signd,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__signd = $__signd|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1$lcssa = 0, $$1$ph = 0, $$13 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = ((($__fmtp)) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1$ph = $$0;
 } else {
  $5 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1$ph = $5;
 }
 $6 = HEAP8[$__len>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$1$lcssa = $$1$ph;
 } else {
  $$012 = $__len;$$13 = $$1$ph;$10 = $6;
  while(1) {
   $8 = ((($$012)) + 1|0);
   $9 = ((($$13)) + 1|0);
   HEAP8[$$13>>0] = $10;
   $11 = HEAP8[$8>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $$1$lcssa = $9;
    break;
   } else {
    $$012 = $8;$$13 = $9;$10 = $11;
   }
  }
 }
 $13 = $__flags & 74;
 L11: do {
  switch ($13|0) {
  case 64:  {
   HEAP8[$$1$lcssa>>0] = 111;
   break;
  }
  case 8:  {
   $14 = $__flags & 16384;
   $15 = ($14|0)==(0);
   if ($15) {
    HEAP8[$$1$lcssa>>0] = 120;
    break L11;
   } else {
    HEAP8[$$1$lcssa>>0] = 88;
    break L11;
   }
   break;
  }
  default: {
   if ($__signd) {
    HEAP8[$$1$lcssa>>0] = 100;
    break L11;
   } else {
    HEAP8[$$1$lcssa>>0] = 117;
    break L11;
   }
  }
  }
 } while(0);
 return;
}
function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb,$__ne,$__iob) {
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__iob = $__iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 176;
 L1: do {
  switch ($2|0) {
  case 16:  {
   $3 = HEAP8[$__nb>>0]|0;
   switch ($3<<24>>24) {
   case 43: case 45:  {
    $4 = ((($__nb)) + 1|0);
    $$0 = $4;
    break L1;
    break;
   }
   default: {
   }
   }
   $5 = $__ne;
   $6 = $__nb;
   $7 = (($5) - ($6))|0;
   $8 = ($7|0)>(1);
   $9 = ($3<<24>>24)==(48);
   $or$cond = $8 & $9;
   if ($or$cond) {
    $10 = ((($__nb)) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    switch ($11<<24>>24) {
    case 88: case 120:  {
     break;
    }
    default: {
     label = 7;
     break L1;
    }
    }
    $12 = ((($__nb)) + 2|0);
    $$0 = $12;
   } else {
    label = 7;
   }
   break;
  }
  case 32:  {
   $$0 = $__ne;
   break;
  }
  default: {
   label = 7;
  }
  }
 } while(0);
 if ((label|0) == 7) {
  $$0 = $__nb;
 }
 return ($$0|0);
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$01$i$i10 = 0, $$01$i$i414 = 0, $$__dg$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$011 = 0;
 var $__dc$1 = 0, $__dg$012 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$013 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,7688)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,7828)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 $8 = ((($__grouping)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $5&255;
 $11 = $10 >>> 1;
 $12 = $7 ? $11 : $9;
 $13 = ($12|0)==(0);
 L1: do {
  if ($13) {
   $14 = HEAP32[$0>>2]|0;
   $15 = ((($14)) + 32|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 5;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21)|0);
    HEAP32[$__oe>>2] = $22;
    $$pre$phiZ2D = $20;$133 = $22;
    label = 29;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   switch ($27<<24>>24) {
   case 43: case 45:  {
    $28 = HEAP32[$0>>2]|0;
    $29 = ((($28)) + 28|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 5;
     break L1;
    }
    $34 = ((($__nb)) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = ((($35)) + 1|0);
    HEAP32[$__oe>>2] = $36;
    HEAP8[$35>>0] = $31;
    $__nf$0 = $34;
    break;
   }
   default: {
    $__nf$0 = $__nb;
   }
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   L9: do {
    if ($40) {
     $41 = HEAP8[$__nf$0>>0]|0;
     $42 = ($41<<24>>24)==(48);
     if ($42) {
      $43 = ((($__nf$0)) + 1|0);
      $44 = HEAP8[$43>>0]|0;
      switch ($44<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $__nf$1 = $__nf$0;
       break L9;
      }
      }
      $45 = HEAP32[$0>>2]|0;
      $46 = ((($45)) + 28|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 5;
       break L1;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = ((($51)) + 1|0);
      HEAP32[$__oe>>2] = $52;
      HEAP8[$51>>0] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = ((($54)) + 28|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 5;
       break L1;
      }
      $60 = ((($__nf$0)) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = ((($61)) + 1|0);
      HEAP32[$__oe>>2] = $62;
      HEAP8[$61>>0] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } while(0);
   $63 = ($__nf$1|0)==($__ne|0);
   if (!($63)) {
    $64 = ((($__ne)) + -1|0);
    $65 = ($__nf$1>>>0)<($64>>>0);
    if ($65) {
     $$01$i$i414 = $__nf$1;$68 = $64;
     while(1) {
      $66 = HEAP8[$$01$i$i414>>0]|0;
      $67 = HEAP8[$68>>0]|0;
      HEAP8[$$01$i$i414>>0] = $67;
      HEAP8[$68>>0] = $66;
      $69 = ((($$01$i$i414)) + 1|0);
      $70 = ((($68)) + -1|0);
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $$01$i$i414 = $69;$68 = $70;
      } else {
       break;
      }
     }
    }
   }
   $72 = HEAP32[$1>>2]|0;
   $73 = ((($72)) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   __THREW__ = 0;
   $75 = (invoke_ii($74|0,($1|0))|0);
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if ($77) {
    label = 5;
   } else {
    $78 = ((($__grouping)) + 8|0);
    $79 = ((($__grouping)) + 1|0);
    $80 = ($__nf$1>>>0)<($__ne>>>0);
    L22: do {
     if ($80) {
      $__dc$011 = 0;$__dg$012 = 0;$__p$013 = $__nf$1;
      while(1) {
       $81 = HEAP8[$__grouping>>0]|0;
       $82 = $81 & 1;
       $83 = ($82<<24>>24)==(0);
       $84 = HEAP32[$78>>2]|0;
       $85 = $83 ? $79 : $84;
       $86 = (($85) + ($__dg$012)|0);
       $87 = HEAP8[$86>>0]|0;
       $88 = ($87<<24>>24)!=(0);
       $89 = $87 << 24 >> 24;
       $90 = ($__dc$011|0)==($89|0);
       $or$cond = $88 & $90;
       if ($or$cond) {
        $91 = HEAP32[$__oe>>2]|0;
        $92 = ((($91)) + 1|0);
        HEAP32[$__oe>>2] = $92;
        HEAP8[$91>>0] = $75;
        $93 = HEAP8[$__grouping>>0]|0;
        $94 = $93 & 1;
        $95 = ($94<<24>>24)==(0);
        $96 = HEAP32[$8>>2]|0;
        $97 = $93&255;
        $98 = $97 >>> 1;
        $99 = $95 ? $98 : $96;
        $100 = (($99) + -1)|0;
        $101 = ($__dg$012>>>0)<($100>>>0);
        $102 = $101&1;
        $$__dg$0 = (($102) + ($__dg$012))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$011;$__dg$1 = $__dg$012;
       }
       $103 = HEAP8[$__p$013>>0]|0;
       $104 = HEAP32[$0>>2]|0;
       $105 = ((($104)) + 28|0);
       $106 = HEAP32[$105>>2]|0;
       __THREW__ = 0;
       $107 = (invoke_iii($106|0,($0|0),($103|0))|0);
       $108 = __THREW__; __THREW__ = 0;
       $109 = $108&1;
       if ($109) {
        break;
       }
       $110 = HEAP32[$__oe>>2]|0;
       $111 = ((($110)) + 1|0);
       HEAP32[$__oe>>2] = $111;
       HEAP8[$110>>0] = $107;
       $112 = (($__dc$1) + 1)|0;
       $113 = ((($__p$013)) + 1|0);
       $114 = ($113>>>0)<($__ne>>>0);
       if ($114) {
        $__dc$011 = $112;$__dg$012 = $__dg$1;$__p$013 = $113;
       } else {
        break L22;
       }
      }
      $23 = ___cxa_find_matching_catch()|0;
      $24 = tempRet0;
      $lpad$phi$index = $23;$lpad$phi$index2 = $24;
      break L1;
     }
    } while(0);
    $115 = $__nf$1;
    $116 = $__nb;
    $117 = (($115) - ($116))|0;
    $118 = (($__ob) + ($117)|0);
    $119 = HEAP32[$__oe>>2]|0;
    $120 = ($118|0)==($119|0);
    if ($120) {
     $$pre$phiZ2D = $116;$133 = $118;
     label = 29;
    } else {
     $121 = ((($119)) + -1|0);
     $122 = ($118>>>0)<($121>>>0);
     if ($122) {
      $$01$i$i10 = $118;$125 = $121;
      while(1) {
       $123 = HEAP8[$$01$i$i10>>0]|0;
       $124 = HEAP8[$125>>0]|0;
       HEAP8[$$01$i$i10>>0] = $124;
       HEAP8[$125>>0] = $123;
       $126 = ((($$01$i$i10)) + 1|0);
       $127 = ((($125)) + -1|0);
       $128 = ($126>>>0)<($127>>>0);
       if ($128) {
        $$01$i$i10 = $126;$125 = $127;
       } else {
        break;
       }
      }
     }
     $$pre = HEAP32[$__oe>>2]|0;
     $$pre$phiZ2D = $116;$133 = $$pre;
     label = 29;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
 }
 else if ((label|0) == 29) {
  $129 = ($__np|0)==($__ne|0);
  $130 = $__np;
  $131 = (($130) - ($$pre$phiZ2D))|0;
  $132 = (($__ob) + ($131)|0);
  $storemerge = $129 ? $133 : $132;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 78|0;
 $__o = sp + 36|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,20047,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(696,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 60|0;
 $__nar = sp + 48|0;
 $__o = sp + 24|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[20039>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[20039+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[20039+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[20039+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[20039+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[20039+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,20045,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(696,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 79|0;
 $__o = sp + 36|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,20047,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(696,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$112 = 0, $$1311 = 0, $$byval_copy = 0, $$pre = 0, $$pre8 = 0, $$pre9 = 0, $$pre9$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0;
 var $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 84|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 146|0;
 $__nb = sp + 80|0;
 $__o = sp + 88|0;
 $__op = sp + 76|0;
 $__oe = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,20050,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 L5: do {
  if ($15) {
   __THREW__ = 0;
   $16 = (invoke_i(692)|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($9) {
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(697,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    if (!($18)) {
     $26 = ((($__iob)) + 8|0);
     $27 = HEAP32[$26>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $27;
     $vararg_ptr12 = ((($vararg_buffer9)) + 8|0);
     HEAPF64[$vararg_ptr12>>3] = $__v;
     $28 = (invoke_iiiii(697,($__nb|0),($16|0),($__fmt|0),($vararg_buffer9|0))|0);
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if (!($30)) {
      $__nc$1 = $28;
      label = 12;
     }
    }
   }
   do {
    if ((label|0) == 12) {
     $31 = HEAP32[$__nb>>2]|0;
     $32 = ($31|0)==(0|0);
     if ($32) {
      __THREW__ = 0;
      invoke_v(698);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       break;
      }
      $$pre = HEAP32[$__nb>>2]|0;
      $36 = $$pre;
     } else {
      $36 = $31;
     }
     $35 = $36;
     $38 = $36;$65 = $35;$__nc$2 = $__nc$1;
     label = 16;
     break L5;
    }
   } while(0);
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$112 = $24;$$1311 = $25;
  } else {
   $$pre8 = HEAP32[$__nb>>2]|0;
   $38 = $$pre8;$65 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $37 = (($38) + ($__nc$2)|0);
  $39 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($38,$37,$__iob)|0);
  $40 = ($38|0)==($__nar|0);
  do {
   if ($40) {
    $52 = $__nar;$62 = 0;$__ob$0 = $__o;
    label = 22;
   } else {
    $41 = $__nc$2 << 1;
    $42 = (_malloc($41)|0);
    $43 = ($42|0)==(0|0);
    if ($43) {
     __THREW__ = 0;
     invoke_v(698);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      $74 = 0;
      label = 20;
      break;
     }
     $$pre9$pre = HEAP32[$__nb>>2]|0;
     $$pre9 = $$pre9$pre;
    } else {
     $$pre9 = $38;
    }
    $48 = $42;
    $52 = $$pre9;$62 = $48;$__ob$0 = $42;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $49 = (invoke_ii(494,($__iob|0))|0);
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     $74 = $62;
     label = 20;
    } else {
     HEAP32[$0>>2] = $49;
     __THREW__ = 0;
     invoke_viiiiiii(699,($52|0),($39|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $53 = __THREW__; __THREW__ = 0;
     $54 = $53&1;
     if ($54) {
      $67 = ___cxa_find_matching_catch()|0;
      $68 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
      $$0 = $67;$$02 = $68;$70 = $62;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
     $55 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $55;
     $56 = HEAP32[$__op>>2]|0;
     $57 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $58 = (invoke_iiiiiii(540,($$byval_copy|0),($__ob$0|0),($56|0),($57|0),($__iob|0),($__fl|0))|0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      $74 = $62;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $58;
      $61 = ($62|0)==(0);
      if (!($61)) {
       $63 = $62;
       _free($63);
      }
      $64 = ($65|0)==(0);
      if (!($64)) {
       $66 = $65;
       _free($66);
      }
      STACKTOP = sp;return ($58|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $46 = ___cxa_find_matching_catch()|0;
   $47 = tempRet0;
   $$0 = $46;$$02 = $47;$70 = $74;
  }
  $69 = ($70|0)==(0);
  if (!($69)) {
   $71 = $70;
   _free($71);
  }
  $72 = ($65|0)==(0);
  if ($72) {
   $$112 = $$0;$$1311 = $$02;
  } else {
   $73 = $65;
   _free($73);
   $$112 = $$0;$$1311 = $$02;
  }
 }
 ___resumeException($$112|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp,$__len,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1 = 0, $$2$lcssa = 0, $$2$ph = 0, $$23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $specify_precision$0$off0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = ((($__fmtp)) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 1024;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1 = $$0;
 } else {
  $5 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1 = $5;
 }
 $6 = $__flags & 260;
 $7 = $__flags >>> 14;
 $8 = ($6|0)==(260);
 if ($8) {
  $$2$ph = $$1;$specify_precision$0$off0$ph = 0;
 } else {
  $9 = ((($$1)) + 1|0);
  HEAP8[$$1>>0] = 46;
  $10 = ((($$1)) + 2|0);
  HEAP8[$9>>0] = 42;
  $$2$ph = $10;$specify_precision$0$off0$ph = 1;
 }
 $11 = HEAP8[$__len>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $$2$lcssa = $$2$ph;
 } else {
  $$012 = $__len;$$23 = $$2$ph;$15 = $11;
  while(1) {
   $13 = ((($$012)) + 1|0);
   $14 = ((($$23)) + 1|0);
   HEAP8[$$23>>0] = $15;
   $16 = HEAP8[$13>>0]|0;
   $17 = ($16<<24>>24)==(0);
   if ($17) {
    $$2$lcssa = $14;
    break;
   } else {
    $$012 = $13;$$23 = $14;$15 = $16;
   }
  }
 }
 L14: do {
  switch ($6|0) {
  case 4:  {
   $18 = $7 & 1;
   $19 = ($18|0)==(0);
   if ($19) {
    HEAP8[$$2$lcssa>>0] = 102;
    break L14;
   } else {
    HEAP8[$$2$lcssa>>0] = 70;
    break L14;
   }
   break;
  }
  case 256:  {
   $20 = $7 & 1;
   $21 = ($20|0)==(0);
   if ($21) {
    HEAP8[$$2$lcssa>>0] = 101;
    break L14;
   } else {
    HEAP8[$$2$lcssa>>0] = 69;
    break L14;
   }
   break;
  }
  default: {
   $22 = $7 & 1;
   $23 = ($22|0)!=(0);
   if ($8) {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 65;
     break L14;
    } else {
     HEAP8[$$2$lcssa>>0] = 97;
     break L14;
    }
   } else {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 71;
     break L14;
    } else {
     HEAP8[$$2$lcssa>>0] = 103;
     break L14;
    }
   }
  }
  }
 } while(0);
 return ($specify_precision$0$off0$ph|0);
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$01$i$i46 = 0, $$01$i$i641 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__dc$043 = 0, $__dc$1 = 0, $__dg$044 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$240 = 0, $__nf$240$lcssa = 0, $__nf$3 = 0, $__ns$052 = 0, $__ns$148 = 0, $__ns$2 = 0, $__p$045 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $or$cond = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,7688)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,7828)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 switch ($5<<24>>24) {
 case 43: case 45:  {
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 8;
  } else {
   $12 = ((($__nb)) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = ((($13)) + 1|0);
   HEAP32[$__oe>>2] = $14;
   HEAP8[$13>>0] = $9;
   $__nf$0 = $12;
   label = 10;
  }
  break;
 }
 default: {
  $__nf$0 = $__nb;
  label = 10;
 }
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L6: do {
    if ($28) {
     $30 = HEAP8[$__nf$0>>0]|0;
     $31 = ($30<<24>>24)==(48);
     if ($31) {
      $32 = ((($__nf$0)) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      switch ($33<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       label = 11;
       break L6;
      }
      }
      $34 = HEAP32[$0>>2]|0;
      $35 = ((($34)) + 28|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_iii($36|0,($0|0),48)|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 8;
       break L4;
      }
      $40 = HEAP32[$__oe>>2]|0;
      $41 = ((($40)) + 1|0);
      HEAP32[$__oe>>2] = $41;
      HEAP8[$40>>0] = $37;
      $42 = ((($__nf$0)) + 2|0);
      $43 = HEAP8[$32>>0]|0;
      $44 = HEAP32[$0>>2]|0;
      $45 = ((($44)) + 28|0);
      $46 = HEAP32[$45>>2]|0;
      __THREW__ = 0;
      $47 = (invoke_iii($46|0,($0|0),($43|0))|0);
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if ($49) {
       label = 8;
       break L4;
      }
      $50 = HEAP32[$__oe>>2]|0;
      $51 = ((($50)) + 1|0);
      HEAP32[$__oe>>2] = $51;
      HEAP8[$50>>0] = $47;
      $52 = ($42>>>0)<($__ne>>>0);
      if ($52) {
       $__ns$052 = $42;
       while(1) {
        $53 = HEAP8[$__ns$052>>0]|0;
        __THREW__ = 0;
        $54 = (invoke_i(692)|0);
        $55 = __THREW__; __THREW__ = 0;
        $56 = $55&1;
        if ($56) {
         break;
        }
        $57 = $53 << 24 >> 24;
        __THREW__ = 0;
        $58 = (invoke_iii(700,($57|0),($54|0))|0);
        $59 = __THREW__; __THREW__ = 0;
        $60 = $59&1;
        if ($60) {
         break;
        }
        $61 = ($58|0)==(0);
        if ($61) {
         $__nf$1 = $42;$__ns$2 = $__ns$052;
         break L6;
        }
        $62 = ((($__ns$052)) + 1|0);
        $63 = ($62>>>0)<($__ne>>>0);
        if ($63) {
         $__ns$052 = $62;
        } else {
         $__nf$1 = $42;$__ns$2 = $62;
         break L6;
        }
       }
       $21 = ___cxa_find_matching_catch()|0;
       $22 = tempRet0;
       $lpad$phi$index = $21;$lpad$phi$index5 = $22;
       break L4;
      } else {
       $__nf$1 = $42;$__ns$2 = $42;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } while(0);
   L18: do {
    if ((label|0) == 11) {
     $29 = ($__nf$0>>>0)<($__ne>>>0);
     if ($29) {
      $__ns$148 = $__nf$0;
      while(1) {
       $64 = HEAP8[$__ns$148>>0]|0;
       __THREW__ = 0;
       $65 = (invoke_i(692)|0);
       $66 = __THREW__; __THREW__ = 0;
       $67 = $66&1;
       if ($67) {
        break;
       }
       $68 = $64 << 24 >> 24;
       __THREW__ = 0;
       $69 = (invoke_iii(701,($68|0),($65|0))|0);
       $70 = __THREW__; __THREW__ = 0;
       $71 = $70&1;
       if ($71) {
        break;
       }
       $72 = ($69|0)==(0);
       if ($72) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$148;
        break L18;
       }
       $73 = ((($__ns$148)) + 1|0);
       $74 = ($73>>>0)<($__ne>>>0);
       if ($74) {
        $__ns$148 = $73;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $73;
        break L18;
       }
      }
      $19 = ___cxa_find_matching_catch()|0;
      $20 = tempRet0;
      $lpad$phi$index = $19;$lpad$phi$index5 = $20;
      break L4;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $75 = HEAP8[$__grouping>>0]|0;
   $76 = $75 & 1;
   $77 = ($76<<24>>24)==(0);
   $78 = ((($__grouping)) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $75&255;
   $81 = $80 >>> 1;
   $82 = $77 ? $81 : $79;
   $83 = ($82|0)==(0);
   if ($83) {
    $84 = HEAP32[$__oe>>2]|0;
    $85 = HEAP32[$0>>2]|0;
    $86 = ((($85)) + 32|0);
    $87 = HEAP32[$86>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($87|0,($0|0),($__nf$1|0),($__ns$2|0),($84|0))|0);
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if ($89) {
     label = 8;
     break;
    }
    $90 = $__ns$2;
    $91 = $__nf$1;
    $92 = (($90) - ($91))|0;
    $93 = HEAP32[$__oe>>2]|0;
    $94 = (($93) + ($92)|0);
    HEAP32[$__oe>>2] = $94;
    $$pre$phiZ2D = $0;
   } else {
    $95 = ($__nf$1|0)==($__ns$2|0);
    if (!($95)) {
     $96 = ((($__ns$2)) + -1|0);
     $97 = ($__nf$1>>>0)<($96>>>0);
     if ($97) {
      $$01$i$i46 = $__nf$1;$100 = $96;
      while(1) {
       $98 = HEAP8[$$01$i$i46>>0]|0;
       $99 = HEAP8[$100>>0]|0;
       HEAP8[$$01$i$i46>>0] = $99;
       HEAP8[$100>>0] = $98;
       $101 = ((($$01$i$i46)) + 1|0);
       $102 = ((($100)) + -1|0);
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $$01$i$i46 = $101;$100 = $102;
       } else {
        break;
       }
      }
     }
    }
    $104 = HEAP32[$1>>2]|0;
    $105 = ((($104)) + 16|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($1|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     label = 8;
     break;
    }
    $110 = ((($__grouping)) + 8|0);
    $111 = ((($__grouping)) + 1|0);
    $112 = ($__nf$1>>>0)<($__ns$2>>>0);
    L37: do {
     if ($112) {
      $__dc$043 = 0;$__dg$044 = 0;$__p$045 = $__nf$1;
      while(1) {
       $113 = HEAP8[$__grouping>>0]|0;
       $114 = $113 & 1;
       $115 = ($114<<24>>24)==(0);
       $116 = HEAP32[$110>>2]|0;
       $117 = $115 ? $111 : $116;
       $118 = (($117) + ($__dg$044)|0);
       $119 = HEAP8[$118>>0]|0;
       $120 = ($119<<24>>24)>(0);
       $121 = $119 << 24 >> 24;
       $122 = ($__dc$043|0)==($121|0);
       $or$cond = $120 & $122;
       if ($or$cond) {
        $123 = HEAP32[$__oe>>2]|0;
        $124 = ((($123)) + 1|0);
        HEAP32[$__oe>>2] = $124;
        HEAP8[$123>>0] = $107;
        $125 = HEAP8[$__grouping>>0]|0;
        $126 = $125 & 1;
        $127 = ($126<<24>>24)==(0);
        $128 = HEAP32[$78>>2]|0;
        $129 = $125&255;
        $130 = $129 >>> 1;
        $131 = $127 ? $130 : $128;
        $132 = (($131) + -1)|0;
        $133 = ($__dg$044>>>0)<($132>>>0);
        $134 = $133&1;
        $$__dg$0 = (($134) + ($__dg$044))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$043;$__dg$1 = $__dg$044;
       }
       $135 = HEAP8[$__p$045>>0]|0;
       $136 = HEAP32[$0>>2]|0;
       $137 = ((($136)) + 28|0);
       $138 = HEAP32[$137>>2]|0;
       __THREW__ = 0;
       $139 = (invoke_iii($138|0,($0|0),($135|0))|0);
       $140 = __THREW__; __THREW__ = 0;
       $141 = $140&1;
       if ($141) {
        break;
       }
       $142 = HEAP32[$__oe>>2]|0;
       $143 = ((($142)) + 1|0);
       HEAP32[$__oe>>2] = $143;
       HEAP8[$142>>0] = $139;
       $144 = (($__dc$1) + 1)|0;
       $145 = ((($__p$045)) + 1|0);
       $146 = ($145>>>0)<($__ns$2>>>0);
       if ($146) {
        $__dc$043 = $144;$__dg$044 = $__dg$1;$__p$045 = $145;
       } else {
        break L37;
       }
      }
      $17 = ___cxa_find_matching_catch()|0;
      $18 = tempRet0;
      $lpad$phi$index = $17;$lpad$phi$index5 = $18;
      break L4;
     }
    } while(0);
    $147 = $__nf$1;
    $148 = $__nb;
    $149 = (($147) - ($148))|0;
    $150 = (($__ob) + ($149)|0);
    $151 = HEAP32[$__oe>>2]|0;
    $152 = ($150|0)==($151|0);
    if ($152) {
     $$pre$phiZ2D = $0;
    } else {
     $153 = ((($151)) + -1|0);
     $154 = ($150>>>0)<($153>>>0);
     if ($154) {
      $$01$i$i641 = $150;$158 = $153;
      while(1) {
       $156 = HEAP8[$$01$i$i641>>0]|0;
       $157 = HEAP8[$158>>0]|0;
       HEAP8[$$01$i$i641>>0] = $157;
       HEAP8[$158>>0] = $156;
       $159 = ((($$01$i$i641)) + 1|0);
       $160 = ((($158)) + -1|0);
       $161 = ($159>>>0)<($160>>>0);
       if ($161) {
        $$01$i$i641 = $159;$158 = $160;
       } else {
        $$pre$phiZ2D = $0;
        break;
       }
      }
     } else {
      $$pre$phiZ2D = $0;
     }
    }
   }
   $155 = ($__ns$2>>>0)<($__ne>>>0);
   L50: do {
    if ($155) {
     $__nf$240 = $__ns$2;
     while(1) {
      $162 = HEAP8[$__nf$240>>0]|0;
      $163 = ($162<<24>>24)==(46);
      if ($163) {
       $__nf$240$lcssa = $__nf$240;
       break;
      }
      $173 = HEAP32[$$pre$phiZ2D>>2]|0;
      $174 = ((($173)) + 28|0);
      $175 = HEAP32[$174>>2]|0;
      __THREW__ = 0;
      $176 = (invoke_iii($175|0,($0|0),($162|0))|0);
      $177 = __THREW__; __THREW__ = 0;
      $178 = $177&1;
      if ($178) {
       label = 4;
       break;
      }
      $179 = HEAP32[$__oe>>2]|0;
      $180 = ((($179)) + 1|0);
      HEAP32[$__oe>>2] = $180;
      HEAP8[$179>>0] = $176;
      $181 = ((($__nf$240)) + 1|0);
      $182 = ($181>>>0)<($__ne>>>0);
      if ($182) {
       $__nf$240 = $181;
      } else {
       $__nf$3 = $181;
       break L50;
      }
     }
     if ((label|0) == 4) {
      $15 = ___cxa_find_matching_catch()|0;
      $16 = tempRet0;
      $lpad$phi$index = $15;$lpad$phi$index5 = $16;
      break L4;
     }
     $164 = HEAP32[$1>>2]|0;
     $165 = ((($164)) + 12|0);
     $166 = HEAP32[$165>>2]|0;
     __THREW__ = 0;
     $167 = (invoke_ii($166|0,($1|0))|0);
     $168 = __THREW__; __THREW__ = 0;
     $169 = $168&1;
     if ($169) {
      label = 8;
      break L4;
     }
     $170 = HEAP32[$__oe>>2]|0;
     $171 = ((($170)) + 1|0);
     HEAP32[$__oe>>2] = $171;
     HEAP8[$170>>0] = $167;
     $172 = ((($__nf$240$lcssa)) + 1|0);
     $__nf$3 = $172;
    } else {
     $__nf$3 = $__ns$2;
    }
   } while(0);
   $183 = HEAP32[$__oe>>2]|0;
   $184 = HEAP32[$0>>2]|0;
   $185 = ((($184)) + 32|0);
   $186 = HEAP32[$185>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($186|0,($0|0),($__nf$3|0),($__ne|0),($183|0))|0);
   $187 = __THREW__; __THREW__ = 0;
   $188 = $187&1;
   if ($188) {
    label = 8;
   } else {
    $189 = $__nf$3;
    $190 = (($25) - ($189))|0;
    $191 = HEAP32[$__oe>>2]|0;
    $192 = (($191) + ($190)|0);
    HEAP32[$__oe>>2] = $192;
    $193 = ($__np|0)==($__ne|0);
    $194 = $__np;
    $195 = $__nb;
    $196 = (($194) - ($195))|0;
    $197 = (($__ob) + ($196)|0);
    $storemerge = $193 ? $192 : $197;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$112 = 0, $$1311 = 0, $$byval_copy = 0, $$pre = 0, $$pre8 = 0, $$pre9 = 0, $$pre9$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 76|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 138|0;
 $__nb = sp + 72|0;
 $__o = sp + 80|0;
 $__op = sp + 68|0;
 $__oe = sp + 64|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,20051,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 L5: do {
  if ($15) {
   __THREW__ = 0;
   $16 = (invoke_i(692)|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($9) {
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(697,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    if (!($18)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $__v;
     $26 = (invoke_iiiii(697,($__nb|0),($16|0),($__fmt|0),($vararg_buffer9|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if (!($28)) {
      $__nc$1 = $26;
      label = 12;
     }
    }
   }
   do {
    if ((label|0) == 12) {
     $29 = HEAP32[$__nb>>2]|0;
     $30 = ($29|0)==(0|0);
     if ($30) {
      __THREW__ = 0;
      invoke_v(698);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       break;
      }
      $$pre = HEAP32[$__nb>>2]|0;
      $34 = $$pre;
     } else {
      $34 = $29;
     }
     $33 = $34;
     $36 = $34;$63 = $33;$__nc$2 = $__nc$1;
     label = 16;
     break L5;
    }
   } while(0);
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$112 = $24;$$1311 = $25;
  } else {
   $$pre8 = HEAP32[$__nb>>2]|0;
   $36 = $$pre8;$63 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $35 = (($36) + ($__nc$2)|0);
  $37 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($36,$35,$__iob)|0);
  $38 = ($36|0)==($__nar|0);
  do {
   if ($38) {
    $50 = $__nar;$60 = 0;$__ob$0 = $__o;
    label = 22;
   } else {
    $39 = $__nc$2 << 1;
    $40 = (_malloc($39)|0);
    $41 = ($40|0)==(0|0);
    if ($41) {
     __THREW__ = 0;
     invoke_v(698);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      $72 = 0;
      label = 20;
      break;
     }
     $$pre9$pre = HEAP32[$__nb>>2]|0;
     $$pre9 = $$pre9$pre;
    } else {
     $$pre9 = $36;
    }
    $46 = $40;
    $50 = $$pre9;$60 = $46;$__ob$0 = $40;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $47 = (invoke_ii(494,($__iob|0))|0);
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if ($49) {
     $72 = $60;
     label = 20;
    } else {
     HEAP32[$0>>2] = $47;
     __THREW__ = 0;
     invoke_viiiiiii(699,($50|0),($37|0),($35|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      $65 = ___cxa_find_matching_catch()|0;
      $66 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
      $$0 = $65;$$02 = $66;$68 = $60;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
     $53 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $53;
     $54 = HEAP32[$__op>>2]|0;
     $55 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $56 = (invoke_iiiiiii(540,($$byval_copy|0),($__ob$0|0),($54|0),($55|0),($__iob|0),($__fl|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      $72 = $60;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $56;
      $59 = ($60|0)==(0);
      if (!($59)) {
       $61 = $60;
       _free($61);
      }
      $62 = ($63|0)==(0);
      if (!($62)) {
       $64 = $63;
       _free($64);
      }
      STACKTOP = sp;return ($56|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $44 = ___cxa_find_matching_catch()|0;
   $45 = tempRet0;
   $$0 = $44;$$02 = $45;$68 = $72;
  }
  $67 = ($68|0)==(0);
  if (!($67)) {
   $69 = $68;
   _free($69);
  }
  $70 = ($63|0)==(0);
  if ($70) {
   $$112 = $$0;$$1311 = $$02;
  } else {
   $71 = $63;
   _free($71);
   $$112 = $$0;$$1311 = $$02;
  }
 }
 ___resumeException($$112|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 12|0;
 $vararg_buffer = sp;
 $__fmt = sp + 76|0;
 $__nar = sp + 56|0;
 $__o = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[20053>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[20053+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[20053+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[20053+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[20053+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[20053+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 $6 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $6;
 __THREW__ = 0;
 $7 = (invoke_iii(495,($0|0),(7688|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  ___resumeException($21|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  $10 = HEAP32[$7>>2]|0;
  $11 = ((($10)) + 32|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiiii[$12 & 1023]($7,$__nar,$4,$__o)|0);
  $13 = (($__o) + ($3)|0);
  $14 = ($5|0)==($4|0);
  $15 = $__nar;
  $16 = $5;
  $17 = (($16) - ($15))|0;
  $18 = (($__o) + ($17)|0);
  $__op$0 = $14 ? $13 : $18;
  $19 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $19;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $20 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$__op$0,$13,$__iob,$__fl)|0);
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre2 = 0, $$pre2$val = 0, $$pre2$val5 = 0, $$pre3 = 0, $$sroa$0$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = ((($__iob)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = HEAP32[$this>>2]|0;
   $7 = ((($6)) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$__s>>2]|0;
   HEAP32[$0>>2] = $9;
   $10 = $__v&1;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $11 = (FUNCTION_TABLE_iiiiii[$8 & 1023]($this,$$byval_copy,$__iob,$__fl,$10)|0);
   $$sroa$0$0 = $11;
  } else {
   $12 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$1>>2] = $12;
   __THREW__ = 0;
   $13 = (invoke_iii(495,($1|0),(7836|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   L4: do {
    if ($15) {
     $63 = ___cxa_find_matching_catch()|0;
     $64 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $$0 = $64;$$01 = $63;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $16 = HEAP32[$13>>2]|0;
     if ($__v) {
      $17 = ((($16)) + 24|0);
      $18 = HEAP32[$17>>2]|0;
      FUNCTION_TABLE_vii[$18 & 1023]($__nm,$13);
     } else {
      $19 = ((($16)) + 28|0);
      $20 = HEAP32[$19>>2]|0;
      FUNCTION_TABLE_vii[$20 & 1023]($__nm,$13);
     }
     $21 = HEAP8[$__nm>>0]|0;
     $22 = $21 & 1;
     $23 = ($22<<24>>24)==(0);
     $24 = ((($__nm)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $$pre3 = ((($__nm)) + 4|0);
     $26 = ((($__nm)) + 4|0);
     $$pre2 = ((($__nm)) + 8|0);
     $$pre$phi4Z2D = $23 ? $26 : $$pre3;
     $$ph = $23 ? $26 : $25;
     $27 = $21 & 1;
     $28 = ($27<<24>>24)==(0);
     $$pre2$val5 = HEAP32[$$pre2>>2]|0;
     $29 = HEAP32[$$pre$phi4Z2D>>2]|0;
     $30 = $21&255;
     $31 = $30 >>> 1;
     $32 = $28 ? $$pre$phi4Z2D : $$pre2$val5;
     $33 = $28 ? $31 : $29;
     $34 = (($32) + ($33<<2)|0);
     $35 = ($$ph|0)==($34|0);
     L11: do {
      if (!($35)) {
       $37 = $$ph;
       while(1) {
        $36 = HEAP32[$37>>2]|0;
        $38 = HEAP32[$__s>>2]|0;
        $39 = ($38|0)==(0|0);
        if (!($39)) {
         $40 = ((($38)) + 24|0);
         $41 = HEAP32[$40>>2]|0;
         $42 = ((($38)) + 28|0);
         $43 = HEAP32[$42>>2]|0;
         $44 = ($41|0)==($43|0);
         if ($44) {
          $45 = HEAP32[$38>>2]|0;
          $46 = ((($45)) + 52|0);
          $47 = HEAP32[$46>>2]|0;
          __THREW__ = 0;
          $48 = (invoke_iii($47|0,($38|0),($36|0))|0);
          $49 = __THREW__; __THREW__ = 0;
          $50 = $49&1;
          if ($50) {
           break;
          } else {
           $$0$i$i = $48;
          }
         } else {
          $51 = ((($41)) + 4|0);
          HEAP32[$40>>2] = $51;
          HEAP32[$41>>2] = $36;
          $$0$i$i = $36;
         }
         $52 = ($$0$i$i|0)==(-1);
         if ($52) {
          HEAP32[$__s>>2] = 0;
         }
        }
        $53 = ((($37)) + 4|0);
        $$pre = HEAP8[$__nm>>0]|0;
        $54 = $$pre & 1;
        $55 = ($54<<24>>24)==(0);
        $$pre2$val = HEAP32[$$pre2>>2]|0;
        $56 = HEAP32[$$pre$phi4Z2D>>2]|0;
        $57 = $$pre&255;
        $58 = $57 >>> 1;
        $59 = $55 ? $$pre$phi4Z2D : $$pre2$val;
        $60 = $55 ? $58 : $56;
        $61 = (($59) + ($60<<2)|0);
        $62 = ($53|0)==($61|0);
        if ($62) {
         break L11;
        } else {
         $37 = $53;
        }
       }
       $65 = ___cxa_find_matching_catch()|0;
       $66 = tempRet0;
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nm);
       $$0 = $66;$$01 = $65;
       break L4;
      }
     } while(0);
     $67 = HEAP32[$__s>>2]|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nm);
     $$sroa$0$0 = $67;
     break L1;
    }
   } while(0);
   ___resumeException($$01|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $__fmt = sp + 120|0;
 $__nar = sp + 108|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[20039>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[20039+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[20039+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[20039+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[20039+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[20039+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,20045,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(702,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$01$i$i413 = 0, $$01$i$i9 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$010 = 0, $__dc$1 = 0;
 var $__dg$011 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$012 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,7680)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,7836)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 $8 = ((($__grouping)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $5&255;
 $11 = $10 >>> 1;
 $12 = $7 ? $11 : $9;
 $13 = ($12|0)==(0);
 L1: do {
  if ($13) {
   $14 = HEAP32[$0>>2]|0;
   $15 = ((($14)) + 48|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 5;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21<<2)|0);
    HEAP32[$__oe>>2] = $22;
    $$pre$phiZ2D = $20;$133 = $22;
    label = 28;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   switch ($27<<24>>24) {
   case 43: case 45:  {
    $28 = HEAP32[$0>>2]|0;
    $29 = ((($28)) + 44|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 5;
     break L1;
    }
    $34 = ((($__nb)) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = ((($35)) + 4|0);
    HEAP32[$__oe>>2] = $36;
    HEAP32[$35>>2] = $31;
    $__nf$0 = $34;
    break;
   }
   default: {
    $__nf$0 = $__nb;
   }
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   L9: do {
    if ($40) {
     $41 = HEAP8[$__nf$0>>0]|0;
     $42 = ($41<<24>>24)==(48);
     if ($42) {
      $43 = ((($__nf$0)) + 1|0);
      $44 = HEAP8[$43>>0]|0;
      switch ($44<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $__nf$1 = $__nf$0;
       break L9;
      }
      }
      $45 = HEAP32[$0>>2]|0;
      $46 = ((($45)) + 44|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 5;
       break L1;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = ((($51)) + 4|0);
      HEAP32[$__oe>>2] = $52;
      HEAP32[$51>>2] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = ((($54)) + 44|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 5;
       break L1;
      }
      $60 = ((($__nf$0)) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = ((($61)) + 4|0);
      HEAP32[$__oe>>2] = $62;
      HEAP32[$61>>2] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } while(0);
   $63 = ($__nf$1|0)==($__ne|0);
   if (!($63)) {
    $64 = ((($__ne)) + -1|0);
    $65 = ($__nf$1>>>0)<($64>>>0);
    if ($65) {
     $$01$i$i413 = $__nf$1;$68 = $64;
     while(1) {
      $66 = HEAP8[$$01$i$i413>>0]|0;
      $67 = HEAP8[$68>>0]|0;
      HEAP8[$$01$i$i413>>0] = $67;
      HEAP8[$68>>0] = $66;
      $69 = ((($$01$i$i413)) + 1|0);
      $70 = ((($68)) + -1|0);
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $$01$i$i413 = $69;$68 = $70;
      } else {
       break;
      }
     }
    }
   }
   $72 = HEAP32[$1>>2]|0;
   $73 = ((($72)) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   __THREW__ = 0;
   $75 = (invoke_ii($74|0,($1|0))|0);
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if ($77) {
    label = 5;
   } else {
    $78 = ((($__grouping)) + 8|0);
    $79 = ((($__grouping)) + 1|0);
    $80 = ($__nf$1>>>0)<($__ne>>>0);
    L22: do {
     if ($80) {
      $__dc$010 = 0;$__dg$011 = 0;$__p$012 = $__nf$1;
      while(1) {
       $81 = HEAP8[$__grouping>>0]|0;
       $82 = $81 & 1;
       $83 = ($82<<24>>24)==(0);
       $84 = HEAP32[$78>>2]|0;
       $85 = $83 ? $79 : $84;
       $86 = (($85) + ($__dg$011)|0);
       $87 = HEAP8[$86>>0]|0;
       $88 = ($87<<24>>24)!=(0);
       $89 = $87 << 24 >> 24;
       $90 = ($__dc$010|0)==($89|0);
       $or$cond = $88 & $90;
       if ($or$cond) {
        $91 = HEAP32[$__oe>>2]|0;
        $92 = ((($91)) + 4|0);
        HEAP32[$__oe>>2] = $92;
        HEAP32[$91>>2] = $75;
        $93 = HEAP8[$__grouping>>0]|0;
        $94 = $93 & 1;
        $95 = ($94<<24>>24)==(0);
        $96 = HEAP32[$8>>2]|0;
        $97 = $93&255;
        $98 = $97 >>> 1;
        $99 = $95 ? $98 : $96;
        $100 = (($99) + -1)|0;
        $101 = ($__dg$011>>>0)<($100>>>0);
        $102 = $101&1;
        $$__dg$0 = (($102) + ($__dg$011))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$010;$__dg$1 = $__dg$011;
       }
       $103 = HEAP8[$__p$012>>0]|0;
       $104 = HEAP32[$0>>2]|0;
       $105 = ((($104)) + 44|0);
       $106 = HEAP32[$105>>2]|0;
       __THREW__ = 0;
       $107 = (invoke_iii($106|0,($0|0),($103|0))|0);
       $108 = __THREW__; __THREW__ = 0;
       $109 = $108&1;
       if ($109) {
        break;
       }
       $110 = HEAP32[$__oe>>2]|0;
       $111 = ((($110)) + 4|0);
       HEAP32[$__oe>>2] = $111;
       HEAP32[$110>>2] = $107;
       $112 = (($__dc$1) + 1)|0;
       $113 = ((($__p$012)) + 1|0);
       $114 = ($113>>>0)<($__ne>>>0);
       if ($114) {
        $__dc$010 = $112;$__dg$011 = $__dg$1;$__p$012 = $113;
       } else {
        break L22;
       }
      }
      $23 = ___cxa_find_matching_catch()|0;
      $24 = tempRet0;
      $lpad$phi$index = $23;$lpad$phi$index2 = $24;
      break L1;
     }
    } while(0);
    $115 = $__nf$1;
    $116 = $__nb;
    $117 = (($115) - ($116))|0;
    $118 = (($__ob) + ($117<<2)|0);
    $119 = HEAP32[$__oe>>2]|0;
    $120 = ($118|0)==($119|0);
    if ($120) {
     $$pre$phiZ2D = $116;$133 = $118;
     label = 28;
    } else {
     $121 = ((($119)) + -4|0);
     $122 = ($118>>>0)<($121>>>0);
     if ($122) {
      $$01$i$i9 = $118;$125 = $121;
      while(1) {
       $123 = HEAP32[$$01$i$i9>>2]|0;
       $124 = HEAP32[$125>>2]|0;
       HEAP32[$$01$i$i9>>2] = $124;
       HEAP32[$125>>2] = $123;
       $126 = ((($$01$i$i9)) + 4|0);
       $127 = ((($125)) + -4|0);
       $128 = ($126>>>0)<($127>>>0);
       if ($128) {
        $$01$i$i9 = $126;$125 = $127;
       } else {
        $$pre$phiZ2D = $116;$133 = $119;
        label = 28;
        break;
       }
      }
     } else {
      $$pre$phiZ2D = $116;$133 = $119;
      label = 28;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
 }
 else if ((label|0) == 28) {
  $129 = ($__np|0)==($__ne|0);
  $130 = $__np;
  $131 = (($130) - ($$pre$phiZ2D))|0;
  $132 = (($__ob) + ($131<<2)|0);
  $storemerge = $129 ? $133 : $132;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 196|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 200|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,20047,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(702,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $__fmt = sp + 120|0;
 $__nar = sp + 108|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[20039>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[20039+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[20039+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[20039+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[20039+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[20039+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,20045,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(702,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 204|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 208|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,20047,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(702,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$110 = 0, $$139 = 0, $$byval_copy = 0, $$pre = 0, $$pre6 = 0, $$pre7 = 0, $$pre7$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0;
 var $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 312|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 316|0;
 $__nb = sp + 308|0;
 $__o = sp + 80|0;
 $__op = sp + 76|0;
 $__oe = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,20050,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 L5: do {
  if ($15) {
   __THREW__ = 0;
   $16 = (invoke_i(692)|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($9) {
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(697,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    if (!($18)) {
     $26 = ((($__iob)) + 8|0);
     $27 = HEAP32[$26>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $27;
     $vararg_ptr12 = ((($vararg_buffer9)) + 8|0);
     HEAPF64[$vararg_ptr12>>3] = $__v;
     $28 = (invoke_iiiii(697,($__nb|0),($16|0),($__fmt|0),($vararg_buffer9|0))|0);
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if (!($30)) {
      $__nc$1 = $28;
      label = 12;
     }
    }
   }
   do {
    if ((label|0) == 12) {
     $31 = HEAP32[$__nb>>2]|0;
     $32 = ($31|0)==(0|0);
     if ($32) {
      __THREW__ = 0;
      invoke_v(698);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       break;
      }
      $$pre = HEAP32[$__nb>>2]|0;
      $36 = $$pre;
     } else {
      $36 = $31;
     }
     $35 = $36;
     $38 = $36;$65 = $35;$__nc$2 = $__nc$1;
     label = 16;
     break L5;
    }
   } while(0);
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$110 = $24;$$139 = $25;
  } else {
   $$pre6 = HEAP32[$__nb>>2]|0;
   $38 = $$pre6;$65 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $37 = (($38) + ($__nc$2)|0);
  $39 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($38,$37,$__iob)|0);
  $40 = ($38|0)==($__nar|0);
  do {
   if ($40) {
    $52 = $__nar;$62 = 0;$__ob$0 = $__o;
    label = 22;
   } else {
    $41 = $__nc$2 << 3;
    $42 = (_malloc($41)|0);
    $43 = ($42|0)==(0|0);
    if ($43) {
     __THREW__ = 0;
     invoke_v(698);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      $74 = 0;
      label = 20;
      break;
     }
     $$pre7$pre = HEAP32[$__nb>>2]|0;
     $$pre7 = $$pre7$pre;
    } else {
     $$pre7 = $38;
    }
    $48 = $42;
    $52 = $$pre7;$62 = $48;$__ob$0 = $42;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $49 = (invoke_ii(494,($__iob|0))|0);
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     $74 = $62;
     label = 20;
    } else {
     HEAP32[$0>>2] = $49;
     __THREW__ = 0;
     invoke_viiiiiii(703,($52|0),($39|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $53 = __THREW__; __THREW__ = 0;
     $54 = $53&1;
     if ($54) {
      $67 = ___cxa_find_matching_catch()|0;
      $68 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
      $$0 = $67;$$02 = $68;$70 = $62;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
     $55 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $55;
     $56 = HEAP32[$__op>>2]|0;
     $57 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $58 = (invoke_iiiiiii(704,($$byval_copy|0),($__ob$0|0),($56|0),($57|0),($__iob|0),($__fl|0))|0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      $74 = $62;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $58;
      $61 = ($62|0)==(0);
      if (!($61)) {
       $63 = $62;
       _free($63);
      }
      $64 = ($65|0)==(0);
      if (!($64)) {
       $66 = $65;
       _free($66);
      }
      STACKTOP = sp;return ($58|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $46 = ___cxa_find_matching_catch()|0;
   $47 = tempRet0;
   $$0 = $46;$$02 = $47;$70 = $74;
  }
  $69 = ($70|0)==(0);
  if (!($69)) {
   $71 = $70;
   _free($71);
  }
  $72 = ($65|0)==(0);
  if ($72) {
   $$110 = $$0;$$139 = $$02;
  } else {
   $73 = $65;
   _free($73);
   $$110 = $$0;$$139 = $$02;
  }
 }
 ___resumeException($$110|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$01$i$i50 = 0, $$01$i$i645 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__dc$047 = 0, $__dc$1 = 0, $__dg$048 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$243 = 0, $__nf$243$lcssa = 0, $__nf$3 = 0, $__ns$056 = 0, $__ns$152 = 0, $__ns$2 = 0, $__p$049 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $or$cond = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,7680)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,7836)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 switch ($5<<24>>24) {
 case 43: case 45:  {
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6)) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 8;
  } else {
   $12 = ((($__nb)) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = ((($13)) + 4|0);
   HEAP32[$__oe>>2] = $14;
   HEAP32[$13>>2] = $9;
   $__nf$0 = $12;
   label = 10;
  }
  break;
 }
 default: {
  $__nf$0 = $__nb;
  label = 10;
 }
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L6: do {
    if ($28) {
     $30 = HEAP8[$__nf$0>>0]|0;
     $31 = ($30<<24>>24)==(48);
     if ($31) {
      $32 = ((($__nf$0)) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      switch ($33<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       label = 11;
       break L6;
      }
      }
      $34 = HEAP32[$0>>2]|0;
      $35 = ((($34)) + 44|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_iii($36|0,($0|0),48)|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 8;
       break L4;
      }
      $40 = HEAP32[$__oe>>2]|0;
      $41 = ((($40)) + 4|0);
      HEAP32[$__oe>>2] = $41;
      HEAP32[$40>>2] = $37;
      $42 = ((($__nf$0)) + 2|0);
      $43 = HEAP8[$32>>0]|0;
      $44 = HEAP32[$0>>2]|0;
      $45 = ((($44)) + 44|0);
      $46 = HEAP32[$45>>2]|0;
      __THREW__ = 0;
      $47 = (invoke_iii($46|0,($0|0),($43|0))|0);
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if ($49) {
       label = 8;
       break L4;
      }
      $50 = HEAP32[$__oe>>2]|0;
      $51 = ((($50)) + 4|0);
      HEAP32[$__oe>>2] = $51;
      HEAP32[$50>>2] = $47;
      $52 = ($42>>>0)<($__ne>>>0);
      if ($52) {
       $__ns$056 = $42;
       while(1) {
        $53 = HEAP8[$__ns$056>>0]|0;
        __THREW__ = 0;
        $54 = (invoke_i(692)|0);
        $55 = __THREW__; __THREW__ = 0;
        $56 = $55&1;
        if ($56) {
         break;
        }
        $57 = $53 << 24 >> 24;
        __THREW__ = 0;
        $58 = (invoke_iii(700,($57|0),($54|0))|0);
        $59 = __THREW__; __THREW__ = 0;
        $60 = $59&1;
        if ($60) {
         break;
        }
        $61 = ($58|0)==(0);
        if ($61) {
         $__nf$1 = $42;$__ns$2 = $__ns$056;
         break L6;
        }
        $62 = ((($__ns$056)) + 1|0);
        $63 = ($62>>>0)<($__ne>>>0);
        if ($63) {
         $__ns$056 = $62;
        } else {
         $__nf$1 = $42;$__ns$2 = $62;
         break L6;
        }
       }
       $21 = ___cxa_find_matching_catch()|0;
       $22 = tempRet0;
       $lpad$phi$index = $21;$lpad$phi$index5 = $22;
       break L4;
      } else {
       $__nf$1 = $42;$__ns$2 = $42;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } while(0);
   L18: do {
    if ((label|0) == 11) {
     $29 = ($__nf$0>>>0)<($__ne>>>0);
     if ($29) {
      $__ns$152 = $__nf$0;
      while(1) {
       $64 = HEAP8[$__ns$152>>0]|0;
       __THREW__ = 0;
       $65 = (invoke_i(692)|0);
       $66 = __THREW__; __THREW__ = 0;
       $67 = $66&1;
       if ($67) {
        break;
       }
       $68 = $64 << 24 >> 24;
       __THREW__ = 0;
       $69 = (invoke_iii(701,($68|0),($65|0))|0);
       $70 = __THREW__; __THREW__ = 0;
       $71 = $70&1;
       if ($71) {
        break;
       }
       $72 = ($69|0)==(0);
       if ($72) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$152;
        break L18;
       }
       $73 = ((($__ns$152)) + 1|0);
       $74 = ($73>>>0)<($__ne>>>0);
       if ($74) {
        $__ns$152 = $73;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $73;
        break L18;
       }
      }
      $19 = ___cxa_find_matching_catch()|0;
      $20 = tempRet0;
      $lpad$phi$index = $19;$lpad$phi$index5 = $20;
      break L4;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $75 = HEAP8[$__grouping>>0]|0;
   $76 = $75 & 1;
   $77 = ($76<<24>>24)==(0);
   $78 = ((($__grouping)) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $75&255;
   $81 = $80 >>> 1;
   $82 = $77 ? $81 : $79;
   $83 = ($82|0)==(0);
   if ($83) {
    $84 = HEAP32[$__oe>>2]|0;
    $85 = HEAP32[$0>>2]|0;
    $86 = ((($85)) + 48|0);
    $87 = HEAP32[$86>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($87|0,($0|0),($__nf$1|0),($__ns$2|0),($84|0))|0);
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if ($89) {
     label = 8;
     break;
    }
    $90 = $__ns$2;
    $91 = $__nf$1;
    $92 = (($90) - ($91))|0;
    $93 = HEAP32[$__oe>>2]|0;
    $94 = (($93) + ($92<<2)|0);
    HEAP32[$__oe>>2] = $94;
    $$pre$phiZ2D = $0;$198 = $94;
   } else {
    $95 = ($__nf$1|0)==($__ns$2|0);
    if (!($95)) {
     $96 = ((($__ns$2)) + -1|0);
     $97 = ($__nf$1>>>0)<($96>>>0);
     if ($97) {
      $$01$i$i50 = $__nf$1;$100 = $96;
      while(1) {
       $98 = HEAP8[$$01$i$i50>>0]|0;
       $99 = HEAP8[$100>>0]|0;
       HEAP8[$$01$i$i50>>0] = $99;
       HEAP8[$100>>0] = $98;
       $101 = ((($$01$i$i50)) + 1|0);
       $102 = ((($100)) + -1|0);
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $$01$i$i50 = $101;$100 = $102;
       } else {
        break;
       }
      }
     }
    }
    $104 = HEAP32[$1>>2]|0;
    $105 = ((($104)) + 16|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($1|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     label = 8;
     break;
    }
    $110 = ((($__grouping)) + 8|0);
    $111 = ((($__grouping)) + 1|0);
    $112 = ($__nf$1>>>0)<($__ns$2>>>0);
    L37: do {
     if ($112) {
      $__dc$047 = 0;$__dg$048 = 0;$__p$049 = $__nf$1;
      while(1) {
       $113 = HEAP8[$__grouping>>0]|0;
       $114 = $113 & 1;
       $115 = ($114<<24>>24)==(0);
       $116 = HEAP32[$110>>2]|0;
       $117 = $115 ? $111 : $116;
       $118 = (($117) + ($__dg$048)|0);
       $119 = HEAP8[$118>>0]|0;
       $120 = ($119<<24>>24)>(0);
       $121 = $119 << 24 >> 24;
       $122 = ($__dc$047|0)==($121|0);
       $or$cond = $120 & $122;
       if ($or$cond) {
        $123 = HEAP32[$__oe>>2]|0;
        $124 = ((($123)) + 4|0);
        HEAP32[$__oe>>2] = $124;
        HEAP32[$123>>2] = $107;
        $125 = HEAP8[$__grouping>>0]|0;
        $126 = $125 & 1;
        $127 = ($126<<24>>24)==(0);
        $128 = HEAP32[$78>>2]|0;
        $129 = $125&255;
        $130 = $129 >>> 1;
        $131 = $127 ? $130 : $128;
        $132 = (($131) + -1)|0;
        $133 = ($__dg$048>>>0)<($132>>>0);
        $134 = $133&1;
        $$__dg$0 = (($134) + ($__dg$048))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$047;$__dg$1 = $__dg$048;
       }
       $135 = HEAP8[$__p$049>>0]|0;
       $136 = HEAP32[$0>>2]|0;
       $137 = ((($136)) + 44|0);
       $138 = HEAP32[$137>>2]|0;
       __THREW__ = 0;
       $139 = (invoke_iii($138|0,($0|0),($135|0))|0);
       $140 = __THREW__; __THREW__ = 0;
       $141 = $140&1;
       if ($141) {
        break;
       }
       $142 = HEAP32[$__oe>>2]|0;
       $143 = ((($142)) + 4|0);
       HEAP32[$__oe>>2] = $143;
       HEAP32[$142>>2] = $139;
       $144 = (($__dc$1) + 1)|0;
       $145 = ((($__p$049)) + 1|0);
       $146 = ($145>>>0)<($__ns$2>>>0);
       if ($146) {
        $__dc$047 = $144;$__dg$048 = $__dg$1;$__p$049 = $145;
       } else {
        break L37;
       }
      }
      $17 = ___cxa_find_matching_catch()|0;
      $18 = tempRet0;
      $lpad$phi$index = $17;$lpad$phi$index5 = $18;
      break L4;
     }
    } while(0);
    $147 = $__nf$1;
    $148 = $__nb;
    $149 = (($147) - ($148))|0;
    $150 = (($__ob) + ($149<<2)|0);
    $151 = HEAP32[$__oe>>2]|0;
    $152 = ($150|0)==($151|0);
    if ($152) {
     $$pre$phiZ2D = $0;$198 = $150;
    } else {
     $153 = ((($151)) + -4|0);
     $154 = ($150>>>0)<($153>>>0);
     if ($154) {
      $$01$i$i645 = $150;$158 = $153;
      while(1) {
       $156 = HEAP32[$$01$i$i645>>2]|0;
       $157 = HEAP32[$158>>2]|0;
       HEAP32[$$01$i$i645>>2] = $157;
       HEAP32[$158>>2] = $156;
       $159 = ((($$01$i$i645)) + 4|0);
       $160 = ((($158)) + -4|0);
       $161 = ($159>>>0)<($160>>>0);
       if ($161) {
        $$01$i$i645 = $159;$158 = $160;
       } else {
        $$pre$phiZ2D = $0;$198 = $151;
        break;
       }
      }
     } else {
      $$pre$phiZ2D = $0;$198 = $151;
     }
    }
   }
   $155 = ($__ns$2>>>0)<($__ne>>>0);
   L50: do {
    if ($155) {
     $__nf$243 = $__ns$2;
     while(1) {
      $162 = HEAP8[$__nf$243>>0]|0;
      $163 = ($162<<24>>24)==(46);
      if ($163) {
       $__nf$243$lcssa = $__nf$243;
       break;
      }
      $173 = HEAP32[$$pre$phiZ2D>>2]|0;
      $174 = ((($173)) + 44|0);
      $175 = HEAP32[$174>>2]|0;
      __THREW__ = 0;
      $176 = (invoke_iii($175|0,($0|0),($162|0))|0);
      $177 = __THREW__; __THREW__ = 0;
      $178 = $177&1;
      if ($178) {
       label = 4;
       break;
      }
      $179 = HEAP32[$__oe>>2]|0;
      $180 = ((($179)) + 4|0);
      HEAP32[$__oe>>2] = $180;
      HEAP32[$179>>2] = $176;
      $181 = ((($__nf$243)) + 1|0);
      $182 = ($181>>>0)<($__ne>>>0);
      if ($182) {
       $__nf$243 = $181;
      } else {
       $186 = $180;$__nf$3 = $181;
       break L50;
      }
     }
     if ((label|0) == 4) {
      $15 = ___cxa_find_matching_catch()|0;
      $16 = tempRet0;
      $lpad$phi$index = $15;$lpad$phi$index5 = $16;
      break L4;
     }
     $164 = HEAP32[$1>>2]|0;
     $165 = ((($164)) + 12|0);
     $166 = HEAP32[$165>>2]|0;
     __THREW__ = 0;
     $167 = (invoke_ii($166|0,($1|0))|0);
     $168 = __THREW__; __THREW__ = 0;
     $169 = $168&1;
     if ($169) {
      label = 8;
      break L4;
     }
     $170 = HEAP32[$__oe>>2]|0;
     $171 = ((($170)) + 4|0);
     HEAP32[$__oe>>2] = $171;
     HEAP32[$170>>2] = $167;
     $172 = ((($__nf$243$lcssa)) + 1|0);
     $186 = $171;$__nf$3 = $172;
    } else {
     $186 = $198;$__nf$3 = $__ns$2;
    }
   } while(0);
   $183 = HEAP32[$0>>2]|0;
   $184 = ((($183)) + 48|0);
   $185 = HEAP32[$184>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($185|0,($0|0),($__nf$3|0),($__ne|0),($186|0))|0);
   $187 = __THREW__; __THREW__ = 0;
   $188 = $187&1;
   if ($188) {
    label = 8;
   } else {
    $189 = $__nf$3;
    $190 = (($25) - ($189))|0;
    $191 = HEAP32[$__oe>>2]|0;
    $192 = (($191) + ($190<<2)|0);
    HEAP32[$__oe>>2] = $192;
    $193 = ($__np|0)==($__ne|0);
    $194 = $__np;
    $195 = $__nb;
    $196 = (($194) - ($195))|0;
    $197 = (($__ob) + ($196<<2)|0);
    $storemerge = $193 ? $192 : $197;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$110 = 0, $$139 = 0, $$byval_copy = 0, $$pre = 0, $$pre6 = 0, $$pre7 = 0, $$pre7$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 304|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 308|0;
 $__nb = sp + 300|0;
 $__o = sp + 72|0;
 $__op = sp + 68|0;
 $__oe = sp + 64|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,20051,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 L5: do {
  if ($15) {
   __THREW__ = 0;
   $16 = (invoke_i(692)|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($9) {
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(697,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    if (!($18)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $__v;
     $26 = (invoke_iiiii(697,($__nb|0),($16|0),($__fmt|0),($vararg_buffer9|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if (!($28)) {
      $__nc$1 = $26;
      label = 12;
     }
    }
   }
   do {
    if ((label|0) == 12) {
     $29 = HEAP32[$__nb>>2]|0;
     $30 = ($29|0)==(0|0);
     if ($30) {
      __THREW__ = 0;
      invoke_v(698);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       break;
      }
      $$pre = HEAP32[$__nb>>2]|0;
      $34 = $$pre;
     } else {
      $34 = $29;
     }
     $33 = $34;
     $36 = $34;$63 = $33;$__nc$2 = $__nc$1;
     label = 16;
     break L5;
    }
   } while(0);
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$110 = $24;$$139 = $25;
  } else {
   $$pre6 = HEAP32[$__nb>>2]|0;
   $36 = $$pre6;$63 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $35 = (($36) + ($__nc$2)|0);
  $37 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($36,$35,$__iob)|0);
  $38 = ($36|0)==($__nar|0);
  do {
   if ($38) {
    $50 = $__nar;$60 = 0;$__ob$0 = $__o;
    label = 22;
   } else {
    $39 = $__nc$2 << 3;
    $40 = (_malloc($39)|0);
    $41 = ($40|0)==(0|0);
    if ($41) {
     __THREW__ = 0;
     invoke_v(698);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      $72 = 0;
      label = 20;
      break;
     }
     $$pre7$pre = HEAP32[$__nb>>2]|0;
     $$pre7 = $$pre7$pre;
    } else {
     $$pre7 = $36;
    }
    $46 = $40;
    $50 = $$pre7;$60 = $46;$__ob$0 = $40;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $47 = (invoke_ii(494,($__iob|0))|0);
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if ($49) {
     $72 = $60;
     label = 20;
    } else {
     HEAP32[$0>>2] = $47;
     __THREW__ = 0;
     invoke_viiiiiii(703,($50|0),($37|0),($35|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      $65 = ___cxa_find_matching_catch()|0;
      $66 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
      $$0 = $65;$$02 = $66;$68 = $60;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
     $53 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $53;
     $54 = HEAP32[$__op>>2]|0;
     $55 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $56 = (invoke_iiiiiii(704,($$byval_copy|0),($__ob$0|0),($54|0),($55|0),($__iob|0),($__fl|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      $72 = $60;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $56;
      $59 = ($60|0)==(0);
      if (!($59)) {
       $61 = $60;
       _free($61);
      }
      $62 = ($63|0)==(0);
      if (!($62)) {
       $64 = $63;
       _free($64);
      }
      STACKTOP = sp;return ($56|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $44 = ___cxa_find_matching_catch()|0;
   $45 = tempRet0;
   $$0 = $44;$$02 = $45;$68 = $72;
  }
  $67 = ($68|0)==(0);
  if (!($67)) {
   $69 = $68;
   _free($69);
  }
  $70 = ($63|0)==(0);
  if ($70) {
   $$110 = $$0;$$139 = $$02;
  } else {
   $71 = $63;
   _free($71);
   $$110 = $$0;$$139 = $$02;
  }
 }
 ___resumeException($$110|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 160|0;
 $vararg_buffer = sp;
 $__fmt = sp + 184|0;
 $__nar = sp + 164|0;
 $__o = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[20053>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[20053+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[20053+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[20053+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[20053+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[20053+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 $6 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $6;
 __THREW__ = 0;
 $7 = (invoke_iii(495,($0|0),(7680|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  ___resumeException($21|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  $10 = HEAP32[$7>>2]|0;
  $11 = ((($10)) + 48|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiiii[$12 & 1023]($7,$__nar,$4,$__o)|0);
  $13 = (($__o) + ($3<<2)|0);
  $14 = ($5|0)==($4|0);
  $15 = $__nar;
  $16 = $5;
  $17 = (($16) - ($15))|0;
  $18 = (($__o) + ($17<<2)|0);
  $__op$0 = $14 ? $13 : $18;
  $19 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $19;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $20 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$__op$0,$13,$__iob,$__fl)|0);
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i26 = 0, $$0$ph$be = 0, $$0$ph86 = 0, $$0$pn = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$lcssa = 0, $$lcssa94 = 0, $$lcssa95 = 0, $$pre$i$i$i17 = 0, $$pre$i$i$i8 = 0, $$pre$i2$i$i21 = 0, $$pre$i2$i$i2139 = 0, $$pre$i2$i$i2140 = 0, $$pre$pre = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $isascii1$i = 0, $isascii1$i24 = 0, $isascii1$i5 = 0;
 var $or$cond84 = 0, $sext = 0, $tmp$i$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 $3 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $3;
 __THREW__ = 0;
 $4 = (invoke_iii(495,($0|0),(7688|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
  ___resumeException($38|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 HEAP32[$__err>>2] = 0;
 $7 = ((($4)) + 8|0);
 $8 = ($__fmtb|0)==($__fmte|0);
 $9 = HEAP32[$__b>>2]|0;
 L4: do {
  if ($8) {
   $$pre$i$i$i8 = $9;
  } else {
   $$0$ph86 = $__fmtb;$11 = $9;
   L5: while(1) {
    $10 = ($11|0)==(0|0);
    $12 = $11;
    if ($10) {
     $24 = 0;$63 = $12;
    } else {
     $13 = ((($11)) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ((($11)) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$11>>2]|0;
      $19 = ((($18)) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (FUNCTION_TABLE_ii[$20 & 1023]($11)|0);
      $22 = ($21|0)==(-1);
      if ($22) {
       HEAP32[$__b>>2] = 0;
       $24 = 0;$63 = 0;
      } else {
       $24 = $11;$63 = $12;
      }
     } else {
      $24 = $11;$63 = $12;
     }
    }
    $23 = ($24|0)==(0|0);
    $25 = HEAP32[$__e>>2]|0;
    $26 = ($25|0)==(0|0);
    $27 = $25;
    do {
     if ($26) {
      $194 = $27;
      label = 12;
     } else {
      $28 = ((($25)) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ((($25)) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$25>>2]|0;
       $34 = ((($33)) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = (FUNCTION_TABLE_ii[$35 & 1023]($25)|0);
       $37 = ($36|0)==(-1);
       if ($37) {
        HEAP32[$__e>>2] = 0;
        $194 = 0;
        label = 12;
        break;
       }
      }
      if ($23) {
       $195 = $25;$64 = $27;
      } else {
       $$lcssa = $24;
       label = 13;
       break L5;
      }
     }
    } while(0);
    if ((label|0) == 12) {
     label = 0;
     if ($23) {
      $$lcssa = $24;
      label = 13;
      break;
     } else {
      $195 = 0;$64 = $194;
     }
    }
    $40 = HEAP8[$$0$ph86>>0]|0;
    $41 = HEAP32[$4>>2]|0;
    $42 = ((($41)) + 36|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($4,$40,0)|0);
    $45 = ($44<<24>>24)==(37);
    L21: do {
     if ($45) {
      $46 = ((($$0$ph86)) + 1|0);
      $47 = ($46|0)==($__fmte|0);
      if ($47) {
       $$lcssa94 = $24;
       label = 17;
       break L5;
      }
      $48 = HEAP8[$46>>0]|0;
      $49 = HEAP32[$4>>2]|0;
      $50 = ((($49)) + 36|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = (FUNCTION_TABLE_iiii[$51 & 1023]($4,$48,0)|0);
      switch ($52<<24>>24) {
      case 48: case 69:  {
       $53 = ((($$0$ph86)) + 2|0);
       $54 = ($53|0)==($__fmte|0);
       if ($54) {
        $$lcssa95 = $24;
        label = 20;
        break L5;
       }
       $55 = HEAP8[$53>>0]|0;
       $56 = HEAP32[$4>>2]|0;
       $57 = ((($56)) + 36|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = (FUNCTION_TABLE_iiii[$58 & 1023]($4,$55,0)|0);
       $67 = $46;$__cmd$0 = $59;$__opt$0 = $52;
       break;
      }
      default: {
       $67 = $$0$ph86;$__cmd$0 = $52;$__opt$0 = 0;
      }
      }
      $60 = HEAP32[$this>>2]|0;
      $61 = ((($60)) + 36|0);
      $62 = HEAP32[$61>>2]|0;
      HEAP32[$1>>2] = $63;
      HEAP32[$2>>2] = $64;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
      ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;
      $65 = (FUNCTION_TABLE_iiiiiiiii[$62 & 511]($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0)|0);
      HEAP32[$__b>>2] = $65;
      $66 = ((($67)) + 2|0);
      $$0$ph$be = $66;
     } else {
      $71 = HEAP8[$$0$ph86>>0]|0;
      $isascii1$i = ($71<<24>>24)>(-1);
      if ($isascii1$i) {
       $72 = $71 << 24 >> 24;
       $73 = HEAP32[$7>>2]|0;
       $74 = (($73) + ($72<<1)|0);
       $75 = HEAP16[$74>>1]|0;
       $76 = $75 & 8192;
       $77 = ($76<<16>>16)==(0);
       if (!($77)) {
        $$0$pn = $$0$ph86;
        while(1) {
         $$2 = ((($$0$pn)) + 1|0);
         $78 = ($$2|0)==($__fmte|0);
         if ($78) {
          $$2$lcssa = $__fmte;
          break;
         }
         $79 = HEAP8[$$2>>0]|0;
         $isascii1$i5 = ($79<<24>>24)>(-1);
         if (!($isascii1$i5)) {
          $$2$lcssa = $$2;
          break;
         }
         $80 = $79 << 24 >> 24;
         $81 = (($73) + ($80<<1)|0);
         $82 = HEAP16[$81>>1]|0;
         $83 = $82 & 8192;
         $84 = ($83<<16>>16)==(0);
         if ($84) {
          $$2$lcssa = $$2;
          break;
         } else {
          $$0$pn = $$2;
         }
        }
        $$pre$i$i$i17 = $24;$$pre$i2$i$i21 = $195;$99 = $195;
        while(1) {
         $85 = ($$pre$i$i$i17|0)==(0|0);
         if ($85) {
          $97 = 0;
         } else {
          $86 = ((($$pre$i$i$i17)) + 12|0);
          $87 = HEAP32[$86>>2]|0;
          $88 = ((($$pre$i$i$i17)) + 16|0);
          $89 = HEAP32[$88>>2]|0;
          $90 = ($87|0)==($89|0);
          if ($90) {
           $91 = HEAP32[$$pre$i$i$i17>>2]|0;
           $92 = ((($91)) + 36|0);
           $93 = HEAP32[$92>>2]|0;
           $94 = (FUNCTION_TABLE_ii[$93 & 1023]($$pre$i$i$i17)|0);
           $95 = ($94|0)==(-1);
           if ($95) {
            HEAP32[$__b>>2] = 0;
            $97 = 0;
           } else {
            $97 = $$pre$i$i$i17;
           }
          } else {
           $97 = $$pre$i$i$i17;
          }
         }
         $96 = ($97|0)==(0|0);
         $98 = ($99|0)==(0|0);
         do {
          if ($98) {
           $$pre$i2$i$i2140 = $$pre$i2$i$i21;
           label = 39;
          } else {
           $100 = ((($99)) + 12|0);
           $101 = HEAP32[$100>>2]|0;
           $102 = ((($99)) + 16|0);
           $103 = HEAP32[$102>>2]|0;
           $104 = ($101|0)==($103|0);
           if (!($104)) {
            if ($96) {
             $$pre$i2$i$i2139 = $$pre$i2$i$i21;$196 = $99;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L21;
            }
           }
           $105 = HEAP32[$99>>2]|0;
           $106 = ((($105)) + 36|0);
           $107 = HEAP32[$106>>2]|0;
           $108 = (FUNCTION_TABLE_ii[$107 & 1023]($99)|0);
           $109 = ($108|0)==(-1);
           if ($109) {
            HEAP32[$__e>>2] = 0;
            $$pre$i2$i$i2140 = 0;
            label = 39;
            break;
           } else {
            $110 = ($$pre$i2$i$i21|0)==(0|0);
            $tmp$i$i23 = $96 ^ $110;
            if ($tmp$i$i23) {
             $$pre$i2$i$i2139 = $$pre$i2$i$i21;$196 = $$pre$i2$i$i21;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L21;
            }
           }
          }
         } while(0);
         if ((label|0) == 39) {
          label = 0;
          if ($96) {
           $$0$ph$be = $$2$lcssa;
           break L21;
          } else {
           $$pre$i2$i$i2139 = $$pre$i2$i$i2140;$196 = 0;
          }
         }
         $111 = ((($97)) + 12|0);
         $112 = HEAP32[$111>>2]|0;
         $113 = ((($97)) + 16|0);
         $114 = HEAP32[$113>>2]|0;
         $115 = ($112|0)==($114|0);
         if ($115) {
          $116 = HEAP32[$97>>2]|0;
          $117 = ((($116)) + 36|0);
          $118 = HEAP32[$117>>2]|0;
          $119 = (FUNCTION_TABLE_ii[$118 & 1023]($97)|0);
          $$0$i$i = $119;
         } else {
          $120 = HEAP8[$112>>0]|0;
          $121 = $120&255;
          $$0$i$i = $121;
         }
         $122 = $$0$i$i&255;
         $isascii1$i24 = ($122<<24>>24)>(-1);
         if (!($isascii1$i24)) {
          $$0$ph$be = $$2$lcssa;
          break L21;
         }
         $sext = $$0$i$i << 24;
         $123 = $sext >> 24;
         $124 = HEAP32[$7>>2]|0;
         $125 = (($124) + ($123<<1)|0);
         $126 = HEAP16[$125>>1]|0;
         $127 = $126 & 8192;
         $128 = ($127<<16>>16)==(0);
         if ($128) {
          $$0$ph$be = $$2$lcssa;
          break L21;
         }
         $129 = HEAP32[$111>>2]|0;
         $130 = HEAP32[$113>>2]|0;
         $131 = ($129|0)==($130|0);
         if ($131) {
          $132 = HEAP32[$97>>2]|0;
          $133 = ((($132)) + 40|0);
          $134 = HEAP32[$133>>2]|0;
          (FUNCTION_TABLE_ii[$134 & 1023]($97)|0);
          $$pre$i$i$i17 = $97;$$pre$i2$i$i21 = $$pre$i2$i$i2139;$99 = $196;
          continue;
         } else {
          $135 = ((($129)) + 1|0);
          HEAP32[$111>>2] = $135;
          $$pre$i$i$i17 = $97;$$pre$i2$i$i21 = $$pre$i2$i$i2139;$99 = $196;
          continue;
         }
        }
       }
      }
      $136 = ((($24)) + 12|0);
      $137 = HEAP32[$136>>2]|0;
      $138 = ((($24)) + 16|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($137|0)==($139|0);
      if ($140) {
       $141 = HEAP32[$24>>2]|0;
       $142 = ((($141)) + 36|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = (FUNCTION_TABLE_ii[$143 & 1023]($24)|0);
       $$0$i$i26 = $144;
      } else {
       $145 = HEAP8[$137>>0]|0;
       $146 = $145&255;
       $$0$i$i26 = $146;
      }
      $147 = $$0$i$i26&255;
      $148 = HEAP32[$4>>2]|0;
      $149 = ((($148)) + 12|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = (FUNCTION_TABLE_iii[$150 & 1023]($4,$147)|0);
      $152 = HEAP8[$$0$ph86>>0]|0;
      $153 = HEAP32[$4>>2]|0;
      $154 = ((($153)) + 12|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = (FUNCTION_TABLE_iii[$155 & 1023]($4,$152)|0);
      $157 = ($151<<24>>24)==($156<<24>>24);
      if (!($157)) {
       label = 57;
       break L5;
      }
      $158 = HEAP32[$136>>2]|0;
      $159 = HEAP32[$138>>2]|0;
      $160 = ($158|0)==($159|0);
      if ($160) {
       $161 = HEAP32[$24>>2]|0;
       $162 = ((($161)) + 40|0);
       $163 = HEAP32[$162>>2]|0;
       (FUNCTION_TABLE_ii[$163 & 1023]($24)|0);
      } else {
       $164 = ((($158)) + 1|0);
       HEAP32[$136>>2] = $164;
      }
      $165 = ((($$0$ph86)) + 1|0);
      $$0$ph$be = $165;
     }
    } while(0);
    $$pre$pre = HEAP32[$__err>>2]|0;
    $68 = ($$0$ph$be|0)!=($__fmte|0);
    $69 = ($$pre$pre|0)==(0);
    $or$cond84 = $68 & $69;
    $70 = HEAP32[$__b>>2]|0;
    if ($or$cond84) {
     $$0$ph86 = $$0$ph$be;$11 = $70;
    } else {
     $$pre$i$i$i8 = $70;
     break L4;
    }
   }
   if ((label|0) == 13) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i8 = $$lcssa;
    break;
   }
   else if ((label|0) == 17) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i8 = $$lcssa94;
    break;
   }
   else if ((label|0) == 20) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i8 = $$lcssa95;
    break;
   }
   else if ((label|0) == 57) {
    HEAP32[$__err>>2] = 4;
    $166 = HEAP32[$__b>>2]|0;
    $$pre$i$i$i8 = $166;
    break;
   }
  }
 } while(0);
 $167 = ($$pre$i$i$i8|0)==(0|0);
 if ($167) {
  $179 = 0;
 } else {
  $168 = ((($$pre$i$i$i8)) + 12|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = ((($$pre$i$i$i8)) + 16|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = ($169|0)==($171|0);
  if ($172) {
   $173 = HEAP32[$$pre$i$i$i8>>2]|0;
   $174 = ((($173)) + 36|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = (FUNCTION_TABLE_ii[$175 & 1023]($$pre$i$i$i8)|0);
   $177 = ($176|0)==(-1);
   if ($177) {
    HEAP32[$__b>>2] = 0;
    $179 = 0;
   } else {
    $179 = $$pre$i$i$i8;
   }
  } else {
   $179 = $$pre$i$i$i8;
  }
 }
 $178 = ($179|0)==(0|0);
 $180 = HEAP32[$__e>>2]|0;
 $181 = ($180|0)==(0|0);
 do {
  if ($181) {
   label = 67;
  } else {
   $182 = ((($180)) + 12|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = ((($180)) + 16|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = ($183|0)==($185|0);
   if ($186) {
    $187 = HEAP32[$180>>2]|0;
    $188 = ((($187)) + 36|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = (FUNCTION_TABLE_ii[$189 & 1023]($180)|0);
    $191 = ($190|0)==(-1);
    if ($191) {
     HEAP32[$__e>>2] = 0;
     label = 67;
     break;
    }
   }
   if (!($178)) {
    label = 68;
   }
  }
 } while(0);
 if ((label|0) == 67) {
  if ($178) {
   label = 68;
  }
 }
 if ((label|0) == 68) {
  $192 = HEAP32[$__err>>2]|0;
  $193 = $192 | 2;
  HEAP32[$__err>>2] = $193;
 }
 STACKTOP = sp;return ($179|0);
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,20059,(20067))|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 $12 = ((($6)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($6)) + 1|0);
 $15 = $11 ? $14 : $13;
 $16 = ((($6)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $9&255;
 $19 = $18 >>> 1;
 $20 = $11 ? $19 : $17;
 $21 = (($15) + ($20)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $22 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$15,$21)|0);
 STACKTOP = sp;return ($22|0);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(495,($0|0),(7688|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($4)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if ($11) {
  $12 = (($10|0) / 12)&-1;
  $13 = (($12|0) % 7)&-1;
  HEAP32[$__w>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(495,($0|0),(7688|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = ((($5)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if ($12) {
  $13 = (($11|0) / 12)&-1;
  $14 = (($13|0) % 12)&-1;
  HEAP32[$__m>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(495,($0|0),(7688|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ($2|0)<(69);
  if ($6) {
   $7 = (($2) + 2000)|0;
   $__t$0 = $7;
  } else {
   $$off = (($2) + -69)|0;
   $8 = ($$off>>>0)<(31);
   $9 = (($2) + 1900)|0;
   $$ = $8 ? $9 : $2;
   $__t$0 = $$;
  }
  $10 = (($__t$0) + -1900)|0;
  HEAP32[$__y>>2] = $10;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$sroa$07$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy30 = sp + 248|0;
 $$byval_copy29 = sp + 244|0;
 $$byval_copy28 = sp + 240|0;
 $$byval_copy27 = sp + 236|0;
 $$byval_copy26 = sp + 232|0;
 $$byval_copy25 = sp + 228|0;
 $$byval_copy24 = sp + 224|0;
 $$byval_copy23 = sp + 220|0;
 $$byval_copy22 = sp + 216|0;
 $$byval_copy21 = sp + 212|0;
 $$byval_copy20 = sp + 208|0;
 $$byval_copy19 = sp + 204|0;
 $$byval_copy18 = sp + 200|0;
 $$byval_copy17 = sp + 196|0;
 $$byval_copy16 = sp + 192|0;
 $$byval_copy15 = sp + 188|0;
 $$byval_copy14 = sp + 184|0;
 $$byval_copy13 = sp + 180|0;
 $$byval_copy12 = sp + 176|0;
 $$byval_copy11 = sp + 172|0;
 $$byval_copy10 = sp + 168|0;
 $$byval_copy9 = sp + 164|0;
 $$byval_copy8 = sp + 160|0;
 $$byval_copy7 = sp + 156|0;
 $$byval_copy6 = sp + 152|0;
 $$byval_copy5 = sp + 148|0;
 $$byval_copy4 = sp + 144|0;
 $$byval_copy3 = sp + 140|0;
 $$byval_copy2 = sp + 136|0;
 $$byval_copy1 = sp + 132|0;
 $$byval_copy = sp + 128|0;
 $1 = sp + 124|0;
 $2 = sp + 120|0;
 $3 = sp + 116|0;
 $4 = sp + 112|0;
 $5 = sp + 108|0;
 $6 = sp + 104|0;
 $7 = sp + 100|0;
 $8 = sp + 96|0;
 $9 = sp + 92|0;
 $10 = sp + 88|0;
 $11 = sp + 84|0;
 $12 = sp + 80|0;
 $13 = sp + 76|0;
 $14 = sp + 72|0;
 $15 = sp + 68|0;
 $16 = sp + 64|0;
 $17 = sp + 60|0;
 $18 = sp + 56|0;
 $19 = sp + 52|0;
 $20 = sp + 48|0;
 $21 = sp + 44|0;
 $22 = sp + 40|0;
 $23 = sp + 36|0;
 $24 = sp + 32|0;
 $25 = sp + 28|0;
 $26 = sp + 24|0;
 $27 = sp + 20|0;
 $28 = sp + 16|0;
 $29 = sp + 12|0;
 $30 = sp + 8|0;
 $31 = sp + 4|0;
 $32 = sp;
 HEAP32[$__err>>2] = 0;
 $33 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$1>>2] = $33;
 __THREW__ = 0;
 $34 = (invoke_iii(495,($1|0),(7688|0))|0);
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
  ___resumeException($38|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
 $37 = $__fmt << 24 >> 24;
 do {
  switch ($37|0) {
  case 65: case 97:  {
   $40 = ((($__tm)) + 24|0);
   $41 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $41;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$40,$__b,$$byval_copy,$__err,$34);
   label = 28;
   break;
  }
  case 104: case 66: case 98:  {
   $42 = ((($__tm)) + 16|0);
   $43 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $43;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$42,$__b,$$byval_copy1,$__err,$34);
   label = 28;
   break;
  }
  case 99:  {
   $44 = ((($this)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($45)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_ii[$47 & 1023]($44)|0);
   $49 = HEAP32[$__b>>2]|0;
   HEAP32[$4>>2] = $49;
   $50 = HEAP32[$__e>>2]|0;
   HEAP32[$5>>2] = $50;
   $51 = HEAP8[$48>>0]|0;
   $52 = $51 & 1;
   $53 = ($52<<24>>24)==(0);
   $54 = ((($48)) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($48)) + 1|0);
   $57 = $53 ? $56 : $55;
   $58 = ((($48)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $51&255;
   $61 = $60 >>> 1;
   $62 = $53 ? $61 : $59;
   $63 = (($57) + ($62)|0);
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$5>>2]|0;
   $64 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$57,$63)|0);
   HEAP32[$__b>>2] = $64;
   label = 28;
   break;
  }
  case 101: case 100:  {
   $65 = ((($__tm)) + 12|0);
   $66 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $66;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$6>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$65,$__b,$$byval_copy4,$__err,$34);
   label = 28;
   break;
  }
  case 68:  {
   $67 = HEAP32[$__b>>2]|0;
   HEAP32[$7>>2] = $67;
   $68 = HEAP32[$__e>>2]|0;
   HEAP32[$8>>2] = $68;
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$7>>2]|0;
   ;HEAP32[$$byval_copy6>>2]=HEAP32[$8>>2]|0;
   $69 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,20067,(20075))|0);
   HEAP32[$__b>>2] = $69;
   label = 28;
   break;
  }
  case 70:  {
   $70 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $70;
   $71 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $71;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$9>>2]|0;
   ;HEAP32[$$byval_copy8>>2]=HEAP32[$10>>2]|0;
   $72 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,20075,(20083))|0);
   HEAP32[$__b>>2] = $72;
   label = 28;
   break;
  }
  case 72:  {
   $73 = ((($__tm)) + 8|0);
   $74 = HEAP32[$__e>>2]|0;
   HEAP32[$11>>2] = $74;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$11>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$73,$__b,$$byval_copy9,$__err,$34);
   label = 28;
   break;
  }
  case 73:  {
   $75 = ((($__tm)) + 8|0);
   $76 = HEAP32[$__e>>2]|0;
   HEAP32[$12>>2] = $76;
   ;HEAP32[$$byval_copy10>>2]=HEAP32[$12>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$75,$__b,$$byval_copy10,$__err,$34);
   label = 28;
   break;
  }
  case 106:  {
   $77 = ((($__tm)) + 28|0);
   $78 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $78;
   ;HEAP32[$$byval_copy11>>2]=HEAP32[$13>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$77,$__b,$$byval_copy11,$__err,$34);
   label = 28;
   break;
  }
  case 109:  {
   $79 = ((($__tm)) + 16|0);
   $80 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $80;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[$14>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$79,$__b,$$byval_copy12,$__err,$34);
   label = 28;
   break;
  }
  case 77:  {
   $81 = ((($__tm)) + 4|0);
   $82 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $82;
   ;HEAP32[$$byval_copy13>>2]=HEAP32[$15>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$81,$__b,$$byval_copy13,$__err,$34);
   label = 28;
   break;
  }
  case 116: case 110:  {
   $83 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $83;
   ;HEAP32[$$byval_copy14>>2]=HEAP32[$16>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy14,$__err,$34);
   label = 28;
   break;
  }
  case 112:  {
   $84 = ((($__tm)) + 8|0);
   $85 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $85;
   ;HEAP32[$$byval_copy15>>2]=HEAP32[$17>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$84,$__b,$$byval_copy15,$__err,$34);
   label = 28;
   break;
  }
  case 114:  {
   $86 = HEAP32[$__b>>2]|0;
   HEAP32[$18>>2] = $86;
   $87 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $87;
   ;HEAP32[$$byval_copy16>>2]=HEAP32[$18>>2]|0;
   ;HEAP32[$$byval_copy17>>2]=HEAP32[$19>>2]|0;
   $88 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,20083,(20094))|0);
   HEAP32[$__b>>2] = $88;
   label = 28;
   break;
  }
  case 82:  {
   $89 = HEAP32[$__b>>2]|0;
   HEAP32[$20>>2] = $89;
   $90 = HEAP32[$__e>>2]|0;
   HEAP32[$21>>2] = $90;
   ;HEAP32[$$byval_copy18>>2]=HEAP32[$20>>2]|0;
   ;HEAP32[$$byval_copy19>>2]=HEAP32[$21>>2]|0;
   $91 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,20094,(20099))|0);
   HEAP32[$__b>>2] = $91;
   label = 28;
   break;
  }
  case 83:  {
   $92 = HEAP32[$__e>>2]|0;
   HEAP32[$22>>2] = $92;
   ;HEAP32[$$byval_copy20>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__tm,$__b,$$byval_copy20,$__err,$34);
   label = 28;
   break;
  }
  case 84:  {
   $93 = HEAP32[$__b>>2]|0;
   HEAP32[$23>>2] = $93;
   $94 = HEAP32[$__e>>2]|0;
   HEAP32[$24>>2] = $94;
   ;HEAP32[$$byval_copy21>>2]=HEAP32[$23>>2]|0;
   ;HEAP32[$$byval_copy22>>2]=HEAP32[$24>>2]|0;
   $95 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,20099,(20107))|0);
   HEAP32[$__b>>2] = $95;
   label = 28;
   break;
  }
  case 119:  {
   $96 = ((($__tm)) + 24|0);
   $97 = HEAP32[$__e>>2]|0;
   HEAP32[$25>>2] = $97;
   ;HEAP32[$$byval_copy23>>2]=HEAP32[$25>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$96,$__b,$$byval_copy23,$__err,$34);
   label = 28;
   break;
  }
  case 120:  {
   $98 = HEAP32[$this>>2]|0;
   $99 = ((($98)) + 20|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = HEAP32[$__b>>2]|0;
   HEAP32[$26>>2] = $101;
   $102 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $102;
   ;HEAP32[$$byval_copy24>>2]=HEAP32[$26>>2]|0;
   ;HEAP32[$$byval_copy25>>2]=HEAP32[$27>>2]|0;
   $103 = (FUNCTION_TABLE_iiiiiii[$100 & 1023]($this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm)|0);
   $$sroa$07$0 = $103;
   break;
  }
  case 88:  {
   $104 = ((($this)) + 8|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ((($105)) + 24|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (FUNCTION_TABLE_ii[$107 & 1023]($104)|0);
   $109 = HEAP32[$__b>>2]|0;
   HEAP32[$28>>2] = $109;
   $110 = HEAP32[$__e>>2]|0;
   HEAP32[$29>>2] = $110;
   $111 = HEAP8[$108>>0]|0;
   $112 = $111 & 1;
   $113 = ($112<<24>>24)==(0);
   $114 = ((($108)) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = ((($108)) + 1|0);
   $117 = $113 ? $116 : $115;
   $118 = ((($108)) + 4|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $111&255;
   $121 = $120 >>> 1;
   $122 = $113 ? $121 : $119;
   $123 = (($117) + ($122)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$28>>2]|0;
   ;HEAP32[$$byval_copy27>>2]=HEAP32[$29>>2]|0;
   $124 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$117,$123)|0);
   HEAP32[$__b>>2] = $124;
   label = 28;
   break;
  }
  case 121:  {
   $125 = ((($__tm)) + 20|0);
   $126 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $126;
   ;HEAP32[$$byval_copy28>>2]=HEAP32[$30>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$125,$__b,$$byval_copy28,$__err,$34);
   label = 28;
   break;
  }
  case 89:  {
   $127 = ((($__tm)) + 20|0);
   $128 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $128;
   ;HEAP32[$$byval_copy29>>2]=HEAP32[$31>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$127,$__b,$$byval_copy29,$__err,$34);
   label = 28;
   break;
  }
  case 37:  {
   $129 = HEAP32[$__e>>2]|0;
   HEAP32[$32>>2] = $129;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$32>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy30,$__err,$34);
   label = 28;
   break;
  }
  default: {
   $130 = HEAP32[$__err>>2]|0;
   $131 = $130 | 4;
   HEAP32[$__err>>2] = $131;
   label = 28;
  }
  }
 } while(0);
 if ((label|0) == 28) {
  $132 = HEAP32[$__b>>2]|0;
  $$sroa$07$0 = $132;
 }
 STACKTOP = sp;return ($$sroa$07$0|0);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(31);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__d>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(12);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__h>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $6 & $5;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__ct)) + 8|0);
 L1: while(1) {
  $1 = HEAP32[$__b>>2]|0;
  $2 = ($1|0)==(0|0);
  do {
   if ($2) {
    $14 = 0;
   } else {
    $3 = ((($1)) + 12|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = ((($1)) + 16|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($4|0)==($6|0);
    if ($7) {
     $8 = HEAP32[$1>>2]|0;
     $9 = ((($8)) + 36|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 1023]($1)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      HEAP32[$__b>>2] = 0;
      $14 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $14 = $$pre$i$i$i;
      break;
     }
    } else {
     $14 = $1;
    }
   }
  } while(0);
  $13 = ($14|0)==(0|0);
  $15 = HEAP32[$__e>>2]|0;
  $16 = ($15|0)==(0|0);
  do {
   if ($16) {
    label = 12;
   } else {
    $17 = ((($15)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($15)) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($18|0)==($20|0);
    if (!($21)) {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
    $22 = HEAP32[$15>>2]|0;
    $23 = ((($22)) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_ii[$24 & 1023]($15)|0);
    $26 = ($25|0)==(-1);
    if ($26) {
     HEAP32[$__e>>2] = 0;
     label = 12;
     break;
    } else {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($13) {
    $$pre$i2$i$i6 = 0;
    break;
   } else {
    $83 = 0;
   }
  }
  $27 = HEAP32[$__b>>2]|0;
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($27)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)==($31|0);
  if ($32) {
   $33 = HEAP32[$27>>2]|0;
   $34 = ((($33)) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (FUNCTION_TABLE_ii[$35 & 1023]($27)|0);
   $$0$i$i = $36;
  } else {
   $37 = HEAP8[$29>>0]|0;
   $38 = $37&255;
   $$0$i$i = $38;
  }
  $39 = $$0$i$i&255;
  $isascii1$i = ($39<<24>>24)>(-1);
  if (!($isascii1$i)) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $sext = $$0$i$i << 24;
  $40 = $sext >> 24;
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + ($40<<1)|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 & 8192;
  $45 = ($44<<16>>16)==(0);
  if ($45) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $46 = HEAP32[$__b>>2]|0;
  $47 = ((($46)) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($46)) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if ($51) {
   $52 = HEAP32[$46>>2]|0;
   $53 = ((($52)) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   (FUNCTION_TABLE_ii[$54 & 1023]($46)|0);
   continue;
  } else {
   $55 = ((($48)) + 1|0);
   HEAP32[$47>>2] = $55;
   continue;
  }
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $69 = 0;
  } else {
   $58 = ((($56)) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($56)) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = ((($63)) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 1023]($56)|0);
    $67 = ($66|0)==(-1);
    if ($67) {
     HEAP32[$__b>>2] = 0;
     $69 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $69 = $$pre$i$i$i2;
     break;
    }
   } else {
    $69 = $56;
   }
  }
 } while(0);
 $68 = ($69|0)==(0|0);
 $70 = ($$pre$i2$i$i6|0)==(0|0);
 do {
  if ($70) {
   label = 32;
  } else {
   $71 = ((($$pre$i2$i$i6)) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($$pre$i2$i$i6)) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72|0)==($74|0);
   if ($75) {
    $76 = HEAP32[$$pre$i2$i$i6>>2]|0;
    $77 = ((($76)) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 1023]($$pre$i2$i$i6)|0);
    $80 = ($79|0)==(-1);
    if ($80) {
     HEAP32[$__e>>2] = 0;
     label = 32;
     break;
    }
   }
   if (!($68)) {
    label = 33;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if ($68) {
   label = 33;
  }
 }
 if ((label|0) == 33) {
  $81 = HEAP32[$__err>>2]|0;
  $82 = $81 | 2;
  HEAP32[$__err>>2] = $82;
 }
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $24 = $12;
 } else {
  $9 = ((($5)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $24 = $10;
 }
 $13 = ((($5)) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = ((($5)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $23 = ($24|0)==($21|0);
 do {
  if ($23) {
   $25 = HEAP32[$__err>>2]|0;
   $26 = $25 | 4;
   HEAP32[$__err>>2] = $26;
  } else {
   $27 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $27;
   $28 = ((($5)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
   $30 = ($29|0)==($5|0);
   $31 = HEAP32[$__h>>2]|0;
   $32 = ($31|0)==(12);
   $or$cond = $30 & $32;
   if ($or$cond) {
    HEAP32[$__h>>2] = 0;
    break;
   }
   $33 = $29;
   $34 = $5;
   $35 = (($33) - ($34))|0;
   $36 = ($35|0)==(12);
   $37 = ($31|0)<(12);
   $or$cond3 = $37 & $36;
   if ($or$cond3) {
    $38 = (($31) + 12)|0;
    HEAP32[$__h>>2] = $38;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (($2) + -1900)|0;
  HEAP32[$__y>>2] = $6;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i611 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = ((($14)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($14)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = ((($21)) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $$pre$i2$i$i611 = $14;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $$pre$i2$i$i611 = 0;
   label = 13;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
  }
  else if ((label|0) == 13) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP8[$30>>0]|0;
    $39 = $38&255;
    $$0$i$i = $39;
   }
   $40 = $$0$i$i&255;
   $41 = HEAP32[$__ct>>2]|0;
   $42 = ((($41)) + 36|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($__ct,$40,0)|0);
   $45 = ($44<<24>>24)==(37);
   if (!($45)) {
    $46 = HEAP32[$__err>>2]|0;
    $47 = $46 | 4;
    HEAP32[$__err>>2] = $47;
    break;
   }
   $48 = HEAP32[$__b>>2]|0;
   $49 = ((($48)) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($48)) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($50|0)==($52|0);
   if ($53) {
    $55 = HEAP32[$48>>2]|0;
    $56 = ((($55)) + 40|0);
    $57 = HEAP32[$56>>2]|0;
    (FUNCTION_TABLE_ii[$57 & 1023]($48)|0);
    $$pre = HEAP32[$__b>>2]|0;
    $58 = ($$pre|0)==(0|0);
    if ($58) {
     $71 = 0;
    } else {
     $60 = $$pre;
     label = 21;
    }
   } else {
    $54 = ((($50)) + 1|0);
    HEAP32[$49>>2] = $54;
    $60 = $48;
    label = 21;
   }
   do {
    if ((label|0) == 21) {
     $59 = ((($60)) + 12|0);
     $61 = HEAP32[$59>>2]|0;
     $62 = ((($60)) + 16|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ($61|0)==($63|0);
     if ($64) {
      $65 = HEAP32[$60>>2]|0;
      $66 = ((($65)) + 36|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (FUNCTION_TABLE_ii[$67 & 1023]($60)|0);
      $69 = ($68|0)==(-1);
      if ($69) {
       HEAP32[$__b>>2] = 0;
       $71 = 0;
       break;
      } else {
       $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
       $71 = $$pre$i$i$i2;
       break;
      }
     } else {
      $71 = $60;
     }
    }
   } while(0);
   $70 = ($71|0)==(0|0);
   $72 = ($$pre$i2$i$i611|0)==(0|0);
   do {
    if ($72) {
     label = 30;
    } else {
     $73 = ((($$pre$i2$i$i611)) + 12|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ((($$pre$i2$i$i611)) + 16|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($74|0)==($76|0);
     if ($77) {
      $78 = HEAP32[$$pre$i2$i$i611>>2]|0;
      $79 = ((($78)) + 36|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (FUNCTION_TABLE_ii[$80 & 1023]($$pre$i2$i$i611)|0);
      $82 = ($81|0)==(-1);
      if ($82) {
       HEAP32[$__e>>2] = 0;
       label = 30;
       break;
      }
     }
     if ($70) {
      break L16;
     }
    }
   } while(0);
   if ((label|0) == 30) {
    if (!($70)) {
     break;
    }
   }
   $83 = HEAP32[$__err>>2]|0;
   $84 = $83 | 2;
   HEAP32[$__err>>2] = $84;
  }
 } while(0);
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i20 = 0, $$0$i$i$i$i5 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i11 = 0, $$0$i$i1$i$i26 = 0, $$0$i$i17 = 0, $$0$ph$be = 0, $$0$ph89 = 0, $$0$pn = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$lcssa = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$ph = 0, $$pre$i$i$i22 = 0;
 var $$pre$i$i$i7 = 0, $$pre$i3$i$i13 = 0, $$pre$i3$i$i1344 = 0, $$pre$i3$i$i1345 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $or$cond87 = 0, $phitmp$i4$i$i14 = 0;
 var $tmp$i$i16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 $3 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $3;
 __THREW__ = 0;
 $4 = (invoke_iii(495,($0|0),(7680|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $37 = ___cxa_find_matching_catch()|0;
  $38 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
  ___resumeException($37|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 HEAP32[$__err>>2] = 0;
 $7 = ($__fmtb|0)==($__fmte|0);
 $8 = HEAP32[$__b>>2]|0;
 L4: do {
  if ($7) {
   $$pre$i$i$i22 = $8;
  } else {
   $$0$ph89 = $__fmtb;$10 = $8;
   L5: while(1) {
    $9 = ($10|0)==(0|0);
    $11 = $10;
    if ($9) {
     $130 = 0;$187 = 1;$62 = $11;
    } else {
     $12 = ((($10)) + 12|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ((($10)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($13|0)==($15|0);
     if ($16) {
      $17 = HEAP32[$10>>2]|0;
      $18 = ((($17)) + 36|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (FUNCTION_TABLE_ii[$19 & 1023]($10)|0);
      $$0$i$i$i$i = $20;
     } else {
      $21 = HEAP32[$13>>2]|0;
      $$0$i$i$i$i = $21;
     }
     $22 = ($$0$i$i$i$i|0)==(-1);
     if ($22) {
      HEAP32[$__b>>2] = 0;
      $130 = 0;$187 = 1;$62 = 0;
     } else {
      $130 = $10;$187 = 0;$62 = $11;
     }
    }
    $23 = HEAP32[$__e>>2]|0;
    $24 = ($23|0)==(0|0);
    $25 = $23;
    do {
     if ($24) {
      $$ph = $25;
      label = 15;
     } else {
      $26 = ((($23)) + 12|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ((($23)) + 16|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($27|0)==($29|0);
      if ($30) {
       $31 = HEAP32[$23>>2]|0;
       $32 = ((($31)) + 36|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = (FUNCTION_TABLE_ii[$33 & 1023]($23)|0);
       $$0$i$i1$i$i = $34;
      } else {
       $35 = HEAP32[$27>>2]|0;
       $$0$i$i1$i$i = $35;
      }
      $36 = ($$0$i$i1$i$i|0)==(-1);
      if ($36) {
       HEAP32[$__e>>2] = 0;
       $$ph = 0;
       label = 15;
       break;
      } else {
       if ($187) {
        $188 = $23;$63 = $25;
        break;
       } else {
        $$lcssa = $130;
        label = 17;
        break L5;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($187) {
      $$lcssa = $130;
      label = 17;
      break;
     } else {
      $188 = 0;$63 = $$ph;
     }
    }
    $39 = HEAP32[$$0$ph89>>2]|0;
    $40 = HEAP32[$4>>2]|0;
    $41 = ((($40)) + 52|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (FUNCTION_TABLE_iiii[$42 & 1023]($4,$39,0)|0);
    $44 = ($43<<24>>24)==(37);
    L27: do {
     if ($44) {
      $45 = ((($$0$ph89)) + 4|0);
      $46 = ($45|0)==($__fmte|0);
      if ($46) {
       $$lcssa97 = $130;
       label = 21;
       break L5;
      }
      $47 = HEAP32[$45>>2]|0;
      $48 = HEAP32[$4>>2]|0;
      $49 = ((($48)) + 52|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = (FUNCTION_TABLE_iiii[$50 & 1023]($4,$47,0)|0);
      switch ($51<<24>>24) {
      case 48: case 69:  {
       $52 = ((($$0$ph89)) + 8|0);
       $53 = ($52|0)==($__fmte|0);
       if ($53) {
        $$lcssa98 = $130;
        label = 24;
        break L5;
       }
       $54 = HEAP32[$52>>2]|0;
       $55 = HEAP32[$4>>2]|0;
       $56 = ((($55)) + 52|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = (FUNCTION_TABLE_iiii[$57 & 1023]($4,$54,0)|0);
       $66 = $45;$__cmd$0 = $58;$__opt$0 = $51;
       break;
      }
      default: {
       $66 = $$0$ph89;$__cmd$0 = $51;$__opt$0 = 0;
      }
      }
      $59 = HEAP32[$this>>2]|0;
      $60 = ((($59)) + 36|0);
      $61 = HEAP32[$60>>2]|0;
      HEAP32[$1>>2] = $62;
      HEAP32[$2>>2] = $63;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
      ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;
      $64 = (FUNCTION_TABLE_iiiiiiiii[$61 & 511]($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0)|0);
      HEAP32[$__b>>2] = $64;
      $65 = ((($66)) + 8|0);
      $$0$ph$be = $65;
     } else {
      $70 = HEAP32[$$0$ph89>>2]|0;
      $71 = HEAP32[$4>>2]|0;
      $72 = ((($71)) + 12|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = (FUNCTION_TABLE_iiii[$73 & 1023]($4,8192,$70)|0);
      if ($74) {
       $$0$pn = $$0$ph89;
      } else {
       $129 = ((($130)) + 12|0);
       $131 = HEAP32[$129>>2]|0;
       $132 = ((($130)) + 16|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ($131|0)==($133|0);
       if ($134) {
        $135 = HEAP32[$130>>2]|0;
        $136 = ((($135)) + 36|0);
        $137 = HEAP32[$136>>2]|0;
        $138 = (FUNCTION_TABLE_ii[$137 & 1023]($130)|0);
        $$0$i$i17 = $138;
       } else {
        $139 = HEAP32[$131>>2]|0;
        $$0$i$i17 = $139;
       }
       $140 = HEAP32[$4>>2]|0;
       $141 = ((($140)) + 28|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = (FUNCTION_TABLE_iii[$142 & 1023]($4,$$0$i$i17)|0);
       $144 = HEAP32[$$0$ph89>>2]|0;
       $145 = HEAP32[$4>>2]|0;
       $146 = ((($145)) + 28|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = (FUNCTION_TABLE_iii[$147 & 1023]($4,$144)|0);
       $149 = ($143|0)==($148|0);
       if (!($149)) {
        label = 61;
        break L5;
       }
       $150 = HEAP32[$129>>2]|0;
       $151 = HEAP32[$132>>2]|0;
       $152 = ($150|0)==($151|0);
       if ($152) {
        $153 = HEAP32[$130>>2]|0;
        $154 = ((($153)) + 40|0);
        $155 = HEAP32[$154>>2]|0;
        (FUNCTION_TABLE_ii[$155 & 1023]($130)|0);
       } else {
        $156 = ((($150)) + 4|0);
        HEAP32[$129>>2] = $156;
       }
       $157 = ((($$0$ph89)) + 4|0);
       $$0$ph$be = $157;
       break;
      }
      while(1) {
       $$2 = ((($$0$pn)) + 4|0);
       $75 = ($$2|0)==($__fmte|0);
       if ($75) {
        $$2$lcssa = $__fmte;
        break;
       }
       $76 = HEAP32[$$2>>2]|0;
       $77 = HEAP32[$4>>2]|0;
       $78 = ((($77)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = (FUNCTION_TABLE_iiii[$79 & 1023]($4,8192,$76)|0);
       if ($80) {
        $$0$pn = $$2;
       } else {
        $$2$lcssa = $$2;
        break;
       }
      }
      $$pre$i$i$i7 = $130;$$pre$i3$i$i13 = $188;$94 = $188;
      while(1) {
       $81 = ($$pre$i$i$i7|0)==(0|0);
       if ($81) {
        $106 = 1;$108 = 0;
       } else {
        $82 = ((($$pre$i$i$i7)) + 12|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = ((($$pre$i$i$i7)) + 16|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = ($83|0)==($85|0);
        if ($86) {
         $87 = HEAP32[$$pre$i$i$i7>>2]|0;
         $88 = ((($87)) + 36|0);
         $89 = HEAP32[$88>>2]|0;
         $90 = (FUNCTION_TABLE_ii[$89 & 1023]($$pre$i$i$i7)|0);
         $$0$i$i$i$i5 = $90;
        } else {
         $91 = HEAP32[$83>>2]|0;
         $$0$i$i$i$i5 = $91;
        }
        $92 = ($$0$i$i$i$i5|0)==(-1);
        if ($92) {
         HEAP32[$__b>>2] = 0;
         $106 = 1;$108 = 0;
        } else {
         $106 = 0;$108 = $$pre$i$i$i7;
        }
       }
       $93 = ($94|0)==(0|0);
       do {
        if ($93) {
         $$pre$i3$i$i1345 = $$pre$i3$i$i13;
         label = 44;
        } else {
         $95 = ((($94)) + 12|0);
         $96 = HEAP32[$95>>2]|0;
         $97 = ((($94)) + 16|0);
         $98 = HEAP32[$97>>2]|0;
         $99 = ($96|0)==($98|0);
         if ($99) {
          $100 = HEAP32[$94>>2]|0;
          $101 = ((($100)) + 36|0);
          $102 = HEAP32[$101>>2]|0;
          $103 = (FUNCTION_TABLE_ii[$102 & 1023]($94)|0);
          $$0$i$i1$i$i11 = $103;
         } else {
          $104 = HEAP32[$96>>2]|0;
          $$0$i$i1$i$i11 = $104;
         }
         $105 = ($$0$i$i1$i$i11|0)==(-1);
         if ($105) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i1345 = 0;
          label = 44;
          break;
         } else {
          $phitmp$i4$i$i14 = ($$pre$i3$i$i13|0)==(0|0);
          $tmp$i$i16 = $106 ^ $phitmp$i4$i$i14;
          if ($tmp$i$i16) {
           $$pre$i3$i$i1344 = $$pre$i3$i$i13;$189 = $$pre$i3$i$i13;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L27;
          }
         }
        }
       } while(0);
       if ((label|0) == 44) {
        label = 0;
        if ($106) {
         $$0$ph$be = $$2$lcssa;
         break L27;
        } else {
         $$pre$i3$i$i1344 = $$pre$i3$i$i1345;$189 = 0;
        }
       }
       $107 = ((($108)) + 12|0);
       $109 = HEAP32[$107>>2]|0;
       $110 = ((($108)) + 16|0);
       $111 = HEAP32[$110>>2]|0;
       $112 = ($109|0)==($111|0);
       if ($112) {
        $113 = HEAP32[$108>>2]|0;
        $114 = ((($113)) + 36|0);
        $115 = HEAP32[$114>>2]|0;
        $116 = (FUNCTION_TABLE_ii[$115 & 1023]($108)|0);
        $$0$i$i = $116;
       } else {
        $117 = HEAP32[$109>>2]|0;
        $$0$i$i = $117;
       }
       $118 = HEAP32[$4>>2]|0;
       $119 = ((($118)) + 12|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = (FUNCTION_TABLE_iiii[$120 & 1023]($4,8192,$$0$i$i)|0);
       if (!($121)) {
        $$0$ph$be = $$2$lcssa;
        break L27;
       }
       $122 = HEAP32[$107>>2]|0;
       $123 = HEAP32[$110>>2]|0;
       $124 = ($122|0)==($123|0);
       if ($124) {
        $125 = HEAP32[$108>>2]|0;
        $126 = ((($125)) + 40|0);
        $127 = HEAP32[$126>>2]|0;
        (FUNCTION_TABLE_ii[$127 & 1023]($108)|0);
        $$pre$i$i$i7 = $108;$$pre$i3$i$i13 = $$pre$i3$i$i1344;$94 = $189;
        continue;
       } else {
        $128 = ((($122)) + 4|0);
        HEAP32[$107>>2] = $128;
        $$pre$i$i$i7 = $108;$$pre$i3$i$i13 = $$pre$i3$i$i1344;$94 = $189;
        continue;
       }
      }
     }
    } while(0);
    $$pre$pre = HEAP32[$__err>>2]|0;
    $67 = ($$0$ph$be|0)!=($__fmte|0);
    $68 = ($$pre$pre|0)==(0);
    $or$cond87 = $67 & $68;
    $69 = HEAP32[$__b>>2]|0;
    if ($or$cond87) {
     $$0$ph89 = $$0$ph$be;$10 = $69;
    } else {
     $$pre$i$i$i22 = $69;
     break L4;
    }
   }
   if ((label|0) == 17) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i22 = $$lcssa;
    break;
   }
   else if ((label|0) == 21) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i22 = $$lcssa97;
    break;
   }
   else if ((label|0) == 24) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i22 = $$lcssa98;
    break;
   }
   else if ((label|0) == 61) {
    HEAP32[$__err>>2] = 4;
    $158 = HEAP32[$__b>>2]|0;
    $$pre$i$i$i22 = $158;
    break;
   }
  }
 } while(0);
 $159 = ($$pre$i$i$i22|0)==(0|0);
 if ($159) {
  $186 = 0;$190 = 1;
 } else {
  $160 = ((($$pre$i$i$i22)) + 12|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = ((($$pre$i$i$i22)) + 16|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = ($161|0)==($163|0);
  if ($164) {
   $165 = HEAP32[$$pre$i$i$i22>>2]|0;
   $166 = ((($165)) + 36|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = (FUNCTION_TABLE_ii[$167 & 1023]($$pre$i$i$i22)|0);
   $$0$i$i$i$i20 = $168;
  } else {
   $169 = HEAP32[$161>>2]|0;
   $$0$i$i$i$i20 = $169;
  }
  $170 = ($$0$i$i$i$i20|0)==(-1);
  if ($170) {
   HEAP32[$__b>>2] = 0;
   $186 = 0;$190 = 1;
  } else {
   $186 = $$pre$i$i$i22;$190 = 0;
  }
 }
 $171 = HEAP32[$__e>>2]|0;
 $172 = ($171|0)==(0|0);
 do {
  if ($172) {
   label = 74;
  } else {
   $173 = ((($171)) + 12|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = ((($171)) + 16|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ($174|0)==($176|0);
   if ($177) {
    $178 = HEAP32[$171>>2]|0;
    $179 = ((($178)) + 36|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = (FUNCTION_TABLE_ii[$180 & 1023]($171)|0);
    $$0$i$i1$i$i26 = $181;
   } else {
    $182 = HEAP32[$174>>2]|0;
    $$0$i$i1$i$i26 = $182;
   }
   $183 = ($$0$i$i1$i$i26|0)==(-1);
   if ($183) {
    HEAP32[$__e>>2] = 0;
    label = 74;
    break;
   } else {
    if ($190) {
     break;
    } else {
     label = 76;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 74) {
  if ($190) {
   label = 76;
  }
 }
 if ((label|0) == 76) {
  $184 = HEAP32[$__err>>2]|0;
  $185 = $184 | 2;
  HEAP32[$__err>>2] = $185;
 }
 STACKTOP = sp;return ($186|0);
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,8256,(8288))|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 $12 = ((($6)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($6)) + 4|0);
 $15 = $11 ? $14 : $13;
 $16 = HEAP32[$14>>2]|0;
 $17 = $9&255;
 $18 = $17 >>> 1;
 $19 = $11 ? $18 : $16;
 $20 = (($15) + ($19<<2)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $21 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$15,$20)|0);
 STACKTOP = sp;return ($21|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(495,($0|0),(7680|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($4)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if ($11) {
  $12 = (($10|0) / 12)&-1;
  $13 = (($12|0) % 7)&-1;
  HEAP32[$__w>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(495,($0|0),(7680|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = ((($5)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if ($12) {
  $13 = (($11|0) / 12)&-1;
  $14 = (($13|0) % 12)&-1;
  HEAP32[$__m>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(495,($0|0),(7680|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ($2|0)<(69);
  if ($6) {
   $7 = (($2) + 2000)|0;
   $__t$0 = $7;
  } else {
   $$off = (($2) + -69)|0;
   $8 = ($$off>>>0)<(31);
   $9 = (($2) + 1900)|0;
   $$ = $8 ? $9 : $2;
   $__t$0 = $$;
  }
  $10 = (($__t$0) + -1900)|0;
  HEAP32[$__y>>2] = $10;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$sroa$07$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy30 = sp + 248|0;
 $$byval_copy29 = sp + 244|0;
 $$byval_copy28 = sp + 240|0;
 $$byval_copy27 = sp + 236|0;
 $$byval_copy26 = sp + 232|0;
 $$byval_copy25 = sp + 228|0;
 $$byval_copy24 = sp + 224|0;
 $$byval_copy23 = sp + 220|0;
 $$byval_copy22 = sp + 216|0;
 $$byval_copy21 = sp + 212|0;
 $$byval_copy20 = sp + 208|0;
 $$byval_copy19 = sp + 204|0;
 $$byval_copy18 = sp + 200|0;
 $$byval_copy17 = sp + 196|0;
 $$byval_copy16 = sp + 192|0;
 $$byval_copy15 = sp + 188|0;
 $$byval_copy14 = sp + 184|0;
 $$byval_copy13 = sp + 180|0;
 $$byval_copy12 = sp + 176|0;
 $$byval_copy11 = sp + 172|0;
 $$byval_copy10 = sp + 168|0;
 $$byval_copy9 = sp + 164|0;
 $$byval_copy8 = sp + 160|0;
 $$byval_copy7 = sp + 156|0;
 $$byval_copy6 = sp + 152|0;
 $$byval_copy5 = sp + 148|0;
 $$byval_copy4 = sp + 144|0;
 $$byval_copy3 = sp + 140|0;
 $$byval_copy2 = sp + 136|0;
 $$byval_copy1 = sp + 132|0;
 $$byval_copy = sp + 128|0;
 $1 = sp + 124|0;
 $2 = sp + 120|0;
 $3 = sp + 116|0;
 $4 = sp + 112|0;
 $5 = sp + 108|0;
 $6 = sp + 104|0;
 $7 = sp + 100|0;
 $8 = sp + 96|0;
 $9 = sp + 92|0;
 $10 = sp + 88|0;
 $11 = sp + 84|0;
 $12 = sp + 80|0;
 $13 = sp + 76|0;
 $14 = sp + 72|0;
 $15 = sp + 68|0;
 $16 = sp + 64|0;
 $17 = sp + 60|0;
 $18 = sp + 56|0;
 $19 = sp + 52|0;
 $20 = sp + 48|0;
 $21 = sp + 44|0;
 $22 = sp + 40|0;
 $23 = sp + 36|0;
 $24 = sp + 32|0;
 $25 = sp + 28|0;
 $26 = sp + 24|0;
 $27 = sp + 20|0;
 $28 = sp + 16|0;
 $29 = sp + 12|0;
 $30 = sp + 8|0;
 $31 = sp + 4|0;
 $32 = sp;
 HEAP32[$__err>>2] = 0;
 $33 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$1>>2] = $33;
 __THREW__ = 0;
 $34 = (invoke_iii(495,($1|0),(7680|0))|0);
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
  ___resumeException($38|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
 $37 = $__fmt << 24 >> 24;
 do {
  switch ($37|0) {
  case 65: case 97:  {
   $40 = ((($__tm)) + 24|0);
   $41 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $41;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$40,$__b,$$byval_copy,$__err,$34);
   label = 28;
   break;
  }
  case 104: case 66: case 98:  {
   $42 = ((($__tm)) + 16|0);
   $43 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $43;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$42,$__b,$$byval_copy1,$__err,$34);
   label = 28;
   break;
  }
  case 99:  {
   $44 = ((($this)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($45)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_ii[$47 & 1023]($44)|0);
   $49 = HEAP32[$__b>>2]|0;
   HEAP32[$4>>2] = $49;
   $50 = HEAP32[$__e>>2]|0;
   HEAP32[$5>>2] = $50;
   $51 = HEAP8[$48>>0]|0;
   $52 = $51 & 1;
   $53 = ($52<<24>>24)==(0);
   $54 = ((($48)) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($48)) + 4|0);
   $57 = $53 ? $56 : $55;
   $58 = HEAP32[$56>>2]|0;
   $59 = $51&255;
   $60 = $59 >>> 1;
   $61 = $53 ? $60 : $58;
   $62 = (($57) + ($61<<2)|0);
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$5>>2]|0;
   $63 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$57,$62)|0);
   HEAP32[$__b>>2] = $63;
   label = 28;
   break;
  }
  case 101: case 100:  {
   $64 = ((($__tm)) + 12|0);
   $65 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $65;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$6>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$64,$__b,$$byval_copy4,$__err,$34);
   label = 28;
   break;
  }
  case 68:  {
   $66 = HEAP32[$__b>>2]|0;
   HEAP32[$7>>2] = $66;
   $67 = HEAP32[$__e>>2]|0;
   HEAP32[$8>>2] = $67;
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$7>>2]|0;
   ;HEAP32[$$byval_copy6>>2]=HEAP32[$8>>2]|0;
   $68 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,8288,(8320))|0);
   HEAP32[$__b>>2] = $68;
   label = 28;
   break;
  }
  case 70:  {
   $69 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $69;
   $70 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $70;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$9>>2]|0;
   ;HEAP32[$$byval_copy8>>2]=HEAP32[$10>>2]|0;
   $71 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,8320,(8352))|0);
   HEAP32[$__b>>2] = $71;
   label = 28;
   break;
  }
  case 72:  {
   $72 = ((($__tm)) + 8|0);
   $73 = HEAP32[$__e>>2]|0;
   HEAP32[$11>>2] = $73;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$11>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$72,$__b,$$byval_copy9,$__err,$34);
   label = 28;
   break;
  }
  case 73:  {
   $74 = ((($__tm)) + 8|0);
   $75 = HEAP32[$__e>>2]|0;
   HEAP32[$12>>2] = $75;
   ;HEAP32[$$byval_copy10>>2]=HEAP32[$12>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$74,$__b,$$byval_copy10,$__err,$34);
   label = 28;
   break;
  }
  case 106:  {
   $76 = ((($__tm)) + 28|0);
   $77 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $77;
   ;HEAP32[$$byval_copy11>>2]=HEAP32[$13>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$76,$__b,$$byval_copy11,$__err,$34);
   label = 28;
   break;
  }
  case 109:  {
   $78 = ((($__tm)) + 16|0);
   $79 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $79;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[$14>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$78,$__b,$$byval_copy12,$__err,$34);
   label = 28;
   break;
  }
  case 77:  {
   $80 = ((($__tm)) + 4|0);
   $81 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $81;
   ;HEAP32[$$byval_copy13>>2]=HEAP32[$15>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$80,$__b,$$byval_copy13,$__err,$34);
   label = 28;
   break;
  }
  case 116: case 110:  {
   $82 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $82;
   ;HEAP32[$$byval_copy14>>2]=HEAP32[$16>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy14,$__err,$34);
   label = 28;
   break;
  }
  case 112:  {
   $83 = ((($__tm)) + 8|0);
   $84 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $84;
   ;HEAP32[$$byval_copy15>>2]=HEAP32[$17>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$83,$__b,$$byval_copy15,$__err,$34);
   label = 28;
   break;
  }
  case 114:  {
   $85 = HEAP32[$__b>>2]|0;
   HEAP32[$18>>2] = $85;
   $86 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $86;
   ;HEAP32[$$byval_copy16>>2]=HEAP32[$18>>2]|0;
   ;HEAP32[$$byval_copy17>>2]=HEAP32[$19>>2]|0;
   $87 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,8352,(8396))|0);
   HEAP32[$__b>>2] = $87;
   label = 28;
   break;
  }
  case 82:  {
   $88 = HEAP32[$__b>>2]|0;
   HEAP32[$20>>2] = $88;
   $89 = HEAP32[$__e>>2]|0;
   HEAP32[$21>>2] = $89;
   ;HEAP32[$$byval_copy18>>2]=HEAP32[$20>>2]|0;
   ;HEAP32[$$byval_copy19>>2]=HEAP32[$21>>2]|0;
   $90 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,8396,(8416))|0);
   HEAP32[$__b>>2] = $90;
   label = 28;
   break;
  }
  case 83:  {
   $91 = HEAP32[$__e>>2]|0;
   HEAP32[$22>>2] = $91;
   ;HEAP32[$$byval_copy20>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__tm,$__b,$$byval_copy20,$__err,$34);
   label = 28;
   break;
  }
  case 84:  {
   $92 = HEAP32[$__b>>2]|0;
   HEAP32[$23>>2] = $92;
   $93 = HEAP32[$__e>>2]|0;
   HEAP32[$24>>2] = $93;
   ;HEAP32[$$byval_copy21>>2]=HEAP32[$23>>2]|0;
   ;HEAP32[$$byval_copy22>>2]=HEAP32[$24>>2]|0;
   $94 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,8416,(8448))|0);
   HEAP32[$__b>>2] = $94;
   label = 28;
   break;
  }
  case 119:  {
   $95 = ((($__tm)) + 24|0);
   $96 = HEAP32[$__e>>2]|0;
   HEAP32[$25>>2] = $96;
   ;HEAP32[$$byval_copy23>>2]=HEAP32[$25>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$95,$__b,$$byval_copy23,$__err,$34);
   label = 28;
   break;
  }
  case 120:  {
   $97 = HEAP32[$this>>2]|0;
   $98 = ((($97)) + 20|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = HEAP32[$__b>>2]|0;
   HEAP32[$26>>2] = $100;
   $101 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $101;
   ;HEAP32[$$byval_copy24>>2]=HEAP32[$26>>2]|0;
   ;HEAP32[$$byval_copy25>>2]=HEAP32[$27>>2]|0;
   $102 = (FUNCTION_TABLE_iiiiiii[$99 & 1023]($this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm)|0);
   $$sroa$07$0 = $102;
   break;
  }
  case 88:  {
   $103 = ((($this)) + 8|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ((($104)) + 24|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (FUNCTION_TABLE_ii[$106 & 1023]($103)|0);
   $108 = HEAP32[$__b>>2]|0;
   HEAP32[$28>>2] = $108;
   $109 = HEAP32[$__e>>2]|0;
   HEAP32[$29>>2] = $109;
   $110 = HEAP8[$107>>0]|0;
   $111 = $110 & 1;
   $112 = ($111<<24>>24)==(0);
   $113 = ((($107)) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = ((($107)) + 4|0);
   $116 = $112 ? $115 : $114;
   $117 = HEAP32[$115>>2]|0;
   $118 = $110&255;
   $119 = $118 >>> 1;
   $120 = $112 ? $119 : $117;
   $121 = (($116) + ($120<<2)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$28>>2]|0;
   ;HEAP32[$$byval_copy27>>2]=HEAP32[$29>>2]|0;
   $122 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$116,$121)|0);
   HEAP32[$__b>>2] = $122;
   label = 28;
   break;
  }
  case 121:  {
   $123 = ((($__tm)) + 20|0);
   $124 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $124;
   ;HEAP32[$$byval_copy28>>2]=HEAP32[$30>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$123,$__b,$$byval_copy28,$__err,$34);
   label = 28;
   break;
  }
  case 89:  {
   $125 = ((($__tm)) + 20|0);
   $126 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $126;
   ;HEAP32[$$byval_copy29>>2]=HEAP32[$31>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$125,$__b,$$byval_copy29,$__err,$34);
   label = 28;
   break;
  }
  case 37:  {
   $127 = HEAP32[$__e>>2]|0;
   HEAP32[$32>>2] = $127;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$32>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy30,$__err,$34);
   label = 28;
   break;
  }
  default: {
   $128 = HEAP32[$__err>>2]|0;
   $129 = $128 | 4;
   HEAP32[$__err>>2] = $129;
   label = 28;
  }
  }
 } while(0);
 if ((label|0) == 28) {
  $130 = HEAP32[$__b>>2]|0;
  $$sroa$07$0 = $130;
 }
 STACKTOP = sp;return ($$sroa$07$0|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(31);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__d>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(12);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__h>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $6 & $5;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $1 = ($0|0)==(0|0);
  do {
   if ($1) {
    $78 = 1;
   } else {
    $2 = ((($0)) + 12|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = ((($0)) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($3|0)==($5|0);
    if ($6) {
     $7 = HEAP32[$0>>2]|0;
     $8 = ((($7)) + 36|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
     $$0$i$i$i$i = $10;
    } else {
     $11 = HEAP32[$3>>2]|0;
     $$0$i$i$i$i = $11;
    }
    $12 = ($$0$i$i$i$i|0)==(-1);
    if ($12) {
     HEAP32[$__b>>2] = 0;
     $78 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $78 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $13 = HEAP32[$__e>>2]|0;
  $14 = ($13|0)==(0|0);
  do {
   if ($14) {
    label = 15;
   } else {
    $15 = ((($13)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($13)) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $20 = HEAP32[$13>>2]|0;
     $21 = ((($20)) + 36|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
     $$0$i$i1$i$i = $23;
    } else {
     $24 = HEAP32[$16>>2]|0;
     $$0$i$i1$i$i = $24;
    }
    $25 = ($$0$i$i1$i$i|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($78) {
      $79 = $13;
      break;
     } else {
      $$pre$i3$i$i9 = $13;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i3$i$i9 = 0;
    break;
   } else {
    $79 = 0;
   }
  }
  $26 = HEAP32[$__b>>2]|0;
  $27 = ((($26)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($26)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)==($30|0);
  if ($31) {
   $32 = HEAP32[$26>>2]|0;
   $33 = ((($32)) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_ii[$34 & 1023]($26)|0);
   $$0$i$i = $35;
  } else {
   $36 = HEAP32[$28>>2]|0;
   $$0$i$i = $36;
  }
  $37 = HEAP32[$__ct>>2]|0;
  $38 = ((($37)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_iiii[$39 & 1023]($__ct,8192,$$0$i$i)|0);
  if (!($40)) {
   $$pre$i3$i$i9 = $79;
   break;
  }
  $41 = HEAP32[$__b>>2]|0;
  $42 = ((($41)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($41)) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43|0)==($45|0);
  if ($46) {
   $47 = HEAP32[$41>>2]|0;
   $48 = ((($47)) + 40|0);
   $49 = HEAP32[$48>>2]|0;
   (FUNCTION_TABLE_ii[$49 & 1023]($41)|0);
   continue;
  } else {
   $50 = ((($43)) + 4|0);
   HEAP32[$42>>2] = $50;
   continue;
  }
 }
 $51 = HEAP32[$__b>>2]|0;
 $52 = ($51|0)==(0|0);
 do {
  if ($52) {
   $80 = 1;
  } else {
   $53 = ((($51)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($51)) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($54|0)==($56|0);
   if ($57) {
    $58 = HEAP32[$51>>2]|0;
    $59 = ((($58)) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (FUNCTION_TABLE_ii[$60 & 1023]($51)|0);
    $$0$i$i$i$i1 = $61;
   } else {
    $62 = HEAP32[$54>>2]|0;
    $$0$i$i$i$i1 = $62;
   }
   $63 = ($$0$i$i$i$i1|0)==(-1);
   if ($63) {
    HEAP32[$__b>>2] = 0;
    $80 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $80 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $64 = ($$pre$i3$i$i9|0)==(0|0);
 do {
  if ($64) {
   label = 37;
  } else {
   $65 = ((($$pre$i3$i$i9)) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ((($$pre$i3$i$i9)) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = HEAP32[$$pre$i3$i$i9>>2]|0;
    $71 = ((($70)) + 36|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (FUNCTION_TABLE_ii[$72 & 1023]($$pre$i3$i$i9)|0);
    $$0$i$i1$i$i7 = $73;
   } else {
    $74 = HEAP32[$66>>2]|0;
    $$0$i$i1$i$i7 = $74;
   }
   $75 = ($$0$i$i1$i$i7|0)==(-1);
   if ($75) {
    HEAP32[$__e>>2] = 0;
    label = 37;
    break;
   } else {
    if ($80) {
     break;
    } else {
     label = 39;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 37) {
  if ($80) {
   label = 39;
  }
 }
 if ((label|0) == 39) {
  $76 = HEAP32[$__err>>2]|0;
  $77 = $76 | 2;
  HEAP32[$__err>>2] = $77;
 }
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $24 = $12;
 } else {
  $9 = ((($5)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $24 = $10;
 }
 $13 = ((($5)) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = ((($5)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $23 = ($24|0)==($21|0);
 do {
  if ($23) {
   $25 = HEAP32[$__err>>2]|0;
   $26 = $25 | 4;
   HEAP32[$__err>>2] = $26;
  } else {
   $27 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $27;
   $28 = ((($5)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
   $30 = ($29|0)==($5|0);
   $31 = HEAP32[$__h>>2]|0;
   $32 = ($31|0)==(12);
   $or$cond = $30 & $32;
   if ($or$cond) {
    HEAP32[$__h>>2] = 0;
    break;
   }
   $33 = $29;
   $34 = $5;
   $35 = (($33) - ($34))|0;
   $36 = ($35|0)==(12);
   $37 = ($31|0)<(12);
   $or$cond3 = $37 & $36;
   if ($or$cond3) {
    $38 = (($31) + 12)|0;
    HEAP32[$__h>>2] = $38;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (($2) + -1900)|0;
  HEAP32[$__y>>2] = $6;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i915 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $83 = 1;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $83 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $83 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = ((($13)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($13)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = ((($20)) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($83) {
     $$pre$i3$i$i915 = $13;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($83) {
   label = 16;
  } else {
   $$pre$i3$i$i915 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
  }
  else if ((label|0) == 17) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP32[$30>>2]|0;
    $$0$i$i = $38;
   }
   $39 = HEAP32[$__ct>>2]|0;
   $40 = ((($39)) + 52|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,$$0$i$i,0)|0);
   $43 = ($42<<24>>24)==(37);
   if (!($43)) {
    $44 = HEAP32[$__err>>2]|0;
    $45 = $44 | 4;
    HEAP32[$__err>>2] = $45;
    break;
   }
   $46 = HEAP32[$__b>>2]|0;
   $47 = ((($46)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($46)) + 16|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($48|0)==($50|0);
   if ($51) {
    $53 = HEAP32[$46>>2]|0;
    $54 = ((($53)) + 40|0);
    $55 = HEAP32[$54>>2]|0;
    (FUNCTION_TABLE_ii[$55 & 1023]($46)|0);
    $$pre = HEAP32[$__b>>2]|0;
    $56 = ($$pre|0)==(0|0);
    if ($56) {
     $84 = 1;
    } else {
     $58 = $$pre;
     label = 25;
    }
   } else {
    $52 = ((($48)) + 4|0);
    HEAP32[$47>>2] = $52;
    $58 = $46;
    label = 25;
   }
   do {
    if ((label|0) == 25) {
     $57 = ((($58)) + 12|0);
     $59 = HEAP32[$57>>2]|0;
     $60 = ((($58)) + 16|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($59|0)==($61|0);
     if ($62) {
      $63 = HEAP32[$58>>2]|0;
      $64 = ((($63)) + 36|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (FUNCTION_TABLE_ii[$65 & 1023]($58)|0);
      $$0$i$i$i$i1 = $66;
     } else {
      $67 = HEAP32[$59>>2]|0;
      $$0$i$i$i$i1 = $67;
     }
     $68 = ($$0$i$i$i$i1|0)==(-1);
     if ($68) {
      HEAP32[$__b>>2] = 0;
      $84 = 1;
      break;
     } else {
      $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
      $84 = $phitmp$i$i$i4;
      break;
     }
    }
   } while(0);
   $69 = ($$pre$i3$i$i915|0)==(0|0);
   do {
    if ($69) {
     label = 37;
    } else {
     $70 = ((($$pre$i3$i$i915)) + 12|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($$pre$i3$i$i915)) + 16|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($71|0)==($73|0);
     if ($74) {
      $75 = HEAP32[$$pre$i3$i$i915>>2]|0;
      $76 = ((($75)) + 36|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (FUNCTION_TABLE_ii[$77 & 1023]($$pre$i3$i$i915)|0);
      $$0$i$i1$i$i7 = $78;
     } else {
      $79 = HEAP32[$71>>2]|0;
      $$0$i$i1$i$i7 = $79;
     }
     $80 = ($$0$i$i1$i$i7|0)==(-1);
     if ($80) {
      HEAP32[$__e>>2] = 0;
      label = 37;
      break;
     } else {
      if ($84) {
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 37) {
    if (!($84)) {
     break;
    }
   }
   $81 = HEAP32[$__err>>2]|0;
   $82 = $81 | 2;
   HEAP32[$__err>>2] = $82;
  }
 } while(0);
 return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 return;
}
function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 __THREW__ = 0;
 $1 = (invoke_i(692)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if (!($3)) {
   $4 = ($0|0)==($1|0);
   if (!($4)) {
    $5 = HEAP32[$this>>2]|0;
    __THREW__ = 0;
    invoke_vi(705,($5|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     break;
    }
   }
   return;
  }
 } while(0);
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i2 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 4|0;
 $__ne = sp;
 $2 = ((($__nar)) + 100|0);
 HEAP32[$__ne>>2] = $2;
 $3 = ((($this)) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = $5;
 $7 = ($__nar|0)==($4|0);
 if ($7) {
  $$lcssa = $6;
 } else {
  $$0$i$i2 = $__nar;$10 = $6;
  while(1) {
   $8 = HEAP8[$$0$i$i2>>0]|0;
   $9 = ($10|0)==(0|0);
   do {
    if ($9) {
     $25 = 0;
    } else {
     $11 = ((($10)) + 24|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ((($10)) + 28|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($12|0)==($14|0);
     if ($15) {
      $17 = HEAP32[$10>>2]|0;
      $18 = ((($17)) + 52|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = $8&255;
      $21 = (FUNCTION_TABLE_iii[$19 & 1023]($10,$20)|0);
      $22 = ($21|0)==(-1);
      $$$i = $22 ? 0 : $10;
      $25 = $$$i;
      break;
     } else {
      $16 = ((($12)) + 1|0);
      HEAP32[$11>>2] = $16;
      HEAP8[$12>>0] = $8;
      $25 = $10;
      break;
     }
    }
   } while(0);
   $23 = ((($$0$i$i2)) + 1|0);
   $24 = ($23|0)==($4|0);
   if ($24) {
    $$lcssa = $25;
    break;
   } else {
    $$0$i$i2 = $23;$10 = $25;
   }
  }
 }
 STACKTOP = sp;return ($$lcssa|0);
}
function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nb,$__ne,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fmt = sp;
 HEAP8[$fmt>>0] = 37;
 $0 = ((($fmt)) + 1|0);
 HEAP8[$0>>0] = $__fmt;
 $1 = ((($fmt)) + 2|0);
 HEAP8[$1>>0] = $__mod;
 $2 = ((($fmt)) + 3|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__mod<<24>>24)==(0);
 if (!($3)) {
  HEAP8[$0>>0] = $__mod;
  HEAP8[$1>>0] = $__fmt;
 }
 $4 = HEAP32[$__ne>>2]|0;
 $5 = $4;
 $6 = $__nb;
 $7 = (($5) - ($6))|0;
 $8 = HEAP32[$this>>2]|0;
 $9 = (_strftime_l(($__nb|0),($7|0),($fmt|0),($__tm|0),($8|0))|0);
 $10 = (($__nb) + ($9)|0);
 HEAP32[$__ne>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i$i$i = 0, $$0$i$i2 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 8|0;
 $__ne = sp;
 $2 = ((($__nar)) + 400|0);
 HEAP32[$__ne>>2] = $2;
 $3 = ((($this)) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = $5;
 $7 = ($__nar|0)==($4|0);
 if ($7) {
  $$lcssa = $6;
 } else {
  $$0$i$i2 = $__nar;$10 = $6;
  while(1) {
   $8 = HEAP32[$$0$i$i2>>2]|0;
   $9 = ($10|0)==(0|0);
   if ($9) {
    $24 = 0;
   } else {
    $11 = ((($10)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($10)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($12|0)==($14|0);
    if ($15) {
     $16 = HEAP32[$10>>2]|0;
     $17 = ((($16)) + 52|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (FUNCTION_TABLE_iii[$18 & 1023]($10,$8)|0);
     $$0$i$i$i$i = $19;
    } else {
     $20 = ((($12)) + 4|0);
     HEAP32[$11>>2] = $20;
     HEAP32[$12>>2] = $8;
     $$0$i$i$i$i = $8;
    }
    $21 = ($$0$i$i$i$i|0)==(-1);
    $$$i = $21 ? 0 : $10;
    $24 = $$$i;
   }
   $22 = ((($$0$i$i2)) + 4|0);
   $23 = ($22|0)==($4|0);
   if ($23) {
    $$lcssa = $24;
    break;
   } else {
    $$0$i$i2 = $22;$10 = $24;
   }
  }
 }
 STACKTOP = sp;return ($$lcssa|0);
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $mb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 16|0;
 $__ne = sp + 12|0;
 $mb = sp;
 $__nb = sp + 8|0;
 $0 = ((($__nar)) + 100|0);
 HEAP32[$__ne>>2] = $0;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $1 = $mb;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 HEAP32[$__nb>>2] = $__nar;
 $5 = HEAP32[$__we>>2]|0;
 $6 = $5;
 $7 = $__wb;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 2;
 $10 = HEAP32[$this>>2]|0;
 $11 = (_uselocale(($10|0))|0);
 __THREW__ = 0;
 $12 = (invoke_iiiii(706,($__wb|0),($__nb|0),($9|0),($mb|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $22 = ($11|0)==(0|0);
  if (!($22)) {
   __THREW__ = 0;
   (invoke_ii(707,($11|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    $25 = ___cxa_find_matching_catch(0|0)|0;
    $26 = tempRet0;
    ___clang_call_terminate($25);
    // unreachable;
   }
  }
  ___resumeException($20|0);
  // unreachable;
 }
 $15 = ($11|0)==(0|0);
 if (!($15)) {
  __THREW__ = 0;
  (invoke_ii(707,($11|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $18 = ___cxa_find_matching_catch(0|0)|0;
   $19 = tempRet0;
   ___clang_call_terminate($18);
   // unreachable;
  }
 }
 $27 = ($12|0)==(-1);
 if ($27) {
  __ZNSt3__121__throw_runtime_errorEPKc(20107);
  // unreachable;
 } else {
  $28 = (($__wb) + ($12<<2)|0);
  HEAP32[$__we>>2] = $28;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110moneypunctIcLb0EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$0 = 0, $$0$lcssa$i = 0, $$01 = 0, $$113 = 0, $$114 = 0, $$1211 = 0, $$1212 = 0, $$byval_copy = 0, $$phi$trans$insert$pre$phiZZZZ2D = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre15 = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0;
 var $__nc$2$lcssa = 0, $__nc$217 = 0, $__neg = 0, $__w$018 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 140|0;
 $__wb = sp + 16|0;
 $__wn = sp + 12|0;
 $__loc = sp + 8|0;
 $__neg = sp + 138|0;
 $0 = sp + 4|0;
 $__atoms = sp + 128|0;
 $__nbuf = sp + 28|0;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (708);
 $3 = ((($__wbuf)) + 100|0);
 __THREW__ = 0;
 $4 = (invoke_ii(494,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$113 = $33;$$1211 = $34;$119 = 708;$120 = $__wbuf;
  label = 45;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(495,($__loc|0),(7688|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if ($9) {
    label = 10;
   } else {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $13 = (invoke_iiiiiiiiiiii(709,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     label = 10;
    } else {
     L7: do {
      if ($13) {
       $16 = HEAP32[$7>>2]|0;
       $17 = ((($16)) + 32|0);
       $18 = HEAP32[$17>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($18|0,($7|0),(20128|0),((20138)|0),($__atoms|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if ($20) {
        label = 10;
        break L4;
       }
       $21 = HEAP32[$__wn>>2]|0;
       $22 = HEAP32[$__wb>>2]|0;
       $23 = $21;
       $24 = $22;
       $25 = (($23) - ($24))|0;
       $26 = ($25|0)>(98);
       if ($26) {
        $27 = (($25) + 2)|0;
        $28 = (_malloc($27)|0);
        $29 = $28;
        $30 = ($28|0)==(0|0);
        if ($30) {
         __THREW__ = 0;
         invoke_v(698);
         $31 = __THREW__; __THREW__ = 0;
         $32 = $31&1;
         if ($32) {
          $40 = $29;
         } else {
          $74 = $29;$__nc$0 = 0;
          label = 13;
         }
        } else {
         $74 = $29;$__nc$0 = $28;
         label = 13;
        }
       } else {
        $74 = 0;$__nc$0 = $__nbuf;
        label = 13;
       }
       do {
        if ((label|0) == 13) {
         $42 = HEAP8[$__neg>>0]|0;
         $43 = ($42<<24>>24)==(0);
         if ($43) {
          $__nc$1 = $__nc$0;
         } else {
          $44 = ((($__nc$0)) + 1|0);
          HEAP8[$__nc$0>>0] = 45;
          $__nc$1 = $44;
         }
         $45 = ((($__atoms)) + 10|0);
         $46 = $__atoms;
         $47 = ($22>>>0)<($21>>>0);
         if ($47) {
          $48 = ((($__atoms)) + 1|0);
          $49 = ((($48)) + 1|0);
          $50 = ((($49)) + 1|0);
          $51 = ((($50)) + 1|0);
          $52 = ((($51)) + 1|0);
          $53 = ((($52)) + 1|0);
          $54 = ((($53)) + 1|0);
          $55 = ((($54)) + 1|0);
          $56 = ((($55)) + 1|0);
          $__nc$217 = $__nc$1;$__w$018 = $22;
          while(1) {
           $57 = HEAP8[$__w$018>>0]|0;
           $58 = HEAP8[$__atoms>>0]|0;
           $59 = ($58<<24>>24)==($57<<24>>24);
           do {
            if ($59) {
             $$0$lcssa$i = $__atoms;
            } else {
             $60 = HEAP8[$48>>0]|0;
             $61 = ($60<<24>>24)==($57<<24>>24);
             if ($61) {
              $$0$lcssa$i = $48;
             } else {
              $125 = HEAP8[$49>>0]|0;
              $126 = ($125<<24>>24)==($57<<24>>24);
              if ($126) {
               $$0$lcssa$i = $49;
              } else {
               $127 = HEAP8[$50>>0]|0;
               $128 = ($127<<24>>24)==($57<<24>>24);
               if ($128) {
                $$0$lcssa$i = $50;
               } else {
                $129 = HEAP8[$51>>0]|0;
                $130 = ($129<<24>>24)==($57<<24>>24);
                if ($130) {
                 $$0$lcssa$i = $51;
                } else {
                 $131 = HEAP8[$52>>0]|0;
                 $132 = ($131<<24>>24)==($57<<24>>24);
                 if ($132) {
                  $$0$lcssa$i = $52;
                  break;
                 }
                 $133 = HEAP8[$53>>0]|0;
                 $134 = ($133<<24>>24)==($57<<24>>24);
                 if ($134) {
                  $$0$lcssa$i = $53;
                  break;
                 }
                 $135 = HEAP8[$54>>0]|0;
                 $136 = ($135<<24>>24)==($57<<24>>24);
                 if ($136) {
                  $$0$lcssa$i = $54;
                  break;
                 }
                 $137 = HEAP8[$55>>0]|0;
                 $138 = ($137<<24>>24)==($57<<24>>24);
                 if ($138) {
                  $$0$lcssa$i = $55;
                  break;
                 }
                 $139 = HEAP8[$56>>0]|0;
                 $140 = ($139<<24>>24)==($57<<24>>24);
                 $$ = $140 ? $56 : $45;
                 $$0$lcssa$i = $$;
                }
               }
              }
             }
            }
           } while(0);
           $62 = $$0$lcssa$i;
           $63 = (($62) - ($46))|0;
           $64 = (20128 + ($63)|0);
           $65 = HEAP8[$64>>0]|0;
           HEAP8[$__nc$217>>0] = $65;
           $66 = ((($__w$018)) + 1|0);
           $67 = ((($__nc$217)) + 1|0);
           $$pre = HEAP32[$__wn>>2]|0;
           $68 = ($66>>>0)<($$pre>>>0);
           if ($68) {
            $__nc$217 = $67;$__w$018 = $66;
           } else {
            $__nc$2$lcssa = $67;
            break;
           }
          }
         } else {
          $__nc$2$lcssa = $__nc$1;
         }
         HEAP8[$__nc$2$lcssa>>0] = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $69 = (_sscanf($__nbuf,20139,$vararg_buffer)|0);
         $70 = ($69|0)==(1);
         if (!($70)) {
          __THREW__ = 0;
          invoke_vi(710,(20143|0));
          $71 = __THREW__; __THREW__ = 0;
          $72 = $71&1;
          if ($72) {
           $40 = $74;
           break;
          }
         }
         $73 = ($74|0)==(0);
         if (!($73)) {
          $75 = $74;
          _free($75);
         }
         break L7;
        }
       } while(0);
       $37 = ___cxa_find_matching_catch()|0;
       $38 = tempRet0;
       $39 = ($40|0)==(0);
       if ($39) {
        $$0 = $37;$$01 = $38;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
        break L4;
       }
       $41 = $40;
       _free($41);
       $$0 = $37;$$01 = $38;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
       break L4;
      }
     } while(0);
     $76 = HEAP32[$__b>>2]|0;
     $77 = ($76|0)==(0|0);
     do {
      if ($77) {
       $91 = 0;
      } else {
       $78 = ((($76)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ((($76)) + 16|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($79|0)==($81|0);
       if ($82) {
        $83 = HEAP32[$76>>2]|0;
        $84 = ((($83)) + 36|0);
        $85 = HEAP32[$84>>2]|0;
        __THREW__ = 0;
        $86 = (invoke_ii($85|0,($76|0))|0);
        $87 = __THREW__; __THREW__ = 0;
        $88 = $87&1;
        if ($88) {
         label = 10;
         break L4;
        }
        $89 = ($86|0)==(-1);
        if ($89) {
         HEAP32[$__b>>2] = 0;
         $91 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $91 = $$pre$i$i$i;
         break;
        }
       } else {
        $91 = $76;
       }
      }
     } while(0);
     $90 = ($91|0)==(0|0);
     $92 = HEAP32[$__e>>2]|0;
     $93 = ($92|0)==(0|0);
     do {
      if ($93) {
       label = 37;
      } else {
       $94 = ((($92)) + 12|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = ((($92)) + 16|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = ($95|0)==($97|0);
       if ($98) {
        $99 = HEAP32[$92>>2]|0;
        $100 = ((($99)) + 36|0);
        $101 = HEAP32[$100>>2]|0;
        __THREW__ = 0;
        $102 = (invoke_ii($101|0,($92|0))|0);
        $103 = __THREW__; __THREW__ = 0;
        $104 = $103&1;
        if ($104) {
         label = 10;
         break L4;
        }
        $105 = ($102|0)==(-1);
        if ($105) {
         HEAP32[$__e>>2] = 0;
         label = 37;
         break;
        }
       }
       if (!($90)) {
        label = 38;
       }
      }
     } while(0);
     if ((label|0) == 37) {
      if ($90) {
       label = 38;
      }
     }
     if ((label|0) == 38) {
      $106 = HEAP32[$__err>>2]|0;
      $107 = $106 | 2;
      HEAP32[$__err>>2] = $107;
     }
     $108 = HEAP32[$__b>>2]|0;
     $109 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($109)|0);
     $110 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $111 = ($110|0)==(0|0);
     if (!($111)) {
      $112 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($112|0,($110|0));
      $113 = __THREW__; __THREW__ = 0;
      $114 = $113&1;
      if ($114) {
       $115 = ___cxa_find_matching_catch(0|0)|0;
       $116 = tempRet0;
       ___clang_call_terminate($115);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($108|0);
    }
   }
  } while(0);
  if ((label|0) == 10) {
   $35 = ___cxa_find_matching_catch()|0;
   $36 = tempRet0;
   $$0 = $35;$$01 = $36;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
  }
  $117 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($117)|0);
  $$pre7 = HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2]|0;
  HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2] = 0;
  $118 = ($$pre7|0)==(0|0);
  if ($118) {
   $$114 = $$0;$$1212 = $$01;
  } else {
   $$pre15 = HEAP32[$2>>2]|0;
   $$113 = $$0;$$1211 = $$01;$119 = $$pre15;$120 = $$pre7;
   label = 45;
  }
 }
 if ((label|0) == 45) {
  __THREW__ = 0;
  invoke_vi($119|0,($120|0));
  $121 = __THREW__; __THREW__ = 0;
  $122 = $121&1;
  if ($122) {
   $123 = ___cxa_find_matching_catch(0|0)|0;
   $124 = tempRet0;
   ___clang_call_terminate($123);
   // unreachable;
  } else {
   $$114 = $$113;$$1212 = $$1211;
  }
 }
 ___resumeException($$114|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i114 = 0, $$0$i$i121 = 0, $$0$i$i130 = 0, $$0$i$i140 = 0, $$0$i$i157 = 0, $$0$i$i42 = 0, $$0$i$i45 = 0, $$0$i$i58 = 0, $$0$i$i65 = 0, $$0$i$i68 = 0, $$0$i$i75 = 0, $$0$i$i94 = 0, $$0$i$i97 = 0, $$in340 = 0, $$lcssa = 0, $$lcssa243 = 0, $$lcssa313 = 0, $$lcssa371 = 0;
 var $$ph = 0, $$phi$trans$insert = 0, $$phi$trans$insert274 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i104 = 0, $$pre$i$i$i144 = 0, $$pre$i$i$i161 = 0, $$pre$i$i$i32 = 0, $$pre$i$i$i48 = 0, $$pre$i$i$i80 = 0, $$pre$i2$i$i108 = 0, $$pre$i2$i$i148 = 0, $$pre$i2$i$i148256 = 0, $$pre$i2$i$i148258 = 0, $$pre$i2$i$i165268 = 0, $$pre$i2$i$i165269 = 0, $$pre$i2$i$i165345 = 0, $$pre$i2$i$i52 = 0, $$pre$i2$i$i52278 = 0;
 var $$pre$i2$i$i52280 = 0, $$pre$i2$i$i84264$ph = 0, $$pre$i2$i$i84264283 = 0, $$pre$i2$i$i84336 = 0, $$pre261 = 0, $$pre263 = 0, $$pre266 = 0, $$pre267 = 0, $$pre271 = 0, $$pre272 = 0, $$pre273 = 0, $$pre275 = 0, $$pre276 = 0, $$pre277 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$0$lcssa372 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$011 = 0, $__p$0353 = 0, $__pat = 0, $__psn = 0;
 var $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$010 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0355 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $isascii1$i = 0, $isascii1$i138 = 0, $isascii1$i171 = 0, $isascii1$i61 = 0, $isascii1$i73 = 0, $lpad$phi$index = 0, $lpad$phi$index7 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond7 = 0;
 var $or$cond9 = 0, $sext = 0, $sext210 = 0, $sext211 = 0, $sext212 = 0, $switch = 0, $tmp$i$i150 = 0, $tmp$i$i167 = 0, $tmp$i$i54 = 0, $tmp$i$i86 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 488|0;
 $__gbuf = sp + 88|0;
 $__gb = sp + 80|0;
 $__gn = sp + 72|0;
 $__ge = sp + 68|0;
 $__pat = sp + 496|0;
 $__dp = sp + 493|0;
 $__ts = sp + 492|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 32|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 8|0;
 $__fd = sp + 4|0;
 $__et = sp;
 HEAP32[$0>>2] = $__we;
 $1 = $__gbuf;
 HEAP32[$__gb>>2] = $1;
 $2 = ((($__gb)) + 4|0);
 HEAP32[$2>>2] = (708);
 HEAP32[$__gn>>2] = $__gbuf;
 $3 = ((($__gbuf)) + 400|0);
 HEAP32[$__ge>>2] = $3;
 HEAP32[$__grp>>2] = 0;
 $4 = ((($__grp)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($__grp)) + 8|0);
 HEAP32[$5>>2] = 0;
 HEAP32[$__sym>>2] = 0;
 $6 = ((($__sym)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($__sym)) + 8|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$__psn>>2] = 0;
 $8 = ((($__psn)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($__psn)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$__nsn>>2] = 0;
 $10 = ((($__nsn)) + 4|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($__nsn)) + 8|0);
 HEAP32[$11>>2] = 0;
 HEAP32[$__spaces>>2] = 0;
 $12 = ((($__spaces)) + 4|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($__spaces)) + 8|0);
 HEAP32[$13>>2] = 0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(711,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 L1: do {
  if ($15) {
   $80 = ___cxa_find_matching_catch()|0;
   $81 = tempRet0;
   $lpad$phi$index = $80;$lpad$phi$index7 = $81;
  } else {
   $16 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $16;
   $17 = ((($__ct)) + 8|0);
   $18 = ((($__psn)) + 4|0);
   $19 = ((($__nsn)) + 4|0);
   $20 = ((($__nsn)) + 8|0);
   $21 = ((($__nsn)) + 1|0);
   $22 = ((($__psn)) + 8|0);
   $23 = ((($__psn)) + 1|0);
   $24 = $__flags & 512;
   $25 = ($24|0)!=(0);
   $26 = ((($__sym)) + 8|0);
   $27 = ((($__sym)) + 1|0);
   $28 = ((($__sym)) + 4|0);
   $29 = ((($__spaces)) + 4|0);
   $30 = ((($__spaces)) + 8|0);
   $31 = ((($__spaces)) + 1|0);
   $32 = ((($__pat)) + 3|0);
   $33 = ((($__grp)) + 4|0);
   $876 = $__gbuf;$__p$0353 = 0;$__trailing_sign$0355 = 0;
   L4: while(1) {
    $34 = HEAP32[$__b>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      $49 = 0;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 24;
        break L4;
       }
       $47 = ($44|0)==(-1);
       if ($47) {
        HEAP32[$__b>>2] = 0;
        $49 = 0;
        break;
       } else {
        $$pre$i$i$i32 = HEAP32[$__b>>2]|0;
        $49 = $$pre$i$i$i32;
        break;
       }
      } else {
       $49 = $34;
      }
     }
    } while(0);
    $48 = ($49|0)==(0|0);
    $50 = HEAP32[$__e>>2]|0;
    $51 = ($50|0)==(0|0);
    do {
     if ($51) {
      label = 15;
     } else {
      $52 = ((($50)) + 12|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = ((($50)) + 16|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = ($53|0)==($55|0);
      if (!($56)) {
       if ($48) {
        $877 = $50;
        break;
       } else {
        $$lcssa313 = $876;$__trailing_sign$0$lcssa = $__trailing_sign$0355;
        label = 235;
        break L4;
       }
      }
      $57 = HEAP32[$50>>2]|0;
      $58 = ((($57)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      $60 = (invoke_ii($59|0,($50|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       label = 24;
       break L4;
      }
      $63 = ($60|0)==(-1);
      if ($63) {
       HEAP32[$__e>>2] = 0;
       label = 15;
       break;
      } else {
       if ($48) {
        $877 = $50;
        break;
       } else {
        $$lcssa313 = $876;$__trailing_sign$0$lcssa = $__trailing_sign$0355;
        label = 235;
        break L4;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($48) {
      $$lcssa313 = $876;$__trailing_sign$0$lcssa = $__trailing_sign$0355;
      label = 235;
      break;
     } else {
      $877 = 0;
     }
    }
    $64 = (($__pat) + ($__p$0353)|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    L26: do {
     switch ($66|0) {
     case 1:  {
      $cond = ($__p$0353|0)==(3);
      if ($cond) {
       $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
      } else {
       $89 = HEAP32[$__b>>2]|0;
       $90 = ((($89)) + 12|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = ((($89)) + 16|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = ($91|0)==($93|0);
       if ($94) {
        $95 = HEAP32[$89>>2]|0;
        $96 = ((($95)) + 36|0);
        $97 = HEAP32[$96>>2]|0;
        __THREW__ = 0;
        $98 = (invoke_ii($97|0,($89|0))|0);
        $99 = __THREW__; __THREW__ = 0;
        $100 = $99&1;
        if ($100) {
         label = 24;
         break L4;
        } else {
         $$0$i$i42 = $98;
        }
       } else {
        $101 = HEAP8[$91>>0]|0;
        $102 = $101&255;
        $$0$i$i42 = $102;
       }
       $103 = $$0$i$i42&255;
       $isascii1$i = ($103<<24>>24)>(-1);
       if (!($isascii1$i)) {
        label = 40;
        break L4;
       }
       $sext212 = $$0$i$i42 << 24;
       $104 = $sext212 >> 24;
       $105 = HEAP32[$17>>2]|0;
       $106 = (($105) + ($104<<1)|0);
       $107 = HEAP16[$106>>1]|0;
       $108 = $107 & 8192;
       $109 = ($108<<16>>16)==(0);
       if ($109) {
        label = 40;
        break L4;
       }
       $110 = HEAP32[$__b>>2]|0;
       $111 = ((($110)) + 12|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = ((($110)) + 16|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = ($112|0)==($114|0);
       if ($115) {
        $116 = HEAP32[$110>>2]|0;
        $117 = ((($116)) + 40|0);
        $118 = HEAP32[$117>>2]|0;
        __THREW__ = 0;
        $119 = (invoke_ii($118|0,($110|0))|0);
        $120 = __THREW__; __THREW__ = 0;
        $121 = $120&1;
        if ($121) {
         label = 24;
         break L4;
        } else {
         $$0$i$i45 = $119;
        }
       } else {
        $122 = ((($112)) + 1|0);
        HEAP32[$111>>2] = $122;
        $123 = HEAP8[$112>>0]|0;
        $124 = $123&255;
        $$0$i$i45 = $124;
       }
       $125 = $$0$i$i45&255;
       __THREW__ = 0;
       invoke_vii(567,($__spaces|0),($125|0));
       $126 = __THREW__; __THREW__ = 0;
       $127 = $126&1;
       if ($127) {
        label = 24;
        break L4;
       } else {
        $$pre$i2$i$i52 = $877;$148 = $877;
        label = 42;
       }
      }
      break;
     }
     case 0:  {
      $130 = ($__p$0353|0)==(3);
      if ($130) {
       $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
      } else {
       $$pre$i2$i$i52 = $877;$148 = $877;
       label = 42;
      }
      break;
     }
     case 3:  {
      $201 = HEAP8[$__psn>>0]|0;
      $202 = $201 & 1;
      $203 = ($202<<24>>24)==(0);
      $204 = HEAP32[$18>>2]|0;
      $205 = $201&255;
      $206 = $205 >>> 1;
      $207 = $203 ? $206 : $204;
      $208 = HEAP8[$__nsn>>0]|0;
      $209 = $208 & 1;
      $210 = ($209<<24>>24)==(0);
      $211 = HEAP32[$19>>2]|0;
      $212 = $208&255;
      $213 = $212 >>> 1;
      $214 = $210 ? $213 : $211;
      $215 = (0 - ($214))|0;
      $216 = ($207|0)==($215|0);
      if ($216) {
       $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
      } else {
       $217 = ($207|0)==(0);
       if ($217) {
        $261 = HEAP32[$__b>>2]|0;
        $262 = ((($261)) + 12|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = ((($261)) + 16|0);
        $265 = HEAP32[$264>>2]|0;
        $266 = ($263|0)==($265|0);
        if ($266) {
         $267 = HEAP32[$261>>2]|0;
         $268 = ((($267)) + 36|0);
         $269 = HEAP32[$268>>2]|0;
         __THREW__ = 0;
         $270 = (invoke_ii($269|0,($261|0))|0);
         $271 = __THREW__; __THREW__ = 0;
         $272 = $271&1;
         if ($272) {
          label = 24;
          break L4;
         }
         $$pre277 = HEAP8[$__nsn>>0]|0;
         $$0$i$i114 = $270;$277 = $$pre277;
        } else {
         $273 = HEAP8[$263>>0]|0;
         $274 = $273&255;
         $$0$i$i114 = $274;$277 = $208;
        }
        $275 = $$0$i$i114&255;
        $276 = $277 & 1;
        $278 = ($276<<24>>24)==(0);
        $279 = HEAP32[$20>>2]|0;
        $280 = $278 ? $21 : $279;
        $281 = HEAP8[$280>>0]|0;
        $282 = ($275<<24>>24)==($281<<24>>24);
        if (!($282)) {
         $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
         break L26;
        }
        $283 = HEAP32[$__b>>2]|0;
        $284 = ((($283)) + 12|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = ((($283)) + 16|0);
        $287 = HEAP32[$286>>2]|0;
        $288 = ($285|0)==($287|0);
        if ($288) {
         $289 = HEAP32[$283>>2]|0;
         $290 = ((($289)) + 40|0);
         $291 = HEAP32[$290>>2]|0;
         __THREW__ = 0;
         (invoke_ii($291|0,($283|0))|0);
         $292 = __THREW__; __THREW__ = 0;
         $293 = $292&1;
         if ($293) {
          label = 24;
          break L4;
         }
        } else {
         $294 = ((($285)) + 1|0);
         HEAP32[$284>>2] = $294;
        }
        HEAP8[$__neg>>0] = 1;
        $295 = HEAP8[$__nsn>>0]|0;
        $296 = $295 & 1;
        $297 = ($296<<24>>24)==(0);
        $298 = HEAP32[$19>>2]|0;
        $299 = $295&255;
        $300 = $299 >>> 1;
        $301 = $297 ? $300 : $298;
        $302 = ($301>>>0)>(1);
        $__nsn$__trailing_sign$0 = $302 ? $__nsn : $__trailing_sign$0355;
        $878 = $876;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L26;
       }
       $218 = ($214|0)==(0);
       $219 = HEAP32[$__b>>2]|0;
       $220 = ((($219)) + 12|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = ((($219)) + 16|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = ($221|0)==($223|0);
       if ($218) {
        if ($224) {
         $225 = HEAP32[$219>>2]|0;
         $226 = ((($225)) + 36|0);
         $227 = HEAP32[$226>>2]|0;
         __THREW__ = 0;
         $228 = (invoke_ii($227|0,($219|0))|0);
         $229 = __THREW__; __THREW__ = 0;
         $230 = $229&1;
         if ($230) {
          label = 24;
          break L4;
         }
         $$pre276 = HEAP8[$__psn>>0]|0;
         $$0$i$i94 = $228;$235 = $$pre276;
        } else {
         $231 = HEAP8[$221>>0]|0;
         $232 = $231&255;
         $$0$i$i94 = $232;$235 = $201;
        }
        $233 = $$0$i$i94&255;
        $234 = $235 & 1;
        $236 = ($234<<24>>24)==(0);
        $237 = HEAP32[$22>>2]|0;
        $238 = $236 ? $23 : $237;
        $239 = HEAP8[$238>>0]|0;
        $240 = ($233<<24>>24)==($239<<24>>24);
        if (!($240)) {
         HEAP8[$__neg>>0] = 1;
         $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
         break L26;
        }
        $241 = HEAP32[$__b>>2]|0;
        $242 = ((($241)) + 12|0);
        $243 = HEAP32[$242>>2]|0;
        $244 = ((($241)) + 16|0);
        $245 = HEAP32[$244>>2]|0;
        $246 = ($243|0)==($245|0);
        if ($246) {
         $247 = HEAP32[$241>>2]|0;
         $248 = ((($247)) + 40|0);
         $249 = HEAP32[$248>>2]|0;
         __THREW__ = 0;
         (invoke_ii($249|0,($241|0))|0);
         $250 = __THREW__; __THREW__ = 0;
         $251 = $250&1;
         if ($251) {
          label = 24;
          break L4;
         }
        } else {
         $252 = ((($243)) + 1|0);
         HEAP32[$242>>2] = $252;
        }
        $253 = HEAP8[$__psn>>0]|0;
        $254 = $253 & 1;
        $255 = ($254<<24>>24)==(0);
        $256 = HEAP32[$18>>2]|0;
        $257 = $253&255;
        $258 = $257 >>> 1;
        $259 = $255 ? $258 : $256;
        $260 = ($259>>>0)>(1);
        $__psn$__trailing_sign$0 = $260 ? $__psn : $__trailing_sign$0355;
        $878 = $876;$__trailing_sign$1 = $__psn$__trailing_sign$0;
        break L26;
       }
       if ($224) {
        $303 = HEAP32[$219>>2]|0;
        $304 = ((($303)) + 36|0);
        $305 = HEAP32[$304>>2]|0;
        __THREW__ = 0;
        $306 = (invoke_ii($305|0,($219|0))|0);
        $307 = __THREW__; __THREW__ = 0;
        $308 = $307&1;
        if ($308) {
         label = 24;
         break L4;
        }
        $$pre271 = HEAP8[$__psn>>0]|0;
        $$pre272 = HEAP32[$__b>>2]|0;
        $$phi$trans$insert = ((($$pre272)) + 12|0);
        $$pre273 = HEAP32[$$phi$trans$insert>>2]|0;
        $$phi$trans$insert274 = ((($$pre272)) + 16|0);
        $$pre275 = HEAP32[$$phi$trans$insert274>>2]|0;
        $$0$i$i121 = $306;$313 = $$pre271;$320 = $$pre272;$322 = $$pre273;$323 = $$pre275;
       } else {
        $309 = HEAP8[$221>>0]|0;
        $310 = $309&255;
        $$0$i$i121 = $310;$313 = $201;$320 = $219;$322 = $221;$323 = $223;
       }
       $311 = $$0$i$i121&255;
       $312 = $313 & 1;
       $314 = ($312<<24>>24)==(0);
       $315 = HEAP32[$22>>2]|0;
       $316 = $314 ? $23 : $315;
       $317 = HEAP8[$316>>0]|0;
       $318 = ($311<<24>>24)==($317<<24>>24);
       $319 = ((($320)) + 12|0);
       $321 = ($322|0)==($323|0);
       if ($318) {
        if ($321) {
         $324 = HEAP32[$320>>2]|0;
         $325 = ((($324)) + 40|0);
         $326 = HEAP32[$325>>2]|0;
         __THREW__ = 0;
         (invoke_ii($326|0,($320|0))|0);
         $327 = __THREW__; __THREW__ = 0;
         $328 = $327&1;
         if ($328) {
          label = 24;
          break L4;
         }
        } else {
         $329 = ((($322)) + 1|0);
         HEAP32[$319>>2] = $329;
        }
        $330 = HEAP8[$__psn>>0]|0;
        $331 = $330 & 1;
        $332 = ($331<<24>>24)==(0);
        $333 = HEAP32[$18>>2]|0;
        $334 = $330&255;
        $335 = $334 >>> 1;
        $336 = $332 ? $335 : $333;
        $337 = ($336>>>0)>(1);
        $__psn$__trailing_sign$010 = $337 ? $__psn : $__trailing_sign$0355;
        $878 = $876;$__trailing_sign$1 = $__psn$__trailing_sign$010;
        break L26;
       }
       if ($321) {
        $338 = HEAP32[$320>>2]|0;
        $339 = ((($338)) + 36|0);
        $340 = HEAP32[$339>>2]|0;
        __THREW__ = 0;
        $341 = (invoke_ii($340|0,($320|0))|0);
        $342 = __THREW__; __THREW__ = 0;
        $343 = $342&1;
        if ($343) {
         label = 24;
         break L4;
        } else {
         $$0$i$i130 = $341;
        }
       } else {
        $344 = HEAP8[$322>>0]|0;
        $345 = $344&255;
        $$0$i$i130 = $345;
       }
       $346 = $$0$i$i130&255;
       $347 = HEAP8[$__nsn>>0]|0;
       $348 = $347 & 1;
       $349 = ($348<<24>>24)==(0);
       $350 = HEAP32[$20>>2]|0;
       $351 = $349 ? $21 : $350;
       $352 = HEAP8[$351>>0]|0;
       $353 = ($346<<24>>24)==($352<<24>>24);
       if (!($353)) {
        label = 104;
        break L4;
       }
       $354 = HEAP32[$__b>>2]|0;
       $355 = ((($354)) + 12|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = ((($354)) + 16|0);
       $358 = HEAP32[$357>>2]|0;
       $359 = ($356|0)==($358|0);
       if ($359) {
        $360 = HEAP32[$354>>2]|0;
        $361 = ((($360)) + 40|0);
        $362 = HEAP32[$361>>2]|0;
        __THREW__ = 0;
        (invoke_ii($362|0,($354|0))|0);
        $363 = __THREW__; __THREW__ = 0;
        $364 = $363&1;
        if ($364) {
         label = 24;
         break L4;
        }
       } else {
        $365 = ((($356)) + 1|0);
        HEAP32[$355>>2] = $365;
       }
       HEAP8[$__neg>>0] = 1;
       $366 = HEAP8[$__nsn>>0]|0;
       $367 = $366 & 1;
       $368 = ($367<<24>>24)==(0);
       $369 = HEAP32[$19>>2]|0;
       $370 = $366&255;
       $371 = $370 >>> 1;
       $372 = $368 ? $371 : $369;
       $373 = ($372>>>0)>(1);
       $__nsn$__trailing_sign$011 = $373 ? $__nsn : $__trailing_sign$0355;
       $878 = $876;$__trailing_sign$1 = $__nsn$__trailing_sign$011;
      }
      break;
     }
     case 2:  {
      $376 = ($__trailing_sign$0355|0)!=(0|0);
      $377 = ($__p$0353>>>0)<(2);
      $or$cond = $377 | $376;
      if (!($or$cond)) {
       $378 = ($__p$0353|0)==(2);
       $379 = HEAP8[$32>>0]|0;
       $380 = ($379<<24>>24)!=(0);
       $381 = $378 & $380;
       $brmerge = $25 | $381;
       if (!($brmerge)) {
        $878 = $876;$__trailing_sign$1 = 0;
        break L26;
       }
      }
      $382 = HEAP8[$__sym>>0]|0;
      $383 = $382 & 1;
      $384 = ($383<<24>>24)==(0);
      $385 = HEAP32[$26>>2]|0;
      $386 = $384 ? $27 : $385;
      $387 = $386;
      $388 = ($__p$0353|0)==(0);
      L95: do {
       if ($388) {
        $$ph = $387;
       } else {
        $399 = (($__p$0353) + -1)|0;
        $400 = (($__pat) + ($399)|0);
        $401 = HEAP8[$400>>0]|0;
        $switch = ($401&255)<(2);
        if ($switch) {
         $402 = HEAP32[$28>>2]|0;
         $403 = $382&255;
         $404 = $403 >>> 1;
         $405 = $384 ? $404 : $402;
         $406 = (($386) + ($405)|0);
         $407 = HEAP32[$17>>2]|0;
         $408 = ($405|0)==(0);
         L98: do {
          if ($408) {
           $$lcssa = $387;
          } else {
           $410 = $386;$880 = $387;
           while(1) {
            $409 = HEAP8[$410>>0]|0;
            $isascii1$i171 = ($409<<24>>24)>(-1);
            if (!($isascii1$i171)) {
             $$lcssa = $880;
             break L98;
            }
            $411 = $409 << 24 >> 24;
            $412 = (($407) + ($411<<1)|0);
            $413 = HEAP16[$412>>1]|0;
            $414 = $413 & 8192;
            $415 = ($414<<16>>16)==(0);
            if ($415) {
             $$lcssa = $880;
             break L98;
            }
            $416 = ((($410)) + 1|0);
            $417 = $416;
            $418 = ($416|0)==($406|0);
            if ($418) {
             $$lcssa = $417;
             break;
            } else {
             $410 = $416;$880 = $417;
            }
           }
          }
         } while(0);
         $419 = (($$lcssa) - ($387))|0;
         $420 = HEAP8[$__spaces>>0]|0;
         $421 = $420 & 1;
         $422 = ($421<<24>>24)==(0);
         $423 = HEAP32[$29>>2]|0;
         $424 = $420&255;
         $425 = $424 >>> 1;
         $426 = $422 ? $425 : $423;
         $427 = ($426>>>0)<($419>>>0);
         if ($427) {
          $$ph = $387;
         } else {
          $428 = HEAP32[$30>>2]|0;
          $429 = $422 ? $31 : $428;
          $430 = (($429) + ($426)|0);
          $431 = ($$lcssa|0)==($387|0);
          if ($431) {
           $$ph = $$lcssa;
          } else {
           $$sum = (($426) - ($419))|0;
           $432 = (($429) + ($$sum)|0);
           $$in340 = $386;$434 = $432;
           while(1) {
            $433 = HEAP8[$434>>0]|0;
            $435 = HEAP8[$$in340>>0]|0;
            $436 = ($433<<24>>24)==($435<<24>>24);
            if (!($436)) {
             $$ph = $387;
             break L95;
            }
            $437 = ((($434)) + 1|0);
            $438 = ((($$in340)) + 1|0);
            $439 = ($437|0)==($430|0);
            if ($439) {
             $$ph = $$lcssa;
             break;
            } else {
             $$in340 = $438;$434 = $437;
            }
           }
          }
         }
        } else {
         $$ph = $387;
        }
       }
      } while(0);
      $389 = $382 & 1;
      $390 = ($389<<24>>24)==(0);
      $391 = HEAP32[$28>>2]|0;
      $392 = $382&255;
      $393 = $392 >>> 1;
      $394 = $390 ? $27 : $385;
      $395 = $390 ? $393 : $391;
      $396 = (($394) + ($395)|0);
      $397 = $$ph;
      $398 = ($397|0)==($396|0);
      L110: do {
       if ($398) {
        $$lcssa243 = $396;
       } else {
        $$pre$i2$i$i165345 = $877;$457 = $877;$487 = $397;
        while(1) {
         $440 = HEAP32[$__b>>2]|0;
         $441 = ($440|0)==(0|0);
         do {
          if ($441) {
           $455 = 0;
          } else {
           $442 = ((($440)) + 12|0);
           $443 = HEAP32[$442>>2]|0;
           $444 = ((($440)) + 16|0);
           $445 = HEAP32[$444>>2]|0;
           $446 = ($443|0)==($445|0);
           if ($446) {
            $447 = HEAP32[$440>>2]|0;
            $448 = ((($447)) + 36|0);
            $449 = HEAP32[$448>>2]|0;
            __THREW__ = 0;
            $450 = (invoke_ii($449|0,($440|0))|0);
            $451 = __THREW__; __THREW__ = 0;
            $452 = $451&1;
            if ($452) {
             label = 21;
             break L4;
            }
            $453 = ($450|0)==(-1);
            if ($453) {
             HEAP32[$__b>>2] = 0;
             $455 = 0;
             break;
            } else {
             $$pre$i$i$i161 = HEAP32[$__b>>2]|0;
             $455 = $$pre$i$i$i161;
             break;
            }
           } else {
            $455 = $440;
           }
          }
         } while(0);
         $454 = ($455|0)==(0|0);
         $456 = ($457|0)==(0|0);
         do {
          if ($456) {
           $$pre$i2$i$i165269 = $$pre$i2$i$i165345;
           label = 131;
          } else {
           $458 = ((($457)) + 12|0);
           $459 = HEAP32[$458>>2]|0;
           $460 = ((($457)) + 16|0);
           $461 = HEAP32[$460>>2]|0;
           $462 = ($459|0)==($461|0);
           if (!($462)) {
            if ($454) {
             $$pre$i2$i$i165268 = $$pre$i2$i$i165345;$881 = $457;
             break;
            } else {
             $$lcssa243 = $487;
             break L110;
            }
           }
           $463 = HEAP32[$457>>2]|0;
           $464 = ((($463)) + 36|0);
           $465 = HEAP32[$464>>2]|0;
           __THREW__ = 0;
           $466 = (invoke_ii($465|0,($457|0))|0);
           $467 = __THREW__; __THREW__ = 0;
           $468 = $467&1;
           if ($468) {
            label = 21;
            break L4;
           }
           $469 = ($466|0)==(-1);
           if ($469) {
            HEAP32[$__e>>2] = 0;
            $$pre$i2$i$i165269 = 0;
            label = 131;
            break;
           } else {
            $470 = ($$pre$i2$i$i165345|0)==(0|0);
            $tmp$i$i167 = $454 ^ $470;
            if ($tmp$i$i167) {
             $$pre$i2$i$i165268 = $$pre$i2$i$i165345;$881 = $$pre$i2$i$i165345;
             break;
            } else {
             $$lcssa243 = $487;
             break L110;
            }
           }
          }
         } while(0);
         if ((label|0) == 131) {
          label = 0;
          if ($454) {
           $$lcssa243 = $487;
           break L110;
          } else {
           $$pre$i2$i$i165268 = $$pre$i2$i$i165269;$881 = 0;
          }
         }
         $471 = HEAP32[$__b>>2]|0;
         $472 = ((($471)) + 12|0);
         $473 = HEAP32[$472>>2]|0;
         $474 = ((($471)) + 16|0);
         $475 = HEAP32[$474>>2]|0;
         $476 = ($473|0)==($475|0);
         if ($476) {
          $477 = HEAP32[$471>>2]|0;
          $478 = ((($477)) + 36|0);
          $479 = HEAP32[$478>>2]|0;
          __THREW__ = 0;
          $480 = (invoke_ii($479|0,($471|0))|0);
          $481 = __THREW__; __THREW__ = 0;
          $482 = $481&1;
          if ($482) {
           label = 21;
           break L4;
          } else {
           $$0$i$i157 = $480;
          }
         } else {
          $483 = HEAP8[$473>>0]|0;
          $484 = $483&255;
          $$0$i$i157 = $484;
         }
         $485 = $$0$i$i157&255;
         $486 = HEAP8[$487>>0]|0;
         $488 = ($485<<24>>24)==($486<<24>>24);
         if (!($488)) {
          $$lcssa243 = $487;
          break L110;
         }
         $489 = HEAP32[$__b>>2]|0;
         $490 = ((($489)) + 12|0);
         $491 = HEAP32[$490>>2]|0;
         $492 = ((($489)) + 16|0);
         $493 = HEAP32[$492>>2]|0;
         $494 = ($491|0)==($493|0);
         if ($494) {
          $495 = HEAP32[$489>>2]|0;
          $496 = ((($495)) + 40|0);
          $497 = HEAP32[$496>>2]|0;
          __THREW__ = 0;
          (invoke_ii($497|0,($489|0))|0);
          $498 = __THREW__; __THREW__ = 0;
          $499 = $498&1;
          if ($499) {
           label = 21;
           break L4;
          }
         } else {
          $500 = ((($491)) + 1|0);
          HEAP32[$490>>2] = $500;
         }
         $501 = ((($487)) + 1|0);
         $$pre266 = HEAP8[$__sym>>0]|0;
         $$pre267 = HEAP32[$26>>2]|0;
         $502 = $$pre266 & 1;
         $503 = ($502<<24>>24)==(0);
         $504 = HEAP32[$28>>2]|0;
         $505 = $$pre266&255;
         $506 = $505 >>> 1;
         $507 = $503 ? $27 : $$pre267;
         $508 = $503 ? $506 : $504;
         $509 = (($507) + ($508)|0);
         $510 = ($501|0)==($509|0);
         if ($510) {
          $$lcssa243 = $509;
          break;
         } else {
          $$pre$i2$i$i165345 = $$pre$i2$i$i165268;$457 = $881;$487 = $501;
         }
        }
       }
      } while(0);
      if ($25) {
       $511 = HEAP8[$__sym>>0]|0;
       $512 = $511 & 1;
       $513 = ($512<<24>>24)==(0);
       $514 = HEAP32[$26>>2]|0;
       $515 = HEAP32[$28>>2]|0;
       $516 = $511&255;
       $517 = $516 >>> 1;
       $518 = $513 ? $27 : $514;
       $519 = $513 ? $517 : $515;
       $520 = (($518) + ($519)|0);
       $521 = ($$lcssa243|0)==($520|0);
       if ($521) {
        $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
       } else {
        label = 143;
        break L4;
       }
      } else {
       $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
      }
      break;
     }
     case 4:  {
      $67 = HEAP8[$__ts>>0]|0;
      $$pre$i2$i$i148 = $877;$541 = $877;$596 = $876;$__ng$0 = 0;
      L145: while(1) {
       $524 = HEAP32[$__b>>2]|0;
       $525 = ($524|0)==(0|0);
       do {
        if ($525) {
         $539 = 0;
        } else {
         $526 = ((($524)) + 12|0);
         $527 = HEAP32[$526>>2]|0;
         $528 = ((($524)) + 16|0);
         $529 = HEAP32[$528>>2]|0;
         $530 = ($527|0)==($529|0);
         if ($530) {
          $531 = HEAP32[$524>>2]|0;
          $532 = ((($531)) + 36|0);
          $533 = HEAP32[$532>>2]|0;
          __THREW__ = 0;
          $534 = (invoke_ii($533|0,($524|0))|0);
          $535 = __THREW__; __THREW__ = 0;
          $536 = $535&1;
          if ($536) {
           label = 23;
           break L4;
          }
          $537 = ($534|0)==(-1);
          if ($537) {
           HEAP32[$__b>>2] = 0;
           $539 = 0;
           break;
          } else {
           $$pre$i$i$i144 = HEAP32[$__b>>2]|0;
           $539 = $$pre$i$i$i144;
           break;
          }
         } else {
          $539 = $524;
         }
        }
       } while(0);
       $538 = ($539|0)==(0|0);
       $540 = ($541|0)==(0|0);
       do {
        if ($540) {
         $$pre$i2$i$i148256 = $$pre$i2$i$i148;
         label = 156;
        } else {
         $542 = ((($541)) + 12|0);
         $543 = HEAP32[$542>>2]|0;
         $544 = ((($541)) + 16|0);
         $545 = HEAP32[$544>>2]|0;
         $546 = ($543|0)==($545|0);
         if (!($546)) {
          if ($538) {
           $$pre$i2$i$i148258 = $$pre$i2$i$i148;$882 = $541;
           break;
          } else {
           $$lcssa371 = $596;$$pre$i2$i$i108 = $$pre$i2$i$i148;$__ng$0$lcssa372 = $__ng$0;
           break L145;
          }
         }
         $547 = HEAP32[$541>>2]|0;
         $548 = ((($547)) + 36|0);
         $549 = HEAP32[$548>>2]|0;
         __THREW__ = 0;
         $550 = (invoke_ii($549|0,($541|0))|0);
         $551 = __THREW__; __THREW__ = 0;
         $552 = $551&1;
         if ($552) {
          label = 23;
          break L4;
         }
         $553 = ($550|0)==(-1);
         if ($553) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i148256 = 0;
          label = 156;
          break;
         } else {
          $554 = ($$pre$i2$i$i148|0)==(0|0);
          $tmp$i$i150 = $538 ^ $554;
          if ($tmp$i$i150) {
           $$pre$i2$i$i148258 = $$pre$i2$i$i148;$882 = $$pre$i2$i$i148;
           break;
          } else {
           $$lcssa371 = $596;$$pre$i2$i$i108 = $$pre$i2$i$i148;$__ng$0$lcssa372 = $__ng$0;
           break L145;
          }
         }
        }
       } while(0);
       if ((label|0) == 156) {
        label = 0;
        if ($538) {
         $$lcssa371 = $596;$$pre$i2$i$i108 = $$pre$i2$i$i148256;$__ng$0$lcssa372 = $__ng$0;
         break;
        } else {
         $$pre$i2$i$i148258 = $$pre$i2$i$i148256;$882 = 0;
        }
       }
       $555 = HEAP32[$__b>>2]|0;
       $556 = ((($555)) + 12|0);
       $557 = HEAP32[$556>>2]|0;
       $558 = ((($555)) + 16|0);
       $559 = HEAP32[$558>>2]|0;
       $560 = ($557|0)==($559|0);
       if ($560) {
        $561 = HEAP32[$555>>2]|0;
        $562 = ((($561)) + 36|0);
        $563 = HEAP32[$562>>2]|0;
        __THREW__ = 0;
        $564 = (invoke_ii($563|0,($555|0))|0);
        $565 = __THREW__; __THREW__ = 0;
        $566 = $565&1;
        if ($566) {
         label = 23;
         break L4;
        } else {
         $$0$i$i140 = $564;
        }
       } else {
        $567 = HEAP8[$557>>0]|0;
        $568 = $567&255;
        $$0$i$i140 = $568;
       }
       $569 = $$0$i$i140&255;
       $isascii1$i138 = ($569<<24>>24)>(-1);
       if ($isascii1$i138) {
        $sext210 = $$0$i$i140 << 24;
        $570 = $sext210 >> 24;
        $571 = HEAP32[$17>>2]|0;
        $572 = (($571) + ($570<<1)|0);
        $573 = HEAP16[$572>>1]|0;
        $574 = $573 & 2048;
        $575 = ($574<<16>>16)==(0);
        if ($575) {
         label = 167;
        } else {
         $576 = HEAP32[$__wn>>2]|0;
         $577 = HEAP32[$0>>2]|0;
         $578 = ($576|0)==($577|0);
         if ($578) {
          __THREW__ = 0;
          invoke_viii(712,($__wb|0),($__wn|0),($0|0));
          $579 = __THREW__; __THREW__ = 0;
          $580 = $579&1;
          if ($580) {
           label = 23;
           break L4;
          }
          $$pre = HEAP32[$__wn>>2]|0;
          $582 = $$pre;
         } else {
          $582 = $576;
         }
         $581 = ((($582)) + 1|0);
         HEAP32[$__wn>>2] = $581;
         HEAP8[$582>>0] = $569;
         $583 = (($__ng$0) + 1)|0;
         $883 = $596;$__ng$1 = $583;
        }
       } else {
        label = 167;
       }
       if ((label|0) == 167) {
        label = 0;
        $584 = HEAP8[$__grp>>0]|0;
        $585 = $584 & 1;
        $586 = ($585<<24>>24)==(0);
        $587 = HEAP32[$33>>2]|0;
        $588 = $584&255;
        $589 = $588 >>> 1;
        $590 = $586 ? $589 : $587;
        $591 = ($590|0)!=(0);
        $592 = ($__ng$0|0)!=(0);
        $or$cond7 = $592 & $591;
        $593 = ($569<<24>>24)==($67<<24>>24);
        $or$cond13 = $593 & $or$cond7;
        if (!($or$cond13)) {
         $$lcssa371 = $596;$$pre$i2$i$i108 = $$pre$i2$i$i148258;$__ng$0$lcssa372 = $__ng$0;
         break;
        }
        $594 = HEAP32[$__ge>>2]|0;
        $595 = ($596|0)==($594|0);
        if ($595) {
         __THREW__ = 0;
         invoke_viii(713,($__gb|0),($__gn|0),($__ge|0));
         $597 = __THREW__; __THREW__ = 0;
         $598 = $597&1;
         if ($598) {
          label = 23;
          break L4;
         }
         $$pre261 = HEAP32[$__gn>>2]|0;
         $600 = $$pre261;
        } else {
         $600 = $596;
        }
        $599 = ((($600)) + 4|0);
        HEAP32[$__gn>>2] = $599;
        HEAP32[$600>>2] = $__ng$0;
        $883 = $599;$__ng$1 = 0;
       }
       $601 = HEAP32[$__b>>2]|0;
       $602 = ((($601)) + 12|0);
       $603 = HEAP32[$602>>2]|0;
       $604 = ((($601)) + 16|0);
       $605 = HEAP32[$604>>2]|0;
       $606 = ($603|0)==($605|0);
       if ($606) {
        $607 = HEAP32[$601>>2]|0;
        $608 = ((($607)) + 40|0);
        $609 = HEAP32[$608>>2]|0;
        __THREW__ = 0;
        (invoke_ii($609|0,($601|0))|0);
        $610 = __THREW__; __THREW__ = 0;
        $611 = $610&1;
        if ($611) {
         label = 23;
         break L4;
        } else {
         $$pre$i2$i$i148 = $$pre$i2$i$i148258;$541 = $882;$596 = $883;$__ng$0 = $__ng$1;
         continue;
        }
       } else {
        $612 = ((($603)) + 1|0);
        HEAP32[$602>>2] = $612;
        $$pre$i2$i$i148 = $$pre$i2$i$i148258;$541 = $882;$596 = $883;$__ng$0 = $__ng$1;
        continue;
       }
      }
      $613 = HEAP32[$__gb>>2]|0;
      $614 = ($613|0)!=($$lcssa371|0);
      $615 = ($__ng$0$lcssa372|0)!=(0);
      $or$cond9 = $615 & $614;
      if ($or$cond9) {
       $616 = HEAP32[$__ge>>2]|0;
       $617 = ($$lcssa371|0)==($616|0);
       if ($617) {
        __THREW__ = 0;
        invoke_viii(713,($__gb|0),($__gn|0),($__ge|0));
        $618 = __THREW__; __THREW__ = 0;
        $619 = $618&1;
        if ($619) {
         label = 24;
         break L4;
        }
        $$pre263 = HEAP32[$__gn>>2]|0;
        $621 = $$pre263;
       } else {
        $621 = $$lcssa371;
       }
       $620 = ((($621)) + 4|0);
       HEAP32[$__gn>>2] = $620;
       HEAP32[$621>>2] = $__ng$0$lcssa372;
       $884 = $620;
      } else {
       $884 = $$lcssa371;
      }
      $622 = HEAP32[$__fd>>2]|0;
      $623 = ($622|0)>(0);
      if ($623) {
       $624 = HEAP32[$__b>>2]|0;
       $625 = ($624|0)==(0|0);
       do {
        if ($625) {
         $639 = 0;
        } else {
         $626 = ((($624)) + 12|0);
         $627 = HEAP32[$626>>2]|0;
         $628 = ((($624)) + 16|0);
         $629 = HEAP32[$628>>2]|0;
         $630 = ($627|0)==($629|0);
         if ($630) {
          $631 = HEAP32[$624>>2]|0;
          $632 = ((($631)) + 36|0);
          $633 = HEAP32[$632>>2]|0;
          __THREW__ = 0;
          $634 = (invoke_ii($633|0,($624|0))|0);
          $635 = __THREW__; __THREW__ = 0;
          $636 = $635&1;
          if ($636) {
           label = 24;
           break L4;
          }
          $637 = ($634|0)==(-1);
          if ($637) {
           HEAP32[$__b>>2] = 0;
           $639 = 0;
           break;
          } else {
           $$pre$i$i$i104 = HEAP32[$__b>>2]|0;
           $639 = $$pre$i$i$i104;
           break;
          }
         } else {
          $639 = $624;
         }
        }
       } while(0);
       $638 = ($639|0)==(0|0);
       $640 = ($$pre$i2$i$i108|0)==(0|0);
       do {
        if ($640) {
         label = 193;
        } else {
         $641 = ((($$pre$i2$i$i108)) + 12|0);
         $642 = HEAP32[$641>>2]|0;
         $643 = ((($$pre$i2$i$i108)) + 16|0);
         $644 = HEAP32[$643>>2]|0;
         $645 = ($642|0)==($644|0);
         if ($645) {
          $646 = HEAP32[$$pre$i2$i$i108>>2]|0;
          $647 = ((($646)) + 36|0);
          $648 = HEAP32[$647>>2]|0;
          __THREW__ = 0;
          $649 = (invoke_ii($648|0,($$pre$i2$i$i108|0))|0);
          $650 = __THREW__; __THREW__ = 0;
          $651 = $650&1;
          if ($651) {
           label = 24;
           break L4;
          }
          $652 = ($649|0)==(-1);
          if ($652) {
           HEAP32[$__e>>2] = 0;
           label = 193;
           break;
          }
         }
         if ($638) {
          $885 = $$pre$i2$i$i108;
         } else {
          label = 198;
          break L4;
         }
        }
       } while(0);
       if ((label|0) == 193) {
        label = 0;
        if ($638) {
         label = 198;
         break L4;
        } else {
         $885 = 0;
        }
       }
       $653 = HEAP32[$__b>>2]|0;
       $654 = ((($653)) + 12|0);
       $655 = HEAP32[$654>>2]|0;
       $656 = ((($653)) + 16|0);
       $657 = HEAP32[$656>>2]|0;
       $658 = ($655|0)==($657|0);
       if ($658) {
        $659 = HEAP32[$653>>2]|0;
        $660 = ((($659)) + 36|0);
        $661 = HEAP32[$660>>2]|0;
        __THREW__ = 0;
        $662 = (invoke_ii($661|0,($653|0))|0);
        $663 = __THREW__; __THREW__ = 0;
        $664 = $663&1;
        if ($664) {
         label = 24;
         break L4;
        } else {
         $$0$i$i97 = $662;
        }
       } else {
        $665 = HEAP8[$655>>0]|0;
        $666 = $665&255;
        $$0$i$i97 = $666;
       }
       $667 = $$0$i$i97&255;
       $668 = HEAP8[$__dp>>0]|0;
       $669 = ($667<<24>>24)==($668<<24>>24);
       if (!($669)) {
        label = 198;
        break L4;
       }
       $672 = HEAP32[$__b>>2]|0;
       $673 = ((($672)) + 12|0);
       $674 = HEAP32[$673>>2]|0;
       $675 = ((($672)) + 16|0);
       $676 = HEAP32[$675>>2]|0;
       $677 = ($674|0)==($676|0);
       if ($677) {
        $678 = HEAP32[$672>>2]|0;
        $679 = ((($678)) + 40|0);
        $680 = HEAP32[$679>>2]|0;
        __THREW__ = 0;
        (invoke_ii($680|0,($672|0))|0);
        $681 = __THREW__; __THREW__ = 0;
        $682 = $681&1;
        if ($682) {
         label = 24;
         break L4;
        }
       } else {
        $683 = ((($674)) + 1|0);
        HEAP32[$673>>2] = $683;
       }
       $684 = ($622|0)>(0);
       if ($684) {
        $$pre$i2$i$i84336 = $885;$702 = $885;$762 = $622;
        while(1) {
         $685 = HEAP32[$__b>>2]|0;
         $686 = ($685|0)==(0|0);
         do {
          if ($686) {
           $700 = 0;
          } else {
           $687 = ((($685)) + 12|0);
           $688 = HEAP32[$687>>2]|0;
           $689 = ((($685)) + 16|0);
           $690 = HEAP32[$689>>2]|0;
           $691 = ($688|0)==($690|0);
           if ($691) {
            $692 = HEAP32[$685>>2]|0;
            $693 = ((($692)) + 36|0);
            $694 = HEAP32[$693>>2]|0;
            __THREW__ = 0;
            $695 = (invoke_ii($694|0,($685|0))|0);
            $696 = __THREW__; __THREW__ = 0;
            $697 = $696&1;
            if ($697) {
             label = 22;
             break L4;
            }
            $698 = ($695|0)==(-1);
            if ($698) {
             HEAP32[$__b>>2] = 0;
             $700 = 0;
             break;
            } else {
             $$pre$i$i$i80 = HEAP32[$__b>>2]|0;
             $700 = $$pre$i$i$i80;
             break;
            }
           } else {
            $700 = $685;
           }
          }
         } while(0);
         $699 = ($700|0)==(0|0);
         $701 = ($702|0)==(0|0);
         do {
          if ($701) {
           $$pre$i2$i$i84264$ph = $$pre$i2$i$i84336;
           label = 215;
          } else {
           $703 = ((($702)) + 12|0);
           $704 = HEAP32[$703>>2]|0;
           $705 = ((($702)) + 16|0);
           $706 = HEAP32[$705>>2]|0;
           $707 = ($704|0)==($706|0);
           if (!($707)) {
            if ($699) {
             $$pre$i2$i$i84264283 = $$pre$i2$i$i84336;$886 = $702;
             break;
            } else {
             label = 222;
             break L4;
            }
           }
           $708 = HEAP32[$702>>2]|0;
           $709 = ((($708)) + 36|0);
           $710 = HEAP32[$709>>2]|0;
           __THREW__ = 0;
           $711 = (invoke_ii($710|0,($702|0))|0);
           $712 = __THREW__; __THREW__ = 0;
           $713 = $712&1;
           if ($713) {
            label = 22;
            break L4;
           }
           $714 = ($711|0)==(-1);
           if ($714) {
            HEAP32[$__e>>2] = 0;
            $$pre$i2$i$i84264$ph = 0;
            label = 215;
            break;
           } else {
            $715 = ($$pre$i2$i$i84336|0)==(0|0);
            $tmp$i$i86 = $699 ^ $715;
            if ($tmp$i$i86) {
             $$pre$i2$i$i84264283 = $$pre$i2$i$i84336;$886 = $$pre$i2$i$i84336;
             break;
            } else {
             label = 222;
             break L4;
            }
           }
          }
         } while(0);
         if ((label|0) == 215) {
          label = 0;
          if ($699) {
           label = 222;
           break L4;
          } else {
           $$pre$i2$i$i84264283 = $$pre$i2$i$i84264$ph;$886 = 0;
          }
         }
         $716 = HEAP32[$__b>>2]|0;
         $717 = ((($716)) + 12|0);
         $718 = HEAP32[$717>>2]|0;
         $719 = ((($716)) + 16|0);
         $720 = HEAP32[$719>>2]|0;
         $721 = ($718|0)==($720|0);
         if ($721) {
          $722 = HEAP32[$716>>2]|0;
          $723 = ((($722)) + 36|0);
          $724 = HEAP32[$723>>2]|0;
          __THREW__ = 0;
          $725 = (invoke_ii($724|0,($716|0))|0);
          $726 = __THREW__; __THREW__ = 0;
          $727 = $726&1;
          if ($727) {
           label = 22;
           break L4;
          } else {
           $$0$i$i75 = $725;
          }
         } else {
          $728 = HEAP8[$718>>0]|0;
          $729 = $728&255;
          $$0$i$i75 = $729;
         }
         $730 = $$0$i$i75&255;
         $isascii1$i73 = ($730<<24>>24)>(-1);
         if (!($isascii1$i73)) {
          label = 222;
          break L4;
         }
         $sext = $$0$i$i75 << 24;
         $731 = $sext >> 24;
         $732 = HEAP32[$17>>2]|0;
         $733 = (($732) + ($731<<1)|0);
         $734 = HEAP16[$733>>1]|0;
         $735 = $734 & 2048;
         $736 = ($735<<16>>16)==(0);
         if ($736) {
          label = 222;
          break L4;
         }
         $739 = HEAP32[$__wn>>2]|0;
         $740 = HEAP32[$0>>2]|0;
         $741 = ($739|0)==($740|0);
         if ($741) {
          __THREW__ = 0;
          invoke_viii(712,($__wb|0),($__wn|0),($0|0));
          $742 = __THREW__; __THREW__ = 0;
          $743 = $742&1;
          if ($743) {
           label = 22;
           break L4;
          }
         }
         $744 = HEAP32[$__b>>2]|0;
         $745 = ((($744)) + 12|0);
         $746 = HEAP32[$745>>2]|0;
         $747 = ((($744)) + 16|0);
         $748 = HEAP32[$747>>2]|0;
         $749 = ($746|0)==($748|0);
         if ($749) {
          $750 = HEAP32[$744>>2]|0;
          $751 = ((($750)) + 36|0);
          $752 = HEAP32[$751>>2]|0;
          __THREW__ = 0;
          $753 = (invoke_ii($752|0,($744|0))|0);
          $754 = __THREW__; __THREW__ = 0;
          $755 = $754&1;
          if ($755) {
           label = 22;
           break L4;
          } else {
           $$0$i$i68 = $753;
          }
         } else {
          $756 = HEAP8[$746>>0]|0;
          $757 = $756&255;
          $$0$i$i68 = $757;
         }
         $758 = $$0$i$i68&255;
         $759 = HEAP32[$__wn>>2]|0;
         $760 = ((($759)) + 1|0);
         HEAP32[$__wn>>2] = $760;
         HEAP8[$759>>0] = $758;
         $761 = (($762) + -1)|0;
         HEAP32[$__fd>>2] = $761;
         $763 = HEAP32[$__b>>2]|0;
         $764 = ((($763)) + 12|0);
         $765 = HEAP32[$764>>2]|0;
         $766 = ((($763)) + 16|0);
         $767 = HEAP32[$766>>2]|0;
         $768 = ($765|0)==($767|0);
         if ($768) {
          $769 = HEAP32[$763>>2]|0;
          $770 = ((($769)) + 40|0);
          $771 = HEAP32[$770>>2]|0;
          __THREW__ = 0;
          (invoke_ii($771|0,($763|0))|0);
          $772 = __THREW__; __THREW__ = 0;
          $773 = $772&1;
          if ($773) {
           label = 22;
           break L4;
          }
         } else {
          $775 = ((($765)) + 1|0);
          HEAP32[$764>>2] = $775;
         }
         $774 = ($762|0)>(1);
         if ($774) {
          $$pre$i2$i$i84336 = $$pre$i2$i$i84264283;$702 = $886;$762 = $761;
         } else {
          break;
         }
        }
       }
      }
      $776 = HEAP32[$__wn>>2]|0;
      $777 = HEAP32[$__wb>>2]|0;
      $778 = ($776|0)==($777|0);
      if ($778) {
       label = 233;
       break L4;
      } else {
       $878 = $884;$__trailing_sign$1 = $__trailing_sign$0355;
      }
      break;
     }
     default: {
      $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
     }
     }
    } while(0);
    L266: do {
     if ((label|0) == 42) {
      while(1) {
       label = 0;
       $131 = HEAP32[$__b>>2]|0;
       $132 = ($131|0)==(0|0);
       do {
        if ($132) {
         $146 = 0;
        } else {
         $133 = ((($131)) + 12|0);
         $134 = HEAP32[$133>>2]|0;
         $135 = ((($131)) + 16|0);
         $136 = HEAP32[$135>>2]|0;
         $137 = ($134|0)==($136|0);
         if ($137) {
          $138 = HEAP32[$131>>2]|0;
          $139 = ((($138)) + 36|0);
          $140 = HEAP32[$139>>2]|0;
          __THREW__ = 0;
          $141 = (invoke_ii($140|0,($131|0))|0);
          $142 = __THREW__; __THREW__ = 0;
          $143 = $142&1;
          if ($143) {
           label = 20;
           break L4;
          }
          $144 = ($141|0)==(-1);
          if ($144) {
           HEAP32[$__b>>2] = 0;
           $146 = 0;
           break;
          } else {
           $$pre$i$i$i48 = HEAP32[$__b>>2]|0;
           $146 = $$pre$i$i$i48;
           break;
          }
         } else {
          $146 = $131;
         }
        }
       } while(0);
       $145 = ($146|0)==(0|0);
       $147 = ($148|0)==(0|0);
       do {
        if ($147) {
         $$pre$i2$i$i52278 = $$pre$i2$i$i52;
         label = 54;
        } else {
         $149 = ((($148)) + 12|0);
         $150 = HEAP32[$149>>2]|0;
         $151 = ((($148)) + 16|0);
         $152 = HEAP32[$151>>2]|0;
         $153 = ($150|0)==($152|0);
         if (!($153)) {
          if ($145) {
           $$pre$i2$i$i52280 = $$pre$i2$i$i52;$879 = $148;
           break;
          } else {
           $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
           break L266;
          }
         }
         $154 = HEAP32[$148>>2]|0;
         $155 = ((($154)) + 36|0);
         $156 = HEAP32[$155>>2]|0;
         __THREW__ = 0;
         $157 = (invoke_ii($156|0,($148|0))|0);
         $158 = __THREW__; __THREW__ = 0;
         $159 = $158&1;
         if ($159) {
          label = 20;
          break L4;
         }
         $160 = ($157|0)==(-1);
         if ($160) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i52278 = 0;
          label = 54;
          break;
         } else {
          $161 = ($$pre$i2$i$i52|0)==(0|0);
          $tmp$i$i54 = $145 ^ $161;
          if ($tmp$i$i54) {
           $$pre$i2$i$i52280 = $$pre$i2$i$i52;$879 = $$pre$i2$i$i52;
           break;
          } else {
           $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
           break L266;
          }
         }
        }
       } while(0);
       if ((label|0) == 54) {
        label = 0;
        if ($145) {
         $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
         break L266;
        } else {
         $$pre$i2$i$i52280 = $$pre$i2$i$i52278;$879 = 0;
        }
       }
       $162 = HEAP32[$__b>>2]|0;
       $163 = ((($162)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ((($162)) + 16|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($164|0)==($166|0);
       if ($167) {
        $168 = HEAP32[$162>>2]|0;
        $169 = ((($168)) + 36|0);
        $170 = HEAP32[$169>>2]|0;
        __THREW__ = 0;
        $171 = (invoke_ii($170|0,($162|0))|0);
        $172 = __THREW__; __THREW__ = 0;
        $173 = $172&1;
        if ($173) {
         label = 20;
         break L4;
        } else {
         $$0$i$i58 = $171;
        }
       } else {
        $174 = HEAP8[$164>>0]|0;
        $175 = $174&255;
        $$0$i$i58 = $175;
       }
       $176 = $$0$i$i58&255;
       $isascii1$i61 = ($176<<24>>24)>(-1);
       if (!($isascii1$i61)) {
        $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
        break L266;
       }
       $sext211 = $$0$i$i58 << 24;
       $177 = $sext211 >> 24;
       $178 = HEAP32[$17>>2]|0;
       $179 = (($178) + ($177<<1)|0);
       $180 = HEAP16[$179>>1]|0;
       $181 = $180 & 8192;
       $182 = ($181<<16>>16)==(0);
       if ($182) {
        $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
        break L266;
       }
       $183 = HEAP32[$__b>>2]|0;
       $184 = ((($183)) + 12|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ((($183)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($185|0)==($187|0);
       if ($188) {
        $189 = HEAP32[$183>>2]|0;
        $190 = ((($189)) + 40|0);
        $191 = HEAP32[$190>>2]|0;
        __THREW__ = 0;
        $192 = (invoke_ii($191|0,($183|0))|0);
        $193 = __THREW__; __THREW__ = 0;
        $194 = $193&1;
        if ($194) {
         label = 20;
         break L4;
        } else {
         $$0$i$i65 = $192;
        }
       } else {
        $195 = ((($185)) + 1|0);
        HEAP32[$184>>2] = $195;
        $196 = HEAP8[$185>>0]|0;
        $197 = $196&255;
        $$0$i$i65 = $197;
       }
       $198 = $$0$i$i65&255;
       __THREW__ = 0;
       invoke_vii(567,($__spaces|0),($198|0));
       $199 = __THREW__; __THREW__ = 0;
       $200 = $199&1;
       if ($200) {
        label = 20;
        break L4;
       } else {
        $$pre$i2$i$i52 = $$pre$i2$i$i52280;$148 = $879;
        label = 42;
       }
      }
     }
    } while(0);
    $781 = (($__p$0353) + 1)|0;
    $782 = ($781>>>0)<(4);
    if ($782) {
     $876 = $878;$__p$0353 = $781;$__trailing_sign$0355 = $__trailing_sign$1;
    } else {
     $$lcssa313 = $878;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 235;
     break;
    }
   }
   L300:    switch (label|0) {
    case 20: {
     $70 = ___cxa_find_matching_catch()|0;
     $71 = tempRet0;
     $lpad$phi$index = $70;$lpad$phi$index7 = $71;
     break L1;
     break;
    }
    case 21: {
     $72 = ___cxa_find_matching_catch()|0;
     $73 = tempRet0;
     $lpad$phi$index = $72;$lpad$phi$index7 = $73;
     break L1;
     break;
    }
    case 22: {
     $74 = ___cxa_find_matching_catch()|0;
     $75 = tempRet0;
     $lpad$phi$index = $74;$lpad$phi$index7 = $75;
     break L1;
     break;
    }
    case 23: {
     $76 = ___cxa_find_matching_catch()|0;
     $77 = tempRet0;
     $lpad$phi$index = $76;$lpad$phi$index7 = $77;
     break L1;
     break;
    }
    case 24: {
     $78 = ___cxa_find_matching_catch()|0;
     $79 = tempRet0;
     $lpad$phi$index = $78;$lpad$phi$index7 = $79;
     break L1;
     break;
    }
    case 40: {
     $128 = HEAP32[$__err>>2]|0;
     $129 = $128 | 4;
     HEAP32[$__err>>2] = $129;
     $$0 = 0;
     break;
    }
    case 104: {
     $374 = HEAP32[$__err>>2]|0;
     $375 = $374 | 4;
     HEAP32[$__err>>2] = $375;
     $$0 = 0;
     break;
    }
    case 143: {
     $522 = HEAP32[$__err>>2]|0;
     $523 = $522 | 4;
     HEAP32[$__err>>2] = $523;
     $$0 = 0;
     break;
    }
    case 198: {
     $670 = HEAP32[$__err>>2]|0;
     $671 = $670 | 4;
     HEAP32[$__err>>2] = $671;
     $$0 = 0;
     break;
    }
    case 222: {
     $737 = HEAP32[$__err>>2]|0;
     $738 = $737 | 4;
     HEAP32[$__err>>2] = $738;
     $$0 = 0;
     break;
    }
    case 233: {
     $779 = HEAP32[$__err>>2]|0;
     $780 = $779 | 4;
     HEAP32[$__err>>2] = $780;
     $$0 = 0;
     break;
    }
    case 235: {
     $783 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L302: do {
      if (!($783)) {
       $784 = ((($__trailing_sign$0$lcssa)) + 1|0);
       $785 = ((($__trailing_sign$0$lcssa)) + 8|0);
       $786 = ((($__trailing_sign$0$lcssa)) + 4|0);
       $__i$0 = 1;
       L304: while(1) {
        $787 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $788 = $787 & 1;
        $789 = ($788<<24>>24)==(0);
        if ($789) {
         $791 = $787&255;
         $792 = $791 >>> 1;
         $794 = $792;
        } else {
         $790 = HEAP32[$786>>2]|0;
         $794 = $790;
        }
        $793 = ($__i$0>>>0)<($794>>>0);
        if (!($793)) {
         break L302;
        }
        $795 = HEAP32[$__b>>2]|0;
        $796 = ($795|0)==(0|0);
        do {
         if ($796) {
          $810 = 0;
         } else {
          $797 = ((($795)) + 12|0);
          $798 = HEAP32[$797>>2]|0;
          $799 = ((($795)) + 16|0);
          $800 = HEAP32[$799>>2]|0;
          $801 = ($798|0)==($800|0);
          if ($801) {
           $802 = HEAP32[$795>>2]|0;
           $803 = ((($802)) + 36|0);
           $804 = HEAP32[$803>>2]|0;
           __THREW__ = 0;
           $805 = (invoke_ii($804|0,($795|0))|0);
           $806 = __THREW__; __THREW__ = 0;
           $807 = $806&1;
           if ($807) {
            label = 19;
            break L304;
           }
           $808 = ($805|0)==(-1);
           if ($808) {
            HEAP32[$__b>>2] = 0;
            $810 = 0;
            break;
           } else {
            $$pre$i$i$i = HEAP32[$__b>>2]|0;
            $810 = $$pre$i$i$i;
            break;
           }
          } else {
           $810 = $795;
          }
         }
        } while(0);
        $809 = ($810|0)==(0|0);
        $811 = HEAP32[$__e>>2]|0;
        $812 = ($811|0)==(0|0);
        do {
         if ($812) {
          label = 253;
         } else {
          $813 = ((($811)) + 12|0);
          $814 = HEAP32[$813>>2]|0;
          $815 = ((($811)) + 16|0);
          $816 = HEAP32[$815>>2]|0;
          $817 = ($814|0)==($816|0);
          if ($817) {
           $818 = HEAP32[$811>>2]|0;
           $819 = ((($818)) + 36|0);
           $820 = HEAP32[$819>>2]|0;
           __THREW__ = 0;
           $821 = (invoke_ii($820|0,($811|0))|0);
           $822 = __THREW__; __THREW__ = 0;
           $823 = $822&1;
           if ($823) {
            label = 19;
            break L304;
           }
           $824 = ($821|0)==(-1);
           if ($824) {
            HEAP32[$__e>>2] = 0;
            label = 253;
            break;
           }
          }
          if (!($809)) {
           label = 260;
           break L304;
          }
         }
        } while(0);
        if ((label|0) == 253) {
         label = 0;
         if ($809) {
          label = 260;
          break;
         }
        }
        $825 = HEAP32[$__b>>2]|0;
        $826 = ((($825)) + 12|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = ((($825)) + 16|0);
        $829 = HEAP32[$828>>2]|0;
        $830 = ($827|0)==($829|0);
        if ($830) {
         $831 = HEAP32[$825>>2]|0;
         $832 = ((($831)) + 36|0);
         $833 = HEAP32[$832>>2]|0;
         __THREW__ = 0;
         $834 = (invoke_ii($833|0,($825|0))|0);
         $835 = __THREW__; __THREW__ = 0;
         $836 = $835&1;
         if ($836) {
          label = 19;
          break;
         } else {
          $$0$i$i = $834;
         }
        } else {
         $837 = HEAP8[$827>>0]|0;
         $838 = $837&255;
         $$0$i$i = $838;
        }
        $839 = $$0$i$i&255;
        $840 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $841 = $840 & 1;
        $842 = ($841<<24>>24)==(0);
        if ($842) {
         $845 = $784;
        } else {
         $843 = HEAP32[$785>>2]|0;
         $845 = $843;
        }
        $844 = (($845) + ($__i$0)|0);
        $846 = HEAP8[$844>>0]|0;
        $847 = ($839<<24>>24)==($846<<24>>24);
        if (!($847)) {
         label = 260;
         break;
        }
        $850 = (($__i$0) + 1)|0;
        $851 = HEAP32[$__b>>2]|0;
        $852 = ((($851)) + 12|0);
        $853 = HEAP32[$852>>2]|0;
        $854 = ((($851)) + 16|0);
        $855 = HEAP32[$854>>2]|0;
        $856 = ($853|0)==($855|0);
        if ($856) {
         $857 = HEAP32[$851>>2]|0;
         $858 = ((($857)) + 40|0);
         $859 = HEAP32[$858>>2]|0;
         __THREW__ = 0;
         (invoke_ii($859|0,($851|0))|0);
         $860 = __THREW__; __THREW__ = 0;
         $861 = $860&1;
         if ($861) {
          label = 19;
          break;
         } else {
          $__i$0 = $850;
          continue;
         }
        } else {
         $862 = ((($853)) + 1|0);
         HEAP32[$852>>2] = $862;
         $__i$0 = $850;
         continue;
        }
       }
       if ((label|0) == 19) {
        $68 = ___cxa_find_matching_catch()|0;
        $69 = tempRet0;
        $lpad$phi$index = $68;$lpad$phi$index7 = $69;
        break L1;
       }
       else if ((label|0) == 260) {
        $848 = HEAP32[$__err>>2]|0;
        $849 = $848 | 4;
        HEAP32[$__err>>2] = $849;
        $$0 = 0;
        break L300;
       }
      }
     } while(0);
     $863 = HEAP32[$__gb>>2]|0;
     $864 = ($863|0)==($$lcssa313|0);
     if ($864) {
      $$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$863,$$lcssa313,$__et);
      $865 = HEAP32[$__et>>2]|0;
      $866 = ($865|0)==(0);
      if ($866) {
       $$0 = 1;
      } else {
       $867 = HEAP32[$__err>>2]|0;
       $868 = $867 | 4;
       HEAP32[$__err>>2] = $868;
       $$0 = 0;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $869 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $870 = ($869|0)==(0|0);
   if (!($870)) {
    $871 = HEAP32[$2>>2]|0;
    __THREW__ = 0;
    invoke_vi($871|0,($869|0));
    $872 = __THREW__; __THREW__ = 0;
    $873 = $872&1;
    if ($873) {
     $874 = ___cxa_find_matching_catch(0|0)|0;
     $875 = tempRet0;
     ___clang_call_terminate($874);
     // unreachable;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $82 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $83 = ($82|0)==(0|0);
 if (!($83)) {
  $84 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($84|0,($82|0));
  $85 = __THREW__; __THREW__ = 0;
  $86 = $85&1;
  if ($86) {
   $87 = ___cxa_find_matching_catch(0|0)|0;
   $88 = tempRet0;
   ___clang_call_terminate($87);
   // unreachable;
  }
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(714,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  ___cxa_throw(($0|0),(648|0),(149|0));
  // unreachable;
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$011 = 0, $$0110 = 0, $$012 = 0, $$019 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$013 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $__wbuf = sp + 32|0;
 $__wb = sp + 16|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 28|0;
 $0 = sp;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (708);
 $3 = ((($__wbuf)) + 100|0);
 __THREW__ = 0;
 $4 = (invoke_ii(494,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$011 = $34;$$019 = $35;$96 = $__wbuf;
  label = 36;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(495,($__loc|0),(7688|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if (!($9)) {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $10;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $14 = (invoke_iiiiiiiiiiii(709,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     if ($14) {
      $17 = HEAP8[$__v>>0]|0;
      $18 = $17 & 1;
      $19 = ($18<<24>>24)==(0);
      if ($19) {
       $23 = ((($__v)) + 1|0);
       HEAP8[$23>>0] = 0;
       HEAP8[$__v>>0] = 0;
      } else {
       $20 = ((($__v)) + 8|0);
       $21 = HEAP32[$20>>2]|0;
       HEAP8[$21>>0] = 0;
       $22 = ((($__v)) + 4|0);
       HEAP32[$22>>2] = 0;
      }
      $24 = HEAP8[$__neg>>0]|0;
      $25 = ($24<<24>>24)==(0);
      if (!($25)) {
       $26 = HEAP32[$7>>2]|0;
       $27 = ((($26)) + 28|0);
       $28 = HEAP32[$27>>2]|0;
       __THREW__ = 0;
       $29 = (invoke_iii($28|0,($7|0),45)|0);
       $30 = __THREW__; __THREW__ = 0;
       $31 = $30&1;
       if ($31) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(567,($__v|0),($29|0));
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if ($33) {
        break;
       }
      }
      $36 = HEAP32[$7>>2]|0;
      $37 = ((($36)) + 28|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_iii($38|0,($7|0),48)|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       break;
      }
      $42 = HEAP32[$__wb>>2]|0;
      $43 = HEAP32[$__wn>>2]|0;
      $44 = ((($43)) + -1|0);
      $45 = ($42>>>0)<($44>>>0);
      L18: do {
       if ($45) {
        $__w$013 = $42;
        while(1) {
         $46 = HEAP8[$__w$013>>0]|0;
         $47 = ($46<<24>>24)==($39<<24>>24);
         if (!($47)) {
          $__w$0$lcssa = $__w$013;
          break L18;
         }
         $48 = ((($__w$013)) + 1|0);
         $49 = ($48>>>0)<($44>>>0);
         if ($49) {
          $__w$013 = $48;
         } else {
          $__w$0$lcssa = $48;
          break;
         }
        }
       } else {
        $__w$0$lcssa = $42;
       }
      } while(0);
      __THREW__ = 0;
      (invoke_iiii(715,($__v|0),($__w$0$lcssa|0),($43|0))|0);
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      if ($51) {
       break;
      }
     }
     $52 = HEAP32[$__b>>2]|0;
     $53 = ($52|0)==(0|0);
     do {
      if ($53) {
       $67 = 0;
      } else {
       $54 = ((($52)) + 12|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = ((($52)) + 16|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = ($55|0)==($57|0);
       if ($58) {
        $59 = HEAP32[$52>>2]|0;
        $60 = ((($59)) + 36|0);
        $61 = HEAP32[$60>>2]|0;
        __THREW__ = 0;
        $62 = (invoke_ii($61|0,($52|0))|0);
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if ($64) {
         break L4;
        }
        $65 = ($62|0)==(-1);
        if ($65) {
         HEAP32[$__b>>2] = 0;
         $67 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $67 = $$pre$i$i$i;
         break;
        }
       } else {
        $67 = $52;
       }
      }
     } while(0);
     $66 = ($67|0)==(0|0);
     $68 = ($10|0)==(0);
     do {
      if ($68) {
       label = 29;
      } else {
       $69 = ((($13)) + 12|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ((($13)) + 16|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = ($70|0)==($72|0);
       if ($73) {
        $74 = $10;
        $75 = HEAP32[$74>>2]|0;
        $76 = ((($75)) + 36|0);
        $77 = HEAP32[$76>>2]|0;
        __THREW__ = 0;
        $78 = (invoke_ii($77|0,($13|0))|0);
        $79 = __THREW__; __THREW__ = 0;
        $80 = $79&1;
        if ($80) {
         break L4;
        }
        $81 = ($78|0)==(-1);
        if ($81) {
         HEAP32[$__e>>2] = 0;
         label = 29;
         break;
        }
       }
       if (!($66)) {
        label = 30;
       }
      }
     } while(0);
     if ((label|0) == 29) {
      if ($66) {
       label = 30;
      }
     }
     if ((label|0) == 30) {
      $82 = HEAP32[$__err>>2]|0;
      $83 = $82 | 2;
      HEAP32[$__err>>2] = $83;
     }
     $84 = HEAP32[$__b>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
     $85 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $86 = ($85|0)==(0|0);
     if (!($86)) {
      $87 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($87|0,($85|0));
      $88 = __THREW__; __THREW__ = 0;
      $89 = $88&1;
      if ($89) {
       $90 = ___cxa_find_matching_catch(0|0)|0;
       $91 = tempRet0;
       ___clang_call_terminate($90);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($84|0);
    }
   }
  } while(0);
  $92 = ___cxa_find_matching_catch()|0;
  $93 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $94 = ($$pre|0)==(0|0);
  if ($94) {
   $$0110 = $93;$$012 = $92;
  } else {
   $$011 = $92;$$019 = $93;$96 = $$pre;
   label = 36;
  }
 }
 if ((label|0) == 36) {
  $95 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($95|0,($96|0));
  $97 = __THREW__; __THREW__ = 0;
  $98 = $97&1;
  if ($98) {
   $99 = ___cxa_find_matching_catch(0|0)|0;
   $100 = tempRet0;
   ___clang_call_terminate($99);
   // unreachable;
  } else {
   $$0110 = $$019;$$012 = $$011;
  }
 }
 ___resumeException($$012|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 100|0;
 $1 = sp + 88|0;
 $2 = sp + 76|0;
 $3 = sp + 64|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 do {
  if ($__intl) {
   $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,7296)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 44|0);
   $13 = HEAP32[$12>>2]|0;
   FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
   $14 = HEAP32[$0>>2]|0;
   HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
   $15 = HEAP32[$10>>2]|0;
   $16 = ((($15)) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
   $18 = HEAP8[$__nsn>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    $24 = ((($__nsn)) + 1|0);
    HEAP8[$24>>0] = 0;
    HEAP8[$__nsn>>0] = 0;
   } else {
    $21 = ((($__nsn)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    HEAP8[$22>>0] = 0;
    $23 = ((($__nsn)) + 4|0);
    HEAP32[$23>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(716,($__nsn|0),0);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    $27 = ___cxa_find_matching_catch(0|0)|0;
    $28 = tempRet0;
    ___clang_call_terminate($27);
    // unreachable;
   }
   ;HEAP32[$__nsn>>2]=HEAP32[$1>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
   HEAP32[$1>>2] = 0;
   $29 = ((($1)) + 4|0);
   HEAP32[$29>>2] = 0;
   $30 = ((($1)) + 8|0);
   HEAP32[$30>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
   $31 = HEAP32[$10>>2]|0;
   $32 = ((($31)) + 28|0);
   $33 = HEAP32[$32>>2]|0;
   FUNCTION_TABLE_vii[$33 & 1023]($2,$10);
   $34 = HEAP8[$__psn>>0]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $40 = ((($__psn)) + 1|0);
    HEAP8[$40>>0] = 0;
    HEAP8[$__psn>>0] = 0;
   } else {
    $37 = ((($__psn)) + 8|0);
    $38 = HEAP32[$37>>2]|0;
    HEAP8[$38>>0] = 0;
    $39 = ((($__psn)) + 4|0);
    HEAP32[$39>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(716,($__psn|0),0);
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   if ($42) {
    $43 = ___cxa_find_matching_catch(0|0)|0;
    $44 = tempRet0;
    ___clang_call_terminate($43);
    // unreachable;
   }
   ;HEAP32[$__psn>>2]=HEAP32[$2>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
   HEAP32[$2>>2] = 0;
   $45 = ((($2)) + 4|0);
   HEAP32[$45>>2] = 0;
   $46 = ((($2)) + 8|0);
   HEAP32[$46>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
   $47 = HEAP32[$10>>2]|0;
   $48 = ((($47)) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (FUNCTION_TABLE_ii[$49 & 1023]($10)|0);
   HEAP8[$__dp>>0] = $50;
   $51 = HEAP32[$10>>2]|0;
   $52 = ((($51)) + 16|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (FUNCTION_TABLE_ii[$53 & 1023]($10)|0);
   HEAP8[$__ts>>0] = $54;
   $55 = HEAP32[$10>>2]|0;
   $56 = ((($55)) + 20|0);
   $57 = HEAP32[$56>>2]|0;
   FUNCTION_TABLE_vii[$57 & 1023]($3,$10);
   $58 = HEAP8[$__grp>>0]|0;
   $59 = $58 & 1;
   $60 = ($59<<24>>24)==(0);
   if ($60) {
    $64 = ((($__grp)) + 1|0);
    HEAP8[$64>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $61 = ((($__grp)) + 8|0);
    $62 = HEAP32[$61>>2]|0;
    HEAP8[$62>>0] = 0;
    $63 = ((($__grp)) + 4|0);
    HEAP32[$63>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(716,($__grp|0),0);
   $65 = __THREW__; __THREW__ = 0;
   $66 = $65&1;
   if ($66) {
    $67 = ___cxa_find_matching_catch(0|0)|0;
    $68 = tempRet0;
    ___clang_call_terminate($67);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$3>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
   HEAP32[$3>>2] = 0;
   $69 = ((($3)) + 4|0);
   HEAP32[$69>>2] = 0;
   $70 = ((($3)) + 8|0);
   HEAP32[$70>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   $71 = HEAP32[$10>>2]|0;
   $72 = ((($71)) + 24|0);
   $73 = HEAP32[$72>>2]|0;
   FUNCTION_TABLE_vii[$73 & 1023]($4,$10);
   $74 = HEAP8[$__sym>>0]|0;
   $75 = $74 & 1;
   $76 = ($75<<24>>24)==(0);
   if ($76) {
    $80 = ((($__sym)) + 1|0);
    HEAP8[$80>>0] = 0;
    HEAP8[$__sym>>0] = 0;
   } else {
    $77 = ((($__sym)) + 8|0);
    $78 = HEAP32[$77>>2]|0;
    HEAP8[$78>>0] = 0;
    $79 = ((($__sym)) + 4|0);
    HEAP32[$79>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(716,($__sym|0),0);
   $81 = __THREW__; __THREW__ = 0;
   $82 = $81&1;
   if ($82) {
    $83 = ___cxa_find_matching_catch(0|0)|0;
    $84 = tempRet0;
    ___clang_call_terminate($83);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$4>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
    HEAP32[$4>>2] = 0;
    $85 = ((($4)) + 4|0);
    HEAP32[$85>>2] = 0;
    $86 = ((($4)) + 8|0);
    HEAP32[$86>>2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
    $87 = HEAP32[$10>>2]|0;
    $88 = ((($87)) + 36|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (FUNCTION_TABLE_ii[$89 & 1023]($10)|0);
    $storemerge = $90;
    break;
   }
  } else {
   $91 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,7232)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ((($92)) + 44|0);
   $94 = HEAP32[$93>>2]|0;
   FUNCTION_TABLE_vii[$94 & 1023]($5,$91);
   $95 = HEAP32[$5>>2]|0;
   HEAP8[$__pat>>0]=$95&255;HEAP8[$__pat+1>>0]=($95>>8)&255;HEAP8[$__pat+2>>0]=($95>>16)&255;HEAP8[$__pat+3>>0]=$95>>24;
   $96 = HEAP32[$91>>2]|0;
   $97 = ((($96)) + 32|0);
   $98 = HEAP32[$97>>2]|0;
   FUNCTION_TABLE_vii[$98 & 1023]($6,$91);
   $99 = HEAP8[$__nsn>>0]|0;
   $100 = $99 & 1;
   $101 = ($100<<24>>24)==(0);
   if ($101) {
    $105 = ((($__nsn)) + 1|0);
    HEAP8[$105>>0] = 0;
    HEAP8[$__nsn>>0] = 0;
   } else {
    $102 = ((($__nsn)) + 8|0);
    $103 = HEAP32[$102>>2]|0;
    HEAP8[$103>>0] = 0;
    $104 = ((($__nsn)) + 4|0);
    HEAP32[$104>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(716,($__nsn|0),0);
   $106 = __THREW__; __THREW__ = 0;
   $107 = $106&1;
   if ($107) {
    $108 = ___cxa_find_matching_catch(0|0)|0;
    $109 = tempRet0;
    ___clang_call_terminate($108);
    // unreachable;
   }
   ;HEAP32[$__nsn>>2]=HEAP32[$6>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
   HEAP32[$6>>2] = 0;
   $110 = ((($6)) + 4|0);
   HEAP32[$110>>2] = 0;
   $111 = ((($6)) + 8|0);
   HEAP32[$111>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
   $112 = HEAP32[$91>>2]|0;
   $113 = ((($112)) + 28|0);
   $114 = HEAP32[$113>>2]|0;
   FUNCTION_TABLE_vii[$114 & 1023]($7,$91);
   $115 = HEAP8[$__psn>>0]|0;
   $116 = $115 & 1;
   $117 = ($116<<24>>24)==(0);
   if ($117) {
    $121 = ((($__psn)) + 1|0);
    HEAP8[$121>>0] = 0;
    HEAP8[$__psn>>0] = 0;
   } else {
    $118 = ((($__psn)) + 8|0);
    $119 = HEAP32[$118>>2]|0;
    HEAP8[$119>>0] = 0;
    $120 = ((($__psn)) + 4|0);
    HEAP32[$120>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(716,($__psn|0),0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    $124 = ___cxa_find_matching_catch(0|0)|0;
    $125 = tempRet0;
    ___clang_call_terminate($124);
    // unreachable;
   }
   ;HEAP32[$__psn>>2]=HEAP32[$7>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
   HEAP32[$7>>2] = 0;
   $126 = ((($7)) + 4|0);
   HEAP32[$126>>2] = 0;
   $127 = ((($7)) + 8|0);
   HEAP32[$127>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
   $128 = HEAP32[$91>>2]|0;
   $129 = ((($128)) + 12|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (FUNCTION_TABLE_ii[$130 & 1023]($91)|0);
   HEAP8[$__dp>>0] = $131;
   $132 = HEAP32[$91>>2]|0;
   $133 = ((($132)) + 16|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (FUNCTION_TABLE_ii[$134 & 1023]($91)|0);
   HEAP8[$__ts>>0] = $135;
   $136 = HEAP32[$91>>2]|0;
   $137 = ((($136)) + 20|0);
   $138 = HEAP32[$137>>2]|0;
   FUNCTION_TABLE_vii[$138 & 1023]($8,$91);
   $139 = HEAP8[$__grp>>0]|0;
   $140 = $139 & 1;
   $141 = ($140<<24>>24)==(0);
   if ($141) {
    $145 = ((($__grp)) + 1|0);
    HEAP8[$145>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $142 = ((($__grp)) + 8|0);
    $143 = HEAP32[$142>>2]|0;
    HEAP8[$143>>0] = 0;
    $144 = ((($__grp)) + 4|0);
    HEAP32[$144>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(716,($__grp|0),0);
   $146 = __THREW__; __THREW__ = 0;
   $147 = $146&1;
   if ($147) {
    $148 = ___cxa_find_matching_catch(0|0)|0;
    $149 = tempRet0;
    ___clang_call_terminate($148);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$8>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
   HEAP32[$8>>2] = 0;
   $150 = ((($8)) + 4|0);
   HEAP32[$150>>2] = 0;
   $151 = ((($8)) + 8|0);
   HEAP32[$151>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
   $152 = HEAP32[$91>>2]|0;
   $153 = ((($152)) + 24|0);
   $154 = HEAP32[$153>>2]|0;
   FUNCTION_TABLE_vii[$154 & 1023]($9,$91);
   $155 = HEAP8[$__sym>>0]|0;
   $156 = $155 & 1;
   $157 = ($156<<24>>24)==(0);
   if ($157) {
    $161 = ((($__sym)) + 1|0);
    HEAP8[$161>>0] = 0;
    HEAP8[$__sym>>0] = 0;
   } else {
    $158 = ((($__sym)) + 8|0);
    $159 = HEAP32[$158>>2]|0;
    HEAP8[$159>>0] = 0;
    $160 = ((($__sym)) + 4|0);
    HEAP32[$160>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(716,($__sym|0),0);
   $162 = __THREW__; __THREW__ = 0;
   $163 = $162&1;
   if ($163) {
    $164 = ___cxa_find_matching_catch(0|0)|0;
    $165 = tempRet0;
    ___clang_call_terminate($164);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$9>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
    HEAP32[$9>>2] = 0;
    $166 = ((($9)) + 4|0);
    HEAP32[$166>>2] = 0;
    $167 = ((($9)) + 8|0);
    HEAP32[$167>>2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
    $168 = HEAP32[$91>>2]|0;
    $169 = ((($168)) + 36|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = (FUNCTION_TABLE_ii[$170 & 1023]($91)|0);
    $storemerge = $171;
    break;
   }
  }
 } while(0);
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$01$i$i22 = 0, $$__ig$0 = 0, $$lcssa = 0, $$not = 0, $$not16 = 0, $$pre = 0, $$pre11 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ig$018 = 0, $__r$019 = 0;
 var $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond217 = 0, $or$cond220 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($__grouping)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0&255;
 $6 = $5 >>> 1;
 $7 = $2 ? $6 : $4;
 $8 = ($7|0)==(0);
 L1: do {
  if (!($8)) {
   $9 = ($__g|0)==($__g_end|0);
   if ($9) {
    $19 = $0;$28 = $4;
   } else {
    $10 = ((($__g_end)) + -4|0);
    $11 = ($10>>>0)>($__g>>>0);
    if ($11) {
     $$01$i$i22 = $__g;$14 = $10;
     while(1) {
      $12 = HEAP32[$$01$i$i22>>2]|0;
      $13 = HEAP32[$14>>2]|0;
      HEAP32[$$01$i$i22>>2] = $13;
      HEAP32[$14>>2] = $12;
      $15 = ((($$01$i$i22)) + 4|0);
      $16 = ((($14)) + -4|0);
      $17 = ($15>>>0)<($16>>>0);
      if ($17) {
       $$01$i$i22 = $15;$14 = $16;
      } else {
       break;
      }
     }
    }
    $$pre = HEAP8[$__grouping>>0]|0;
    $$pre11 = HEAP32[$3>>2]|0;
    $19 = $$pre;$28 = $$pre11;
   }
   $18 = $19 & 1;
   $20 = ($18<<24>>24)==(0);
   $21 = ((($__grouping)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($__grouping)) + 1|0);
   $24 = $20 ? $23 : $22;
   $25 = $19&255;
   $26 = $25 >>> 1;
   $27 = $20 ? $26 : $28;
   $29 = (($24) + ($27)|0);
   $30 = ((($__g_end)) + -4|0);
   $31 = $29;
   $32 = ($30>>>0)>($__g>>>0);
   $33 = HEAP8[$24>>0]|0;
   $$not16 = ($33<<24>>24)<(1);
   $34 = ($33<<24>>24)==(127);
   $or$cond217 = $$not16 | $34;
   L10: do {
    if ($32) {
     $36 = $33;$__ig$018 = $24;$__r$019 = $__g;$or$cond220 = $or$cond217;
     while(1) {
      if (!($or$cond220)) {
       $35 = $36 << 24 >> 24;
       $37 = HEAP32[$__r$019>>2]|0;
       $38 = ($35|0)==($37|0);
       if (!($38)) {
        break;
       }
      }
      $39 = $__ig$018;
      $40 = (($31) - ($39))|0;
      $41 = ($40|0)>(1);
      $42 = ((($__ig$018)) + 1|0);
      $$__ig$0 = $41 ? $42 : $__ig$018;
      $43 = ((($__r$019)) + 4|0);
      $44 = ($43>>>0)<($30>>>0);
      $45 = HEAP8[$$__ig$0>>0]|0;
      $$not = ($45<<24>>24)<(1);
      $46 = ($45<<24>>24)==(127);
      $or$cond2 = $$not | $46;
      if ($44) {
       $36 = $45;$__ig$018 = $$__ig$0;$__r$019 = $43;$or$cond220 = $or$cond2;
      } else {
       $$lcssa = $45;$or$cond2$lcssa = $or$cond2;
       break L10;
      }
     }
     HEAP32[$__err>>2] = 4;
     break L1;
    } else {
     $$lcssa = $33;$or$cond2$lcssa = $or$cond217;
    }
   } while(0);
   if (!($or$cond2$lcssa)) {
    $47 = $$lcssa << 24 >> 24;
    $48 = HEAP32[$30>>2]|0;
    $49 = (($48) + -1)|0;
    $50 = ($49>>>0)<($47>>>0);
    if (!($50)) {
     HEAP32[$__err>>2] = 4;
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$112 = 0, $$113 = 0, $$1210 = 0, $$1211 = 0, $$byval_copy = 0, $$phi$trans$insert$pre$phiZZZZ2D = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre14 = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$216 = 0, $__neg = 0, $__w$017 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 472|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 72|0;
 $__wb = sp + 64|0;
 $__wn = sp + 56|0;
 $__loc = sp + 52|0;
 $__neg = sp + 576|0;
 $0 = sp + 48|0;
 $__atoms = sp + 8|0;
 $__nbuf = sp + 476|0;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (708);
 $3 = ((($__wbuf)) + 400|0);
 __THREW__ = 0;
 $4 = (invoke_ii(494,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$112 = $34;$$1210 = $35;$121 = 708;$122 = $__wbuf;
  label = 47;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(495,($__loc|0),(7680|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if ($9) {
    label = 10;
   } else {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $13 = (invoke_iiiiiiiiiiii(717,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     label = 10;
    } else {
     L7: do {
      if ($13) {
       $16 = HEAP32[$7>>2]|0;
       $17 = ((($16)) + 48|0);
       $18 = HEAP32[$17>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($18|0,($7|0),(20159|0),((20169)|0),($__atoms|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if ($20) {
        label = 10;
        break L4;
       }
       $21 = HEAP32[$__wn>>2]|0;
       $22 = HEAP32[$__wb>>2]|0;
       $23 = $21;
       $24 = $22;
       $25 = (($23) - ($24))|0;
       $26 = ($25|0)>(392);
       if ($26) {
        $27 = $25 >> 2;
        $28 = (($27) + 2)|0;
        $29 = (_malloc($28)|0);
        $30 = $29;
        $31 = ($29|0)==(0|0);
        if ($31) {
         __THREW__ = 0;
         invoke_v(698);
         $32 = __THREW__; __THREW__ = 0;
         $33 = $32&1;
         if ($33) {
          $41 = $30;
         } else {
          $76 = $30;$__nc$0 = 0;
          label = 13;
         }
        } else {
         $76 = $30;$__nc$0 = $29;
         label = 13;
        }
       } else {
        $76 = 0;$__nc$0 = $__nbuf;
        label = 13;
       }
       do {
        if ((label|0) == 13) {
         $43 = HEAP8[$__neg>>0]|0;
         $44 = ($43<<24>>24)==(0);
         if ($44) {
          $__nc$1 = $__nc$0;
         } else {
          $45 = ((($__nc$0)) + 1|0);
          HEAP8[$__nc$0>>0] = 45;
          $__nc$1 = $45;
         }
         $46 = ((($__atoms)) + 40|0);
         $47 = $__atoms;
         $48 = ($22>>>0)<($21>>>0);
         if ($48) {
          $49 = ((($__atoms)) + 4|0);
          $50 = ((($49)) + 4|0);
          $51 = ((($50)) + 4|0);
          $52 = ((($51)) + 4|0);
          $53 = ((($52)) + 4|0);
          $54 = ((($53)) + 4|0);
          $55 = ((($54)) + 4|0);
          $56 = ((($55)) + 4|0);
          $57 = ((($56)) + 4|0);
          $__nc$216 = $__nc$1;$__w$017 = $22;
          while(1) {
           $58 = HEAP32[$__w$017>>2]|0;
           $59 = HEAP32[$__atoms>>2]|0;
           $60 = ($59|0)==($58|0);
           do {
            if ($60) {
             $$0$lcssa$i = $__atoms;
            } else {
             $61 = HEAP32[$49>>2]|0;
             $62 = ($61|0)==($58|0);
             if ($62) {
              $$0$lcssa$i = $49;
             } else {
              $127 = HEAP32[$50>>2]|0;
              $128 = ($127|0)==($58|0);
              if ($128) {
               $$0$lcssa$i = $50;
              } else {
               $129 = HEAP32[$51>>2]|0;
               $130 = ($129|0)==($58|0);
               if ($130) {
                $$0$lcssa$i = $51;
               } else {
                $131 = HEAP32[$52>>2]|0;
                $132 = ($131|0)==($58|0);
                if ($132) {
                 $$0$lcssa$i = $52;
                } else {
                 $133 = HEAP32[$53>>2]|0;
                 $134 = ($133|0)==($58|0);
                 if ($134) {
                  $$0$lcssa$i = $53;
                  break;
                 }
                 $135 = HEAP32[$54>>2]|0;
                 $136 = ($135|0)==($58|0);
                 if ($136) {
                  $$0$lcssa$i = $54;
                  break;
                 }
                 $137 = HEAP32[$55>>2]|0;
                 $138 = ($137|0)==($58|0);
                 if ($138) {
                  $$0$lcssa$i = $55;
                  break;
                 }
                 $139 = HEAP32[$56>>2]|0;
                 $140 = ($139|0)==($58|0);
                 if ($140) {
                  $$0$lcssa$i = $56;
                  break;
                 }
                 $141 = HEAP32[$57>>2]|0;
                 $142 = ($141|0)==($58|0);
                 $$ = $142 ? $57 : $46;
                 $$0$lcssa$i = $$;
                }
               }
              }
             }
            }
           } while(0);
           $63 = $$0$lcssa$i;
           $64 = (($63) - ($47))|0;
           $65 = $64 >> 2;
           $66 = (20159 + ($65)|0);
           $67 = HEAP8[$66>>0]|0;
           HEAP8[$__nc$216>>0] = $67;
           $68 = ((($__w$017)) + 4|0);
           $69 = ((($__nc$216)) + 1|0);
           $$pre = HEAP32[$__wn>>2]|0;
           $70 = ($68>>>0)<($$pre>>>0);
           if ($70) {
            $__nc$216 = $69;$__w$017 = $68;
           } else {
            $__nc$2$lcssa = $69;
            break;
           }
          }
         } else {
          $__nc$2$lcssa = $__nc$1;
         }
         HEAP8[$__nc$2$lcssa>>0] = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $71 = (_sscanf($__nbuf,20139,$vararg_buffer)|0);
         $72 = ($71|0)==(1);
         if (!($72)) {
          __THREW__ = 0;
          invoke_vi(710,(20143|0));
          $73 = __THREW__; __THREW__ = 0;
          $74 = $73&1;
          if ($74) {
           $41 = $76;
           break;
          }
         }
         $75 = ($76|0)==(0);
         if (!($75)) {
          $77 = $76;
          _free($77);
         }
         break L7;
        }
       } while(0);
       $38 = ___cxa_find_matching_catch()|0;
       $39 = tempRet0;
       $40 = ($41|0)==(0);
       if ($40) {
        $$0 = $38;$$01 = $39;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
        break L4;
       }
       $42 = $41;
       _free($42);
       $$0 = $38;$$01 = $39;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
       break L4;
      }
     } while(0);
     $78 = HEAP32[$__b>>2]|0;
     $79 = ($78|0)==(0|0);
     do {
      if ($79) {
       $143 = 1;
      } else {
       $80 = ((($78)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ((($78)) + 16|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = ($81|0)==($83|0);
       if ($84) {
        $85 = HEAP32[$78>>2]|0;
        $86 = ((($85)) + 36|0);
        $87 = HEAP32[$86>>2]|0;
        __THREW__ = 0;
        $88 = (invoke_ii($87|0,($78|0))|0);
        $89 = __THREW__; __THREW__ = 0;
        $90 = $89&1;
        if ($90) {
         label = 10;
         break L4;
        } else {
         $$0$i$i$i$i = $88;
        }
       } else {
        $91 = HEAP32[$81>>2]|0;
        $$0$i$i$i$i = $91;
       }
       $92 = ($$0$i$i$i$i|0)==(-1);
       if ($92) {
        HEAP32[$__b>>2] = 0;
        $143 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $143 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $93 = HEAP32[$__e>>2]|0;
     $94 = ($93|0)==(0|0);
     do {
      if ($94) {
       label = 38;
      } else {
       $95 = ((($93)) + 12|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = ((($93)) + 16|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = ($96|0)==($98|0);
       if ($99) {
        $100 = HEAP32[$93>>2]|0;
        $101 = ((($100)) + 36|0);
        $102 = HEAP32[$101>>2]|0;
        __THREW__ = 0;
        $103 = (invoke_ii($102|0,($93|0))|0);
        $104 = __THREW__; __THREW__ = 0;
        $105 = $104&1;
        if ($105) {
         label = 10;
         break L4;
        } else {
         $$0$i$i1$i$i = $103;
        }
       } else {
        $106 = HEAP32[$96>>2]|0;
        $$0$i$i1$i$i = $106;
       }
       $107 = ($$0$i$i1$i$i|0)==(-1);
       if ($107) {
        HEAP32[$__e>>2] = 0;
        label = 38;
        break;
       } else {
        if ($143) {
         break;
        } else {
         label = 40;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 38) {
      if ($143) {
       label = 40;
      }
     }
     if ((label|0) == 40) {
      $108 = HEAP32[$__err>>2]|0;
      $109 = $108 | 2;
      HEAP32[$__err>>2] = $109;
     }
     $110 = HEAP32[$__b>>2]|0;
     $111 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($111)|0);
     $112 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $113 = ($112|0)==(0|0);
     if (!($113)) {
      $114 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($114|0,($112|0));
      $115 = __THREW__; __THREW__ = 0;
      $116 = $115&1;
      if ($116) {
       $117 = ___cxa_find_matching_catch(0|0)|0;
       $118 = tempRet0;
       ___clang_call_terminate($117);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($110|0);
    }
   }
  } while(0);
  if ((label|0) == 10) {
   $36 = ___cxa_find_matching_catch()|0;
   $37 = tempRet0;
   $$0 = $36;$$01 = $37;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
  }
  $119 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($119)|0);
  $$pre6 = HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2]|0;
  HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2] = 0;
  $120 = ($$pre6|0)==(0|0);
  if ($120) {
   $$113 = $$0;$$1211 = $$01;
  } else {
   $$pre14 = HEAP32[$2>>2]|0;
   $$112 = $$0;$$1210 = $$01;$121 = $$pre14;$122 = $$pre6;
   label = 47;
  }
 }
 if ((label|0) == 47) {
  __THREW__ = 0;
  invoke_vi($121|0,($122|0));
  $123 = __THREW__; __THREW__ = 0;
  $124 = $123&1;
  if ($124) {
   $125 = ___cxa_find_matching_catch(0|0)|0;
   $126 = tempRet0;
   ___clang_call_terminate($125);
   // unreachable;
  } else {
   $$113 = $$112;$$1211 = $$1210;
  }
 }
 ___resumeException($$113|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i126 = 0, $$0$i$i$i$i158 = 0, $$0$i$i$i$i183 = 0, $$0$i$i$i$i30 = 0, $$0$i$i$i$i51 = 0, $$0$i$i$i$i92 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i132 = 0, $$0$i$i1$i$i164 = 0, $$0$i$i1$i$i189 = 0, $$0$i$i1$i$i36 = 0, $$0$i$i1$i$i57 = 0, $$0$i$i1$i$i98 = 0, $$0$i$i110 = 0, $$0$i$i119 = 0, $$0$i$i122 = 0, $$0$i$i144 = 0;
 var $$0$i$i155 = 0, $$0$i$i179 = 0, $$0$i$i45 = 0, $$0$i$i49 = 0, $$0$i$i66 = 0, $$0$i$i73 = 0, $$0$i$i78 = 0, $$0$i$i86 = 0, $$0$i$i89 = 0, $$in386 = 0, $$lcssa261 = 0, $$lcssa357 = 0, $$lcssa416 = 0, $$lcssa418 = 0, $$ph = 0, $$ph345 = 0, $$ph346 = 0, $$phi$trans$insert = 0, $$phi$trans$insert296 = 0, $$pre = 0;
 var $$pre$i$i$i = 0, $$pre$i$i$i128 = 0, $$pre$i$i$i160 = 0, $$pre$i$i$i185 = 0, $$pre$i$i$i32 = 0, $$pre$i$i$i53 = 0, $$pre$i$i$i94 = 0, $$pre$i3$i$i100282$ph = 0, $$pre$i3$i$i100282306 = 0, $$pre$i3$i$i100382 = 0, $$pre$i3$i$i134 = 0, $$pre$i3$i$i166 = 0, $$pre$i3$i$i166275 = 0, $$pre$i3$i$i166277 = 0, $$pre$i3$i$i191290 = 0, $$pre$i3$i$i191291 = 0, $$pre$i3$i$i191391 = 0, $$pre$i3$i$i59 = 0, $$pre$i3$i$i59300 = 0, $$pre$i3$i$i59302 = 0;
 var $$pre279 = 0, $$pre281 = 0, $$pre284 = 0, $$pre285 = 0, $$pre286 = 0, $$pre287 = 0, $$pre288 = 0, $$pre289 = 0, $$pre293 = 0, $$pre294 = 0, $$pre295 = 0, $$pre297 = 0, $$pre298 = 0, $$pre299 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0;
 var $__i$0 = 0, $__ng$0 = 0, $__ng$0$lcssa417 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$011 = 0, $__p$0397 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$010 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0399 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0;
 var $lpad$phi$index = 0, $lpad$phi$index8 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond7 = 0, $or$cond9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i129 = 0, $phitmp$i$i$i161 = 0, $phitmp$i$i$i186 = 0, $phitmp$i$i$i33 = 0, $phitmp$i$i$i54 = 0, $phitmp$i$i$i95 = 0, $phitmp$i4$i$i101 = 0, $phitmp$i4$i$i167 = 0, $phitmp$i4$i$i192 = 0, $phitmp$i4$i$i60 = 0, $switch = 0, $tmp$i$i103 = 0, $tmp$i$i169 = 0;
 var $tmp$i$i194 = 0, $tmp$i$i62 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 496|0;
 $__gbuf = sp + 96|0;
 $__gb = sp + 88|0;
 $__gn = sp + 80|0;
 $__ge = sp + 76|0;
 $__pat = sp + 500|0;
 $__dp = sp + 72|0;
 $__ts = sp + 68|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 32|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 8|0;
 $__fd = sp + 4|0;
 $__et = sp;
 HEAP32[$0>>2] = $__we;
 $1 = $__gbuf;
 HEAP32[$__gb>>2] = $1;
 $2 = ((($__gb)) + 4|0);
 HEAP32[$2>>2] = (708);
 HEAP32[$__gn>>2] = $__gbuf;
 $3 = ((($__gbuf)) + 400|0);
 HEAP32[$__ge>>2] = $3;
 HEAP32[$__grp>>2] = 0;
 $4 = ((($__grp)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($__grp)) + 8|0);
 HEAP32[$5>>2] = 0;
 HEAP32[$__sym>>2] = 0;
 $6 = ((($__sym)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($__sym)) + 8|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$__psn>>2] = 0;
 $8 = ((($__psn)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($__psn)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$__nsn>>2] = 0;
 $10 = ((($__nsn)) + 4|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($__nsn)) + 8|0);
 HEAP32[$11>>2] = 0;
 HEAP32[$__spaces>>2] = 0;
 $12 = ((($__spaces)) + 4|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($__spaces)) + 8|0);
 HEAP32[$13>>2] = 0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(718,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 L1: do {
  if ($15) {
   $77 = ___cxa_find_matching_catch()|0;
   $78 = tempRet0;
   $lpad$phi$index = $77;$lpad$phi$index8 = $78;
  } else {
   $16 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $16;
   $17 = ((($__psn)) + 4|0);
   $18 = ((($__nsn)) + 4|0);
   $19 = ((($__nsn)) + 8|0);
   $20 = ((($__psn)) + 8|0);
   $21 = $__flags & 512;
   $22 = ($21|0)!=(0);
   $23 = ((($__sym)) + 8|0);
   $24 = ((($__sym)) + 4|0);
   $25 = ((($__spaces)) + 4|0);
   $26 = ((($__spaces)) + 8|0);
   $27 = ((($__pat)) + 3|0);
   $28 = ((($__grp)) + 4|0);
   $863 = $__gbuf;$__p$0397 = 0;$__trailing_sign$0399 = 0;
   L4: while(1) {
    $29 = HEAP32[$__b>>2]|0;
    $30 = ($29|0)==(0|0);
    do {
     if ($30) {
      $864 = 1;
     } else {
      $31 = ((($29)) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ((($29)) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if ($35) {
       $36 = HEAP32[$29>>2]|0;
       $37 = ((($36)) + 36|0);
       $38 = HEAP32[$37>>2]|0;
       __THREW__ = 0;
       $39 = (invoke_ii($38|0,($29|0))|0);
       $40 = __THREW__; __THREW__ = 0;
       $41 = $40&1;
       if ($41) {
        label = 26;
        break L4;
       } else {
        $$0$i$i$i$i30 = $39;
       }
      } else {
       $42 = HEAP32[$32>>2]|0;
       $$0$i$i$i$i30 = $42;
      }
      $43 = ($$0$i$i$i$i30|0)==(-1);
      if ($43) {
       HEAP32[$__b>>2] = 0;
       $864 = 1;
       break;
      } else {
       $$pre$i$i$i32 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i33 = ($$pre$i$i$i32|0)==(0|0);
       $864 = $phitmp$i$i$i33;
       break;
      }
     }
    } while(0);
    $44 = HEAP32[$__e>>2]|0;
    $45 = ($44|0)==(0|0);
    do {
     if ($45) {
      label = 16;
     } else {
      $46 = ((($44)) + 12|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ((($44)) + 16|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = ($47|0)==($49|0);
      if ($50) {
       $51 = HEAP32[$44>>2]|0;
       $52 = ((($51)) + 36|0);
       $53 = HEAP32[$52>>2]|0;
       __THREW__ = 0;
       $54 = (invoke_ii($53|0,($44|0))|0);
       $55 = __THREW__; __THREW__ = 0;
       $56 = $55&1;
       if ($56) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i36 = $54;
       }
      } else {
       $57 = HEAP32[$47>>2]|0;
       $$0$i$i1$i$i36 = $57;
      }
      $58 = ($$0$i$i1$i$i36|0)==(-1);
      if ($58) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($864) {
        $865 = $44;
        break;
       } else {
        $$lcssa357 = $863;$__trailing_sign$0$lcssa = $__trailing_sign$0399;
        label = 244;
        break L4;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($864) {
      $$lcssa357 = $863;$__trailing_sign$0$lcssa = $__trailing_sign$0399;
      label = 244;
      break;
     } else {
      $865 = 0;
     }
    }
    $59 = (($__pat) + ($__p$0397)|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = $60 << 24 >> 24;
    L28: do {
     switch ($61|0) {
     case 1:  {
      $cond = ($__p$0397|0)==(3);
      if ($cond) {
       $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
      } else {
       $86 = HEAP32[$__b>>2]|0;
       $87 = ((($86)) + 12|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = ((($86)) + 16|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = ($88|0)==($90|0);
       if ($91) {
        $92 = HEAP32[$86>>2]|0;
        $93 = ((($92)) + 36|0);
        $94 = HEAP32[$93>>2]|0;
        __THREW__ = 0;
        $95 = (invoke_ii($94|0,($86|0))|0);
        $96 = __THREW__; __THREW__ = 0;
        $97 = $96&1;
        if ($97) {
         label = 26;
         break L4;
        } else {
         $$0$i$i45 = $95;
        }
       } else {
        $98 = HEAP32[$88>>2]|0;
        $$0$i$i45 = $98;
       }
       $99 = HEAP32[$__ct>>2]|0;
       $100 = ((($99)) + 12|0);
       $101 = HEAP32[$100>>2]|0;
       __THREW__ = 0;
       $102 = (invoke_iiii($101|0,($__ct|0),8192,($$0$i$i45|0))|0);
       $103 = __THREW__; __THREW__ = 0;
       $104 = $103&1;
       if ($104) {
        label = 26;
        break L4;
       }
       if (!($102)) {
        label = 42;
        break L4;
       }
       $105 = HEAP32[$__b>>2]|0;
       $106 = ((($105)) + 12|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = ((($105)) + 16|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = ($107|0)==($109|0);
       if ($110) {
        $111 = HEAP32[$105>>2]|0;
        $112 = ((($111)) + 40|0);
        $113 = HEAP32[$112>>2]|0;
        __THREW__ = 0;
        $114 = (invoke_ii($113|0,($105|0))|0);
        $115 = __THREW__; __THREW__ = 0;
        $116 = $115&1;
        if ($116) {
         label = 26;
         break L4;
        } else {
         $$0$i$i49 = $114;
        }
       } else {
        $117 = ((($107)) + 4|0);
        HEAP32[$106>>2] = $117;
        $118 = HEAP32[$107>>2]|0;
        $$0$i$i49 = $118;
       }
       __THREW__ = 0;
       invoke_vii(719,($__spaces|0),($$0$i$i49|0));
       $119 = __THREW__; __THREW__ = 0;
       $120 = $119&1;
       if ($120) {
        label = 26;
        break L4;
       } else {
        $$pre$i3$i$i59 = $865;$140 = $865;
        label = 44;
       }
      }
      break;
     }
     case 0:  {
      $123 = ($__p$0397|0)==(3);
      if ($123) {
       $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
      } else {
       $$pre$i3$i$i59 = $865;$140 = $865;
       label = 44;
      }
      break;
     }
     case 3:  {
      $190 = HEAP8[$__psn>>0]|0;
      $191 = $190 & 1;
      $192 = ($191<<24>>24)==(0);
      $193 = HEAP32[$17>>2]|0;
      $194 = $190&255;
      $195 = $194 >>> 1;
      $196 = $192 ? $195 : $193;
      $197 = HEAP8[$__nsn>>0]|0;
      $198 = $197 & 1;
      $199 = ($198<<24>>24)==(0);
      $200 = HEAP32[$18>>2]|0;
      $201 = $197&255;
      $202 = $201 >>> 1;
      $203 = $199 ? $202 : $200;
      $204 = (0 - ($203))|0;
      $205 = ($196|0)==($204|0);
      if ($205) {
       $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
      } else {
       $206 = ($196|0)==(0);
       if ($206) {
        $248 = HEAP32[$__b>>2]|0;
        $249 = ((($248)) + 12|0);
        $250 = HEAP32[$249>>2]|0;
        $251 = ((($248)) + 16|0);
        $252 = HEAP32[$251>>2]|0;
        $253 = ($250|0)==($252|0);
        if ($253) {
         $254 = HEAP32[$248>>2]|0;
         $255 = ((($254)) + 36|0);
         $256 = HEAP32[$255>>2]|0;
         __THREW__ = 0;
         $257 = (invoke_ii($256|0,($248|0))|0);
         $258 = __THREW__; __THREW__ = 0;
         $259 = $258&1;
         if ($259) {
          label = 26;
          break L4;
         }
         $$pre299 = HEAP8[$__nsn>>0]|0;
         $$0$i$i110 = $257;$262 = $$pre299;
        } else {
         $260 = HEAP32[$250>>2]|0;
         $$0$i$i110 = $260;$262 = $197;
        }
        $261 = $262 & 1;
        $263 = ($261<<24>>24)==(0);
        $264 = HEAP32[$19>>2]|0;
        $265 = $263 ? $18 : $264;
        $266 = HEAP32[$265>>2]|0;
        $267 = ($$0$i$i110|0)==($266|0);
        if (!($267)) {
         $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
         break L28;
        }
        $268 = HEAP32[$__b>>2]|0;
        $269 = ((($268)) + 12|0);
        $270 = HEAP32[$269>>2]|0;
        $271 = ((($268)) + 16|0);
        $272 = HEAP32[$271>>2]|0;
        $273 = ($270|0)==($272|0);
        if ($273) {
         $274 = HEAP32[$268>>2]|0;
         $275 = ((($274)) + 40|0);
         $276 = HEAP32[$275>>2]|0;
         __THREW__ = 0;
         (invoke_ii($276|0,($268|0))|0);
         $277 = __THREW__; __THREW__ = 0;
         $278 = $277&1;
         if ($278) {
          label = 26;
          break L4;
         }
        } else {
         $279 = ((($270)) + 4|0);
         HEAP32[$269>>2] = $279;
        }
        HEAP8[$__neg>>0] = 1;
        $280 = HEAP8[$__nsn>>0]|0;
        $281 = $280 & 1;
        $282 = ($281<<24>>24)==(0);
        $283 = HEAP32[$18>>2]|0;
        $284 = $280&255;
        $285 = $284 >>> 1;
        $286 = $282 ? $285 : $283;
        $287 = ($286>>>0)>(1);
        $__nsn$__trailing_sign$0 = $287 ? $__nsn : $__trailing_sign$0399;
        $866 = $863;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L28;
       }
       $207 = ($203|0)==(0);
       $208 = HEAP32[$__b>>2]|0;
       $209 = ((($208)) + 12|0);
       $210 = HEAP32[$209>>2]|0;
       $211 = ((($208)) + 16|0);
       $212 = HEAP32[$211>>2]|0;
       $213 = ($210|0)==($212|0);
       if ($207) {
        if ($213) {
         $214 = HEAP32[$208>>2]|0;
         $215 = ((($214)) + 36|0);
         $216 = HEAP32[$215>>2]|0;
         __THREW__ = 0;
         $217 = (invoke_ii($216|0,($208|0))|0);
         $218 = __THREW__; __THREW__ = 0;
         $219 = $218&1;
         if ($219) {
          label = 26;
          break L4;
         }
         $$pre298 = HEAP8[$__psn>>0]|0;
         $$0$i$i89 = $217;$222 = $$pre298;
        } else {
         $220 = HEAP32[$210>>2]|0;
         $$0$i$i89 = $220;$222 = $190;
        }
        $221 = $222 & 1;
        $223 = ($221<<24>>24)==(0);
        $224 = HEAP32[$20>>2]|0;
        $225 = $223 ? $17 : $224;
        $226 = HEAP32[$225>>2]|0;
        $227 = ($$0$i$i89|0)==($226|0);
        if (!($227)) {
         HEAP8[$__neg>>0] = 1;
         $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
         break L28;
        }
        $228 = HEAP32[$__b>>2]|0;
        $229 = ((($228)) + 12|0);
        $230 = HEAP32[$229>>2]|0;
        $231 = ((($228)) + 16|0);
        $232 = HEAP32[$231>>2]|0;
        $233 = ($230|0)==($232|0);
        if ($233) {
         $234 = HEAP32[$228>>2]|0;
         $235 = ((($234)) + 40|0);
         $236 = HEAP32[$235>>2]|0;
         __THREW__ = 0;
         (invoke_ii($236|0,($228|0))|0);
         $237 = __THREW__; __THREW__ = 0;
         $238 = $237&1;
         if ($238) {
          label = 26;
          break L4;
         }
        } else {
         $239 = ((($230)) + 4|0);
         HEAP32[$229>>2] = $239;
        }
        $240 = HEAP8[$__psn>>0]|0;
        $241 = $240 & 1;
        $242 = ($241<<24>>24)==(0);
        $243 = HEAP32[$17>>2]|0;
        $244 = $240&255;
        $245 = $244 >>> 1;
        $246 = $242 ? $245 : $243;
        $247 = ($246>>>0)>(1);
        $__psn$__trailing_sign$0 = $247 ? $__psn : $__trailing_sign$0399;
        $866 = $863;$__trailing_sign$1 = $__psn$__trailing_sign$0;
        break L28;
       }
       if ($213) {
        $288 = HEAP32[$208>>2]|0;
        $289 = ((($288)) + 36|0);
        $290 = HEAP32[$289>>2]|0;
        __THREW__ = 0;
        $291 = (invoke_ii($290|0,($208|0))|0);
        $292 = __THREW__; __THREW__ = 0;
        $293 = $292&1;
        if ($293) {
         label = 26;
         break L4;
        }
        $$pre293 = HEAP8[$__psn>>0]|0;
        $$pre294 = HEAP32[$__b>>2]|0;
        $$phi$trans$insert = ((($$pre294)) + 12|0);
        $$pre295 = HEAP32[$$phi$trans$insert>>2]|0;
        $$phi$trans$insert296 = ((($$pre294)) + 16|0);
        $$pre297 = HEAP32[$$phi$trans$insert296>>2]|0;
        $$0$i$i122 = $291;$296 = $$pre293;$303 = $$pre294;$305 = $$pre295;$306 = $$pre297;
       } else {
        $294 = HEAP32[$210>>2]|0;
        $$0$i$i122 = $294;$296 = $190;$303 = $208;$305 = $210;$306 = $212;
       }
       $295 = $296 & 1;
       $297 = ($295<<24>>24)==(0);
       $298 = HEAP32[$20>>2]|0;
       $299 = $297 ? $17 : $298;
       $300 = HEAP32[$299>>2]|0;
       $301 = ($$0$i$i122|0)==($300|0);
       $302 = ((($303)) + 12|0);
       $304 = ($305|0)==($306|0);
       if ($301) {
        if ($304) {
         $307 = HEAP32[$303>>2]|0;
         $308 = ((($307)) + 40|0);
         $309 = HEAP32[$308>>2]|0;
         __THREW__ = 0;
         (invoke_ii($309|0,($303|0))|0);
         $310 = __THREW__; __THREW__ = 0;
         $311 = $310&1;
         if ($311) {
          label = 26;
          break L4;
         }
        } else {
         $312 = ((($305)) + 4|0);
         HEAP32[$302>>2] = $312;
        }
        $313 = HEAP8[$__psn>>0]|0;
        $314 = $313 & 1;
        $315 = ($314<<24>>24)==(0);
        $316 = HEAP32[$17>>2]|0;
        $317 = $313&255;
        $318 = $317 >>> 1;
        $319 = $315 ? $318 : $316;
        $320 = ($319>>>0)>(1);
        $__psn$__trailing_sign$010 = $320 ? $__psn : $__trailing_sign$0399;
        $866 = $863;$__trailing_sign$1 = $__psn$__trailing_sign$010;
        break L28;
       }
       if ($304) {
        $321 = HEAP32[$303>>2]|0;
        $322 = ((($321)) + 36|0);
        $323 = HEAP32[$322>>2]|0;
        __THREW__ = 0;
        $324 = (invoke_ii($323|0,($303|0))|0);
        $325 = __THREW__; __THREW__ = 0;
        $326 = $325&1;
        if ($326) {
         label = 26;
         break L4;
        } else {
         $$0$i$i144 = $324;
        }
       } else {
        $327 = HEAP32[$305>>2]|0;
        $$0$i$i144 = $327;
       }
       $328 = HEAP8[$__nsn>>0]|0;
       $329 = $328 & 1;
       $330 = ($329<<24>>24)==(0);
       $331 = HEAP32[$19>>2]|0;
       $332 = $330 ? $18 : $331;
       $333 = HEAP32[$332>>2]|0;
       $334 = ($$0$i$i144|0)==($333|0);
       if (!($334)) {
        label = 107;
        break L4;
       }
       $335 = HEAP32[$__b>>2]|0;
       $336 = ((($335)) + 12|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ((($335)) + 16|0);
       $339 = HEAP32[$338>>2]|0;
       $340 = ($337|0)==($339|0);
       if ($340) {
        $341 = HEAP32[$335>>2]|0;
        $342 = ((($341)) + 40|0);
        $343 = HEAP32[$342>>2]|0;
        __THREW__ = 0;
        (invoke_ii($343|0,($335|0))|0);
        $344 = __THREW__; __THREW__ = 0;
        $345 = $344&1;
        if ($345) {
         label = 26;
         break L4;
        }
       } else {
        $346 = ((($337)) + 4|0);
        HEAP32[$336>>2] = $346;
       }
       HEAP8[$__neg>>0] = 1;
       $347 = HEAP8[$__nsn>>0]|0;
       $348 = $347 & 1;
       $349 = ($348<<24>>24)==(0);
       $350 = HEAP32[$18>>2]|0;
       $351 = $347&255;
       $352 = $351 >>> 1;
       $353 = $349 ? $352 : $350;
       $354 = ($353>>>0)>(1);
       $__nsn$__trailing_sign$011 = $354 ? $__nsn : $__trailing_sign$0399;
       $866 = $863;$__trailing_sign$1 = $__nsn$__trailing_sign$011;
      }
      break;
     }
     case 2:  {
      $357 = ($__trailing_sign$0399|0)!=(0|0);
      $358 = ($__p$0397>>>0)<(2);
      $or$cond = $358 | $357;
      if (!($or$cond)) {
       $359 = ($__p$0397|0)==(2);
       $360 = HEAP8[$27>>0]|0;
       $361 = ($360<<24>>24)!=(0);
       $362 = $359 & $361;
       $brmerge = $22 | $362;
       if (!($brmerge)) {
        $866 = $863;$__trailing_sign$1 = 0;
        break L28;
       }
      }
      $363 = HEAP8[$__sym>>0]|0;
      $364 = $363 & 1;
      $365 = ($364<<24>>24)==(0);
      $366 = HEAP32[$23>>2]|0;
      $367 = $365 ? $24 : $366;
      $368 = $367;
      $369 = ($__p$0397|0)==(0);
      L97: do {
       if ($369) {
        $$ph = $366;$$ph345 = $363;$$ph346 = $368;
       } else {
        $380 = (($__p$0397) + -1)|0;
        $381 = (($__pat) + ($380)|0);
        $382 = HEAP8[$381>>0]|0;
        $switch = ($382&255)<(2);
        if ($switch) {
         $383 = $363 & 1;
         $384 = ($383<<24>>24)==(0);
         $385 = HEAP32[$24>>2]|0;
         $386 = $363&255;
         $387 = $386 >>> 1;
         $388 = $384 ? $24 : $366;
         $389 = $384 ? $387 : $385;
         $390 = (($388) + ($389<<2)|0);
         $391 = ($367|0)==($390|0);
         L100: do {
          if ($391) {
           $412 = $363;$415 = $366;$418 = $368;
          } else {
           $393 = $367;$868 = $368;
           while(1) {
            $392 = HEAP32[$393>>2]|0;
            $394 = HEAP32[$__ct>>2]|0;
            $395 = ((($394)) + 12|0);
            $396 = HEAP32[$395>>2]|0;
            __THREW__ = 0;
            $397 = (invoke_iiii($396|0,($__ct|0),8192,($392|0))|0);
            $398 = __THREW__; __THREW__ = 0;
            $399 = $398&1;
            if ($399) {
             label = 23;
             break L4;
            }
            if (!($397)) {
             $$lcssa418 = $868;
             break;
            }
            $400 = ((($393)) + 4|0);
            $401 = $400;
            $$pre284 = HEAP8[$__sym>>0]|0;
            $$pre285 = HEAP32[$23>>2]|0;
            $402 = $$pre284 & 1;
            $403 = ($402<<24>>24)==(0);
            $404 = HEAP32[$24>>2]|0;
            $405 = $$pre284&255;
            $406 = $405 >>> 1;
            $407 = $403 ? $24 : $$pre285;
            $408 = $403 ? $406 : $404;
            $409 = (($407) + ($408<<2)|0);
            $410 = ($400|0)==($409|0);
            if ($410) {
             $412 = $$pre284;$415 = $$pre285;$418 = $401;
             break L100;
            } else {
             $393 = $400;$868 = $401;
            }
           }
           $$pre286 = HEAP8[$__sym>>0]|0;
           $$pre287 = HEAP32[$23>>2]|0;
           $412 = $$pre286;$415 = $$pre287;$418 = $$lcssa418;
          }
         } while(0);
         $411 = $412 & 1;
         $413 = ($411<<24>>24)==(0);
         $414 = $413 ? $24 : $415;
         $416 = $414;
         $417 = (($418) - ($416))|0;
         $419 = $417 >> 2;
         $420 = HEAP8[$__spaces>>0]|0;
         $421 = $420 & 1;
         $422 = ($421<<24>>24)==(0);
         $423 = HEAP32[$25>>2]|0;
         $424 = $420&255;
         $425 = $424 >>> 1;
         $426 = $422 ? $425 : $423;
         $427 = ($426>>>0)<($419>>>0);
         if ($427) {
          $$ph = $415;$$ph345 = $412;$$ph346 = $416;
         } else {
          $428 = HEAP32[$26>>2]|0;
          $429 = $422 ? $25 : $428;
          $430 = (($429) + ($426<<2)|0);
          $431 = ($419|0)==(0);
          if ($431) {
           $$ph = $415;$$ph345 = $412;$$ph346 = $418;
          } else {
           $$sum = (($426) - ($419))|0;
           $432 = (($429) + ($$sum<<2)|0);
           $$in386 = $414;$434 = $432;
           while(1) {
            $433 = HEAP32[$434>>2]|0;
            $435 = HEAP32[$$in386>>2]|0;
            $436 = ($433|0)==($435|0);
            if (!($436)) {
             $$ph = $415;$$ph345 = $412;$$ph346 = $416;
             break L97;
            }
            $437 = ((($434)) + 4|0);
            $438 = ((($$in386)) + 4|0);
            $439 = ($437|0)==($430|0);
            if ($439) {
             $$ph = $415;$$ph345 = $412;$$ph346 = $418;
             break;
            } else {
             $$in386 = $438;$434 = $437;
            }
           }
          }
         }
        } else {
         $$ph = $366;$$ph345 = $363;$$ph346 = $368;
        }
       }
      } while(0);
      $370 = $$ph345 & 1;
      $371 = ($370<<24>>24)==(0);
      $372 = HEAP32[$24>>2]|0;
      $373 = $$ph345&255;
      $374 = $373 >>> 1;
      $375 = $371 ? $24 : $$ph;
      $376 = $371 ? $374 : $372;
      $377 = (($375) + ($376<<2)|0);
      $378 = $$ph346;
      $379 = ($378|0)==($377|0);
      L113: do {
       if ($379) {
        $$lcssa261 = $377;
       } else {
        $$pre$i3$i$i191391 = $865;$456 = $865;$485 = $378;
        while(1) {
         $440 = HEAP32[$__b>>2]|0;
         $441 = ($440|0)==(0|0);
         do {
          if ($441) {
           $470 = 1;
          } else {
           $442 = ((($440)) + 12|0);
           $443 = HEAP32[$442>>2]|0;
           $444 = ((($440)) + 16|0);
           $445 = HEAP32[$444>>2]|0;
           $446 = ($443|0)==($445|0);
           if ($446) {
            $447 = HEAP32[$440>>2]|0;
            $448 = ((($447)) + 36|0);
            $449 = HEAP32[$448>>2]|0;
            __THREW__ = 0;
            $450 = (invoke_ii($449|0,($440|0))|0);
            $451 = __THREW__; __THREW__ = 0;
            $452 = $451&1;
            if ($452) {
             label = 22;
             break L4;
            } else {
             $$0$i$i$i$i183 = $450;
            }
           } else {
            $453 = HEAP32[$443>>2]|0;
            $$0$i$i$i$i183 = $453;
           }
           $454 = ($$0$i$i$i$i183|0)==(-1);
           if ($454) {
            HEAP32[$__b>>2] = 0;
            $470 = 1;
            break;
           } else {
            $$pre$i$i$i185 = HEAP32[$__b>>2]|0;
            $phitmp$i$i$i186 = ($$pre$i$i$i185|0)==(0|0);
            $470 = $phitmp$i$i$i186;
            break;
           }
          }
         } while(0);
         $455 = ($456|0)==(0|0);
         do {
          if ($455) {
           $$pre$i3$i$i191291 = $$pre$i3$i$i191391;
           label = 136;
          } else {
           $457 = ((($456)) + 12|0);
           $458 = HEAP32[$457>>2]|0;
           $459 = ((($456)) + 16|0);
           $460 = HEAP32[$459>>2]|0;
           $461 = ($458|0)==($460|0);
           if ($461) {
            $462 = HEAP32[$456>>2]|0;
            $463 = ((($462)) + 36|0);
            $464 = HEAP32[$463>>2]|0;
            __THREW__ = 0;
            $465 = (invoke_ii($464|0,($456|0))|0);
            $466 = __THREW__; __THREW__ = 0;
            $467 = $466&1;
            if ($467) {
             label = 22;
             break L4;
            } else {
             $$0$i$i1$i$i189 = $465;
            }
           } else {
            $468 = HEAP32[$458>>2]|0;
            $$0$i$i1$i$i189 = $468;
           }
           $469 = ($$0$i$i1$i$i189|0)==(-1);
           if ($469) {
            HEAP32[$__e>>2] = 0;
            $$pre$i3$i$i191291 = 0;
            label = 136;
            break;
           } else {
            $phitmp$i4$i$i192 = ($$pre$i3$i$i191391|0)==(0|0);
            $tmp$i$i194 = $470 ^ $phitmp$i4$i$i192;
            if ($tmp$i$i194) {
             $$pre$i3$i$i191290 = $$pre$i3$i$i191391;$869 = $$pre$i3$i$i191391;
             break;
            } else {
             $$lcssa261 = $485;
             break L113;
            }
           }
          }
         } while(0);
         if ((label|0) == 136) {
          label = 0;
          if ($470) {
           $$lcssa261 = $485;
           break L113;
          } else {
           $$pre$i3$i$i191290 = $$pre$i3$i$i191291;$869 = 0;
          }
         }
         $471 = HEAP32[$__b>>2]|0;
         $472 = ((($471)) + 12|0);
         $473 = HEAP32[$472>>2]|0;
         $474 = ((($471)) + 16|0);
         $475 = HEAP32[$474>>2]|0;
         $476 = ($473|0)==($475|0);
         if ($476) {
          $477 = HEAP32[$471>>2]|0;
          $478 = ((($477)) + 36|0);
          $479 = HEAP32[$478>>2]|0;
          __THREW__ = 0;
          $480 = (invoke_ii($479|0,($471|0))|0);
          $481 = __THREW__; __THREW__ = 0;
          $482 = $481&1;
          if ($482) {
           label = 22;
           break L4;
          } else {
           $$0$i$i179 = $480;
          }
         } else {
          $483 = HEAP32[$473>>2]|0;
          $$0$i$i179 = $483;
         }
         $484 = HEAP32[$485>>2]|0;
         $486 = ($$0$i$i179|0)==($484|0);
         if (!($486)) {
          $$lcssa261 = $485;
          break L113;
         }
         $487 = HEAP32[$__b>>2]|0;
         $488 = ((($487)) + 12|0);
         $489 = HEAP32[$488>>2]|0;
         $490 = ((($487)) + 16|0);
         $491 = HEAP32[$490>>2]|0;
         $492 = ($489|0)==($491|0);
         if ($492) {
          $493 = HEAP32[$487>>2]|0;
          $494 = ((($493)) + 40|0);
          $495 = HEAP32[$494>>2]|0;
          __THREW__ = 0;
          (invoke_ii($495|0,($487|0))|0);
          $496 = __THREW__; __THREW__ = 0;
          $497 = $496&1;
          if ($497) {
           label = 22;
           break L4;
          }
         } else {
          $498 = ((($489)) + 4|0);
          HEAP32[$488>>2] = $498;
         }
         $499 = ((($485)) + 4|0);
         $$pre288 = HEAP8[$__sym>>0]|0;
         $$pre289 = HEAP32[$23>>2]|0;
         $500 = $$pre288 & 1;
         $501 = ($500<<24>>24)==(0);
         $502 = HEAP32[$24>>2]|0;
         $503 = $$pre288&255;
         $504 = $503 >>> 1;
         $505 = $501 ? $24 : $$pre289;
         $506 = $501 ? $504 : $502;
         $507 = (($505) + ($506<<2)|0);
         $508 = ($499|0)==($507|0);
         if ($508) {
          $$lcssa261 = $507;
          break;
         } else {
          $$pre$i3$i$i191391 = $$pre$i3$i$i191290;$456 = $869;$485 = $499;
         }
        }
       }
      } while(0);
      if ($22) {
       $509 = HEAP8[$__sym>>0]|0;
       $510 = $509 & 1;
       $511 = ($510<<24>>24)==(0);
       $512 = HEAP32[$23>>2]|0;
       $513 = HEAP32[$24>>2]|0;
       $514 = $509&255;
       $515 = $514 >>> 1;
       $516 = $511 ? $24 : $512;
       $517 = $511 ? $515 : $513;
       $518 = (($516) + ($517<<2)|0);
       $519 = ($$lcssa261|0)==($518|0);
       if ($519) {
        $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
       } else {
        label = 148;
        break L4;
       }
      } else {
       $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
      }
      break;
     }
     case 4:  {
      $62 = HEAP32[$__ts>>2]|0;
      $$pre$i3$i$i166 = $865;$538 = $865;$592 = $863;$__ng$0 = 0;
      L150: while(1) {
       $522 = HEAP32[$__b>>2]|0;
       $523 = ($522|0)==(0|0);
       do {
        if ($523) {
         $552 = 1;
        } else {
         $524 = ((($522)) + 12|0);
         $525 = HEAP32[$524>>2]|0;
         $526 = ((($522)) + 16|0);
         $527 = HEAP32[$526>>2]|0;
         $528 = ($525|0)==($527|0);
         if ($528) {
          $529 = HEAP32[$522>>2]|0;
          $530 = ((($529)) + 36|0);
          $531 = HEAP32[$530>>2]|0;
          __THREW__ = 0;
          $532 = (invoke_ii($531|0,($522|0))|0);
          $533 = __THREW__; __THREW__ = 0;
          $534 = $533&1;
          if ($534) {
           label = 25;
           break L4;
          } else {
           $$0$i$i$i$i158 = $532;
          }
         } else {
          $535 = HEAP32[$525>>2]|0;
          $$0$i$i$i$i158 = $535;
         }
         $536 = ($$0$i$i$i$i158|0)==(-1);
         if ($536) {
          HEAP32[$__b>>2] = 0;
          $552 = 1;
          break;
         } else {
          $$pre$i$i$i160 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i161 = ($$pre$i$i$i160|0)==(0|0);
          $552 = $phitmp$i$i$i161;
          break;
         }
        }
       } while(0);
       $537 = ($538|0)==(0|0);
       do {
        if ($537) {
         $$pre$i3$i$i166275 = $$pre$i3$i$i166;
         label = 162;
        } else {
         $539 = ((($538)) + 12|0);
         $540 = HEAP32[$539>>2]|0;
         $541 = ((($538)) + 16|0);
         $542 = HEAP32[$541>>2]|0;
         $543 = ($540|0)==($542|0);
         if ($543) {
          $544 = HEAP32[$538>>2]|0;
          $545 = ((($544)) + 36|0);
          $546 = HEAP32[$545>>2]|0;
          __THREW__ = 0;
          $547 = (invoke_ii($546|0,($538|0))|0);
          $548 = __THREW__; __THREW__ = 0;
          $549 = $548&1;
          if ($549) {
           label = 25;
           break L4;
          } else {
           $$0$i$i1$i$i164 = $547;
          }
         } else {
          $550 = HEAP32[$540>>2]|0;
          $$0$i$i1$i$i164 = $550;
         }
         $551 = ($$0$i$i1$i$i164|0)==(-1);
         if ($551) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i166275 = 0;
          label = 162;
          break;
         } else {
          $phitmp$i4$i$i167 = ($$pre$i3$i$i166|0)==(0|0);
          $tmp$i$i169 = $552 ^ $phitmp$i4$i$i167;
          if ($tmp$i$i169) {
           $$pre$i3$i$i166277 = $$pre$i3$i$i166;$870 = $$pre$i3$i$i166;
           break;
          } else {
           $$lcssa416 = $592;$$pre$i3$i$i134 = $$pre$i3$i$i166;$__ng$0$lcssa417 = $__ng$0;
           break L150;
          }
         }
        }
       } while(0);
       if ((label|0) == 162) {
        label = 0;
        if ($552) {
         $$lcssa416 = $592;$$pre$i3$i$i134 = $$pre$i3$i$i166275;$__ng$0$lcssa417 = $__ng$0;
         break;
        } else {
         $$pre$i3$i$i166277 = $$pre$i3$i$i166275;$870 = 0;
        }
       }
       $553 = HEAP32[$__b>>2]|0;
       $554 = ((($553)) + 12|0);
       $555 = HEAP32[$554>>2]|0;
       $556 = ((($553)) + 16|0);
       $557 = HEAP32[$556>>2]|0;
       $558 = ($555|0)==($557|0);
       if ($558) {
        $559 = HEAP32[$553>>2]|0;
        $560 = ((($559)) + 36|0);
        $561 = HEAP32[$560>>2]|0;
        __THREW__ = 0;
        $562 = (invoke_ii($561|0,($553|0))|0);
        $563 = __THREW__; __THREW__ = 0;
        $564 = $563&1;
        if ($564) {
         label = 25;
         break L4;
        } else {
         $$0$i$i155 = $562;
        }
       } else {
        $565 = HEAP32[$555>>2]|0;
        $$0$i$i155 = $565;
       }
       $566 = HEAP32[$__ct>>2]|0;
       $567 = ((($566)) + 12|0);
       $568 = HEAP32[$567>>2]|0;
       __THREW__ = 0;
       $569 = (invoke_iiii($568|0,($__ct|0),2048,($$0$i$i155|0))|0);
       $570 = __THREW__; __THREW__ = 0;
       $571 = $570&1;
       if ($571) {
        label = 25;
        break L4;
       }
       if ($569) {
        $572 = HEAP32[$__wn>>2]|0;
        $573 = HEAP32[$0>>2]|0;
        $574 = ($572|0)==($573|0);
        if ($574) {
         __THREW__ = 0;
         invoke_viii(720,($__wb|0),($__wn|0),($0|0));
         $575 = __THREW__; __THREW__ = 0;
         $576 = $575&1;
         if ($576) {
          label = 25;
          break L4;
         }
         $$pre279 = HEAP32[$__wn>>2]|0;
         $578 = $$pre279;
        } else {
         $578 = $572;
        }
        $577 = ((($578)) + 4|0);
        HEAP32[$__wn>>2] = $577;
        HEAP32[$578>>2] = $$0$i$i155;
        $579 = (($__ng$0) + 1)|0;
        $871 = $592;$__ng$1 = $579;
       } else {
        $580 = HEAP8[$__grp>>0]|0;
        $581 = $580 & 1;
        $582 = ($581<<24>>24)==(0);
        $583 = HEAP32[$28>>2]|0;
        $584 = $580&255;
        $585 = $584 >>> 1;
        $586 = $582 ? $585 : $583;
        $587 = ($586|0)!=(0);
        $588 = ($__ng$0|0)!=(0);
        $or$cond7 = $588 & $587;
        $589 = ($$0$i$i155|0)==($62|0);
        $or$cond13 = $589 & $or$cond7;
        if (!($or$cond13)) {
         $$lcssa416 = $592;$$pre$i3$i$i134 = $$pre$i3$i$i166277;$__ng$0$lcssa417 = $__ng$0;
         break;
        }
        $590 = HEAP32[$__ge>>2]|0;
        $591 = ($592|0)==($590|0);
        if ($591) {
         __THREW__ = 0;
         invoke_viii(713,($__gb|0),($__gn|0),($__ge|0));
         $593 = __THREW__; __THREW__ = 0;
         $594 = $593&1;
         if ($594) {
          label = 25;
          break L4;
         }
         $$pre = HEAP32[$__gn>>2]|0;
         $596 = $$pre;
        } else {
         $596 = $592;
        }
        $595 = ((($596)) + 4|0);
        HEAP32[$__gn>>2] = $595;
        HEAP32[$596>>2] = $__ng$0;
        $871 = $595;$__ng$1 = 0;
       }
       $597 = HEAP32[$__b>>2]|0;
       $598 = ((($597)) + 12|0);
       $599 = HEAP32[$598>>2]|0;
       $600 = ((($597)) + 16|0);
       $601 = HEAP32[$600>>2]|0;
       $602 = ($599|0)==($601|0);
       if ($602) {
        $603 = HEAP32[$597>>2]|0;
        $604 = ((($603)) + 40|0);
        $605 = HEAP32[$604>>2]|0;
        __THREW__ = 0;
        (invoke_ii($605|0,($597|0))|0);
        $606 = __THREW__; __THREW__ = 0;
        $607 = $606&1;
        if ($607) {
         label = 25;
         break L4;
        } else {
         $$pre$i3$i$i166 = $$pre$i3$i$i166277;$538 = $870;$592 = $871;$__ng$0 = $__ng$1;
         continue;
        }
       } else {
        $608 = ((($599)) + 4|0);
        HEAP32[$598>>2] = $608;
        $$pre$i3$i$i166 = $$pre$i3$i$i166277;$538 = $870;$592 = $871;$__ng$0 = $__ng$1;
        continue;
       }
      }
      $609 = HEAP32[$__gb>>2]|0;
      $610 = ($609|0)!=($$lcssa416|0);
      $611 = ($__ng$0$lcssa417|0)!=(0);
      $or$cond9 = $611 & $610;
      if ($or$cond9) {
       $612 = HEAP32[$__ge>>2]|0;
       $613 = ($$lcssa416|0)==($612|0);
       if ($613) {
        __THREW__ = 0;
        invoke_viii(713,($__gb|0),($__gn|0),($__ge|0));
        $614 = __THREW__; __THREW__ = 0;
        $615 = $614&1;
        if ($615) {
         label = 26;
         break L4;
        }
        $$pre281 = HEAP32[$__gn>>2]|0;
        $617 = $$pre281;
       } else {
        $617 = $$lcssa416;
       }
       $616 = ((($617)) + 4|0);
       HEAP32[$__gn>>2] = $616;
       HEAP32[$617>>2] = $__ng$0$lcssa417;
       $872 = $616;
      } else {
       $872 = $$lcssa416;
      }
      $618 = HEAP32[$__fd>>2]|0;
      $619 = ($618|0)>(0);
      if ($619) {
       $620 = HEAP32[$__b>>2]|0;
       $621 = ($620|0)==(0|0);
       do {
        if ($621) {
         $873 = 1;
        } else {
         $622 = ((($620)) + 12|0);
         $623 = HEAP32[$622>>2]|0;
         $624 = ((($620)) + 16|0);
         $625 = HEAP32[$624>>2]|0;
         $626 = ($623|0)==($625|0);
         if ($626) {
          $627 = HEAP32[$620>>2]|0;
          $628 = ((($627)) + 36|0);
          $629 = HEAP32[$628>>2]|0;
          __THREW__ = 0;
          $630 = (invoke_ii($629|0,($620|0))|0);
          $631 = __THREW__; __THREW__ = 0;
          $632 = $631&1;
          if ($632) {
           label = 26;
           break L4;
          } else {
           $$0$i$i$i$i126 = $630;
          }
         } else {
          $633 = HEAP32[$623>>2]|0;
          $$0$i$i$i$i126 = $633;
         }
         $634 = ($$0$i$i$i$i126|0)==(-1);
         if ($634) {
          HEAP32[$__b>>2] = 0;
          $873 = 1;
          break;
         } else {
          $$pre$i$i$i128 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i129 = ($$pre$i$i$i128|0)==(0|0);
          $873 = $phitmp$i$i$i129;
          break;
         }
        }
       } while(0);
       $635 = ($$pre$i3$i$i134|0)==(0|0);
       do {
        if ($635) {
         label = 200;
        } else {
         $636 = ((($$pre$i3$i$i134)) + 12|0);
         $637 = HEAP32[$636>>2]|0;
         $638 = ((($$pre$i3$i$i134)) + 16|0);
         $639 = HEAP32[$638>>2]|0;
         $640 = ($637|0)==($639|0);
         if ($640) {
          $641 = HEAP32[$$pre$i3$i$i134>>2]|0;
          $642 = ((($641)) + 36|0);
          $643 = HEAP32[$642>>2]|0;
          __THREW__ = 0;
          $644 = (invoke_ii($643|0,($$pre$i3$i$i134|0))|0);
          $645 = __THREW__; __THREW__ = 0;
          $646 = $645&1;
          if ($646) {
           label = 26;
           break L4;
          } else {
           $$0$i$i1$i$i132 = $644;
          }
         } else {
          $647 = HEAP32[$637>>2]|0;
          $$0$i$i1$i$i132 = $647;
         }
         $648 = ($$0$i$i1$i$i132|0)==(-1);
         if ($648) {
          HEAP32[$__e>>2] = 0;
          label = 200;
          break;
         } else {
          if ($873) {
           $874 = $$pre$i3$i$i134;
           break;
          } else {
           label = 206;
           break L4;
          }
         }
        }
       } while(0);
       if ((label|0) == 200) {
        label = 0;
        if ($873) {
         label = 206;
         break L4;
        } else {
         $874 = 0;
        }
       }
       $649 = HEAP32[$__b>>2]|0;
       $650 = ((($649)) + 12|0);
       $651 = HEAP32[$650>>2]|0;
       $652 = ((($649)) + 16|0);
       $653 = HEAP32[$652>>2]|0;
       $654 = ($651|0)==($653|0);
       if ($654) {
        $655 = HEAP32[$649>>2]|0;
        $656 = ((($655)) + 36|0);
        $657 = HEAP32[$656>>2]|0;
        __THREW__ = 0;
        $658 = (invoke_ii($657|0,($649|0))|0);
        $659 = __THREW__; __THREW__ = 0;
        $660 = $659&1;
        if ($660) {
         label = 26;
         break L4;
        } else {
         $$0$i$i119 = $658;
        }
       } else {
        $661 = HEAP32[$651>>2]|0;
        $$0$i$i119 = $661;
       }
       $662 = HEAP32[$__dp>>2]|0;
       $663 = ($$0$i$i119|0)==($662|0);
       if (!($663)) {
        label = 206;
        break L4;
       }
       $666 = HEAP32[$__b>>2]|0;
       $667 = ((($666)) + 12|0);
       $668 = HEAP32[$667>>2]|0;
       $669 = ((($666)) + 16|0);
       $670 = HEAP32[$669>>2]|0;
       $671 = ($668|0)==($670|0);
       if ($671) {
        $672 = HEAP32[$666>>2]|0;
        $673 = ((($672)) + 40|0);
        $674 = HEAP32[$673>>2]|0;
        __THREW__ = 0;
        (invoke_ii($674|0,($666|0))|0);
        $675 = __THREW__; __THREW__ = 0;
        $676 = $675&1;
        if ($676) {
         label = 26;
         break L4;
        }
       } else {
        $677 = ((($668)) + 4|0);
        HEAP32[$667>>2] = $677;
       }
       $678 = ($618|0)>(0);
       if ($678) {
        $$pre$i3$i$i100382 = $874;$695 = $874;$752 = $618;
        while(1) {
         $679 = HEAP32[$__b>>2]|0;
         $680 = ($679|0)==(0|0);
         do {
          if ($680) {
           $709 = 1;
          } else {
           $681 = ((($679)) + 12|0);
           $682 = HEAP32[$681>>2]|0;
           $683 = ((($679)) + 16|0);
           $684 = HEAP32[$683>>2]|0;
           $685 = ($682|0)==($684|0);
           if ($685) {
            $686 = HEAP32[$679>>2]|0;
            $687 = ((($686)) + 36|0);
            $688 = HEAP32[$687>>2]|0;
            __THREW__ = 0;
            $689 = (invoke_ii($688|0,($679|0))|0);
            $690 = __THREW__; __THREW__ = 0;
            $691 = $690&1;
            if ($691) {
             label = 24;
             break L4;
            } else {
             $$0$i$i$i$i92 = $689;
            }
           } else {
            $692 = HEAP32[$682>>2]|0;
            $$0$i$i$i$i92 = $692;
           }
           $693 = ($$0$i$i$i$i92|0)==(-1);
           if ($693) {
            HEAP32[$__b>>2] = 0;
            $709 = 1;
            break;
           } else {
            $$pre$i$i$i94 = HEAP32[$__b>>2]|0;
            $phitmp$i$i$i95 = ($$pre$i$i$i94|0)==(0|0);
            $709 = $phitmp$i$i$i95;
            break;
           }
          }
         } while(0);
         $694 = ($695|0)==(0|0);
         do {
          if ($694) {
           $$pre$i3$i$i100282$ph = $$pre$i3$i$i100382;
           label = 224;
          } else {
           $696 = ((($695)) + 12|0);
           $697 = HEAP32[$696>>2]|0;
           $698 = ((($695)) + 16|0);
           $699 = HEAP32[$698>>2]|0;
           $700 = ($697|0)==($699|0);
           if ($700) {
            $701 = HEAP32[$695>>2]|0;
            $702 = ((($701)) + 36|0);
            $703 = HEAP32[$702>>2]|0;
            __THREW__ = 0;
            $704 = (invoke_ii($703|0,($695|0))|0);
            $705 = __THREW__; __THREW__ = 0;
            $706 = $705&1;
            if ($706) {
             label = 24;
             break L4;
            } else {
             $$0$i$i1$i$i98 = $704;
            }
           } else {
            $707 = HEAP32[$697>>2]|0;
            $$0$i$i1$i$i98 = $707;
           }
           $708 = ($$0$i$i1$i$i98|0)==(-1);
           if ($708) {
            HEAP32[$__e>>2] = 0;
            $$pre$i3$i$i100282$ph = 0;
            label = 224;
            break;
           } else {
            $phitmp$i4$i$i101 = ($$pre$i3$i$i100382|0)==(0|0);
            $tmp$i$i103 = $709 ^ $phitmp$i4$i$i101;
            if ($tmp$i$i103) {
             $$pre$i3$i$i100282306 = $$pre$i3$i$i100382;$875 = $$pre$i3$i$i100382;
             break;
            } else {
             label = 231;
             break L4;
            }
           }
          }
         } while(0);
         if ((label|0) == 224) {
          label = 0;
          if ($709) {
           label = 231;
           break L4;
          } else {
           $$pre$i3$i$i100282306 = $$pre$i3$i$i100282$ph;$875 = 0;
          }
         }
         $710 = HEAP32[$__b>>2]|0;
         $711 = ((($710)) + 12|0);
         $712 = HEAP32[$711>>2]|0;
         $713 = ((($710)) + 16|0);
         $714 = HEAP32[$713>>2]|0;
         $715 = ($712|0)==($714|0);
         if ($715) {
          $716 = HEAP32[$710>>2]|0;
          $717 = ((($716)) + 36|0);
          $718 = HEAP32[$717>>2]|0;
          __THREW__ = 0;
          $719 = (invoke_ii($718|0,($710|0))|0);
          $720 = __THREW__; __THREW__ = 0;
          $721 = $720&1;
          if ($721) {
           label = 24;
           break L4;
          } else {
           $$0$i$i86 = $719;
          }
         } else {
          $722 = HEAP32[$712>>2]|0;
          $$0$i$i86 = $722;
         }
         $723 = HEAP32[$__ct>>2]|0;
         $724 = ((($723)) + 12|0);
         $725 = HEAP32[$724>>2]|0;
         __THREW__ = 0;
         $726 = (invoke_iiii($725|0,($__ct|0),2048,($$0$i$i86|0))|0);
         $727 = __THREW__; __THREW__ = 0;
         $728 = $727&1;
         if ($728) {
          label = 24;
          break L4;
         }
         if (!($726)) {
          label = 231;
          break L4;
         }
         $731 = HEAP32[$__wn>>2]|0;
         $732 = HEAP32[$0>>2]|0;
         $733 = ($731|0)==($732|0);
         if ($733) {
          __THREW__ = 0;
          invoke_viii(720,($__wb|0),($__wn|0),($0|0));
          $734 = __THREW__; __THREW__ = 0;
          $735 = $734&1;
          if ($735) {
           label = 24;
           break L4;
          }
         }
         $736 = HEAP32[$__b>>2]|0;
         $737 = ((($736)) + 12|0);
         $738 = HEAP32[$737>>2]|0;
         $739 = ((($736)) + 16|0);
         $740 = HEAP32[$739>>2]|0;
         $741 = ($738|0)==($740|0);
         if ($741) {
          $742 = HEAP32[$736>>2]|0;
          $743 = ((($742)) + 36|0);
          $744 = HEAP32[$743>>2]|0;
          __THREW__ = 0;
          $745 = (invoke_ii($744|0,($736|0))|0);
          $746 = __THREW__; __THREW__ = 0;
          $747 = $746&1;
          if ($747) {
           label = 24;
           break L4;
          } else {
           $$0$i$i78 = $745;
          }
         } else {
          $748 = HEAP32[$738>>2]|0;
          $$0$i$i78 = $748;
         }
         $749 = HEAP32[$__wn>>2]|0;
         $750 = ((($749)) + 4|0);
         HEAP32[$__wn>>2] = $750;
         HEAP32[$749>>2] = $$0$i$i78;
         $751 = (($752) + -1)|0;
         HEAP32[$__fd>>2] = $751;
         $753 = HEAP32[$__b>>2]|0;
         $754 = ((($753)) + 12|0);
         $755 = HEAP32[$754>>2]|0;
         $756 = ((($753)) + 16|0);
         $757 = HEAP32[$756>>2]|0;
         $758 = ($755|0)==($757|0);
         if ($758) {
          $759 = HEAP32[$753>>2]|0;
          $760 = ((($759)) + 40|0);
          $761 = HEAP32[$760>>2]|0;
          __THREW__ = 0;
          (invoke_ii($761|0,($753|0))|0);
          $762 = __THREW__; __THREW__ = 0;
          $763 = $762&1;
          if ($763) {
           label = 24;
           break L4;
          }
         } else {
          $765 = ((($755)) + 4|0);
          HEAP32[$754>>2] = $765;
         }
         $764 = ($752|0)>(1);
         if ($764) {
          $$pre$i3$i$i100382 = $$pre$i3$i$i100282306;$695 = $875;$752 = $751;
         } else {
          break;
         }
        }
       }
      }
      $766 = HEAP32[$__wn>>2]|0;
      $767 = HEAP32[$__wb>>2]|0;
      $768 = ($766|0)==($767|0);
      if ($768) {
       label = 242;
       break L4;
      } else {
       $866 = $872;$__trailing_sign$1 = $__trailing_sign$0399;
      }
      break;
     }
     default: {
      $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
     }
     }
    } while(0);
    L278: do {
     if ((label|0) == 44) {
      while(1) {
       label = 0;
       $124 = HEAP32[$__b>>2]|0;
       $125 = ($124|0)==(0|0);
       do {
        if ($125) {
         $154 = 1;
        } else {
         $126 = ((($124)) + 12|0);
         $127 = HEAP32[$126>>2]|0;
         $128 = ((($124)) + 16|0);
         $129 = HEAP32[$128>>2]|0;
         $130 = ($127|0)==($129|0);
         if ($130) {
          $131 = HEAP32[$124>>2]|0;
          $132 = ((($131)) + 36|0);
          $133 = HEAP32[$132>>2]|0;
          __THREW__ = 0;
          $134 = (invoke_ii($133|0,($124|0))|0);
          $135 = __THREW__; __THREW__ = 0;
          $136 = $135&1;
          if ($136) {
           label = 21;
           break L4;
          } else {
           $$0$i$i$i$i51 = $134;
          }
         } else {
          $137 = HEAP32[$127>>2]|0;
          $$0$i$i$i$i51 = $137;
         }
         $138 = ($$0$i$i$i$i51|0)==(-1);
         if ($138) {
          HEAP32[$__b>>2] = 0;
          $154 = 1;
          break;
         } else {
          $$pre$i$i$i53 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i54 = ($$pre$i$i$i53|0)==(0|0);
          $154 = $phitmp$i$i$i54;
          break;
         }
        }
       } while(0);
       $139 = ($140|0)==(0|0);
       do {
        if ($139) {
         $$pre$i3$i$i59300 = $$pre$i3$i$i59;
         label = 57;
        } else {
         $141 = ((($140)) + 12|0);
         $142 = HEAP32[$141>>2]|0;
         $143 = ((($140)) + 16|0);
         $144 = HEAP32[$143>>2]|0;
         $145 = ($142|0)==($144|0);
         if ($145) {
          $146 = HEAP32[$140>>2]|0;
          $147 = ((($146)) + 36|0);
          $148 = HEAP32[$147>>2]|0;
          __THREW__ = 0;
          $149 = (invoke_ii($148|0,($140|0))|0);
          $150 = __THREW__; __THREW__ = 0;
          $151 = $150&1;
          if ($151) {
           label = 21;
           break L4;
          } else {
           $$0$i$i1$i$i57 = $149;
          }
         } else {
          $152 = HEAP32[$142>>2]|0;
          $$0$i$i1$i$i57 = $152;
         }
         $153 = ($$0$i$i1$i$i57|0)==(-1);
         if ($153) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i59300 = 0;
          label = 57;
          break;
         } else {
          $phitmp$i4$i$i60 = ($$pre$i3$i$i59|0)==(0|0);
          $tmp$i$i62 = $154 ^ $phitmp$i4$i$i60;
          if ($tmp$i$i62) {
           $$pre$i3$i$i59302 = $$pre$i3$i$i59;$867 = $$pre$i3$i$i59;
           break;
          } else {
           $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
           break L278;
          }
         }
        }
       } while(0);
       if ((label|0) == 57) {
        label = 0;
        if ($154) {
         $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
         break L278;
        } else {
         $$pre$i3$i$i59302 = $$pre$i3$i$i59300;$867 = 0;
        }
       }
       $155 = HEAP32[$__b>>2]|0;
       $156 = ((($155)) + 12|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = ((($155)) + 16|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($157|0)==($159|0);
       if ($160) {
        $161 = HEAP32[$155>>2]|0;
        $162 = ((($161)) + 36|0);
        $163 = HEAP32[$162>>2]|0;
        __THREW__ = 0;
        $164 = (invoke_ii($163|0,($155|0))|0);
        $165 = __THREW__; __THREW__ = 0;
        $166 = $165&1;
        if ($166) {
         label = 21;
         break L4;
        } else {
         $$0$i$i66 = $164;
        }
       } else {
        $167 = HEAP32[$157>>2]|0;
        $$0$i$i66 = $167;
       }
       $168 = HEAP32[$__ct>>2]|0;
       $169 = ((($168)) + 12|0);
       $170 = HEAP32[$169>>2]|0;
       __THREW__ = 0;
       $171 = (invoke_iiii($170|0,($__ct|0),8192,($$0$i$i66|0))|0);
       $172 = __THREW__; __THREW__ = 0;
       $173 = $172&1;
       if ($173) {
        label = 21;
        break L4;
       }
       if (!($171)) {
        $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
        break L278;
       }
       $174 = HEAP32[$__b>>2]|0;
       $175 = ((($174)) + 12|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ((($174)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($176|0)==($178|0);
       if ($179) {
        $180 = HEAP32[$174>>2]|0;
        $181 = ((($180)) + 40|0);
        $182 = HEAP32[$181>>2]|0;
        __THREW__ = 0;
        $183 = (invoke_ii($182|0,($174|0))|0);
        $184 = __THREW__; __THREW__ = 0;
        $185 = $184&1;
        if ($185) {
         label = 21;
         break L4;
        } else {
         $$0$i$i73 = $183;
        }
       } else {
        $186 = ((($176)) + 4|0);
        HEAP32[$175>>2] = $186;
        $187 = HEAP32[$176>>2]|0;
        $$0$i$i73 = $187;
       }
       __THREW__ = 0;
       invoke_vii(719,($__spaces|0),($$0$i$i73|0));
       $188 = __THREW__; __THREW__ = 0;
       $189 = $188&1;
       if ($189) {
        label = 21;
        break L4;
       } else {
        $$pre$i3$i$i59 = $$pre$i3$i$i59302;$140 = $867;
        label = 44;
       }
      }
     }
    } while(0);
    $771 = (($__p$0397) + 1)|0;
    $772 = ($771>>>0)<(4);
    if ($772) {
     $863 = $866;$__p$0397 = $771;$__trailing_sign$0399 = $__trailing_sign$1;
    } else {
     $$lcssa357 = $866;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 244;
     break;
    }
   }
   L314:    switch (label|0) {
    case 21: {
     $65 = ___cxa_find_matching_catch()|0;
     $66 = tempRet0;
     $lpad$phi$index = $65;$lpad$phi$index8 = $66;
     break L1;
     break;
    }
    case 22: {
     $67 = ___cxa_find_matching_catch()|0;
     $68 = tempRet0;
     $lpad$phi$index = $67;$lpad$phi$index8 = $68;
     break L1;
     break;
    }
    case 23: {
     $69 = ___cxa_find_matching_catch()|0;
     $70 = tempRet0;
     $lpad$phi$index = $69;$lpad$phi$index8 = $70;
     break L1;
     break;
    }
    case 24: {
     $71 = ___cxa_find_matching_catch()|0;
     $72 = tempRet0;
     $lpad$phi$index = $71;$lpad$phi$index8 = $72;
     break L1;
     break;
    }
    case 25: {
     $73 = ___cxa_find_matching_catch()|0;
     $74 = tempRet0;
     $lpad$phi$index = $73;$lpad$phi$index8 = $74;
     break L1;
     break;
    }
    case 26: {
     $75 = ___cxa_find_matching_catch()|0;
     $76 = tempRet0;
     $lpad$phi$index = $75;$lpad$phi$index8 = $76;
     break L1;
     break;
    }
    case 42: {
     $121 = HEAP32[$__err>>2]|0;
     $122 = $121 | 4;
     HEAP32[$__err>>2] = $122;
     $$0 = 0;
     break;
    }
    case 107: {
     $355 = HEAP32[$__err>>2]|0;
     $356 = $355 | 4;
     HEAP32[$__err>>2] = $356;
     $$0 = 0;
     break;
    }
    case 148: {
     $520 = HEAP32[$__err>>2]|0;
     $521 = $520 | 4;
     HEAP32[$__err>>2] = $521;
     $$0 = 0;
     break;
    }
    case 206: {
     $664 = HEAP32[$__err>>2]|0;
     $665 = $664 | 4;
     HEAP32[$__err>>2] = $665;
     $$0 = 0;
     break;
    }
    case 231: {
     $729 = HEAP32[$__err>>2]|0;
     $730 = $729 | 4;
     HEAP32[$__err>>2] = $730;
     $$0 = 0;
     break;
    }
    case 242: {
     $769 = HEAP32[$__err>>2]|0;
     $770 = $769 | 4;
     HEAP32[$__err>>2] = $770;
     $$0 = 0;
     break;
    }
    case 244: {
     $773 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L316: do {
      if (!($773)) {
       $774 = ((($__trailing_sign$0$lcssa)) + 4|0);
       $775 = ((($__trailing_sign$0$lcssa)) + 8|0);
       $__i$0 = 1;
       L318: while(1) {
        $776 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $777 = $776 & 1;
        $778 = ($777<<24>>24)==(0);
        if ($778) {
         $780 = $776&255;
         $781 = $780 >>> 1;
         $783 = $781;
        } else {
         $779 = HEAP32[$774>>2]|0;
         $783 = $779;
        }
        $782 = ($__i$0>>>0)<($783>>>0);
        if (!($782)) {
         break L316;
        }
        $784 = HEAP32[$__b>>2]|0;
        $785 = ($784|0)==(0|0);
        do {
         if ($785) {
          $876 = 1;
         } else {
          $786 = ((($784)) + 12|0);
          $787 = HEAP32[$786>>2]|0;
          $788 = ((($784)) + 16|0);
          $789 = HEAP32[$788>>2]|0;
          $790 = ($787|0)==($789|0);
          if ($790) {
           $791 = HEAP32[$784>>2]|0;
           $792 = ((($791)) + 36|0);
           $793 = HEAP32[$792>>2]|0;
           __THREW__ = 0;
           $794 = (invoke_ii($793|0,($784|0))|0);
           $795 = __THREW__; __THREW__ = 0;
           $796 = $795&1;
           if ($796) {
            label = 20;
            break L318;
           } else {
            $$0$i$i$i$i = $794;
           }
          } else {
           $797 = HEAP32[$787>>2]|0;
           $$0$i$i$i$i = $797;
          }
          $798 = ($$0$i$i$i$i|0)==(-1);
          if ($798) {
           HEAP32[$__b>>2] = 0;
           $876 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
           $876 = $phitmp$i$i$i;
           break;
          }
         }
        } while(0);
        $799 = HEAP32[$__e>>2]|0;
        $800 = ($799|0)==(0|0);
        do {
         if ($800) {
          label = 263;
         } else {
          $801 = ((($799)) + 12|0);
          $802 = HEAP32[$801>>2]|0;
          $803 = ((($799)) + 16|0);
          $804 = HEAP32[$803>>2]|0;
          $805 = ($802|0)==($804|0);
          if ($805) {
           $806 = HEAP32[$799>>2]|0;
           $807 = ((($806)) + 36|0);
           $808 = HEAP32[$807>>2]|0;
           __THREW__ = 0;
           $809 = (invoke_ii($808|0,($799|0))|0);
           $810 = __THREW__; __THREW__ = 0;
           $811 = $810&1;
           if ($811) {
            label = 20;
            break L318;
           } else {
            $$0$i$i1$i$i = $809;
           }
          } else {
           $812 = HEAP32[$802>>2]|0;
           $$0$i$i1$i$i = $812;
          }
          $813 = ($$0$i$i1$i$i|0)==(-1);
          if ($813) {
           HEAP32[$__e>>2] = 0;
           label = 263;
           break;
          } else {
           if ($876) {
            break;
           } else {
            label = 271;
            break L318;
           }
          }
         }
        } while(0);
        if ((label|0) == 263) {
         label = 0;
         if ($876) {
          label = 271;
          break;
         }
        }
        $814 = HEAP32[$__b>>2]|0;
        $815 = ((($814)) + 12|0);
        $816 = HEAP32[$815>>2]|0;
        $817 = ((($814)) + 16|0);
        $818 = HEAP32[$817>>2]|0;
        $819 = ($816|0)==($818|0);
        if ($819) {
         $820 = HEAP32[$814>>2]|0;
         $821 = ((($820)) + 36|0);
         $822 = HEAP32[$821>>2]|0;
         __THREW__ = 0;
         $823 = (invoke_ii($822|0,($814|0))|0);
         $824 = __THREW__; __THREW__ = 0;
         $825 = $824&1;
         if ($825) {
          label = 20;
          break;
         } else {
          $$0$i$i = $823;
         }
        } else {
         $826 = HEAP32[$816>>2]|0;
         $$0$i$i = $826;
        }
        $827 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $828 = $827 & 1;
        $829 = ($828<<24>>24)==(0);
        if ($829) {
         $832 = $774;
        } else {
         $830 = HEAP32[$775>>2]|0;
         $832 = $830;
        }
        $831 = (($832) + ($__i$0<<2)|0);
        $833 = HEAP32[$831>>2]|0;
        $834 = ($$0$i$i|0)==($833|0);
        if (!($834)) {
         label = 271;
         break;
        }
        $837 = (($__i$0) + 1)|0;
        $838 = HEAP32[$__b>>2]|0;
        $839 = ((($838)) + 12|0);
        $840 = HEAP32[$839>>2]|0;
        $841 = ((($838)) + 16|0);
        $842 = HEAP32[$841>>2]|0;
        $843 = ($840|0)==($842|0);
        if ($843) {
         $844 = HEAP32[$838>>2]|0;
         $845 = ((($844)) + 40|0);
         $846 = HEAP32[$845>>2]|0;
         __THREW__ = 0;
         (invoke_ii($846|0,($838|0))|0);
         $847 = __THREW__; __THREW__ = 0;
         $848 = $847&1;
         if ($848) {
          label = 20;
          break;
         } else {
          $__i$0 = $837;
          continue;
         }
        } else {
         $849 = ((($840)) + 4|0);
         HEAP32[$839>>2] = $849;
         $__i$0 = $837;
         continue;
        }
       }
       if ((label|0) == 20) {
        $63 = ___cxa_find_matching_catch()|0;
        $64 = tempRet0;
        $lpad$phi$index = $63;$lpad$phi$index8 = $64;
        break L1;
       }
       else if ((label|0) == 271) {
        $835 = HEAP32[$__err>>2]|0;
        $836 = $835 | 4;
        HEAP32[$__err>>2] = $836;
        $$0 = 0;
        break L314;
       }
      }
     } while(0);
     $850 = HEAP32[$__gb>>2]|0;
     $851 = ($850|0)==($$lcssa357|0);
     if ($851) {
      $$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$850,$$lcssa357,$__et);
      $852 = HEAP32[$__et>>2]|0;
      $853 = ($852|0)==(0);
      if ($853) {
       $$0 = 1;
      } else {
       $854 = HEAP32[$__err>>2]|0;
       $855 = $854 | 4;
       HEAP32[$__err>>2] = $855;
       $$0 = 0;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $856 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $857 = ($856|0)==(0|0);
   if (!($857)) {
    $858 = HEAP32[$2>>2]|0;
    __THREW__ = 0;
    invoke_vi($858|0,($856|0));
    $859 = __THREW__; __THREW__ = 0;
    $860 = $859&1;
    if ($860) {
     $861 = ___cxa_find_matching_catch(0|0)|0;
     $862 = tempRet0;
     ___clang_call_terminate($861);
     // unreachable;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $79 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $80 = ($79|0)==(0|0);
 if (!($80)) {
  $81 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($81|0,($79|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  if ($83) {
   $84 = ___cxa_find_matching_catch(0|0)|0;
   $85 = tempRet0;
   ___clang_call_terminate($84);
   // unreachable;
  }
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$011 = 0, $$0110 = 0, $$012 = 0, $$019 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$013 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 424|0;
 $__wbuf = sp + 24|0;
 $__wb = sp + 16|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 428|0;
 $0 = sp;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (708);
 $3 = ((($__wbuf)) + 400|0);
 __THREW__ = 0;
 $4 = (invoke_ii(494,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$011 = $33;$$019 = $34;$95 = $__wbuf;
  label = 38;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(495,($__loc|0),(7680|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if (!($9)) {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $10;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $14 = (invoke_iiiiiiiiiiii(717,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     if ($14) {
      $17 = HEAP8[$__v>>0]|0;
      $18 = $17 & 1;
      $19 = ($18<<24>>24)==(0);
      if ($19) {
       HEAP8[$__v>>0] = 0;
      } else {
       $20 = ((($__v)) + 8|0);
       $21 = HEAP32[$20>>2]|0;
       HEAP32[$21>>2] = 0;
      }
      $22 = ((($__v)) + 4|0);
      HEAP32[$22>>2] = 0;
      $23 = HEAP8[$__neg>>0]|0;
      $24 = ($23<<24>>24)==(0);
      if (!($24)) {
       $25 = HEAP32[$7>>2]|0;
       $26 = ((($25)) + 44|0);
       $27 = HEAP32[$26>>2]|0;
       __THREW__ = 0;
       $28 = (invoke_iii($27|0,($7|0),45)|0);
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(719,($__v|0),($28|0));
       $31 = __THREW__; __THREW__ = 0;
       $32 = $31&1;
       if ($32) {
        break;
       }
      }
      $35 = HEAP32[$7>>2]|0;
      $36 = ((($35)) + 44|0);
      $37 = HEAP32[$36>>2]|0;
      __THREW__ = 0;
      $38 = (invoke_iii($37|0,($7|0),48)|0);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       break;
      }
      $41 = HEAP32[$__wb>>2]|0;
      $42 = HEAP32[$__wn>>2]|0;
      $43 = ((($42)) + -4|0);
      $44 = ($41>>>0)<($43>>>0);
      L18: do {
       if ($44) {
        $__w$013 = $41;
        while(1) {
         $45 = HEAP32[$__w$013>>2]|0;
         $46 = ($45|0)==($38|0);
         if (!($46)) {
          $__w$0$lcssa = $__w$013;
          break L18;
         }
         $47 = ((($__w$013)) + 4|0);
         $48 = ($47>>>0)<($43>>>0);
         if ($48) {
          $__w$013 = $47;
         } else {
          $__w$0$lcssa = $47;
          break;
         }
        }
       } else {
        $__w$0$lcssa = $41;
       }
      } while(0);
      __THREW__ = 0;
      (invoke_iiii(721,($__v|0),($__w$0$lcssa|0),($42|0))|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       break;
      }
     }
     $51 = HEAP32[$__b>>2]|0;
     $52 = ($51|0)==(0|0);
     do {
      if ($52) {
       $100 = 1;
      } else {
       $53 = ((($51)) + 12|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ((($51)) + 16|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ($54|0)==($56|0);
       if ($57) {
        $58 = HEAP32[$51>>2]|0;
        $59 = ((($58)) + 36|0);
        $60 = HEAP32[$59>>2]|0;
        __THREW__ = 0;
        $61 = (invoke_ii($60|0,($51|0))|0);
        $62 = __THREW__; __THREW__ = 0;
        $63 = $62&1;
        if ($63) {
         break L4;
        } else {
         $$0$i$i$i$i = $61;
        }
       } else {
        $64 = HEAP32[$54>>2]|0;
        $$0$i$i$i$i = $64;
       }
       $65 = ($$0$i$i$i$i|0)==(-1);
       if ($65) {
        HEAP32[$__b>>2] = 0;
        $100 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $100 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $66 = ($10|0)==(0);
     do {
      if ($66) {
       label = 30;
      } else {
       $67 = ((($13)) + 12|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ((($13)) + 16|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ($68|0)==($70|0);
       if ($71) {
        $72 = $10;
        $73 = HEAP32[$72>>2]|0;
        $74 = ((($73)) + 36|0);
        $75 = HEAP32[$74>>2]|0;
        __THREW__ = 0;
        $76 = (invoke_ii($75|0,($13|0))|0);
        $77 = __THREW__; __THREW__ = 0;
        $78 = $77&1;
        if ($78) {
         break L4;
        } else {
         $$0$i$i1$i$i = $76;
        }
       } else {
        $79 = HEAP32[$68>>2]|0;
        $$0$i$i1$i$i = $79;
       }
       $80 = ($$0$i$i1$i$i|0)==(-1);
       if ($80) {
        HEAP32[$__e>>2] = 0;
        label = 30;
        break;
       } else {
        if ($100) {
         break;
        } else {
         label = 32;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 30) {
      if ($100) {
       label = 32;
      }
     }
     if ((label|0) == 32) {
      $81 = HEAP32[$__err>>2]|0;
      $82 = $81 | 2;
      HEAP32[$__err>>2] = $82;
     }
     $83 = HEAP32[$__b>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
     $84 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $85 = ($84|0)==(0|0);
     if (!($85)) {
      $86 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($86|0,($84|0));
      $87 = __THREW__; __THREW__ = 0;
      $88 = $87&1;
      if ($88) {
       $89 = ___cxa_find_matching_catch(0|0)|0;
       $90 = tempRet0;
       ___clang_call_terminate($89);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($83|0);
    }
   }
  } while(0);
  $91 = ___cxa_find_matching_catch()|0;
  $92 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $93 = ($$pre|0)==(0|0);
  if ($93) {
   $$0110 = $92;$$012 = $91;
  } else {
   $$011 = $91;$$019 = $92;$95 = $$pre;
   label = 38;
  }
 }
 if ((label|0) == 38) {
  $94 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($94|0,($95|0));
  $96 = __THREW__; __THREW__ = 0;
  $97 = $96&1;
  if ($97) {
   $98 = ___cxa_find_matching_catch(0|0)|0;
   $99 = tempRet0;
   ___clang_call_terminate($98);
   // unreachable;
  } else {
   $$0110 = $$019;$$012 = $$011;
  }
 }
 ___resumeException($$012|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 100|0;
 $1 = sp + 88|0;
 $2 = sp + 76|0;
 $3 = sp + 64|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 do {
  if ($__intl) {
   $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,7424)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 44|0);
   $13 = HEAP32[$12>>2]|0;
   FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
   $14 = HEAP32[$0>>2]|0;
   HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
   $15 = HEAP32[$10>>2]|0;
   $16 = ((($15)) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
   $18 = HEAP8[$__nsn>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    HEAP8[$__nsn>>0] = 0;
   } else {
    $21 = ((($__nsn)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    HEAP32[$22>>2] = 0;
   }
   $23 = ((($__nsn)) + 4|0);
   HEAP32[$23>>2] = 0;
   __THREW__ = 0;
   invoke_vii(722,($__nsn|0),0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $26 = ___cxa_find_matching_catch(0|0)|0;
    $27 = tempRet0;
    ___clang_call_terminate($26);
    // unreachable;
   }
   ;HEAP32[$__nsn>>2]=HEAP32[$1>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
   HEAP32[$1>>2] = 0;
   $28 = ((($1)) + 4|0);
   HEAP32[$28>>2] = 0;
   $29 = ((($1)) + 8|0);
   HEAP32[$29>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
   $30 = HEAP32[$10>>2]|0;
   $31 = ((($30)) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   FUNCTION_TABLE_vii[$32 & 1023]($2,$10);
   $33 = HEAP8[$__psn>>0]|0;
   $34 = $33 & 1;
   $35 = ($34<<24>>24)==(0);
   if ($35) {
    HEAP8[$__psn>>0] = 0;
   } else {
    $36 = ((($__psn)) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    HEAP32[$37>>2] = 0;
   }
   $38 = ((($__psn)) + 4|0);
   HEAP32[$38>>2] = 0;
   __THREW__ = 0;
   invoke_vii(722,($__psn|0),0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    $41 = ___cxa_find_matching_catch(0|0)|0;
    $42 = tempRet0;
    ___clang_call_terminate($41);
    // unreachable;
   }
   ;HEAP32[$__psn>>2]=HEAP32[$2>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
   HEAP32[$2>>2] = 0;
   $43 = ((($2)) + 4|0);
   HEAP32[$43>>2] = 0;
   $44 = ((($2)) + 8|0);
   HEAP32[$44>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($2);
   $45 = HEAP32[$10>>2]|0;
   $46 = ((($45)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_ii[$47 & 1023]($10)|0);
   HEAP32[$__dp>>2] = $48;
   $49 = HEAP32[$10>>2]|0;
   $50 = ((($49)) + 16|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (FUNCTION_TABLE_ii[$51 & 1023]($10)|0);
   HEAP32[$__ts>>2] = $52;
   $53 = HEAP32[$10>>2]|0;
   $54 = ((($53)) + 20|0);
   $55 = HEAP32[$54>>2]|0;
   FUNCTION_TABLE_vii[$55 & 1023]($3,$10);
   $56 = HEAP8[$__grp>>0]|0;
   $57 = $56 & 1;
   $58 = ($57<<24>>24)==(0);
   if ($58) {
    $62 = ((($__grp)) + 1|0);
    HEAP8[$62>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $59 = ((($__grp)) + 8|0);
    $60 = HEAP32[$59>>2]|0;
    HEAP8[$60>>0] = 0;
    $61 = ((($__grp)) + 4|0);
    HEAP32[$61>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(716,($__grp|0),0);
   $63 = __THREW__; __THREW__ = 0;
   $64 = $63&1;
   if ($64) {
    $65 = ___cxa_find_matching_catch(0|0)|0;
    $66 = tempRet0;
    ___clang_call_terminate($65);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$3>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
   HEAP32[$3>>2] = 0;
   $67 = ((($3)) + 4|0);
   HEAP32[$67>>2] = 0;
   $68 = ((($3)) + 8|0);
   HEAP32[$68>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   $69 = HEAP32[$10>>2]|0;
   $70 = ((($69)) + 24|0);
   $71 = HEAP32[$70>>2]|0;
   FUNCTION_TABLE_vii[$71 & 1023]($4,$10);
   $72 = HEAP8[$__sym>>0]|0;
   $73 = $72 & 1;
   $74 = ($73<<24>>24)==(0);
   if ($74) {
    HEAP8[$__sym>>0] = 0;
   } else {
    $75 = ((($__sym)) + 8|0);
    $76 = HEAP32[$75>>2]|0;
    HEAP32[$76>>2] = 0;
   }
   $77 = ((($__sym)) + 4|0);
   HEAP32[$77>>2] = 0;
   __THREW__ = 0;
   invoke_vii(722,($__sym|0),0);
   $78 = __THREW__; __THREW__ = 0;
   $79 = $78&1;
   if ($79) {
    $80 = ___cxa_find_matching_catch(0|0)|0;
    $81 = tempRet0;
    ___clang_call_terminate($80);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$4>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
    HEAP32[$4>>2] = 0;
    $82 = ((($4)) + 4|0);
    HEAP32[$82>>2] = 0;
    $83 = ((($4)) + 8|0);
    HEAP32[$83>>2] = 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($4);
    $84 = HEAP32[$10>>2]|0;
    $85 = ((($84)) + 36|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (FUNCTION_TABLE_ii[$86 & 1023]($10)|0);
    $storemerge = $87;
    break;
   }
  } else {
   $88 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,7360)|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ((($89)) + 44|0);
   $91 = HEAP32[$90>>2]|0;
   FUNCTION_TABLE_vii[$91 & 1023]($5,$88);
   $92 = HEAP32[$5>>2]|0;
   HEAP8[$__pat>>0]=$92&255;HEAP8[$__pat+1>>0]=($92>>8)&255;HEAP8[$__pat+2>>0]=($92>>16)&255;HEAP8[$__pat+3>>0]=$92>>24;
   $93 = HEAP32[$88>>2]|0;
   $94 = ((($93)) + 32|0);
   $95 = HEAP32[$94>>2]|0;
   FUNCTION_TABLE_vii[$95 & 1023]($6,$88);
   $96 = HEAP8[$__nsn>>0]|0;
   $97 = $96 & 1;
   $98 = ($97<<24>>24)==(0);
   if ($98) {
    HEAP8[$__nsn>>0] = 0;
   } else {
    $99 = ((($__nsn)) + 8|0);
    $100 = HEAP32[$99>>2]|0;
    HEAP32[$100>>2] = 0;
   }
   $101 = ((($__nsn)) + 4|0);
   HEAP32[$101>>2] = 0;
   __THREW__ = 0;
   invoke_vii(722,($__nsn|0),0);
   $102 = __THREW__; __THREW__ = 0;
   $103 = $102&1;
   if ($103) {
    $104 = ___cxa_find_matching_catch(0|0)|0;
    $105 = tempRet0;
    ___clang_call_terminate($104);
    // unreachable;
   }
   ;HEAP32[$__nsn>>2]=HEAP32[$6>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
   HEAP32[$6>>2] = 0;
   $106 = ((($6)) + 4|0);
   HEAP32[$106>>2] = 0;
   $107 = ((($6)) + 8|0);
   HEAP32[$107>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
   $108 = HEAP32[$88>>2]|0;
   $109 = ((($108)) + 28|0);
   $110 = HEAP32[$109>>2]|0;
   FUNCTION_TABLE_vii[$110 & 1023]($7,$88);
   $111 = HEAP8[$__psn>>0]|0;
   $112 = $111 & 1;
   $113 = ($112<<24>>24)==(0);
   if ($113) {
    HEAP8[$__psn>>0] = 0;
   } else {
    $114 = ((($__psn)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    HEAP32[$115>>2] = 0;
   }
   $116 = ((($__psn)) + 4|0);
   HEAP32[$116>>2] = 0;
   __THREW__ = 0;
   invoke_vii(722,($__psn|0),0);
   $117 = __THREW__; __THREW__ = 0;
   $118 = $117&1;
   if ($118) {
    $119 = ___cxa_find_matching_catch(0|0)|0;
    $120 = tempRet0;
    ___clang_call_terminate($119);
    // unreachable;
   }
   ;HEAP32[$__psn>>2]=HEAP32[$7>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
   HEAP32[$7>>2] = 0;
   $121 = ((($7)) + 4|0);
   HEAP32[$121>>2] = 0;
   $122 = ((($7)) + 8|0);
   HEAP32[$122>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
   $123 = HEAP32[$88>>2]|0;
   $124 = ((($123)) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (FUNCTION_TABLE_ii[$125 & 1023]($88)|0);
   HEAP32[$__dp>>2] = $126;
   $127 = HEAP32[$88>>2]|0;
   $128 = ((($127)) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (FUNCTION_TABLE_ii[$129 & 1023]($88)|0);
   HEAP32[$__ts>>2] = $130;
   $131 = HEAP32[$88>>2]|0;
   $132 = ((($131)) + 20|0);
   $133 = HEAP32[$132>>2]|0;
   FUNCTION_TABLE_vii[$133 & 1023]($8,$88);
   $134 = HEAP8[$__grp>>0]|0;
   $135 = $134 & 1;
   $136 = ($135<<24>>24)==(0);
   if ($136) {
    $140 = ((($__grp)) + 1|0);
    HEAP8[$140>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $137 = ((($__grp)) + 8|0);
    $138 = HEAP32[$137>>2]|0;
    HEAP8[$138>>0] = 0;
    $139 = ((($__grp)) + 4|0);
    HEAP32[$139>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(716,($__grp|0),0);
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   if ($142) {
    $143 = ___cxa_find_matching_catch(0|0)|0;
    $144 = tempRet0;
    ___clang_call_terminate($143);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$8>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
   HEAP32[$8>>2] = 0;
   $145 = ((($8)) + 4|0);
   HEAP32[$145>>2] = 0;
   $146 = ((($8)) + 8|0);
   HEAP32[$146>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
   $147 = HEAP32[$88>>2]|0;
   $148 = ((($147)) + 24|0);
   $149 = HEAP32[$148>>2]|0;
   FUNCTION_TABLE_vii[$149 & 1023]($9,$88);
   $150 = HEAP8[$__sym>>0]|0;
   $151 = $150 & 1;
   $152 = ($151<<24>>24)==(0);
   if ($152) {
    HEAP8[$__sym>>0] = 0;
   } else {
    $153 = ((($__sym)) + 8|0);
    $154 = HEAP32[$153>>2]|0;
    HEAP32[$154>>2] = 0;
   }
   $155 = ((($__sym)) + 4|0);
   HEAP32[$155>>2] = 0;
   __THREW__ = 0;
   invoke_vii(722,($__sym|0),0);
   $156 = __THREW__; __THREW__ = 0;
   $157 = $156&1;
   if ($157) {
    $158 = ___cxa_find_matching_catch(0|0)|0;
    $159 = tempRet0;
    ___clang_call_terminate($158);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$9>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
    HEAP32[$9>>2] = 0;
    $160 = ((($9)) + 4|0);
    HEAP32[$160>>2] = 0;
    $161 = ((($9)) + 8|0);
    HEAP32[$161>>2] = 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9);
    $162 = HEAP32[$88>>2]|0;
    $163 = ((($162)) + 36|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = (FUNCTION_TABLE_ii[$164 & 1023]($88)|0);
    $storemerge = $165;
    break;
   }
  }
 } while(0);
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($this,$__s,$__intl,$__iob,$__fl,$__units) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pre = 0, $$pre20 = 0, $$pre20$pre = 0, $$pre22 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0;
 var $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 76|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 288|0;
 $__bb = sp + 72|0;
 $__digits = sp + 188|0;
 $__loc = sp + 68|0;
 $__pat = sp + 184|0;
 $__dp = sp + 181|0;
 $__ts = sp + 180|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__sn = sp + 32|0;
 $__fd = sp + 28|0;
 $__mbuf = sp + 80|0;
 $__mi = sp + 24|0;
 $__me = sp + 20|0;
 $0 = sp + 16|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[$vararg_buffer>>3] = $__units;
 $1 = (_snprintf($__buf,100,20170,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(692)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $137 = 0;$138 = 0;
    label = 7;
   } else {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer1>>3] = $__units;
    $6 = (invoke_iiiii(697,($__bb|0),($3|0),(20170|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $137 = 0;$138 = 0;
     label = 7;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(698);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       $137 = 0;$138 = 0;
       label = 7;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $16 = $$pre;
     } else {
      $16 = $9;
     }
     $15 = $16;
     $17 = (_malloc($6)|0);
     $18 = $17;
     $19 = ($17|0)==(0|0);
     if ($19) {
      __THREW__ = 0;
      invoke_v(698);
      $20 = __THREW__; __THREW__ = 0;
      $21 = $20&1;
      if ($21) {
       $137 = $15;$138 = $18;
       label = 7;
      } else {
       $125 = $18;$128 = $15;$__db$0 = 0;$__n$0 = $6;
       label = 10;
      }
     } else {
      $125 = $18;$128 = $15;$__db$0 = $17;$__n$0 = $6;
      label = 10;
     }
    }
   }
  } else {
   $125 = 0;$128 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  __THREW__ = 0;
  $22 = (invoke_ii(494,($__iob|0))|0);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $137 = $128;$138 = $125;
   label = 7;
  } else {
   HEAP32[$__loc>>2] = $22;
   __THREW__ = 0;
   $25 = (invoke_iii(495,($__loc|0),(7688|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    label = 22;
   } else {
    $28 = HEAP32[$__bb>>2]|0;
    $29 = (($28) + ($__n$0)|0);
    $30 = HEAP32[$25>>2]|0;
    $31 = ((($30)) + 32|0);
    $32 = HEAP32[$31>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($32|0,($25|0),($28|0),($29|0),($__db$0|0))|0);
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if ($34) {
     label = 22;
    } else {
     $35 = ($__n$0|0)==(0);
     if ($35) {
      $45 = 0;
     } else {
      $36 = HEAP32[$__bb>>2]|0;
      $37 = HEAP8[$36>>0]|0;
      $38 = ($37<<24>>24)==(45);
      $45 = $38;
     }
     HEAP32[$__grp>>2] = 0;
     $39 = ((($__grp)) + 4|0);
     HEAP32[$39>>2] = 0;
     $40 = ((($__grp)) + 8|0);
     HEAP32[$40>>2] = 0;
     HEAP32[$__sym>>2] = 0;
     $41 = ((($__sym)) + 4|0);
     HEAP32[$41>>2] = 0;
     $42 = ((($__sym)) + 8|0);
     HEAP32[$42>>2] = 0;
     HEAP32[$__sn>>2] = 0;
     $43 = ((($__sn)) + 4|0);
     HEAP32[$43>>2] = 0;
     $44 = ((($__sn)) + 8|0);
     HEAP32[$44>>2] = 0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(723,($__intl|0),($45|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if ($47) {
      $100 = ___cxa_find_matching_catch()|0;
      $101 = tempRet0;
      $$0 = $100;$$01 = $101;$$pre20 = $22;
     } else {
      $48 = HEAP32[$__fd>>2]|0;
      $49 = ($__n$0|0)>($48|0);
      if ($49) {
       $50 = (($__n$0) - ($48))|0;
       $51 = $50 << 1;
       $52 = HEAP8[$__sn>>0]|0;
       $53 = $52 & 1;
       $54 = ($53<<24>>24)==(0);
       $55 = ((($__sn)) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = $52&255;
       $58 = $57 >>> 1;
       $59 = $54 ? $58 : $56;
       $60 = HEAP8[$__sym>>0]|0;
       $61 = $60 & 1;
       $62 = ($61<<24>>24)==(0);
       $63 = ((($__sym)) + 4|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = $60&255;
       $66 = $65 >>> 1;
       $67 = $62 ? $66 : $64;
       $68 = $51 | 1;
       $69 = (($68) + ($48))|0;
       $70 = (($69) + ($59))|0;
       $71 = (($70) + ($67))|0;
       $92 = $71;
      } else {
       $72 = HEAP8[$__sn>>0]|0;
       $73 = $72 & 1;
       $74 = ($73<<24>>24)==(0);
       $75 = ((($__sn)) + 4|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = $72&255;
       $78 = $77 >>> 1;
       $79 = $74 ? $78 : $76;
       $80 = HEAP8[$__sym>>0]|0;
       $81 = $80 & 1;
       $82 = ($81<<24>>24)==(0);
       $83 = ((($__sym)) + 4|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = $80&255;
       $86 = $85 >>> 1;
       $87 = $82 ? $86 : $84;
       $88 = (($48) + 2)|0;
       $89 = (($88) + ($79))|0;
       $90 = (($89) + ($87))|0;
       $92 = $90;
      }
      $91 = ($92>>>0)>(100);
      if ($91) {
       $93 = (_malloc($92)|0);
       $94 = $93;
       $95 = ($93|0)==(0|0);
       if ($95) {
        __THREW__ = 0;
        invoke_v(698);
        $96 = __THREW__; __THREW__ = 0;
        $97 = $96&1;
        if ($97) {
         $105 = $94;
        } else {
         $121 = $94;$__mb$0 = 0;
         label = 26;
        }
       } else {
        $121 = $94;$__mb$0 = $93;
        label = 26;
       }
      } else {
       $121 = 0;$__mb$0 = $__mbuf;
       label = 26;
      }
      if ((label|0) == 26) {
       $107 = ((($__iob)) + 4|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (($__db$0) + ($__n$0)|0);
       $110 = HEAP8[$__dp>>0]|0;
       $111 = HEAP8[$__ts>>0]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(724,($__mb$0|0),($__mi|0),($__me|0),($108|0),($__db$0|0),($109|0),($25|0),($45|0),($__pat|0),($110|0),($111|0),($__grp|0),($__sym|0),($__sn|0),($48|0));
       $112 = __THREW__; __THREW__ = 0;
       $113 = $112&1;
       if ($113) {
        $105 = $121;
       } else {
        $114 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $114;
        $115 = HEAP32[$__mi>>2]|0;
        $116 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
        $117 = (invoke_iiiiiii(540,($$byval_copy|0),($__mb$0|0),($115|0),($116|0),($__iob|0),($__fl|0))|0);
        $118 = __THREW__; __THREW__ = 0;
        $119 = $118&1;
        if ($119) {
         $105 = $121;
        } else {
         $120 = ($121|0)==(0);
         if ($120) {
          $123 = $22;
         } else {
          $122 = $121;
          _free($122);
          $$pre22 = HEAP32[$__loc>>2]|0;
          $123 = $$pre22;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
         (__ZNSt3__114__shared_count16__release_sharedEv($123)|0);
         $124 = ($125|0)==(0);
         if (!($124)) {
          $126 = $125;
          _free($126);
         }
         $127 = ($128|0)==(0);
         if (!($127)) {
          $129 = $128;
          _free($129);
         }
         STACKTOP = sp;return ($117|0);
        }
       }
      }
      $102 = ___cxa_find_matching_catch()|0;
      $103 = tempRet0;
      $104 = ($105|0)==(0);
      if ($104) {
       $$0 = $102;$$01 = $103;$$pre20 = $22;
      } else {
       $106 = $105;
       _free($106);
       $$pre20$pre = HEAP32[$__loc>>2]|0;
       $$0 = $102;$$01 = $103;$$pre20 = $$pre20$pre;
      }
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
     $$1 = $$0;$$12 = $$01;$130 = $$pre20;
    }
   }
   if ((label|0) == 22) {
    $98 = ___cxa_find_matching_catch()|0;
    $99 = tempRet0;
    $$1 = $98;$$12 = $99;$130 = $22;
   }
   (__ZNSt3__114__shared_count16__release_sharedEv($130)|0);
   $$2 = $$1;$$23 = $$12;$132 = $125;$135 = $128;
  }
 }
 if ((label|0) == 7) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $$2 = $13;$$23 = $14;$132 = $138;$135 = $137;
 }
 $131 = ($132|0)==(0);
 if (!($131)) {
  $133 = $132;
  _free($133);
 }
 $134 = ($135|0)==(0);
 if (!($134)) {
  $136 = $135;
  _free($136);
 }
 ___resumeException($$2|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$pre$phi39Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 108|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 do {
  if ($__intl) {
   $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,7296)|0);
   $13 = HEAP32[$12>>2]|0;
   do {
    if ($__neg) {
     $14 = ((($13)) + 44|0);
     $15 = HEAP32[$14>>2]|0;
     FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
     $16 = HEAP32[$0>>2]|0;
     HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
     $17 = HEAP32[$12>>2]|0;
     $18 = ((($17)) + 32|0);
     $19 = HEAP32[$18>>2]|0;
     FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
     $20 = HEAP8[$__sn>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      $26 = ((($__sn)) + 1|0);
      HEAP8[$26>>0] = 0;
      HEAP8[$__sn>>0] = 0;
     } else {
      $23 = ((($__sn)) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      HEAP8[$24>>0] = 0;
      $25 = ((($__sn)) + 4|0);
      HEAP32[$25>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(716,($__sn|0),0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $29 = ___cxa_find_matching_catch(0|0)|0;
      $30 = tempRet0;
      ___clang_call_terminate($29);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$1>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
      HEAP32[$1>>2] = 0;
      $31 = ((($1)) + 4|0);
      HEAP32[$31>>2] = 0;
      $32 = ((($1)) + 8|0);
      HEAP32[$32>>2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
      $$pre$phiZ2D = $12;
      break;
     }
    } else {
     $33 = ((($13)) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     FUNCTION_TABLE_vii[$34 & 1023]($2,$12);
     $35 = HEAP32[$2>>2]|0;
     HEAP8[$__pat>>0]=$35&255;HEAP8[$__pat+1>>0]=($35>>8)&255;HEAP8[$__pat+2>>0]=($35>>16)&255;HEAP8[$__pat+3>>0]=$35>>24;
     $36 = HEAP32[$12>>2]|0;
     $37 = ((($36)) + 28|0);
     $38 = HEAP32[$37>>2]|0;
     FUNCTION_TABLE_vii[$38 & 1023]($3,$12);
     $39 = HEAP8[$__sn>>0]|0;
     $40 = $39 & 1;
     $41 = ($40<<24>>24)==(0);
     if ($41) {
      $45 = ((($__sn)) + 1|0);
      HEAP8[$45>>0] = 0;
      HEAP8[$__sn>>0] = 0;
     } else {
      $42 = ((($__sn)) + 8|0);
      $43 = HEAP32[$42>>2]|0;
      HEAP8[$43>>0] = 0;
      $44 = ((($__sn)) + 4|0);
      HEAP32[$44>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(716,($__sn|0),0);
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if ($47) {
      $48 = ___cxa_find_matching_catch(0|0)|0;
      $49 = tempRet0;
      ___clang_call_terminate($48);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$3>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
      HEAP32[$3>>2] = 0;
      $50 = ((($3)) + 4|0);
      HEAP32[$50>>2] = 0;
      $51 = ((($3)) + 8|0);
      HEAP32[$51>>2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
      $$pre$phiZ2D = $12;
      break;
     }
    }
   } while(0);
   $52 = HEAP32[$12>>2]|0;
   $53 = ((($52)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (FUNCTION_TABLE_ii[$54 & 1023]($12)|0);
   HEAP8[$__dp>>0] = $55;
   $56 = HEAP32[$12>>2]|0;
   $57 = ((($56)) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (FUNCTION_TABLE_ii[$58 & 1023]($12)|0);
   HEAP8[$__ts>>0] = $59;
   $60 = HEAP32[$$pre$phiZ2D>>2]|0;
   $61 = ((($60)) + 20|0);
   $62 = HEAP32[$61>>2]|0;
   FUNCTION_TABLE_vii[$62 & 1023]($4,$12);
   $63 = HEAP8[$__grp>>0]|0;
   $64 = $63 & 1;
   $65 = ($64<<24>>24)==(0);
   if ($65) {
    $69 = ((($__grp)) + 1|0);
    HEAP8[$69>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $66 = ((($__grp)) + 8|0);
    $67 = HEAP32[$66>>2]|0;
    HEAP8[$67>>0] = 0;
    $68 = ((($__grp)) + 4|0);
    HEAP32[$68>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(716,($__grp|0),0);
   $70 = __THREW__; __THREW__ = 0;
   $71 = $70&1;
   if ($71) {
    $72 = ___cxa_find_matching_catch(0|0)|0;
    $73 = tempRet0;
    ___clang_call_terminate($72);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$4>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
   HEAP32[$4>>2] = 0;
   $74 = ((($4)) + 4|0);
   HEAP32[$74>>2] = 0;
   $75 = ((($4)) + 8|0);
   HEAP32[$75>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
   $76 = HEAP32[$$pre$phiZ2D>>2]|0;
   $77 = ((($76)) + 24|0);
   $78 = HEAP32[$77>>2]|0;
   FUNCTION_TABLE_vii[$78 & 1023]($5,$12);
   $79 = HEAP8[$__sym>>0]|0;
   $80 = $79 & 1;
   $81 = ($80<<24>>24)==(0);
   if ($81) {
    $85 = ((($__sym)) + 1|0);
    HEAP8[$85>>0] = 0;
    HEAP8[$__sym>>0] = 0;
   } else {
    $82 = ((($__sym)) + 8|0);
    $83 = HEAP32[$82>>2]|0;
    HEAP8[$83>>0] = 0;
    $84 = ((($__sym)) + 4|0);
    HEAP32[$84>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(716,($__sym|0),0);
   $86 = __THREW__; __THREW__ = 0;
   $87 = $86&1;
   if ($87) {
    $88 = ___cxa_find_matching_catch(0|0)|0;
    $89 = tempRet0;
    ___clang_call_terminate($88);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$5>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
    HEAP32[$5>>2] = 0;
    $90 = ((($5)) + 4|0);
    HEAP32[$90>>2] = 0;
    $91 = ((($5)) + 8|0);
    HEAP32[$91>>2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
    $92 = HEAP32[$12>>2]|0;
    $93 = ((($92)) + 36|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (FUNCTION_TABLE_ii[$94 & 1023]($12)|0);
    $storemerge = $95;
    break;
   }
  } else {
   $96 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,7232)|0);
   $97 = HEAP32[$96>>2]|0;
   do {
    if ($__neg) {
     $98 = ((($97)) + 44|0);
     $99 = HEAP32[$98>>2]|0;
     FUNCTION_TABLE_vii[$99 & 1023]($6,$96);
     $100 = HEAP32[$6>>2]|0;
     HEAP8[$__pat>>0]=$100&255;HEAP8[$__pat+1>>0]=($100>>8)&255;HEAP8[$__pat+2>>0]=($100>>16)&255;HEAP8[$__pat+3>>0]=$100>>24;
     $101 = HEAP32[$96>>2]|0;
     $102 = ((($101)) + 32|0);
     $103 = HEAP32[$102>>2]|0;
     FUNCTION_TABLE_vii[$103 & 1023]($7,$96);
     $104 = HEAP8[$__sn>>0]|0;
     $105 = $104 & 1;
     $106 = ($105<<24>>24)==(0);
     if ($106) {
      $110 = ((($__sn)) + 1|0);
      HEAP8[$110>>0] = 0;
      HEAP8[$__sn>>0] = 0;
     } else {
      $107 = ((($__sn)) + 8|0);
      $108 = HEAP32[$107>>2]|0;
      HEAP8[$108>>0] = 0;
      $109 = ((($__sn)) + 4|0);
      HEAP32[$109>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(716,($__sn|0),0);
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     if ($112) {
      $113 = ___cxa_find_matching_catch(0|0)|0;
      $114 = tempRet0;
      ___clang_call_terminate($113);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$7>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
      HEAP32[$7>>2] = 0;
      $115 = ((($7)) + 4|0);
      HEAP32[$115>>2] = 0;
      $116 = ((($7)) + 8|0);
      HEAP32[$116>>2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
      $$pre$phi39Z2D = $96;
      break;
     }
    } else {
     $117 = ((($97)) + 40|0);
     $118 = HEAP32[$117>>2]|0;
     FUNCTION_TABLE_vii[$118 & 1023]($8,$96);
     $119 = HEAP32[$8>>2]|0;
     HEAP8[$__pat>>0]=$119&255;HEAP8[$__pat+1>>0]=($119>>8)&255;HEAP8[$__pat+2>>0]=($119>>16)&255;HEAP8[$__pat+3>>0]=$119>>24;
     $120 = HEAP32[$96>>2]|0;
     $121 = ((($120)) + 28|0);
     $122 = HEAP32[$121>>2]|0;
     FUNCTION_TABLE_vii[$122 & 1023]($9,$96);
     $123 = HEAP8[$__sn>>0]|0;
     $124 = $123 & 1;
     $125 = ($124<<24>>24)==(0);
     if ($125) {
      $129 = ((($__sn)) + 1|0);
      HEAP8[$129>>0] = 0;
      HEAP8[$__sn>>0] = 0;
     } else {
      $126 = ((($__sn)) + 8|0);
      $127 = HEAP32[$126>>2]|0;
      HEAP8[$127>>0] = 0;
      $128 = ((($__sn)) + 4|0);
      HEAP32[$128>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(716,($__sn|0),0);
     $130 = __THREW__; __THREW__ = 0;
     $131 = $130&1;
     if ($131) {
      $132 = ___cxa_find_matching_catch(0|0)|0;
      $133 = tempRet0;
      ___clang_call_terminate($132);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$9>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
      HEAP32[$9>>2] = 0;
      $134 = ((($9)) + 4|0);
      HEAP32[$134>>2] = 0;
      $135 = ((($9)) + 8|0);
      HEAP32[$135>>2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      $$pre$phi39Z2D = $96;
      break;
     }
    }
   } while(0);
   $136 = HEAP32[$96>>2]|0;
   $137 = ((($136)) + 12|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (FUNCTION_TABLE_ii[$138 & 1023]($96)|0);
   HEAP8[$__dp>>0] = $139;
   $140 = HEAP32[$96>>2]|0;
   $141 = ((($140)) + 16|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (FUNCTION_TABLE_ii[$142 & 1023]($96)|0);
   HEAP8[$__ts>>0] = $143;
   $144 = HEAP32[$$pre$phi39Z2D>>2]|0;
   $145 = ((($144)) + 20|0);
   $146 = HEAP32[$145>>2]|0;
   FUNCTION_TABLE_vii[$146 & 1023]($10,$96);
   $147 = HEAP8[$__grp>>0]|0;
   $148 = $147 & 1;
   $149 = ($148<<24>>24)==(0);
   if ($149) {
    $153 = ((($__grp)) + 1|0);
    HEAP8[$153>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $150 = ((($__grp)) + 8|0);
    $151 = HEAP32[$150>>2]|0;
    HEAP8[$151>>0] = 0;
    $152 = ((($__grp)) + 4|0);
    HEAP32[$152>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(716,($__grp|0),0);
   $154 = __THREW__; __THREW__ = 0;
   $155 = $154&1;
   if ($155) {
    $156 = ___cxa_find_matching_catch(0|0)|0;
    $157 = tempRet0;
    ___clang_call_terminate($156);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$10>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
   HEAP32[$10>>2] = 0;
   $158 = ((($10)) + 4|0);
   HEAP32[$158>>2] = 0;
   $159 = ((($10)) + 8|0);
   HEAP32[$159>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
   $160 = HEAP32[$$pre$phi39Z2D>>2]|0;
   $161 = ((($160)) + 24|0);
   $162 = HEAP32[$161>>2]|0;
   FUNCTION_TABLE_vii[$162 & 1023]($11,$96);
   $163 = HEAP8[$__sym>>0]|0;
   $164 = $163 & 1;
   $165 = ($164<<24>>24)==(0);
   if ($165) {
    $169 = ((($__sym)) + 1|0);
    HEAP8[$169>>0] = 0;
    HEAP8[$__sym>>0] = 0;
   } else {
    $166 = ((($__sym)) + 8|0);
    $167 = HEAP32[$166>>2]|0;
    HEAP8[$167>>0] = 0;
    $168 = ((($__sym)) + 4|0);
    HEAP32[$168>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(716,($__sym|0),0);
   $170 = __THREW__; __THREW__ = 0;
   $171 = $170&1;
   if ($171) {
    $172 = ___cxa_find_matching_catch(0|0)|0;
    $173 = tempRet0;
    ___clang_call_terminate($172);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$11>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
    HEAP32[$11>>2] = 0;
    $174 = ((($11)) + 4|0);
    HEAP32[$174>>2] = 0;
    $175 = ((($11)) + 8|0);
    HEAP32[$175>>2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
    $176 = HEAP32[$96>>2]|0;
    $177 = ((($176)) + 36|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = (FUNCTION_TABLE_ii[$178 & 1023]($96)|0);
    $storemerge = $179;
    break;
   }
  }
 } while(0);
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$ = 0, $$$0 = 0, $$$027 = 0, $$0$i$i$lcssa = 0, $$0$i$i35 = 0, $$0$i$i9$lcssa = 0, $$0$i$i958 = 0, $$01$i$i56 = 0, $$062 = 0, $$2 = 0, $$lcssa = 0, $$lcssa34 = 0, $$op = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa26 = 0, $__d$036 = 0, $__d$142 = 0, $__d$2 = 0, $__d$351 = 0, $__f$043 = 0, $__f$146 = 0;
 var $__gl$0$ph = 0, $__gl$054 = 0, $__gl$1 = 0, $__ig$053 = 0, $__ig$1 = 0, $__ng$052 = 0, $__ng$1 = 0, $__p$061 = 0, $exitcond = 0, $isascii1$i = 0, $or$cond = 0, $scevgep$sum = 0, $scevgep29 = 0, $umax28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = ((($__sn)) + 4|0);
 $1 = ((($__sn)) + 8|0);
 $2 = ((($__sn)) + 1|0);
 $3 = ((($__sym)) + 4|0);
 $4 = $__flags & 512;
 $5 = ($4|0)==(0);
 $6 = ((($__sym)) + 8|0);
 $7 = ((($__sym)) + 1|0);
 $8 = ((($__ct)) + 8|0);
 $9 = ($__fd|0)>(0);
 $10 = ((($__grp)) + 4|0);
 $11 = ((($__grp)) + 8|0);
 $12 = ((($__grp)) + 1|0);
 $13 = (($__fd) + 1)|0;
 $14 = (-2 - ($__fd))|0;
 $15 = ($__fd|0)<(0);
 $$op = $__fd ^ -1;
 $16 = $15 ? $$op : -1;
 $17 = (($14) - ($16))|0;
 $18 = ($__fd|0)>(0);
 $$062 = $__db;$__p$061 = 0;
 while(1) {
  $19 = (($__pat) + ($__p$061)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  switch ($21|0) {
  case 0:  {
   $22 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $22;
   $$2 = $$062;
   break;
  }
  case 1:  {
   $23 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $23;
   $24 = HEAP32[$__ct>>2]|0;
   $25 = ((($24)) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (FUNCTION_TABLE_iii[$26 & 1023]($__ct,32)|0);
   $28 = HEAP32[$__me>>2]|0;
   $29 = ((($28)) + 1|0);
   HEAP32[$__me>>2] = $29;
   HEAP8[$28>>0] = $27;
   $$2 = $$062;
   break;
  }
  case 3:  {
   $30 = HEAP8[$__sn>>0]|0;
   $31 = $30 & 1;
   $32 = ($31<<24>>24)==(0);
   $33 = HEAP32[$0>>2]|0;
   $34 = $30&255;
   $35 = $34 >>> 1;
   $36 = $32 ? $35 : $33;
   $37 = ($36|0)==(0);
   if ($37) {
    $$2 = $$062;
   } else {
    $38 = HEAP32[$1>>2]|0;
    $39 = $32 ? $2 : $38;
    $40 = HEAP8[$39>>0]|0;
    $41 = HEAP32[$__me>>2]|0;
    $42 = ((($41)) + 1|0);
    HEAP32[$__me>>2] = $42;
    HEAP8[$41>>0] = $40;
    $$2 = $$062;
   }
   break;
  }
  case 2:  {
   $43 = HEAP8[$__sym>>0]|0;
   $44 = $43 & 1;
   $45 = ($44<<24>>24)==(0);
   $46 = HEAP32[$3>>2]|0;
   $47 = $43&255;
   $48 = $47 >>> 1;
   $49 = $45 ? $48 : $46;
   $50 = ($49|0)==(0);
   $or$cond = $5 | $50;
   if ($or$cond) {
    $$2 = $$062;
   } else {
    $51 = HEAP32[$6>>2]|0;
    $52 = $45 ? $7 : $51;
    $53 = (($52) + ($49)|0);
    $54 = HEAP32[$__me>>2]|0;
    $55 = ($49|0)==(0);
    if ($55) {
     $$0$i$i9$lcssa = $54;
    } else {
     $$0$i$i958 = $54;$57 = $52;
     while(1) {
      $56 = HEAP8[$57>>0]|0;
      HEAP8[$$0$i$i958>>0] = $56;
      $58 = ((($57)) + 1|0);
      $59 = ((($$0$i$i958)) + 1|0);
      $60 = ($58|0)==($53|0);
      if ($60) {
       $$0$i$i9$lcssa = $59;
       break;
      } else {
       $$0$i$i958 = $59;$57 = $58;
      }
     }
    }
    HEAP32[$__me>>2] = $$0$i$i9$lcssa;
    $$2 = $$062;
   }
   break;
  }
  case 4:  {
   $61 = HEAP32[$__me>>2]|0;
   $62 = ((($$062)) + 1|0);
   $$$0 = $__neg ? $62 : $$062;
   $$$027 = $$$0;
   $63 = HEAP32[$8>>2]|0;
   $64 = ($$$0>>>0)<($__de>>>0);
   L15: do {
    if ($64) {
     $__d$036 = $$$0;
     while(1) {
      $65 = HEAP8[$__d$036>>0]|0;
      $isascii1$i = ($65<<24>>24)>(-1);
      if (!($isascii1$i)) {
       $__d$0$lcssa = $__d$036;
       break L15;
      }
      $66 = $65 << 24 >> 24;
      $67 = (($63) + ($66<<1)|0);
      $68 = HEAP16[$67>>1]|0;
      $69 = $68 & 2048;
      $70 = ($69<<16>>16)==(0);
      if ($70) {
       $__d$0$lcssa = $__d$036;
       break L15;
      }
      $71 = ((($__d$036)) + 1|0);
      $72 = ($71>>>0)<($__de>>>0);
      if ($72) {
       $__d$036 = $71;
      } else {
       $__d$0$lcssa = $71;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   $__d$0$lcssa26 = $__d$0$lcssa;
   if ($9) {
    $73 = (-2 - ($__d$0$lcssa26))|0;
    $74 = ($__d$0$lcssa26>>>0)>($$$027>>>0);
    $75 = $74 ? $$$027 : $__d$0$lcssa26;
    $76 = $75 ^ -1;
    $77 = (($73) - ($76))|0;
    $78 = ($17>>>0)>($77>>>0);
    $umax28 = $78 ? $17 : $77;
    $79 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    $80 = $79 & $18;
    if ($80) {
     $__d$142 = $__d$0$lcssa;$__f$043 = $__fd;
     while(1) {
      $81 = ((($__d$142)) + -1|0);
      $82 = HEAP8[$81>>0]|0;
      $83 = HEAP32[$__me>>2]|0;
      $84 = ((($83)) + 1|0);
      HEAP32[$__me>>2] = $84;
      HEAP8[$83>>0] = $82;
      $85 = (($__f$043) + -1)|0;
      $86 = ($81>>>0)>($$$0>>>0);
      $87 = ($__f$043|0)>(1);
      $88 = $86 & $87;
      if ($88) {
       $__d$142 = $81;$__f$043 = $85;
      } else {
       $$lcssa = $87;
       break;
      }
     }
    } else {
     $$lcssa = $18;
    }
    $89 = (($13) + ($umax28))|0;
    $scevgep$sum = (($umax28) + 1)|0;
    $scevgep29 = (($__d$0$lcssa) + ($scevgep$sum)|0);
    if ($$lcssa) {
     $90 = HEAP32[$__ct>>2]|0;
     $91 = ((($90)) + 28|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = (FUNCTION_TABLE_iii[$92 & 1023]($__ct,48)|0);
     $97 = $93;
    } else {
     $97 = 0;
    }
    $94 = ($89|0)>(0);
    $95 = HEAP32[$__me>>2]|0;
    $96 = ((($95)) + 1|0);
    HEAP32[$__me>>2] = $96;
    if ($94) {
     $98 = $95;$__f$146 = $89;
     while(1) {
      HEAP8[$98>>0] = $97;
      $99 = (($__f$146) + -1)|0;
      $100 = ($__f$146|0)>(1);
      $101 = HEAP32[$__me>>2]|0;
      $102 = ((($101)) + 1|0);
      HEAP32[$__me>>2] = $102;
      if ($100) {
       $98 = $101;$__f$146 = $99;
      } else {
       $$lcssa34 = $101;
       break;
      }
     }
    } else {
     $$lcssa34 = $95;
    }
    HEAP8[$$lcssa34>>0] = $__dp;
    $__d$2 = $scevgep29;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $103 = ($__d$2|0)==($$$0|0);
   if ($103) {
    $104 = HEAP32[$__ct>>2]|0;
    $105 = ((($104)) + 28|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = (FUNCTION_TABLE_iii[$106 & 1023]($__ct,48)|0);
    $108 = HEAP32[$__me>>2]|0;
    $109 = ((($108)) + 1|0);
    HEAP32[$__me>>2] = $109;
    HEAP8[$108>>0] = $107;
   } else {
    $110 = HEAP8[$__grp>>0]|0;
    $111 = $110 & 1;
    $112 = ($111<<24>>24)==(0);
    $113 = HEAP32[$10>>2]|0;
    $114 = $110&255;
    $115 = $114 >>> 1;
    $116 = $112 ? $115 : $113;
    $117 = ($116|0)==(0);
    if ($117) {
     $__gl$0$ph = -1;
    } else {
     $118 = HEAP32[$11>>2]|0;
     $119 = $112 ? $12 : $118;
     $120 = HEAP8[$119>>0]|0;
     $121 = $120 << 24 >> 24;
     $__gl$0$ph = $121;
    }
    $122 = ($__d$2|0)==($$$0|0);
    if (!($122)) {
     $__d$351 = $__d$2;$__gl$054 = $__gl$0$ph;$__ig$053 = 0;$__ng$052 = 0;
     while(1) {
      $123 = ($__ng$052|0)==($__gl$054|0);
      if ($123) {
       $124 = HEAP32[$__me>>2]|0;
       $125 = ((($124)) + 1|0);
       HEAP32[$__me>>2] = $125;
       HEAP8[$124>>0] = $__ts;
       $126 = (($__ig$053) + 1)|0;
       $127 = HEAP8[$__grp>>0]|0;
       $128 = $127 & 1;
       $129 = ($128<<24>>24)==(0);
       $130 = HEAP32[$10>>2]|0;
       $131 = $127&255;
       $132 = $131 >>> 1;
       $133 = $129 ? $132 : $130;
       $134 = ($126>>>0)<($133>>>0);
       if ($134) {
        $135 = HEAP32[$11>>2]|0;
        $136 = $129 ? $12 : $135;
        $137 = (($136) + ($126)|0);
        $138 = HEAP8[$137>>0]|0;
        $139 = ($138<<24>>24)==(127);
        $140 = $138 << 24 >> 24;
        $$ = $139 ? -1 : $140;
        $__gl$1 = $$;$__ig$1 = $126;$__ng$1 = 0;
       } else {
        $__gl$1 = $__ng$052;$__ig$1 = $126;$__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$054;$__ig$1 = $__ig$053;$__ng$1 = $__ng$052;
      }
      $141 = ((($__d$351)) + -1|0);
      $142 = HEAP8[$141>>0]|0;
      $143 = HEAP32[$__me>>2]|0;
      $144 = ((($143)) + 1|0);
      HEAP32[$__me>>2] = $144;
      HEAP8[$143>>0] = $142;
      $145 = (($__ng$1) + 1)|0;
      $146 = ($141|0)==($$$0|0);
      if ($146) {
       break;
      } else {
       $__d$351 = $141;$__gl$054 = $__gl$1;$__ig$053 = $__ig$1;$__ng$052 = $145;
      }
     }
    }
   }
   $147 = HEAP32[$__me>>2]|0;
   $148 = ($61|0)==($147|0);
   if ($148) {
    $$2 = $$$0;
   } else {
    $149 = ((($147)) + -1|0);
    $150 = ($61>>>0)<($149>>>0);
    if ($150) {
     $$01$i$i56 = $61;$153 = $149;
     while(1) {
      $151 = HEAP8[$$01$i$i56>>0]|0;
      $152 = HEAP8[$153>>0]|0;
      HEAP8[$$01$i$i56>>0] = $152;
      HEAP8[$153>>0] = $151;
      $154 = ((($$01$i$i56)) + 1|0);
      $155 = ((($153)) + -1|0);
      $156 = ($154>>>0)<($155>>>0);
      if ($156) {
       $$01$i$i56 = $154;$153 = $155;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  default: {
   $$2 = $$062;
  }
  }
  $157 = (($__p$061) + 1)|0;
  $exitcond = ($157|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$062 = $$2;$__p$061 = $157;
  }
 }
 $158 = HEAP8[$__sn>>0]|0;
 $159 = $158 & 1;
 $160 = ($159<<24>>24)==(0);
 $161 = HEAP32[$0>>2]|0;
 $162 = $158&255;
 $163 = $162 >>> 1;
 $164 = $160 ? $163 : $161;
 $165 = ($164>>>0)>(1);
 if ($165) {
  $166 = HEAP32[$1>>2]|0;
  $167 = $160 ? $2 : $166;
  $168 = (($167) + ($164)|0);
  $169 = HEAP32[$__me>>2]|0;
  $170 = ($164|0)==(1);
  if ($170) {
   $$0$i$i$lcssa = $169;
  } else {
   $171 = ((($167)) + 1|0);
   $$0$i$i35 = $169;$173 = $171;
   while(1) {
    $172 = HEAP8[$173>>0]|0;
    HEAP8[$$0$i$i35>>0] = $172;
    $174 = ((($$0$i$i35)) + 1|0);
    $175 = ((($173)) + 1|0);
    $176 = ($175|0)==($168|0);
    if ($176) {
     $$0$i$i$lcssa = $174;
     break;
    } else {
     $$0$i$i35 = $174;$173 = $175;
    }
   }
  }
  HEAP32[$__me>>2] = $$0$i$i$lcssa;
 }
 $177 = $__flags & 176;
 switch ($177|0) {
 case 32:  {
  $178 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $178;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$__mi>>2] = $__mb;
 }
 }
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pre = 0, $$pre18 = 0, $$pre19 = 0, $$pre19$pre = 0, $$pre21 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 56|0;
 $__loc = sp + 52|0;
 $__pat = sp + 164|0;
 $__dp = sp + 161|0;
 $__ts = sp + 160|0;
 $__grp = sp + 40|0;
 $__sym = sp + 28|0;
 $__sn = sp + 16|0;
 $__fd = sp + 12|0;
 $__mbuf = sp + 60|0;
 $__mi = sp + 8|0;
 $__me = sp + 4|0;
 $0 = sp;
 $1 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $1;
 __THREW__ = 0;
 $2 = (invoke_iii(495,($__loc|0),(7688|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 13;
  } else {
   $5 = HEAP8[$__digits>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   $8 = ((($__digits)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $5&255;
   $11 = $10 >>> 1;
   $12 = $7 ? $11 : $9;
   $13 = ($12|0)==(0);
   if ($13) {
    $32 = 0;
   } else {
    $14 = ((($__digits)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($__digits)) + 1|0);
    $17 = $7 ? $16 : $15;
    $18 = HEAP8[$17>>0]|0;
    $19 = HEAP32[$2>>2]|0;
    $20 = ((($19)) + 28|0);
    $21 = HEAP32[$20>>2]|0;
    __THREW__ = 0;
    $22 = (invoke_iii($21|0,($2|0),45)|0);
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     label = 13;
     break;
    }
    $25 = ($18<<24>>24)==($22<<24>>24);
    $32 = $25;
   }
   HEAP32[$__grp>>2] = 0;
   $26 = ((($__grp)) + 4|0);
   HEAP32[$26>>2] = 0;
   $27 = ((($__grp)) + 8|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$__sym>>2] = 0;
   $28 = ((($__sym)) + 4|0);
   HEAP32[$28>>2] = 0;
   $29 = ((($__sym)) + 8|0);
   HEAP32[$29>>2] = 0;
   HEAP32[$__sn>>2] = 0;
   $30 = ((($__sn)) + 4|0);
   HEAP32[$30>>2] = 0;
   $31 = ((($__sn)) + 8|0);
   HEAP32[$31>>2] = 0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(723,($__intl|0),($32|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $94 = ___cxa_find_matching_catch()|0;
    $95 = tempRet0;
    $$0 = $94;$$01 = $95;$$pre19 = $1;
   } else {
    $35 = HEAP8[$__digits>>0]|0;
    $36 = $35 & 1;
    $37 = ($36<<24>>24)==(0);
    $38 = HEAP32[$8>>2]|0;
    $39 = $35&255;
    $40 = $39 >>> 1;
    $41 = $37 ? $40 : $38;
    $42 = HEAP32[$__fd>>2]|0;
    $43 = ($41|0)>($42|0);
    if ($43) {
     $44 = (($41) - ($42))|0;
     $45 = $44 << 1;
     $46 = HEAP8[$__sn>>0]|0;
     $47 = $46 & 1;
     $48 = ($47<<24>>24)==(0);
     $49 = ((($__sn)) + 4|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $46&255;
     $52 = $51 >>> 1;
     $53 = $48 ? $52 : $50;
     $54 = HEAP8[$__sym>>0]|0;
     $55 = $54 & 1;
     $56 = ($55<<24>>24)==(0);
     $57 = ((($__sym)) + 4|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = $54&255;
     $60 = $59 >>> 1;
     $61 = $56 ? $60 : $58;
     $62 = $45 | 1;
     $63 = (($62) + ($42))|0;
     $64 = (($63) + ($53))|0;
     $65 = (($64) + ($61))|0;
     $86 = $65;
    } else {
     $66 = HEAP8[$__sn>>0]|0;
     $67 = $66 & 1;
     $68 = ($67<<24>>24)==(0);
     $69 = ((($__sn)) + 4|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = $66&255;
     $72 = $71 >>> 1;
     $73 = $68 ? $72 : $70;
     $74 = HEAP8[$__sym>>0]|0;
     $75 = $74 & 1;
     $76 = ($75<<24>>24)==(0);
     $77 = ((($__sym)) + 4|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = $74&255;
     $80 = $79 >>> 1;
     $81 = $76 ? $80 : $78;
     $82 = (($42) + 2)|0;
     $83 = (($82) + ($73))|0;
     $84 = (($83) + ($81))|0;
     $86 = $84;
    }
    $85 = ($86>>>0)>(100);
    if ($85) {
     $87 = (_malloc($86)|0);
     $88 = $87;
     $89 = ($87|0)==(0|0);
     if ($89) {
      __THREW__ = 0;
      invoke_v(698);
      $90 = __THREW__; __THREW__ = 0;
      $91 = $90&1;
      if ($91) {
       $99 = $88;
      } else {
       $$pre = HEAP8[$__digits>>0]|0;
       $$pre18 = HEAP32[$8>>2]|0;
       $104 = $$pre;$113 = $$pre18;$126 = $88;$__mb$0 = 0;
       label = 17;
      }
     } else {
      $104 = $35;$113 = $38;$126 = $88;$__mb$0 = $87;
      label = 17;
     }
    } else {
     $104 = $35;$113 = $38;$126 = 0;$__mb$0 = $__mbuf;
     label = 17;
    }
    if ((label|0) == 17) {
     $101 = ((($__iob)) + 4|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $104 & 1;
     $105 = ($103<<24>>24)==(0);
     $106 = ((($__digits)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ((($__digits)) + 1|0);
     $109 = $105 ? $108 : $107;
     $110 = $104&255;
     $111 = $110 >>> 1;
     $112 = $105 ? $111 : $113;
     $114 = (($109) + ($112)|0);
     $115 = HEAP8[$__dp>>0]|0;
     $116 = HEAP8[$__ts>>0]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(724,($__mb$0|0),($__mi|0),($__me|0),($102|0),($109|0),($114|0),($2|0),($32|0),($__pat|0),($115|0),($116|0),($__grp|0),($__sym|0),($__sn|0),($42|0));
     $117 = __THREW__; __THREW__ = 0;
     $118 = $117&1;
     if ($118) {
      $99 = $126;
     } else {
      $119 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $119;
      $120 = HEAP32[$__mi>>2]|0;
      $121 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
      $122 = (invoke_iiiiiii(540,($$byval_copy|0),($__mb$0|0),($120|0),($121|0),($__iob|0),($__fl|0))|0);
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $99 = $126;
      } else {
       $125 = ($126|0)==(0);
       if ($125) {
        $128 = $1;
       } else {
        $127 = $126;
        _free($127);
        $$pre21 = HEAP32[$__loc>>2]|0;
        $128 = $$pre21;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
       (__ZNSt3__114__shared_count16__release_sharedEv($128)|0);
       STACKTOP = sp;return ($122|0);
      }
     }
    }
    $96 = ___cxa_find_matching_catch()|0;
    $97 = tempRet0;
    $98 = ($99|0)==(0);
    if ($98) {
     $$0 = $96;$$01 = $97;$$pre19 = $1;
    } else {
     $100 = $99;
     _free($100);
     $$pre19$pre = HEAP32[$__loc>>2]|0;
     $$0 = $96;$$01 = $97;$$pre19 = $$pre19$pre;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $$1 = $$0;$$12 = $$01;$129 = $$pre19;
  }
 } while(0);
 if ((label|0) == 13) {
  $92 = ___cxa_find_matching_catch()|0;
  $93 = tempRet0;
  $$1 = $92;$$12 = $93;$129 = $1;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($129)|0);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($this,$__s,$__intl,$__iob,$__fl,$__units) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pre = 0, $$pre17 = 0, $$pre17$pre = 0, $$pre19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0;
 var $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 892|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 900|0;
 $__bb = sp + 888|0;
 $__digits = sp + 488|0;
 $__loc = sp + 480|0;
 $__pat = sp + 896|0;
 $__dp = sp + 476|0;
 $__ts = sp + 472|0;
 $__grp = sp + 460|0;
 $__sym = sp + 448|0;
 $__sn = sp + 436|0;
 $__fd = sp + 432|0;
 $__mbuf = sp + 32|0;
 $__mi = sp + 24|0;
 $__me = sp + 20|0;
 $0 = sp + 16|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[$vararg_buffer>>3] = $__units;
 $1 = (_snprintf($__buf,100,20170,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(692)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $139 = 0;$140 = 0;
    label = 7;
   } else {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer1>>3] = $__units;
    $6 = (invoke_iiiii(697,($__bb|0),($3|0),(20170|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $139 = 0;$140 = 0;
     label = 7;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(698);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       $139 = 0;$140 = 0;
       label = 7;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $16 = $$pre;
     } else {
      $16 = $9;
     }
     $15 = $16;
     $17 = $6 << 2;
     $18 = (_malloc($17)|0);
     $19 = $18;
     $20 = ($18|0)==(0|0);
     if ($20) {
      __THREW__ = 0;
      invoke_v(698);
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if ($22) {
       $139 = $15;$140 = $19;
       label = 7;
      } else {
       $127 = $19;$130 = $15;$__db$0 = 0;$__n$0 = $6;
       label = 10;
      }
     } else {
      $127 = $19;$130 = $15;$__db$0 = $18;$__n$0 = $6;
      label = 10;
     }
    }
   }
  } else {
   $127 = 0;$130 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  __THREW__ = 0;
  $23 = (invoke_ii(494,($__iob|0))|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if ($25) {
   $139 = $130;$140 = $127;
   label = 7;
  } else {
   HEAP32[$__loc>>2] = $23;
   __THREW__ = 0;
   $26 = (invoke_iii(495,($__loc|0),(7680|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    label = 22;
   } else {
    $29 = HEAP32[$__bb>>2]|0;
    $30 = (($29) + ($__n$0)|0);
    $31 = HEAP32[$26>>2]|0;
    $32 = ((($31)) + 48|0);
    $33 = HEAP32[$32>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($33|0,($26|0),($29|0),($30|0),($__db$0|0))|0);
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     label = 22;
    } else {
     $36 = ($__n$0|0)==(0);
     if ($36) {
      $46 = 0;
     } else {
      $37 = HEAP32[$__bb>>2]|0;
      $38 = HEAP8[$37>>0]|0;
      $39 = ($38<<24>>24)==(45);
      $46 = $39;
     }
     HEAP32[$__grp>>2] = 0;
     $40 = ((($__grp)) + 4|0);
     HEAP32[$40>>2] = 0;
     $41 = ((($__grp)) + 8|0);
     HEAP32[$41>>2] = 0;
     HEAP32[$__sym>>2] = 0;
     $42 = ((($__sym)) + 4|0);
     HEAP32[$42>>2] = 0;
     $43 = ((($__sym)) + 8|0);
     HEAP32[$43>>2] = 0;
     HEAP32[$__sn>>2] = 0;
     $44 = ((($__sn)) + 4|0);
     HEAP32[$44>>2] = 0;
     $45 = ((($__sn)) + 8|0);
     HEAP32[$45>>2] = 0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(725,($__intl|0),($46|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if ($48) {
      $102 = ___cxa_find_matching_catch()|0;
      $103 = tempRet0;
      $$0 = $102;$$01 = $103;$$pre17 = $23;
     } else {
      $49 = HEAP32[$__fd>>2]|0;
      $50 = ($__n$0|0)>($49|0);
      if ($50) {
       $51 = (($__n$0) - ($49))|0;
       $52 = $51 << 1;
       $53 = HEAP8[$__sn>>0]|0;
       $54 = $53 & 1;
       $55 = ($54<<24>>24)==(0);
       $56 = ((($__sn)) + 4|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = $53&255;
       $59 = $58 >>> 1;
       $60 = $55 ? $59 : $57;
       $61 = HEAP8[$__sym>>0]|0;
       $62 = $61 & 1;
       $63 = ($62<<24>>24)==(0);
       $64 = ((($__sym)) + 4|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = $61&255;
       $67 = $66 >>> 1;
       $68 = $63 ? $67 : $65;
       $69 = $52 | 1;
       $70 = (($69) + ($49))|0;
       $71 = (($70) + ($60))|0;
       $72 = (($71) + ($68))|0;
       $93 = $72;
      } else {
       $73 = HEAP8[$__sn>>0]|0;
       $74 = $73 & 1;
       $75 = ($74<<24>>24)==(0);
       $76 = ((($__sn)) + 4|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = $73&255;
       $79 = $78 >>> 1;
       $80 = $75 ? $79 : $77;
       $81 = HEAP8[$__sym>>0]|0;
       $82 = $81 & 1;
       $83 = ($82<<24>>24)==(0);
       $84 = ((($__sym)) + 4|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = $81&255;
       $87 = $86 >>> 1;
       $88 = $83 ? $87 : $85;
       $89 = (($49) + 2)|0;
       $90 = (($89) + ($80))|0;
       $91 = (($90) + ($88))|0;
       $93 = $91;
      }
      $92 = ($93>>>0)>(100);
      if ($92) {
       $94 = $93 << 2;
       $95 = (_malloc($94)|0);
       $96 = $95;
       $97 = ($95|0)==(0|0);
       if ($97) {
        __THREW__ = 0;
        invoke_v(698);
        $98 = __THREW__; __THREW__ = 0;
        $99 = $98&1;
        if ($99) {
         $107 = $96;
        } else {
         $123 = $96;$__mb$0 = 0;
         label = 26;
        }
       } else {
        $123 = $96;$__mb$0 = $95;
        label = 26;
       }
      } else {
       $123 = 0;$__mb$0 = $__mbuf;
       label = 26;
      }
      if ((label|0) == 26) {
       $109 = ((($__iob)) + 4|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = (($__db$0) + ($__n$0<<2)|0);
       $112 = HEAP32[$__dp>>2]|0;
       $113 = HEAP32[$__ts>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(726,($__mb$0|0),($__mi|0),($__me|0),($110|0),($__db$0|0),($111|0),($26|0),($46|0),($__pat|0),($112|0),($113|0),($__grp|0),($__sym|0),($__sn|0),($49|0));
       $114 = __THREW__; __THREW__ = 0;
       $115 = $114&1;
       if ($115) {
        $107 = $123;
       } else {
        $116 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $116;
        $117 = HEAP32[$__mi>>2]|0;
        $118 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
        $119 = (invoke_iiiiiii(704,($$byval_copy|0),($__mb$0|0),($117|0),($118|0),($__iob|0),($__fl|0))|0);
        $120 = __THREW__; __THREW__ = 0;
        $121 = $120&1;
        if ($121) {
         $107 = $123;
        } else {
         $122 = ($123|0)==(0);
         if ($122) {
          $125 = $23;
         } else {
          $124 = $123;
          _free($124);
          $$pre19 = HEAP32[$__loc>>2]|0;
          $125 = $$pre19;
         }
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
         (__ZNSt3__114__shared_count16__release_sharedEv($125)|0);
         $126 = ($127|0)==(0);
         if (!($126)) {
          $128 = $127;
          _free($128);
         }
         $129 = ($130|0)==(0);
         if (!($129)) {
          $131 = $130;
          _free($131);
         }
         STACKTOP = sp;return ($119|0);
        }
       }
      }
      $104 = ___cxa_find_matching_catch()|0;
      $105 = tempRet0;
      $106 = ($107|0)==(0);
      if ($106) {
       $$0 = $104;$$01 = $105;$$pre17 = $23;
      } else {
       $108 = $107;
       _free($108);
       $$pre17$pre = HEAP32[$__loc>>2]|0;
       $$0 = $104;$$01 = $105;$$pre17 = $$pre17$pre;
      }
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
     $$1 = $$0;$$12 = $$01;$132 = $$pre17;
    }
   }
   if ((label|0) == 22) {
    $100 = ___cxa_find_matching_catch()|0;
    $101 = tempRet0;
    $$1 = $100;$$12 = $101;$132 = $23;
   }
   (__ZNSt3__114__shared_count16__release_sharedEv($132)|0);
   $$2 = $$1;$$23 = $$12;$134 = $127;$137 = $130;
  }
 }
 if ((label|0) == 7) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $$2 = $13;$$23 = $14;$134 = $140;$137 = $139;
 }
 $133 = ($134|0)==(0);
 if (!($133)) {
  $135 = $134;
  _free($135);
 }
 $136 = ($137|0)==(0);
 if (!($136)) {
  $138 = $137;
  _free($138);
 }
 ___resumeException($$2|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 108|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 do {
  if ($__intl) {
   $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,7424)|0);
   $13 = HEAP32[$12>>2]|0;
   do {
    if ($__neg) {
     $14 = ((($13)) + 44|0);
     $15 = HEAP32[$14>>2]|0;
     FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
     $16 = HEAP32[$0>>2]|0;
     HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
     $17 = HEAP32[$12>>2]|0;
     $18 = ((($17)) + 32|0);
     $19 = HEAP32[$18>>2]|0;
     FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
     $20 = HEAP8[$__sn>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      HEAP8[$__sn>>0] = 0;
     } else {
      $23 = ((($__sn)) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      HEAP32[$24>>2] = 0;
     }
     $25 = ((($__sn)) + 4|0);
     HEAP32[$25>>2] = 0;
     __THREW__ = 0;
     invoke_vii(722,($__sn|0),0);
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if ($27) {
      $28 = ___cxa_find_matching_catch(0|0)|0;
      $29 = tempRet0;
      ___clang_call_terminate($28);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$1>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
      HEAP32[$1>>2] = 0;
      $30 = ((($1)) + 4|0);
      HEAP32[$30>>2] = 0;
      $31 = ((($1)) + 8|0);
      HEAP32[$31>>2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
      break;
     }
    } else {
     $32 = ((($13)) + 40|0);
     $33 = HEAP32[$32>>2]|0;
     FUNCTION_TABLE_vii[$33 & 1023]($2,$12);
     $34 = HEAP32[$2>>2]|0;
     HEAP8[$__pat>>0]=$34&255;HEAP8[$__pat+1>>0]=($34>>8)&255;HEAP8[$__pat+2>>0]=($34>>16)&255;HEAP8[$__pat+3>>0]=$34>>24;
     $35 = HEAP32[$12>>2]|0;
     $36 = ((($35)) + 28|0);
     $37 = HEAP32[$36>>2]|0;
     FUNCTION_TABLE_vii[$37 & 1023]($3,$12);
     $38 = HEAP8[$__sn>>0]|0;
     $39 = $38 & 1;
     $40 = ($39<<24>>24)==(0);
     if ($40) {
      HEAP8[$__sn>>0] = 0;
     } else {
      $41 = ((($__sn)) + 8|0);
      $42 = HEAP32[$41>>2]|0;
      HEAP32[$42>>2] = 0;
     }
     $43 = ((($__sn)) + 4|0);
     HEAP32[$43>>2] = 0;
     __THREW__ = 0;
     invoke_vii(722,($__sn|0),0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      $46 = ___cxa_find_matching_catch(0|0)|0;
      $47 = tempRet0;
      ___clang_call_terminate($46);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$3>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
      HEAP32[$3>>2] = 0;
      $48 = ((($3)) + 4|0);
      HEAP32[$48>>2] = 0;
      $49 = ((($3)) + 8|0);
      HEAP32[$49>>2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($3);
      break;
     }
    }
   } while(0);
   $50 = HEAP32[$12>>2]|0;
   $51 = ((($50)) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_ii[$52 & 1023]($12)|0);
   HEAP32[$__dp>>2] = $53;
   $54 = HEAP32[$12>>2]|0;
   $55 = ((($54)) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (FUNCTION_TABLE_ii[$56 & 1023]($12)|0);
   HEAP32[$__ts>>2] = $57;
   $58 = HEAP32[$12>>2]|0;
   $59 = ((($58)) + 20|0);
   $60 = HEAP32[$59>>2]|0;
   FUNCTION_TABLE_vii[$60 & 1023]($4,$12);
   $61 = HEAP8[$__grp>>0]|0;
   $62 = $61 & 1;
   $63 = ($62<<24>>24)==(0);
   if ($63) {
    $67 = ((($__grp)) + 1|0);
    HEAP8[$67>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $64 = ((($__grp)) + 8|0);
    $65 = HEAP32[$64>>2]|0;
    HEAP8[$65>>0] = 0;
    $66 = ((($__grp)) + 4|0);
    HEAP32[$66>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(716,($__grp|0),0);
   $68 = __THREW__; __THREW__ = 0;
   $69 = $68&1;
   if ($69) {
    $70 = ___cxa_find_matching_catch(0|0)|0;
    $71 = tempRet0;
    ___clang_call_terminate($70);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$4>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
   HEAP32[$4>>2] = 0;
   $72 = ((($4)) + 4|0);
   HEAP32[$72>>2] = 0;
   $73 = ((($4)) + 8|0);
   HEAP32[$73>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
   $74 = HEAP32[$12>>2]|0;
   $75 = ((($74)) + 24|0);
   $76 = HEAP32[$75>>2]|0;
   FUNCTION_TABLE_vii[$76 & 1023]($5,$12);
   $77 = HEAP8[$__sym>>0]|0;
   $78 = $77 & 1;
   $79 = ($78<<24>>24)==(0);
   if ($79) {
    HEAP8[$__sym>>0] = 0;
   } else {
    $80 = ((($__sym)) + 8|0);
    $81 = HEAP32[$80>>2]|0;
    HEAP32[$81>>2] = 0;
   }
   $82 = ((($__sym)) + 4|0);
   HEAP32[$82>>2] = 0;
   __THREW__ = 0;
   invoke_vii(722,($__sym|0),0);
   $83 = __THREW__; __THREW__ = 0;
   $84 = $83&1;
   if ($84) {
    $85 = ___cxa_find_matching_catch(0|0)|0;
    $86 = tempRet0;
    ___clang_call_terminate($85);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$5>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
    HEAP32[$5>>2] = 0;
    $87 = ((($5)) + 4|0);
    HEAP32[$87>>2] = 0;
    $88 = ((($5)) + 8|0);
    HEAP32[$88>>2] = 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($5);
    $89 = HEAP32[$12>>2]|0;
    $90 = ((($89)) + 36|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (FUNCTION_TABLE_ii[$91 & 1023]($12)|0);
    $storemerge = $92;
    break;
   }
  } else {
   $93 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,7360)|0);
   $94 = HEAP32[$93>>2]|0;
   do {
    if ($__neg) {
     $95 = ((($94)) + 44|0);
     $96 = HEAP32[$95>>2]|0;
     FUNCTION_TABLE_vii[$96 & 1023]($6,$93);
     $97 = HEAP32[$6>>2]|0;
     HEAP8[$__pat>>0]=$97&255;HEAP8[$__pat+1>>0]=($97>>8)&255;HEAP8[$__pat+2>>0]=($97>>16)&255;HEAP8[$__pat+3>>0]=$97>>24;
     $98 = HEAP32[$93>>2]|0;
     $99 = ((($98)) + 32|0);
     $100 = HEAP32[$99>>2]|0;
     FUNCTION_TABLE_vii[$100 & 1023]($7,$93);
     $101 = HEAP8[$__sn>>0]|0;
     $102 = $101 & 1;
     $103 = ($102<<24>>24)==(0);
     if ($103) {
      HEAP8[$__sn>>0] = 0;
     } else {
      $104 = ((($__sn)) + 8|0);
      $105 = HEAP32[$104>>2]|0;
      HEAP32[$105>>2] = 0;
     }
     $106 = ((($__sn)) + 4|0);
     HEAP32[$106>>2] = 0;
     __THREW__ = 0;
     invoke_vii(722,($__sn|0),0);
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     if ($108) {
      $109 = ___cxa_find_matching_catch(0|0)|0;
      $110 = tempRet0;
      ___clang_call_terminate($109);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$7>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
      HEAP32[$7>>2] = 0;
      $111 = ((($7)) + 4|0);
      HEAP32[$111>>2] = 0;
      $112 = ((($7)) + 8|0);
      HEAP32[$112>>2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
      break;
     }
    } else {
     $113 = ((($94)) + 40|0);
     $114 = HEAP32[$113>>2]|0;
     FUNCTION_TABLE_vii[$114 & 1023]($8,$93);
     $115 = HEAP32[$8>>2]|0;
     HEAP8[$__pat>>0]=$115&255;HEAP8[$__pat+1>>0]=($115>>8)&255;HEAP8[$__pat+2>>0]=($115>>16)&255;HEAP8[$__pat+3>>0]=$115>>24;
     $116 = HEAP32[$93>>2]|0;
     $117 = ((($116)) + 28|0);
     $118 = HEAP32[$117>>2]|0;
     FUNCTION_TABLE_vii[$118 & 1023]($9,$93);
     $119 = HEAP8[$__sn>>0]|0;
     $120 = $119 & 1;
     $121 = ($120<<24>>24)==(0);
     if ($121) {
      HEAP8[$__sn>>0] = 0;
     } else {
      $122 = ((($__sn)) + 8|0);
      $123 = HEAP32[$122>>2]|0;
      HEAP32[$123>>2] = 0;
     }
     $124 = ((($__sn)) + 4|0);
     HEAP32[$124>>2] = 0;
     __THREW__ = 0;
     invoke_vii(722,($__sn|0),0);
     $125 = __THREW__; __THREW__ = 0;
     $126 = $125&1;
     if ($126) {
      $127 = ___cxa_find_matching_catch(0|0)|0;
      $128 = tempRet0;
      ___clang_call_terminate($127);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$9>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
      HEAP32[$9>>2] = 0;
      $129 = ((($9)) + 4|0);
      HEAP32[$129>>2] = 0;
      $130 = ((($9)) + 8|0);
      HEAP32[$130>>2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9);
      break;
     }
    }
   } while(0);
   $131 = HEAP32[$93>>2]|0;
   $132 = ((($131)) + 12|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = (FUNCTION_TABLE_ii[$133 & 1023]($93)|0);
   HEAP32[$__dp>>2] = $134;
   $135 = HEAP32[$93>>2]|0;
   $136 = ((($135)) + 16|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = (FUNCTION_TABLE_ii[$137 & 1023]($93)|0);
   HEAP32[$__ts>>2] = $138;
   $139 = HEAP32[$93>>2]|0;
   $140 = ((($139)) + 20|0);
   $141 = HEAP32[$140>>2]|0;
   FUNCTION_TABLE_vii[$141 & 1023]($10,$93);
   $142 = HEAP8[$__grp>>0]|0;
   $143 = $142 & 1;
   $144 = ($143<<24>>24)==(0);
   if ($144) {
    $148 = ((($__grp)) + 1|0);
    HEAP8[$148>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $145 = ((($__grp)) + 8|0);
    $146 = HEAP32[$145>>2]|0;
    HEAP8[$146>>0] = 0;
    $147 = ((($__grp)) + 4|0);
    HEAP32[$147>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(716,($__grp|0),0);
   $149 = __THREW__; __THREW__ = 0;
   $150 = $149&1;
   if ($150) {
    $151 = ___cxa_find_matching_catch(0|0)|0;
    $152 = tempRet0;
    ___clang_call_terminate($151);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$10>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
   HEAP32[$10>>2] = 0;
   $153 = ((($10)) + 4|0);
   HEAP32[$153>>2] = 0;
   $154 = ((($10)) + 8|0);
   HEAP32[$154>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
   $155 = HEAP32[$93>>2]|0;
   $156 = ((($155)) + 24|0);
   $157 = HEAP32[$156>>2]|0;
   FUNCTION_TABLE_vii[$157 & 1023]($11,$93);
   $158 = HEAP8[$__sym>>0]|0;
   $159 = $158 & 1;
   $160 = ($159<<24>>24)==(0);
   if ($160) {
    HEAP8[$__sym>>0] = 0;
   } else {
    $161 = ((($__sym)) + 8|0);
    $162 = HEAP32[$161>>2]|0;
    HEAP32[$162>>2] = 0;
   }
   $163 = ((($__sym)) + 4|0);
   HEAP32[$163>>2] = 0;
   __THREW__ = 0;
   invoke_vii(722,($__sym|0),0);
   $164 = __THREW__; __THREW__ = 0;
   $165 = $164&1;
   if ($165) {
    $166 = ___cxa_find_matching_catch(0|0)|0;
    $167 = tempRet0;
    ___clang_call_terminate($166);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$11>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
    HEAP32[$11>>2] = 0;
    $168 = ((($11)) + 4|0);
    HEAP32[$168>>2] = 0;
    $169 = ((($11)) + 8|0);
    HEAP32[$169>>2] = 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
    $170 = HEAP32[$93>>2]|0;
    $171 = ((($170)) + 36|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = (FUNCTION_TABLE_ii[$172 & 1023]($93)|0);
    $storemerge = $173;
    break;
   }
  }
 } while(0);
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$ = 0, $$$0 = 0, $$0$i$i30 = 0, $$0$i$i954 = 0, $$01$i$i52 = 0, $$057 = 0, $$2 = 0, $$lcssa = 0, $$lcssa63 = 0, $$lcssa64 = 0, $$lcssa65 = 0, $$lcssa67 = 0, $$op = 0, $$pre29 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0;
 var $__d$031 = 0, $__d$1$lcssa = 0, $__d$137 = 0, $__d$2 = 0, $__d$347 = 0, $__f$0$lcssa = 0, $__f$038 = 0, $__f$143 = 0, $__gl$0$ph = 0, $__gl$050 = 0, $__gl$1 = 0, $__ig$049 = 0, $__ig$1 = 0, $__me$promoted = 0, $__me$promoted66 = 0, $__ng$048 = 0, $__ng$1 = 0, $__p$056 = 0, $exitcond = 0, $or$cond = 0;
 var $scevgep$i = 0, $scevgep$i10 = 0, $scevgep$sum = 0, $scevgep26 = 0, $scevgep27$sum = 0, $scevgep28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = ((($__sn)) + 4|0);
 $1 = ((($__sn)) + 8|0);
 $2 = ((($__sym)) + 4|0);
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 $5 = ((($__sym)) + 8|0);
 $6 = ($__fd|0)>(0);
 $7 = ((($__grp)) + 4|0);
 $8 = ((($__grp)) + 8|0);
 $9 = ((($__grp)) + 1|0);
 $10 = ($__fd|0)>(0);
 $$057 = $__db;$__p$056 = 0;
 while(1) {
  $11 = (($__pat) + ($__p$056)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  switch ($13|0) {
  case 0:  {
   $14 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $14;
   $$2 = $$057;
   break;
  }
  case 1:  {
   $15 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $15;
   $16 = HEAP32[$__ct>>2]|0;
   $17 = ((($16)) + 44|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (FUNCTION_TABLE_iii[$18 & 1023]($__ct,32)|0);
   $20 = HEAP32[$__me>>2]|0;
   $21 = ((($20)) + 4|0);
   HEAP32[$__me>>2] = $21;
   HEAP32[$20>>2] = $19;
   $$2 = $$057;
   break;
  }
  case 3:  {
   $22 = HEAP8[$__sn>>0]|0;
   $23 = $22 & 1;
   $24 = ($23<<24>>24)==(0);
   $25 = HEAP32[$0>>2]|0;
   $26 = $22&255;
   $27 = $26 >>> 1;
   $28 = $24 ? $27 : $25;
   $29 = ($28|0)==(0);
   if ($29) {
    $$2 = $$057;
   } else {
    $30 = HEAP32[$1>>2]|0;
    $31 = $24 ? $0 : $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$__me>>2]|0;
    $34 = ((($33)) + 4|0);
    HEAP32[$__me>>2] = $34;
    HEAP32[$33>>2] = $32;
    $$2 = $$057;
   }
   break;
  }
  case 2:  {
   $35 = HEAP8[$__sym>>0]|0;
   $36 = $35 & 1;
   $37 = ($36<<24>>24)==(0);
   $38 = HEAP32[$2>>2]|0;
   $39 = $35&255;
   $40 = $39 >>> 1;
   $41 = $37 ? $40 : $38;
   $42 = ($41|0)==(0);
   $or$cond = $4 | $42;
   if ($or$cond) {
    $$2 = $$057;
   } else {
    $43 = HEAP32[$5>>2]|0;
    $44 = $37 ? $2 : $43;
    $45 = (($44) + ($41<<2)|0);
    $46 = HEAP32[$__me>>2]|0;
    $47 = ($41|0)==(0);
    if (!($47)) {
     $$0$i$i954 = $46;$49 = $44;
     while(1) {
      $48 = HEAP32[$49>>2]|0;
      HEAP32[$$0$i$i954>>2] = $48;
      $50 = ((($49)) + 4|0);
      $51 = ((($$0$i$i954)) + 4|0);
      $52 = ($50|0)==($45|0);
      if ($52) {
       break;
      } else {
       $$0$i$i954 = $51;$49 = $50;
      }
     }
    }
    $scevgep$i10 = (($46) + ($41<<2)|0);
    HEAP32[$__me>>2] = $scevgep$i10;
    $$2 = $$057;
   }
   break;
  }
  case 4:  {
   $53 = HEAP32[$__me>>2]|0;
   $54 = ((($$057)) + 4|0);
   $$$0 = $__neg ? $54 : $$057;
   $55 = ($$$0>>>0)<($__de>>>0);
   L15: do {
    if ($55) {
     $__d$031 = $$$0;
     while(1) {
      $56 = HEAP32[$__d$031>>2]|0;
      $57 = HEAP32[$__ct>>2]|0;
      $58 = ((($57)) + 12|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = (FUNCTION_TABLE_iiii[$59 & 1023]($__ct,2048,$56)|0);
      if (!($60)) {
       $__d$0$lcssa = $__d$031;
       break L15;
      }
      $61 = ((($__d$031)) + 4|0);
      $62 = ($61>>>0)<($__de>>>0);
      if ($62) {
       $__d$031 = $61;
      } else {
       $__d$0$lcssa = $61;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   if ($6) {
    $63 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    $64 = $63 & $10;
    if ($64) {
     $__me$promoted66 = HEAP32[$__me>>2]|0;
     $68 = $__me$promoted66;$__d$137 = $__d$0$lcssa;$__f$038 = $__fd;
     while(1) {
      $65 = ((($__d$137)) + -4|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ((($68)) + 4|0);
      HEAP32[$68>>2] = $66;
      $69 = (($__f$038) + -1)|0;
      $70 = ($65>>>0)>($$$0>>>0);
      $71 = ($__f$038|0)>(1);
      $72 = $70 & $71;
      if ($72) {
       $68 = $67;$__d$137 = $65;$__f$038 = $69;
      } else {
       $$lcssa63 = $65;$$lcssa64 = $69;$$lcssa65 = $71;$$lcssa67 = $67;
       break;
      }
     }
     HEAP32[$__me>>2] = $$lcssa67;
     $$lcssa = $$lcssa65;$__d$1$lcssa = $$lcssa63;$__f$0$lcssa = $$lcssa64;
    } else {
     $$lcssa = $10;$__d$1$lcssa = $__d$0$lcssa;$__f$0$lcssa = $__fd;
    }
    if ($$lcssa) {
     $73 = HEAP32[$__ct>>2]|0;
     $74 = ((($73)) + 44|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (FUNCTION_TABLE_iii[$75 & 1023]($__ct,48)|0);
     $83 = $76;
    } else {
     $83 = 0;
    }
    $__me$promoted = HEAP32[$__me>>2]|0;
    $77 = ($__f$0$lcssa|0)<(0);
    $$op = $__f$0$lcssa ^ -1;
    $78 = $77 ? $$op : -1;
    $79 = (($__f$0$lcssa) + ($78))|0;
    $80 = ($__f$0$lcssa|0)>(0);
    if ($80) {
     $82 = $__me$promoted;$__f$143 = $__f$0$lcssa;
     while(1) {
      $81 = ((($82)) + 4|0);
      HEAP32[$82>>2] = $83;
      $84 = (($__f$143) + -1)|0;
      $85 = ($__f$143|0)>(1);
      if ($85) {
       $82 = $81;$__f$143 = $84;
      } else {
       break;
      }
     }
    }
    $scevgep$sum = (($79) + 2)|0;
    $scevgep26 = (($__me$promoted) + ($scevgep$sum<<2)|0);
    $scevgep27$sum = (($79) + 1)|0;
    $scevgep28 = (($__me$promoted) + ($scevgep27$sum<<2)|0);
    HEAP32[$__me>>2] = $scevgep26;
    HEAP32[$scevgep28>>2] = $__dp;
    $__d$2 = $__d$1$lcssa;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $86 = ($__d$2|0)==($$$0|0);
   if ($86) {
    $87 = HEAP32[$__ct>>2]|0;
    $88 = ((($87)) + 44|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (FUNCTION_TABLE_iii[$89 & 1023]($__ct,48)|0);
    $91 = HEAP32[$__me>>2]|0;
    $92 = ((($91)) + 4|0);
    HEAP32[$__me>>2] = $92;
    HEAP32[$91>>2] = $90;
    $130 = $92;
   } else {
    $93 = HEAP8[$__grp>>0]|0;
    $94 = $93 & 1;
    $95 = ($94<<24>>24)==(0);
    $96 = HEAP32[$7>>2]|0;
    $97 = $93&255;
    $98 = $97 >>> 1;
    $99 = $95 ? $98 : $96;
    $100 = ($99|0)==(0);
    if ($100) {
     $__gl$0$ph = -1;
    } else {
     $101 = HEAP32[$8>>2]|0;
     $102 = $95 ? $9 : $101;
     $103 = HEAP8[$102>>0]|0;
     $104 = $103 << 24 >> 24;
     $__gl$0$ph = $104;
    }
    $105 = ($__d$2|0)==($$$0|0);
    if (!($105)) {
     $__d$347 = $__d$2;$__gl$050 = $__gl$0$ph;$__ig$049 = 0;$__ng$048 = 0;
     while(1) {
      $106 = ($__ng$048|0)==($__gl$050|0);
      $107 = HEAP32[$__me>>2]|0;
      if ($106) {
       $108 = ((($107)) + 4|0);
       HEAP32[$__me>>2] = $108;
       HEAP32[$107>>2] = $__ts;
       $109 = (($__ig$049) + 1)|0;
       $110 = HEAP8[$__grp>>0]|0;
       $111 = $110 & 1;
       $112 = ($111<<24>>24)==(0);
       $113 = $110&255;
       $114 = $113 >>> 1;
       $115 = $112 ? $114 : $96;
       $116 = ($109>>>0)<($115>>>0);
       if ($116) {
        $117 = HEAP32[$8>>2]|0;
        $118 = $112 ? $9 : $117;
        $119 = (($118) + ($109)|0);
        $120 = HEAP8[$119>>0]|0;
        $121 = ($120<<24>>24)==(127);
        $122 = $120 << 24 >> 24;
        $$ = $121 ? -1 : $122;
        $126 = $108;$__gl$1 = $$;$__ig$1 = $109;$__ng$1 = 0;
       } else {
        $126 = $108;$__gl$1 = $__ng$048;$__ig$1 = $109;$__ng$1 = 0;
       }
      } else {
       $126 = $107;$__gl$1 = $__gl$050;$__ig$1 = $__ig$049;$__ng$1 = $__ng$048;
      }
      $123 = ((($__d$347)) + -4|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ((($126)) + 4|0);
      HEAP32[$__me>>2] = $125;
      HEAP32[$126>>2] = $124;
      $127 = (($__ng$1) + 1)|0;
      $128 = ($123|0)==($$$0|0);
      if ($128) {
       break;
      } else {
       $__d$347 = $123;$__gl$050 = $__gl$1;$__ig$049 = $__ig$1;$__ng$048 = $127;
      }
     }
    }
    $$pre29 = HEAP32[$__me>>2]|0;
    $130 = $$pre29;
   }
   $129 = ($53|0)==($130|0);
   if ($129) {
    $$2 = $$$0;
   } else {
    $131 = ((($130)) + -4|0);
    $132 = ($53>>>0)<($131>>>0);
    if ($132) {
     $$01$i$i52 = $53;$135 = $131;
     while(1) {
      $133 = HEAP32[$$01$i$i52>>2]|0;
      $134 = HEAP32[$135>>2]|0;
      HEAP32[$$01$i$i52>>2] = $134;
      HEAP32[$135>>2] = $133;
      $136 = ((($$01$i$i52)) + 4|0);
      $137 = ((($135)) + -4|0);
      $138 = ($136>>>0)<($137>>>0);
      if ($138) {
       $$01$i$i52 = $136;$135 = $137;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  default: {
   $$2 = $$057;
  }
  }
  $139 = (($__p$056) + 1)|0;
  $exitcond = ($139|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$057 = $$2;$__p$056 = $139;
  }
 }
 $140 = HEAP8[$__sn>>0]|0;
 $141 = $140 & 1;
 $142 = ($141<<24>>24)==(0);
 $143 = HEAP32[$0>>2]|0;
 $144 = $140&255;
 $145 = $144 >>> 1;
 $146 = $142 ? $145 : $143;
 $147 = ($146>>>0)>(1);
 if ($147) {
  $148 = HEAP32[$1>>2]|0;
  $149 = $142 ? $0 : $148;
  $150 = ((($149)) + 4|0);
  $151 = (($149) + ($146<<2)|0);
  $152 = HEAP32[$__me>>2]|0;
  $153 = $150;
  $154 = $151;
  $155 = (($154) - ($153))|0;
  $156 = ($146|0)==(1);
  if (!($156)) {
   $$0$i$i30 = $152;$158 = $150;
   while(1) {
    $157 = HEAP32[$158>>2]|0;
    HEAP32[$$0$i$i30>>2] = $157;
    $159 = ((($158)) + 4|0);
    $160 = ((($$0$i$i30)) + 4|0);
    $161 = ($159|0)==($151|0);
    if ($161) {
     break;
    } else {
     $$0$i$i30 = $160;$158 = $159;
    }
   }
  }
  $162 = $155 >>> 2;
  $scevgep$i = (($152) + ($162<<2)|0);
  HEAP32[$__me>>2] = $scevgep$i;
 }
 $163 = $__flags & 176;
 switch ($163|0) {
 case 32:  {
  $164 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $164;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$__mi>>2] = $__mb;
 }
 }
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pre = 0, $$pre17 = 0, $$pre18 = 0, $$pre18$pre = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0;
 var $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 468|0;
 $__loc = sp + 464|0;
 $__pat = sp + 472|0;
 $__dp = sp + 460|0;
 $__ts = sp + 456|0;
 $__grp = sp + 444|0;
 $__sym = sp + 432|0;
 $__sn = sp + 420|0;
 $__fd = sp + 416|0;
 $__mbuf = sp + 16|0;
 $__mi = sp + 8|0;
 $__me = sp + 4|0;
 $0 = sp;
 $1 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $1;
 __THREW__ = 0;
 $2 = (invoke_iii(495,($__loc|0),(7680|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 13;
  } else {
   $5 = HEAP8[$__digits>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   $8 = ((($__digits)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $5&255;
   $11 = $10 >>> 1;
   $12 = $7 ? $11 : $9;
   $13 = ($12|0)==(0);
   if ($13) {
    $31 = 0;
   } else {
    $14 = ((($__digits)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $7 ? $8 : $15;
    $17 = HEAP32[$16>>2]|0;
    $18 = HEAP32[$2>>2]|0;
    $19 = ((($18)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    __THREW__ = 0;
    $21 = (invoke_iii($20|0,($2|0),45)|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     label = 13;
     break;
    }
    $24 = ($17|0)==($21|0);
    $31 = $24;
   }
   HEAP32[$__grp>>2] = 0;
   $25 = ((($__grp)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = ((($__grp)) + 8|0);
   HEAP32[$26>>2] = 0;
   HEAP32[$__sym>>2] = 0;
   $27 = ((($__sym)) + 4|0);
   HEAP32[$27>>2] = 0;
   $28 = ((($__sym)) + 8|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$__sn>>2] = 0;
   $29 = ((($__sn)) + 4|0);
   HEAP32[$29>>2] = 0;
   $30 = ((($__sn)) + 8|0);
   HEAP32[$30>>2] = 0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(725,($__intl|0),($31|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    $94 = ___cxa_find_matching_catch()|0;
    $95 = tempRet0;
    $$0 = $94;$$01 = $95;$$pre18 = $1;
   } else {
    $34 = HEAP8[$__digits>>0]|0;
    $35 = $34 & 1;
    $36 = ($35<<24>>24)==(0);
    $37 = HEAP32[$8>>2]|0;
    $38 = $34&255;
    $39 = $38 >>> 1;
    $40 = $36 ? $39 : $37;
    $41 = HEAP32[$__fd>>2]|0;
    $42 = ($40|0)>($41|0);
    if ($42) {
     $43 = (($40) - ($41))|0;
     $44 = $43 << 1;
     $45 = HEAP8[$__sn>>0]|0;
     $46 = $45 & 1;
     $47 = ($46<<24>>24)==(0);
     $48 = ((($__sn)) + 4|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = $45&255;
     $51 = $50 >>> 1;
     $52 = $47 ? $51 : $49;
     $53 = HEAP8[$__sym>>0]|0;
     $54 = $53 & 1;
     $55 = ($54<<24>>24)==(0);
     $56 = ((($__sym)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $53&255;
     $59 = $58 >>> 1;
     $60 = $55 ? $59 : $57;
     $61 = $44 | 1;
     $62 = (($61) + ($41))|0;
     $63 = (($62) + ($52))|0;
     $64 = (($63) + ($60))|0;
     $85 = $64;
    } else {
     $65 = HEAP8[$__sn>>0]|0;
     $66 = $65 & 1;
     $67 = ($66<<24>>24)==(0);
     $68 = ((($__sn)) + 4|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $65&255;
     $71 = $70 >>> 1;
     $72 = $67 ? $71 : $69;
     $73 = HEAP8[$__sym>>0]|0;
     $74 = $73 & 1;
     $75 = ($74<<24>>24)==(0);
     $76 = ((($__sym)) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $73&255;
     $79 = $78 >>> 1;
     $80 = $75 ? $79 : $77;
     $81 = (($41) + 2)|0;
     $82 = (($81) + ($72))|0;
     $83 = (($82) + ($80))|0;
     $85 = $83;
    }
    $84 = ($85>>>0)>(100);
    if ($84) {
     $86 = $85 << 2;
     $87 = (_malloc($86)|0);
     $88 = $87;
     $89 = ($87|0)==(0|0);
     if ($89) {
      __THREW__ = 0;
      invoke_v(698);
      $90 = __THREW__; __THREW__ = 0;
      $91 = $90&1;
      if ($91) {
       $99 = $88;
      } else {
       $$pre = HEAP8[$__digits>>0]|0;
       $$pre17 = HEAP32[$8>>2]|0;
       $104 = $$pre;$112 = $$pre17;$125 = $88;$__mb$0 = 0;
       label = 17;
      }
     } else {
      $104 = $34;$112 = $37;$125 = $88;$__mb$0 = $87;
      label = 17;
     }
    } else {
     $104 = $34;$112 = $37;$125 = 0;$__mb$0 = $__mbuf;
     label = 17;
    }
    if ((label|0) == 17) {
     $101 = ((($__iob)) + 4|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $104 & 1;
     $105 = ($103<<24>>24)==(0);
     $106 = ((($__digits)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $105 ? $8 : $107;
     $109 = $104&255;
     $110 = $109 >>> 1;
     $111 = $105 ? $110 : $112;
     $113 = (($108) + ($111<<2)|0);
     $114 = HEAP32[$__dp>>2]|0;
     $115 = HEAP32[$__ts>>2]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(726,($__mb$0|0),($__mi|0),($__me|0),($102|0),($108|0),($113|0),($2|0),($31|0),($__pat|0),($114|0),($115|0),($__grp|0),($__sym|0),($__sn|0),($41|0));
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if ($117) {
      $99 = $125;
     } else {
      $118 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $118;
      $119 = HEAP32[$__mi>>2]|0;
      $120 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
      $121 = (invoke_iiiiiii(704,($$byval_copy|0),($__mb$0|0),($119|0),($120|0),($__iob|0),($__fl|0))|0);
      $122 = __THREW__; __THREW__ = 0;
      $123 = $122&1;
      if ($123) {
       $99 = $125;
      } else {
       $124 = ($125|0)==(0);
       if ($124) {
        $127 = $1;
       } else {
        $126 = $125;
        _free($126);
        $$pre20 = HEAP32[$__loc>>2]|0;
        $127 = $$pre20;
       }
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
       (__ZNSt3__114__shared_count16__release_sharedEv($127)|0);
       STACKTOP = sp;return ($121|0);
      }
     }
    }
    $96 = ___cxa_find_matching_catch()|0;
    $97 = tempRet0;
    $98 = ($99|0)==(0);
    if ($98) {
     $$0 = $96;$$01 = $97;$$pre18 = $1;
    } else {
     $100 = $99;
     _free($100);
     $$pre18$pre = HEAP32[$__loc>>2]|0;
     $$0 = $96;$$01 = $97;$$pre18 = $$pre18$pre;
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $$1 = $$0;$$12 = $$01;$128 = $$pre18;
  }
 } while(0);
 if ((label|0) == 13) {
  $92 = ___cxa_find_matching_catch()|0;
  $93 = tempRet0;
  $$1 = $92;$$12 = $93;$128 = $1;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($128)|0);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__18messagesIcED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = ((($__nm)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($__nm)) + 1|0);
 $7 = $3 ? $6 : $5;
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$0$i15 = 0, $$0$i817 = 0, $$02 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ndflt = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__ndflt = sp;
 HEAP32[$__ndflt>>2] = 0;
 $0 = ((($__ndflt)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($__ndflt)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP8[$__dflt>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 $5 = ((($__dflt)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($__dflt)) + 1|0);
 $8 = $4 ? $7 : $6;
 $9 = ((($__dflt)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2&255;
 $12 = $11 >>> 1;
 $13 = $4 ? $12 : $10;
 $14 = (($8) + ($13)|0);
 $15 = ($13|0)>(0);
 L1: do {
  if ($15) {
   $$0$i817 = $8;
   while(1) {
    $16 = HEAP8[$$0$i817>>0]|0;
    __THREW__ = 0;
    invoke_vii(567,($__ndflt|0),($16|0));
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     break;
    }
    $19 = ((($$0$i817)) + 1|0);
    $20 = ($19>>>0)<($14>>>0);
    if ($20) {
     $$0$i817 = $19;
    } else {
     label = 4;
     break L1;
    }
   }
   $35 = ___cxa_find_matching_catch()|0;
   $36 = tempRet0;
   $lpad$phi$index = $35;$lpad$phi$index2 = $36;
   label = 7;
  } else {
   label = 4;
  }
 } while(0);
 L6: do {
  if ((label|0) == 4) {
   $21 = ($__c|0)==(-1);
   $22 = $__c << 1;
   $23 = $22;
   $24 = $21 ? (-1) : $23;
   $25 = HEAP8[$__ndflt>>0]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   $28 = ((($__ndflt)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($__ndflt)) + 1|0);
   $31 = $27 ? $30 : $29;
   __THREW__ = 0;
   $32 = (invoke_iiiii(727,($24|0),($__set|0),($__msgid|0),($31|0))|0);
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $37 = ___cxa_find_matching_catch()|0;
    $38 = tempRet0;
    $lpad$phi$index = $37;$lpad$phi$index2 = $38;
    label = 7;
    break;
   }
   HEAP32[$agg$result>>2] = 0;
   $39 = ((($agg$result)) + 4|0);
   HEAP32[$39>>2] = 0;
   $40 = ((($agg$result)) + 8|0);
   HEAP32[$40>>2] = 0;
   $41 = (_strlen(($32|0))|0);
   $42 = (($32) + ($41)|0);
   $43 = ($41|0)>(0);
   L11: do {
    if ($43) {
     $$0$i15 = $32;
     while(1) {
      $44 = HEAP8[$$0$i15>>0]|0;
      __THREW__ = 0;
      invoke_vii(567,($agg$result|0),($44|0));
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       break;
      }
      $47 = ((($$0$i15)) + 1|0);
      $48 = ($47>>>0)<($42>>>0);
      if ($48) {
       $$0$i15 = $47;
      } else {
       break L11;
      }
     }
     $49 = ___cxa_find_matching_catch()|0;
     $50 = tempRet0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
     $$02 = $49;$$03 = $50;
     break L6;
    }
   } while(0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 7) {
  $$02 = $lpad$phi$index;$$03 = $lpad$phi$index2;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 ___resumeException($$02|0);
 // unreachable;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 return;
}
function __ZNSt3__18messagesIwED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = ((($__nm)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($__nm)) + 1|0);
 $7 = $3 ? $6 : $5;
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$0$i1440 = 0, $$0$i35 = 0, $$1 = 0, $$14 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bn$i = 0, $__bn$i12 = 0, $__buf$i = 0, $__buf$i11 = 0, $__mb$i = 0, $__mb$i10 = 0, $__ndflt = 0, $__nn$i = 0, $__p$0$i1638 = 0, $__p$0$i34 = 0, $__wn$i = 0, $lpad$phi$index = 0;
 var $lpad$phi$index10 = 0, $lpad$phi30$index = 0, $lpad$phi30$index3 = 0, $or$cond$i = 0, $or$cond$i15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__mb$i10 = sp + 184|0;
 $__buf$i11 = sp + 192|0;
 $__bn$i12 = sp + 180|0;
 $__wn$i = sp + 176|0;
 $__mb$i = sp + 168|0;
 $__buf$i = sp + 40|0;
 $__bn$i = sp + 32|0;
 $__nn$i = sp + 28|0;
 $__ndflt = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp;
 HEAP32[$__ndflt>>2] = 0;
 $2 = ((($__ndflt)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($__ndflt)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = 0;
 HEAP32[$0>>2] = (8164);
 $5 = HEAP8[$__dflt>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 $8 = ((($__dflt)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($__dflt)) + 4|0);
 $11 = $7 ? $10 : $9;
 $12 = HEAP32[$10>>2]|0;
 $13 = $5&255;
 $14 = $13 >>> 1;
 $15 = $7 ? $14 : $12;
 $16 = (($11) + ($15<<2)|0);
 $17 = ((($__buf$i11)) + 32|0);
 $18 = ($15|0)>(0);
 L1: do {
  if ($18) {
   $$0$i1440 = $11;
   L2: while(1) {
    HEAP32[$__wn$i>>2] = $$0$i1440;
    $19 = HEAP32[$0>>2]|0;
    $20 = ((($19)) + 12|0);
    $21 = HEAP32[$20>>2]|0;
    __THREW__ = 0;
    $22 = (invoke_iiiiiiiii($21|0,($0|0),($__mb$i10|0),($$0$i1440|0),($16|0),($__wn$i|0),($__buf$i11|0),($17|0),($__bn$i12|0))|0);
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     label = 12;
     break;
    }
    $25 = ($22|0)==(2);
    $26 = HEAP32[$__wn$i>>2]|0;
    $27 = ($26|0)==($$0$i1440|0);
    $or$cond$i15 = $25 | $27;
    if ($or$cond$i15) {
     label = 5;
     break;
    }
    $28 = HEAP32[$__bn$i12>>2]|0;
    $29 = ($__buf$i11>>>0)<($28>>>0);
    if ($29) {
     $__p$0$i1638 = $__buf$i11;
     while(1) {
      $33 = HEAP8[$__p$0$i1638>>0]|0;
      __THREW__ = 0;
      invoke_vii(567,($__ndflt|0),($33|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       label = 11;
       break L2;
      }
      $36 = ((($__p$0$i1638)) + 1|0);
      $37 = HEAP32[$__bn$i12>>2]|0;
      $38 = ($36>>>0)<($37>>>0);
      if ($38) {
       $__p$0$i1638 = $36;
      } else {
       break;
      }
     }
    }
    $39 = HEAP32[$__wn$i>>2]|0;
    $40 = ($39>>>0)<($16>>>0);
    $41 = ($22|0)!=(2);
    $42 = $41 & $40;
    if ($42) {
     $$0$i1440 = $39;
    } else {
     label = 9;
     break L1;
    }
   }
   if ((label|0) == 5) {
    __THREW__ = 0;
    invoke_vi(710,(20107|0));
    $30 = __THREW__; __THREW__ = 0;
    $31 = ___cxa_find_matching_catch()|0;
    $32 = tempRet0;
    $lpad$phi30$index = $31;$lpad$phi30$index3 = $32;
   }
   else if ((label|0) == 11) {
    $59 = ___cxa_find_matching_catch()|0;
    $60 = tempRet0;
    $lpad$phi30$index = $59;$lpad$phi30$index3 = $60;
   }
   else if ((label|0) == 12) {
    $61 = ___cxa_find_matching_catch()|0;
    $62 = tempRet0;
    $lpad$phi30$index = $61;$lpad$phi30$index3 = $62;
   }
   $$1 = $lpad$phi30$index;$$14 = $lpad$phi30$index3;
  } else {
   label = 9;
  }
 } while(0);
 L16: do {
  if ((label|0) == 9) {
   $43 = ($__c|0)==(-1);
   $44 = $__c << 1;
   $45 = $44;
   $46 = $43 ? (-1) : $45;
   $47 = HEAP8[$__ndflt>>0]|0;
   $48 = $47 & 1;
   $49 = ($48<<24>>24)==(0);
   $50 = ((($__ndflt)) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($__ndflt)) + 1|0);
   $53 = $49 ? $52 : $51;
   __THREW__ = 0;
   $54 = (invoke_iiiii(727,($46|0),($__set|0),($__msgid|0),($53|0))|0);
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    $57 = ___cxa_find_matching_catch()|0;
    $58 = tempRet0;
    $$1 = $57;$$14 = $58;
    break;
   }
   HEAP32[$agg$result>>2] = 0;
   $63 = ((($agg$result)) + 4|0);
   HEAP32[$63>>2] = 0;
   $64 = ((($agg$result)) + 8|0);
   HEAP32[$64>>2] = 0;
   $65 = ((($1)) + 4|0);
   HEAP32[$65>>2] = 0;
   HEAP32[$1>>2] = (8212);
   $66 = (_strlen(($54|0))|0);
   $67 = (($54) + ($66)|0);
   $68 = $67;
   $69 = ((($__buf$i)) + 128|0);
   $70 = ($66|0)>(0);
   L21: do {
    if ($70) {
     $$0$i35 = $54;
     L22: while(1) {
      HEAP32[$__nn$i>>2] = $$0$i35;
      $71 = HEAP32[$1>>2]|0;
      $72 = ((($71)) + 16|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = $$0$i35;
      $75 = (($68) - ($74))|0;
      $76 = ($75|0)>(32);
      $77 = ((($$0$i35)) + 32|0);
      $78 = $76 ? $77 : $67;
      __THREW__ = 0;
      $79 = (invoke_iiiiiiiii($73|0,($1|0),($__mb$i|0),($$0$i35|0),($78|0),($__nn$i|0),($__buf$i|0),($69|0),($__bn$i|0))|0);
      $80 = __THREW__; __THREW__ = 0;
      $81 = $80&1;
      if ($81) {
       label = 24;
       break;
      }
      $82 = ($79|0)==(2);
      $83 = HEAP32[$__nn$i>>2]|0;
      $84 = ($83|0)==($$0$i35|0);
      $or$cond$i = $82 | $84;
      if ($or$cond$i) {
       label = 18;
       break;
      }
      $85 = HEAP32[$__bn$i>>2]|0;
      $86 = ($__buf$i>>>0)<($85>>>0);
      if ($86) {
       $__p$0$i34 = $__buf$i;
       while(1) {
        $90 = HEAP32[$__p$0$i34>>2]|0;
        __THREW__ = 0;
        invoke_vii(719,($agg$result|0),($90|0));
        $91 = __THREW__; __THREW__ = 0;
        $92 = $91&1;
        if ($92) {
         label = 23;
         break L22;
        }
        $93 = ((($__p$0$i34)) + 4|0);
        $94 = HEAP32[$__bn$i>>2]|0;
        $95 = ($93>>>0)<($94>>>0);
        if ($95) {
         $__p$0$i34 = $93;
        } else {
         break;
        }
       }
      }
      $96 = HEAP32[$__nn$i>>2]|0;
      $97 = ($96>>>0)<($67>>>0);
      $98 = ($79|0)!=(2);
      $99 = $98 & $97;
      if ($99) {
       $$0$i35 = $96;
      } else {
       break L21;
      }
     }
     if ((label|0) == 18) {
      __THREW__ = 0;
      invoke_vi(710,(20107|0));
      $87 = __THREW__; __THREW__ = 0;
      $88 = ___cxa_find_matching_catch()|0;
      $89 = tempRet0;
      $lpad$phi$index = $88;$lpad$phi$index10 = $89;
     }
     else if ((label|0) == 23) {
      $100 = ___cxa_find_matching_catch()|0;
      $101 = tempRet0;
      $lpad$phi$index = $100;$lpad$phi$index10 = $101;
     }
     else if ((label|0) == 24) {
      $102 = ___cxa_find_matching_catch()|0;
      $103 = tempRet0;
      $lpad$phi$index = $102;$lpad$phi$index10 = $103;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($agg$result);
     $$1 = $lpad$phi$index;$$14 = $lpad$phi$index10;
     break L16;
    }
   } while(0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
   STACKTOP = sp;return;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 return;
}
function __ZNSt3__16locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (7664);
 $2 = ((($this)) + 8|0);
 __THREW__ = 0;
 invoke_vii(728,($2|0),28);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $83 = ___cxa_find_matching_catch()|0;
  $84 = tempRet0;
  $$1 = $84;$$12 = $83;
 } else {
  $5 = ((($this)) + 144|0);
  __THREW__ = 0;
  invoke_viii(499,($5|0),(20037|0),1);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $85 = ___cxa_find_matching_catch()|0;
   $86 = tempRet0;
   $$0 = $86;$$01 = $85;
  } else {
   $8 = HEAP32[$2>>2]|0;
   $9 = ((($this)) + 12|0);
   $$pre$i$i$i = HEAP32[$9>>2]|0;
   $10 = ($$pre$i$i$i|0)==($8|0);
   if (!($10)) {
    $12 = $$pre$i$i$i;
    while(1) {
     $11 = ((($12)) + -4|0);
     $13 = ($11|0)==($8|0);
     if ($13) {
      $$lcssa = $11;
      break;
     } else {
      $12 = $11;
     }
    }
    HEAP32[$9>>2] = $$lcssa;
   }
   HEAP32[(1964)>>2] = 0;
   HEAP32[1960>>2] = (6592);
   __THREW__ = 0;
   invoke_vii(729,($this|0),(1960|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   do {
    if ($15) {
     label = 42;
    } else {
     HEAP32[(1972)>>2] = 0;
     HEAP32[1968>>2] = (6632);
     __THREW__ = 0;
     invoke_vii(730,($this|0),(1968|0));
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if ($17) {
      label = 42;
     } else {
      HEAP32[(1980)>>2] = 0;
      HEAP32[1976>>2] = (7704);
      HEAP32[(1984)>>2] = 0;
      HEAP8[(1988)>>0] = 0;
      $18 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
      HEAP32[(1984)>>2] = $18;
      __THREW__ = 0;
      invoke_vii(731,($this|0),(1976|0));
      $19 = __THREW__; __THREW__ = 0;
      $20 = $19&1;
      if ($20) {
       label = 42;
      } else {
       HEAP32[(1996)>>2] = 0;
       HEAP32[1992>>2] = (7952);
       __THREW__ = 0;
       invoke_vii(732,($this|0),(1992|0));
       $21 = __THREW__; __THREW__ = 0;
       $22 = $21&1;
       if ($22) {
        label = 42;
       } else {
        HEAP32[(2004)>>2] = 0;
        HEAP32[2000>>2] = (8020);
        __THREW__ = 0;
        invoke_vii(733,($this|0),(2000|0));
        $23 = __THREW__; __THREW__ = 0;
        $24 = $23&1;
        if ($24) {
         label = 42;
        } else {
         __THREW__ = 0;
         invoke_vii(734,(2008|0),1);
         $25 = __THREW__; __THREW__ = 0;
         $26 = $25&1;
         if ($26) {
          label = 42;
         } else {
          __THREW__ = 0;
          invoke_vii(735,($this|0),(2008|0));
          $27 = __THREW__; __THREW__ = 0;
          $28 = $27&1;
          if ($28) {
           label = 42;
          } else {
           HEAP32[(2028)>>2] = 0;
           HEAP32[2024>>2] = (8068);
           __THREW__ = 0;
           invoke_vii(736,($this|0),(2024|0));
           $29 = __THREW__; __THREW__ = 0;
           $30 = $29&1;
           if ($30) {
            label = 42;
           } else {
            HEAP32[(2036)>>2] = 0;
            HEAP32[2032>>2] = (8116);
            __THREW__ = 0;
            invoke_vii(737,($this|0),(2032|0));
            $31 = __THREW__; __THREW__ = 0;
            $32 = $31&1;
            if ($32) {
             label = 42;
            } else {
             __ZNSt3__18numpunctIcEC2Ej(2040,1);
             __THREW__ = 0;
             invoke_vii(738,($this|0),(2040|0));
             $33 = __THREW__; __THREW__ = 0;
             $34 = $33&1;
             if ($34) {
              label = 42;
             } else {
              __ZNSt3__18numpunctIwEC2Ej(2064,1);
              __THREW__ = 0;
              invoke_vii(739,($this|0),(2064|0));
              $35 = __THREW__; __THREW__ = 0;
              $36 = $35&1;
              if ($36) {
               label = 42;
              } else {
               HEAP32[(2100)>>2] = 0;
               HEAP32[2096>>2] = (6672);
               __THREW__ = 0;
               invoke_vii(740,($this|0),(2096|0));
               $37 = __THREW__; __THREW__ = 0;
               $38 = $37&1;
               if ($38) {
                label = 42;
               } else {
                HEAP32[(2108)>>2] = 0;
                HEAP32[2104>>2] = (6744);
                __THREW__ = 0;
                invoke_vii(741,($this|0),(2104|0));
                $39 = __THREW__; __THREW__ = 0;
                $40 = $39&1;
                if ($40) {
                 label = 42;
                } else {
                 HEAP32[(2116)>>2] = 0;
                 HEAP32[2112>>2] = (6816);
                 __THREW__ = 0;
                 invoke_vii(742,($this|0),(2112|0));
                 $41 = __THREW__; __THREW__ = 0;
                 $42 = $41&1;
                 if ($42) {
                  label = 42;
                 } else {
                  HEAP32[(2124)>>2] = 0;
                  HEAP32[2120>>2] = (6876);
                  __THREW__ = 0;
                  invoke_vii(743,($this|0),(2120|0));
                  $43 = __THREW__; __THREW__ = 0;
                  $44 = $43&1;
                  if ($44) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2132)>>2] = 0;
                  HEAP32[2128>>2] = (7184);
                  __THREW__ = 0;
                  invoke_vii(744,($this|0),(2128|0));
                  $45 = __THREW__; __THREW__ = 0;
                  $46 = $45&1;
                  if ($46) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2140)>>2] = 0;
                  HEAP32[2136>>2] = (7248);
                  __THREW__ = 0;
                  invoke_vii(745,($this|0),(2136|0));
                  $47 = __THREW__; __THREW__ = 0;
                  $48 = $47&1;
                  if ($48) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2148)>>2] = 0;
                  HEAP32[2144>>2] = (7312);
                  __THREW__ = 0;
                  invoke_vii(746,($this|0),(2144|0));
                  $49 = __THREW__; __THREW__ = 0;
                  $50 = $49&1;
                  if ($50) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2156)>>2] = 0;
                  HEAP32[2152>>2] = (7376);
                  __THREW__ = 0;
                  invoke_vii(747,($this|0),(2152|0));
                  $51 = __THREW__; __THREW__ = 0;
                  $52 = $51&1;
                  if ($52) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2164)>>2] = 0;
                  HEAP32[2160>>2] = (7440);
                  __THREW__ = 0;
                  invoke_vii(748,($this|0),(2160|0));
                  $53 = __THREW__; __THREW__ = 0;
                  $54 = $53&1;
                  if ($54) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2172)>>2] = 0;
                  HEAP32[2168>>2] = (7476);
                  __THREW__ = 0;
                  invoke_vii(749,($this|0),(2168|0));
                  $55 = __THREW__; __THREW__ = 0;
                  $56 = $55&1;
                  if ($56) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2180)>>2] = 0;
                  HEAP32[2176>>2] = (7512);
                  __THREW__ = 0;
                  invoke_vii(750,($this|0),(2176|0));
                  $57 = __THREW__; __THREW__ = 0;
                  $58 = $57&1;
                  if ($58) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2188)>>2] = 0;
                  HEAP32[2184>>2] = (7548);
                  __THREW__ = 0;
                  invoke_vii(751,($this|0),(2184|0));
                  $59 = __THREW__; __THREW__ = 0;
                  $60 = $59&1;
                  if ($60) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2196)>>2] = 0;
                  HEAP32[2192>>2] = (6936);
                  HEAP32[(2200)>>2] = (6984);
                  __THREW__ = 0;
                  invoke_vii(752,($this|0),(2192|0));
                  $61 = __THREW__; __THREW__ = 0;
                  $62 = $61&1;
                  if ($62) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2212)>>2] = 0;
                  HEAP32[2208>>2] = (7028);
                  HEAP32[(2216)>>2] = (7076);
                  __THREW__ = 0;
                  invoke_vii(753,($this|0),(2208|0));
                  $63 = __THREW__; __THREW__ = 0;
                  $64 = $63&1;
                  if ($64) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2228)>>2] = 0;
                  HEAP32[2224>>2] = (7932);
                  __THREW__ = 0;
                  $65 = (invoke_i(692)|0);
                  $66 = __THREW__; __THREW__ = 0;
                  $67 = $66&1;
                  if ($67) {
                   $68 = ___cxa_find_matching_catch()|0;
                   $69 = tempRet0;
                   $eh$lpad$body$index3Z2D = $69;$eh$lpad$body$indexZ2D = $68;
                   break;
                  }
                  HEAP32[(2232)>>2] = $65;
                  HEAP32[2224>>2] = (7120);
                  __THREW__ = 0;
                  invoke_vii(754,($this|0),(2224|0));
                  $70 = __THREW__; __THREW__ = 0;
                  $71 = $70&1;
                  if ($71) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2244)>>2] = 0;
                  HEAP32[2240>>2] = (7932);
                  __THREW__ = 0;
                  $72 = (invoke_i(692)|0);
                  $73 = __THREW__; __THREW__ = 0;
                  $74 = $73&1;
                  if ($74) {
                   $75 = ___cxa_find_matching_catch()|0;
                   $76 = tempRet0;
                   $eh$lpad$body$index3Z2D = $76;$eh$lpad$body$indexZ2D = $75;
                   break;
                  }
                  HEAP32[(2248)>>2] = $72;
                  HEAP32[2240>>2] = (7152);
                  __THREW__ = 0;
                  invoke_vii(755,($this|0),(2240|0));
                  $77 = __THREW__; __THREW__ = 0;
                  $78 = $77&1;
                  if ($78) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2260)>>2] = 0;
                  HEAP32[2256>>2] = (7584);
                  __THREW__ = 0;
                  invoke_vii(756,($this|0),(2256|0));
                  $79 = __THREW__; __THREW__ = 0;
                  $80 = $79&1;
                  if ($80) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2268)>>2] = 0;
                  HEAP32[2264>>2] = (7624);
                  __THREW__ = 0;
                  invoke_vii(757,($this|0),(2264|0));
                  $81 = __THREW__; __THREW__ = 0;
                  $82 = $81&1;
                  if ($82) {
                   label = 42;
                   break;
                  }
                  return;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 42) {
    $87 = ___cxa_find_matching_catch()|0;
    $88 = tempRet0;
    $eh$lpad$body$index3Z2D = $88;$eh$lpad$body$indexZ2D = $87;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
   $$0 = $eh$lpad$body$index3Z2D;$$01 = $eh$lpad$body$indexZ2D;
  }
  __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($2);
  $$1 = $$0;$$12 = $$01;
 }
 ___resumeException($$12|0);
 // unreachable;
}
function __ZNSt3__16locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2272>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2272|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(758)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((2272|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[8452>>2] = 8448;
     ___cxa_guard_release((2272|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[8452>>2]|0;
 return ($6|0);
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $0 = ((($this)) + 8|0);
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 do {
  if ($8) {
   $16 = $3;
  } else {
   $9 = (($id) + 1)|0;
   __THREW__ = 0;
   invoke_vii(759,($0|0),($9|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $$pre = HEAP32[$0>>2]|0;
    $16 = $$pre;
    break;
   }
   $12 = ___cxa_find_matching_catch()|0;
   $13 = tempRet0;
   $14 = ($f|0)==(0|0);
   if (!($14)) {
    (__ZNSt3__114__shared_count16__release_sharedEv($f)|0);
   }
   ___resumeException($12|0);
   // unreachable;
  }
 } while(0);
 $15 = (($16) + ($id<<2)|0);
 $17 = HEAP32[$15>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $20 = $16;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  $$pre2 = HEAP32[$0>>2]|0;
  $20 = $$pre2;
 }
 $19 = (($20) + ($id<<2)|0);
 HEAP32[$19>>2] = $f;
 return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7664);
 $0 = ((($this)) + 8|0);
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($2|0)==($3|0);
 if (!($4)) {
  $6 = $3;$i$01 = 0;
  while(1) {
   $5 = (($6) + ($i$01<<2)|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
   }
   $9 = (($i$01) + 1)|0;
   $10 = HEAP32[$1>>2]|0;
   $11 = HEAP32[$0>>2]|0;
   $12 = $10;
   $13 = $11;
   $14 = (($12) - ($13))|0;
   $15 = $14 >> 2;
   $16 = ($9>>>0)<($15>>>0);
   if ($16) {
    $6 = $11;$i$01 = $9;
   } else {
    break;
   }
  }
 }
 $17 = ((($this)) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($17);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
 return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__16locale5__imp9use_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale5__imp9has_facetEl($this,$id)|0);
 if ($0) {
  $2 = ((($this)) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($id<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  return ($5|0);
 } else {
  $1 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($1);
  ___cxa_throw(($1|0),(672|0),(152|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__16locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impC2Ej(2280,1);
 HEAP32[8448>>2] = 2280;
 return (8448|0);
}
function __ZNSt3__16locale5__imp11make_globalEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale7classicEv()|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[8456>>2] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 return (8456|0);
}
function __ZNSt3__16locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2440>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2440|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(760)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((2440|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[8460>>2] = 8456;
     ___cxa_guard_release((2440|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[8460>>2]|0;
 return ($6|0);
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(761)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  HEAP32[$this>>2] = $3;
  __ZNSt3__114__shared_count12__add_sharedEv($3);
  return;
 }
}
function __ZNSt3__16localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 HEAP32[$this>>2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 return;
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 return;
}
function __ZNKSt3__16locale9has_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv($x)|0);
 $2 = (__ZNKSt3__16locale5__imp9has_facetEl($0,$1)|0);
 return ($2|0);
}
function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__p$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p$i = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(-1);
 if (!($1)) {
  HEAP32[$__p$i>>2] = $this;
  $2 = ((($__p$i)) + 4|0);
  HEAP32[$2>>2] = (762);
  $3 = ((($__p$i)) + 8|0);
  HEAP32[$3>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($this,$__p$i,763);
 }
 $4 = ((($this)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv($x)|0);
 $2 = (__ZNKSt3__16locale5__imp9use_facetEl($0,$1)|0);
 return ($2|0);
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$this>>2]|0;
  $2 = ((($1)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  FUNCTION_TABLE_vi[$3 & 1023]($this);
 }
 return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7676>>2]|0;HEAP32[7676>>2] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $2 = ((($this)) + 4|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
  $1 = (($0) + ($c<<1)|0);
  $2 = HEAP16[$1>>1]|0;
  $3 = $2 & $m;
  $4 = ($3<<16>>16)!=(0);
  $5 = $4;
 } else {
  $5 = 0;
 }
 return ($5|0);
}
function __ZNSt3__15ctypeIcE13classic_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(764)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$015 = 0, $$06 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $low3 = $low;
 $0 = $high;
 $1 = (($0) - ($low3))|0;
 $2 = $1 >>> 2;
 $3 = ($low|0)==($high|0);
 if (!($3)) {
  $$015 = $low;$$06 = $vec;
  while(1) {
   $4 = HEAP32[$$015>>2]|0;
   $isascii = ($4>>>0)<(128);
   if ($isascii) {
    $5 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
    $6 = (($5) + ($4<<1)|0);
    $7 = HEAP16[$6>>1]|0;
    $8 = $7&65535;
    $10 = $8;
   } else {
    $10 = 0;
   }
   $9 = $10&65535;
   HEAP16[$$06>>1] = $9;
   $11 = ((($$015)) + 4|0);
   $12 = ((($$06)) + 2|0);
   $13 = ($11|0)==($high|0);
   if ($13) {
    break;
   } else {
    $$015 = $11;$$06 = $12;
   }
  }
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $high;
  } else {
   $$01 = $low;
   while(1) {
    $1 = HEAP32[$$01>>2]|0;
    $isascii = ($1>>>0)<(128);
    if ($isascii) {
     $2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
     $3 = (($2) + ($1<<1)|0);
     $4 = HEAP16[$3>>1]|0;
     $5 = $4 & $m;
     $6 = ($5<<16>>16)==(0);
     if (!($6)) {
      $$0$lcssa = $$01;
      break L1;
     }
    }
    $7 = ((($$01)) + 4|0);
    $8 = ($7|0)==($high|0);
    if ($8) {
     $$0$lcssa = $high;
     break;
    } else {
     $$01 = $7;
    }
   }
  }
 } while(0);
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $high;
  } else {
   $$01 = $low;
   while(1) {
    $1 = HEAP32[$$01>>2]|0;
    $isascii = ($1>>>0)<(128);
    if (!($isascii)) {
     $$0$lcssa = $$01;
     break L1;
    }
    $2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
    $3 = (($2) + ($1<<1)|0);
    $4 = HEAP16[$3>>1]|0;
    $5 = $4 & $m;
    $6 = ($5<<16>>16)==(0);
    if ($6) {
     $$0$lcssa = $$01;
     break L1;
    }
    $7 = ((($$01)) + 4|0);
    $8 = ($7|0)==($high|0);
    if ($8) {
     $$0$lcssa = $high;
     break;
    } else {
     $$01 = $7;
    }
   }
  }
 } while(0);
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
  $1 = (($0) + ($c<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2;
 } else {
  $3 = $c;
 }
 return ($3|0);
}
function __ZNSt3__15ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(765)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low2 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low2 = $low;
 $0 = $high;
 $1 = (($0) - ($low2))|0;
 $2 = $1 >>> 2;
 $3 = ($low|0)==($high|0);
 if (!($3)) {
  $$04 = $low;
  while(1) {
   $4 = HEAP32[$$04>>2]|0;
   $isascii = ($4>>>0)<(128);
   if ($isascii) {
    $5 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
    $6 = (($5) + ($4<<2)|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = $7;
   } else {
    $8 = $4;
   }
   HEAP32[$$04>>2] = $8;
   $9 = ((($$04)) + 4|0);
   $10 = ($9|0)==($high|0);
   if ($10) {
    break;
   } else {
    $$04 = $9;
   }
  }
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
  $1 = (($0) + ($c<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2;
 } else {
  $3 = $c;
 }
 return ($3|0);
}
function __ZNSt3__15ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(766)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low2 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low2 = $low;
 $0 = $high;
 $1 = (($0) - ($low2))|0;
 $2 = $1 >>> 2;
 $3 = ($low|0)==($high|0);
 if (!($3)) {
  $$04 = $low;
  while(1) {
   $4 = HEAP32[$$04>>2]|0;
   $isascii = ($4>>>0)<(128);
   if ($isascii) {
    $5 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
    $6 = (($5) + ($4<<2)|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = $7;
   } else {
    $8 = $4;
   }
   HEAP32[$$04>>2] = $8;
   $9 = ((($$04)) + 4|0);
   $10 = ($9|0)==($high|0);
   if ($10) {
    break;
   } else {
    $$04 = $9;
   }
  }
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 return ($0|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if (!($0)) {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $1 = HEAP8[$$012>>0]|0;
   $2 = $1 << 24 >> 24;
   HEAP32[$$03>>2] = $2;
   $3 = ((($$012)) + 1|0);
   $4 = ((($$03)) + 4|0);
   $5 = ($3|0)==($high|0);
   if ($5) {
    break;
   } else {
    $$012 = $3;$$03 = $4;
   }
  }
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $0 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $0 = $c&255;
 $$0 = $isascii ? $0 : $dfault;
 return ($$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$015 = 0, $$06 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low3 = $low;
 $0 = $high;
 $1 = (($0) - ($low3))|0;
 $2 = $1 >>> 2;
 $3 = ($low|0)==($high|0);
 if (!($3)) {
  $$015 = $low;$$06 = $dest;
  while(1) {
   $4 = HEAP32[$$015>>2]|0;
   $isascii = ($4>>>0)<(128);
   $5 = $4&255;
   $$dfault = $isascii ? $5 : $dfault;
   HEAP8[$$06>>0] = $$dfault;
   $6 = ((($$015)) + 4|0);
   $7 = ((($$06)) + 1|0);
   $8 = ($6|0)==($high|0);
   if ($8) {
    break;
   } else {
    $$015 = $6;$$06 = $7;
   }
  }
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7704);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($this)) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   __ZdaPv($1);
  }
 }
 return;
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__15ctypeIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if ($isascii1) {
  $0 = $c&255;
  $1 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
  $2 = (($1) + ($0<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3&255;
  $5 = $4;
 } else {
  $5 = $c;
 }
 return ($5|0);
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if (!($0)) {
  $$02 = $low;
  while(1) {
   $1 = HEAP8[$$02>>0]|0;
   $isascii1 = ($1<<24>>24)>(-1);
   if ($isascii1) {
    $2 = $1 << 24 >> 24;
    $3 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
    $4 = (($3) + ($2<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = $5&255;
    $7 = $6;
   } else {
    $7 = $1;
   }
   HEAP8[$$02>>0] = $7;
   $8 = ((($$02)) + 1|0);
   $9 = ($8|0)==($high|0);
   if ($9) {
    break;
   } else {
    $$02 = $8;
   }
  }
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if ($isascii1) {
  $0 = $c << 24 >> 24;
  $1 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
  $2 = (($1) + ($0<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3&255;
  $5 = $4;
 } else {
  $5 = $c;
 }
 return ($5|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if (!($0)) {
  $$02 = $low;
  while(1) {
   $1 = HEAP8[$$02>>0]|0;
   $isascii1 = ($1<<24>>24)>(-1);
   if ($isascii1) {
    $2 = $1 << 24 >> 24;
    $3 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
    $4 = (($3) + ($2<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = $5&255;
    $7 = $6;
   } else {
    $7 = $1;
   }
   HEAP8[$$02>>0] = $7;
   $8 = ((($$02)) + 1|0);
   $9 = ($8|0)==($high|0);
   if ($9) {
    break;
   } else {
    $$02 = $8;
   }
  }
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if (!($0)) {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $1 = HEAP8[$$012>>0]|0;
   HEAP8[$$03>>0] = $1;
   $2 = ((($$012)) + 1|0);
   $3 = ((($$03)) + 1|0);
   $4 = ($2|0)==($high|0);
   if ($4) {
    break;
   } else {
    $$012 = $2;$$03 = $3;
   }
  }
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$013 = 0, $$04 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if (!($0)) {
  $$013 = $low;$$04 = $dest;
  while(1) {
   $1 = HEAP8[$$013>>0]|0;
   $isascii2 = ($1<<24>>24)>(-1);
   $$dfault = $isascii2 ? $1 : $dfault;
   HEAP8[$$04>>0] = $$dfault;
   $2 = ((($$013)) + 1|0);
   $3 = ((($$04)) + 1|0);
   $4 = ($2|0)==($high|0);
   if ($4) {
    break;
   } else {
    $$013 = $2;$$04 = $3;
   }
  }
 }
 return ($high|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 return ($5|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (7772);
 __THREW__ = 0;
 $2 = (invoke_i(692)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___resumeException($6|0);
  // unreachable;
 } else {
  $5 = ((($this)) + 8|0);
  HEAP32[$5>>2] = $2;
  return;
 }
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$01$be = 0, $$01128 = 0, $$01128$lcssa170 = 0, $$02$be = 0, $$02127 = 0, $$02127$lcssa177 = 0, $$1$lcssa = 0, $$1113 = 0, $$lcssa = 0, $$lcssa183 = 0, $$lcssa191 = 0, $$pre = 0, $$pre59 = 0, $$pre60 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$0133 = 0, $fend$1$be = 0, $fend$1129 = 0, $fend$2$lcssa = 0, $fend$2120 = 0, $n$0117 = 0, $not$ = 0, $or$cond = 0, $or$cond126 = 0, $p$0118 = 0, $save_state = 0;
 var $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $tmp = sp + 8|0;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   $fend$0$lcssa = $frm_end;
  } else {
   $fend$0133 = $frm;
   while(1) {
    $1 = HEAP32[$fend$0133>>2]|0;
    $2 = ($1|0)==(0);
    if ($2) {
     $fend$0$lcssa = $fend$0133;
     break L1;
    }
    $3 = ((($fend$0133)) + 4|0);
    $4 = ($3|0)==($frm_end|0);
    if ($4) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$0133 = $3;
    }
   }
  }
 } while(0);
 HEAP32[$to_nxt>>2] = $to;
 HEAP32[$frm_nxt>>2] = $frm;
 $5 = $to_end;
 $6 = ((($this)) + 8|0);
 $7 = ($frm|0)==($frm_end|0);
 $8 = ($to|0)==($to_end|0);
 $or$cond126 = $8 | $7;
 L6: do {
  if ($or$cond126) {
   $111 = $frm;
   label = 47;
  } else {
   $$01128 = $frm;$$02127 = $to;$fend$1129 = $fend$0$lcssa;
   L7: while(1) {
    $9 = $st;
    $10 = $9;
    $11 = HEAP32[$10>>2]|0;
    $12 = (($9) + 4)|0;
    $13 = $12;
    $14 = HEAP32[$13>>2]|0;
    $15 = $save_state;
    $16 = $15;
    HEAP32[$16>>2] = $11;
    $17 = (($15) + 4)|0;
    $18 = $17;
    HEAP32[$18>>2] = $14;
    $19 = $fend$1129;
    $20 = $$01128;
    $21 = (($19) - ($20))|0;
    $22 = $21 >> 2;
    $23 = $$02127;
    $24 = (($5) - ($23))|0;
    $25 = HEAP32[$6>>2]|0;
    $26 = (_uselocale(($25|0))|0);
    __THREW__ = 0;
    $27 = (invoke_iiiiii(767,($$02127|0),($frm_nxt|0),($22|0),($24|0),($st|0))|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     $$lcssa183 = $26;
     label = 9;
     break;
    }
    $30 = ($26|0)==(0|0);
    if (!($30)) {
     __THREW__ = 0;
     (invoke_ii(707,($26|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      label = 8;
      break;
     }
    }
    switch ($27|0) {
    case 0:  {
     $$0 = 1;
     break L6;
     break;
    }
    case -1:  {
     $$01128$lcssa170 = $$01128;$$02127$lcssa177 = $$02127;
     label = 14;
     break L7;
     break;
    }
    default: {
    }
    }
    $69 = HEAP32[$to_nxt>>2]|0;
    $70 = (($69) + ($27)|0);
    HEAP32[$to_nxt>>2] = $70;
    $71 = ($70|0)==($to_end|0);
    if ($71) {
     label = 27;
     break;
    }
    $72 = ($fend$1129|0)==($frm_end|0);
    if ($72) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $$01$be = $$pre;$$02$be = $70;$fend$1$be = $frm_end;
    } else {
     $75 = HEAP32[$6>>2]|0;
     $76 = (_uselocale(($75|0))|0);
     __THREW__ = 0;
     $77 = (invoke_iiii(768,($tmp|0),0,($st|0))|0);
     $78 = __THREW__; __THREW__ = 0;
     $79 = $78&1;
     if ($79) {
      $$lcssa191 = $76;
      label = 35;
      break;
     }
     $80 = ($76|0)==(0|0);
     if (!($80)) {
      __THREW__ = 0;
      (invoke_ii(707,($76|0))|0);
      $81 = __THREW__; __THREW__ = 0;
      $82 = $81&1;
      if ($82) {
       label = 34;
       break;
      }
     }
     $92 = ($77|0)==(-1);
     if ($92) {
      $$0 = 2;
      break L6;
     }
     $93 = HEAP32[$to_nxt>>2]|0;
     $94 = $93;
     $95 = (($5) - ($94))|0;
     $96 = ($77>>>0)>($95>>>0);
     if ($96) {
      $$0 = 1;
      break L6;
     }
     $97 = ($77|0)==(0);
     if (!($97)) {
      $n$0117 = $77;$p$0118 = $tmp;
      while(1) {
       $98 = ((($p$0118)) + 1|0);
       $99 = HEAP8[$p$0118>>0]|0;
       $100 = HEAP32[$to_nxt>>2]|0;
       $101 = ((($100)) + 1|0);
       HEAP32[$to_nxt>>2] = $101;
       HEAP8[$100>>0] = $99;
       $102 = (($n$0117) + -1)|0;
       $103 = ($102|0)==(0);
       if ($103) {
        break;
       } else {
        $n$0117 = $102;$p$0118 = $98;
       }
      }
     }
     $104 = HEAP32[$frm_nxt>>2]|0;
     $105 = ((($104)) + 4|0);
     HEAP32[$frm_nxt>>2] = $105;
     $106 = ($105|0)==($frm_end|0);
     L28: do {
      if ($106) {
       $fend$2$lcssa = $frm_end;
      } else {
       $fend$2120 = $105;
       while(1) {
        $107 = HEAP32[$fend$2120>>2]|0;
        $108 = ($107|0)==(0);
        if ($108) {
         $fend$2$lcssa = $fend$2120;
         break L28;
        }
        $109 = ((($fend$2120)) + 4|0);
        $110 = ($109|0)==($frm_end|0);
        if ($110) {
         $fend$2$lcssa = $frm_end;
         break;
        } else {
         $fend$2120 = $109;
        }
       }
      }
     } while(0);
     $$pre59 = HEAP32[$to_nxt>>2]|0;
     $$01$be = $105;$$02$be = $$pre59;$fend$1$be = $fend$2$lcssa;
    }
    $73 = ($$01$be|0)==($frm_end|0);
    $74 = ($$02$be|0)==($to_end|0);
    $or$cond = $74 | $73;
    if ($or$cond) {
     $111 = $$01$be;
     label = 47;
     break L6;
    } else {
     $$01128 = $$01$be;$$02127 = $$02$be;$fend$1129 = $fend$1$be;
    }
   }
   if ((label|0) == 8) {
    $33 = ___cxa_find_matching_catch(0|0)|0;
    $34 = tempRet0;
    ___clang_call_terminate($33);
    // unreachable;
   }
   else if ((label|0) == 9) {
    $35 = ___cxa_find_matching_catch()|0;
    $36 = tempRet0;
    $37 = ($$lcssa183|0)==(0|0);
    if (!($37)) {
     __THREW__ = 0;
     (invoke_ii(707,($$lcssa183|0))|0);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      $40 = ___cxa_find_matching_catch(0|0)|0;
      $41 = tempRet0;
      ___clang_call_terminate($40);
      // unreachable;
     }
    }
    ___resumeException($35|0);
    // unreachable;
   }
   else if ((label|0) == 14) {
    HEAP32[$to_nxt>>2] = $$02127$lcssa177;
    $42 = HEAP32[$frm_nxt>>2]|0;
    $43 = ($$01128$lcssa170|0)==($42|0);
    L42: do {
     if ($43) {
      $$1$lcssa = $$01128$lcssa170;
     } else {
      $$1113 = $$01128$lcssa170;$47 = $$02127$lcssa177;
      while(1) {
       $44 = HEAP32[$$1113>>2]|0;
       $45 = HEAP32[$6>>2]|0;
       $46 = (_uselocale(($45|0))|0);
       __THREW__ = 0;
       $48 = (invoke_iiii(768,($47|0),($44|0),($save_state|0))|0);
       $49 = __THREW__; __THREW__ = 0;
       $50 = $49&1;
       if ($50) {
        $$lcssa = $46;
        break;
       }
       $51 = ($46|0)==(0|0);
       if (!($51)) {
        __THREW__ = 0;
        (invoke_ii(707,($46|0))|0);
        $52 = __THREW__; __THREW__ = 0;
        $53 = $52&1;
        if ($53) {
         label = 18;
         break;
        }
       }
       $63 = ($48|0)==(-1);
       if ($63) {
        $$1$lcssa = $$1113;
        break L42;
       }
       $64 = HEAP32[$to_nxt>>2]|0;
       $65 = (($64) + ($48)|0);
       HEAP32[$to_nxt>>2] = $65;
       $66 = ((($$1113)) + 4|0);
       $67 = HEAP32[$frm_nxt>>2]|0;
       $68 = ($66|0)==($67|0);
       if ($68) {
        $$1$lcssa = $66;
        break L42;
       } else {
        $$1113 = $66;$47 = $65;
       }
      }
      if ((label|0) == 18) {
       $54 = ___cxa_find_matching_catch(0|0)|0;
       $55 = tempRet0;
       ___clang_call_terminate($54);
       // unreachable;
      }
      $56 = ___cxa_find_matching_catch()|0;
      $57 = tempRet0;
      $58 = ($$lcssa|0)==(0|0);
      if (!($58)) {
       __THREW__ = 0;
       (invoke_ii(707,($$lcssa|0))|0);
       $59 = __THREW__; __THREW__ = 0;
       $60 = $59&1;
       if ($60) {
        $61 = ___cxa_find_matching_catch(0|0)|0;
        $62 = tempRet0;
        ___clang_call_terminate($61);
        // unreachable;
       }
      }
      ___resumeException($56|0);
      // unreachable;
     }
    } while(0);
    HEAP32[$frm_nxt>>2] = $$1$lcssa;
    $$0 = 2;
    break;
   }
   else if ((label|0) == 27) {
    $$pre60 = HEAP32[$frm_nxt>>2]|0;
    $111 = $$pre60;
    label = 47;
    break;
   }
   else if ((label|0) == 34) {
    $83 = ___cxa_find_matching_catch(0|0)|0;
    $84 = tempRet0;
    ___clang_call_terminate($83);
    // unreachable;
   }
   else if ((label|0) == 35) {
    $85 = ___cxa_find_matching_catch()|0;
    $86 = tempRet0;
    $87 = ($$lcssa191|0)==(0|0);
    if (!($87)) {
     __THREW__ = 0;
     (invoke_ii(707,($$lcssa191|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      $90 = ___cxa_find_matching_catch(0|0)|0;
      $91 = tempRet0;
      ___clang_call_terminate($90);
      // unreachable;
     }
    }
    ___resumeException($85|0);
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 47) {
  $not$ = ($111|0)!=($frm_end|0);
  $112 = $not$&1;
  $$0 = $112;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$01$be = 0, $$01165 = 0, $$01165$lcssa223 = 0, $$02$be = 0, $$02164 = 0, $$02164$lcssa230 = 0, $$1$lcssa = 0, $$1157 = 0, $$1157$lcssa215 = 0, $$1157$lcssa216 = 0, $$2 = 0, $$lcssa = 0, $$lcssa238 = 0, $$lcssa244 = 0, $$lcssa252 = 0, $$pre = 0, $$pre80 = 0, $$pre81 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$0169 = 0, $fend$1$be = 0, $fend$1166 = 0, $fend$2$lcssa = 0, $fend$2158 = 0, $not$ = 0, $not$3 = 0, $or$cond = 0, $or$cond163 = 0, $save_state = 0, $storemerge156 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   $fend$0$lcssa = $frm_end;
  } else {
   $fend$0169 = $frm;
   while(1) {
    $1 = HEAP8[$fend$0169>>0]|0;
    $2 = ($1<<24>>24)==(0);
    if ($2) {
     $fend$0$lcssa = $fend$0169;
     break L1;
    }
    $3 = ((($fend$0169)) + 1|0);
    $4 = ($3|0)==($frm_end|0);
    if ($4) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$0169 = $3;
    }
   }
  }
 } while(0);
 HEAP32[$to_nxt>>2] = $to;
 HEAP32[$frm_nxt>>2] = $frm;
 $5 = $to_end;
 $6 = ((($this)) + 8|0);
 $7 = ($frm|0)==($frm_end|0);
 $8 = ($to|0)==($to_end|0);
 $or$cond163 = $8 | $7;
 L6: do {
  if ($or$cond163) {
   $103 = $frm;
   label = 47;
  } else {
   $$01165 = $frm;$$02164 = $to;$fend$1166 = $fend$0$lcssa;
   L7: while(1) {
    $9 = $st;
    $10 = $9;
    $11 = HEAP32[$10>>2]|0;
    $12 = (($9) + 4)|0;
    $13 = $12;
    $14 = HEAP32[$13>>2]|0;
    $15 = $save_state;
    $16 = $15;
    HEAP32[$16>>2] = $11;
    $17 = (($15) + 4)|0;
    $18 = $17;
    HEAP32[$18>>2] = $14;
    $19 = $fend$1166;
    $20 = $$01165;
    $21 = (($19) - ($20))|0;
    $22 = $$02164;
    $23 = (($5) - ($22))|0;
    $24 = $23 >> 2;
    $25 = HEAP32[$6>>2]|0;
    $26 = (_uselocale(($25|0))|0);
    __THREW__ = 0;
    $27 = (invoke_iiiiii(769,($$02164|0),($frm_nxt|0),($21|0),($24|0),($st|0))|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     $$lcssa244 = $26;
     label = 9;
     break;
    }
    $30 = ($26|0)==(0|0);
    if (!($30)) {
     __THREW__ = 0;
     (invoke_ii(707,($26|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      label = 8;
      break;
     }
    }
    switch ($27|0) {
    case 0:  {
     $$0 = 2;
     break L6;
     break;
    }
    case -1:  {
     $$01165$lcssa223 = $$01165;$$02164$lcssa230 = $$02164;$$lcssa238 = $19;
     label = 14;
     break L7;
     break;
    }
    default: {
    }
    }
    $70 = HEAP32[$to_nxt>>2]|0;
    $71 = (($70) + ($27<<2)|0);
    HEAP32[$to_nxt>>2] = $71;
    $72 = ($71|0)==($to_end|0);
    if ($72) {
     label = 31;
     break;
    }
    $73 = ($fend$1166|0)==($frm_end|0);
    $$pre = HEAP32[$frm_nxt>>2]|0;
    if ($73) {
     $$01$be = $$pre;$$02$be = $71;$fend$1$be = $frm_end;
    } else {
     $76 = HEAP32[$6>>2]|0;
     $77 = (_uselocale(($76|0))|0);
     __THREW__ = 0;
     $78 = (invoke_iiiii(770,($71|0),($$pre|0),1,($st|0))|0);
     $79 = __THREW__; __THREW__ = 0;
     $80 = $79&1;
     if ($80) {
      $$lcssa252 = $77;
      label = 38;
      break;
     }
     $81 = ($77|0)==(0|0);
     if (!($81)) {
      __THREW__ = 0;
      (invoke_ii(707,($77|0))|0);
      $82 = __THREW__; __THREW__ = 0;
      $83 = $82&1;
      if ($83) {
       label = 37;
       break;
      }
     }
     $93 = ($78|0)==(0);
     if (!($93)) {
      $$0 = 2;
      break L6;
     }
     $94 = HEAP32[$to_nxt>>2]|0;
     $95 = ((($94)) + 4|0);
     HEAP32[$to_nxt>>2] = $95;
     $96 = HEAP32[$frm_nxt>>2]|0;
     $97 = ((($96)) + 1|0);
     HEAP32[$frm_nxt>>2] = $97;
     $98 = ($97|0)==($frm_end|0);
     L22: do {
      if ($98) {
       $fend$2$lcssa = $frm_end;
      } else {
       $fend$2158 = $97;
       while(1) {
        $99 = HEAP8[$fend$2158>>0]|0;
        $100 = ($99<<24>>24)==(0);
        if ($100) {
         $fend$2$lcssa = $fend$2158;
         break L22;
        }
        $101 = ((($fend$2158)) + 1|0);
        $102 = ($101|0)==($frm_end|0);
        if ($102) {
         $fend$2$lcssa = $frm_end;
         break;
        } else {
         $fend$2158 = $101;
        }
       }
      }
     } while(0);
     $$pre80 = HEAP32[$to_nxt>>2]|0;
     $$01$be = $97;$$02$be = $$pre80;$fend$1$be = $fend$2$lcssa;
    }
    $74 = ($$01$be|0)==($frm_end|0);
    $75 = ($$02$be|0)==($to_end|0);
    $or$cond = $75 | $74;
    if ($or$cond) {
     $103 = $$01$be;
     label = 47;
     break L6;
    } else {
     $$01165 = $$01$be;$$02164 = $$02$be;$fend$1166 = $fend$1$be;
    }
   }
   if ((label|0) == 8) {
    $33 = ___cxa_find_matching_catch(0|0)|0;
    $34 = tempRet0;
    ___clang_call_terminate($33);
    // unreachable;
   }
   else if ((label|0) == 9) {
    $35 = ___cxa_find_matching_catch()|0;
    $36 = tempRet0;
    $37 = ($$lcssa244|0)==(0|0);
    if (!($37)) {
     __THREW__ = 0;
     (invoke_ii(707,($$lcssa244|0))|0);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      $40 = ___cxa_find_matching_catch(0|0)|0;
      $41 = tempRet0;
      ___clang_call_terminate($40);
      // unreachable;
     }
    }
    ___resumeException($35|0);
    // unreachable;
   }
   else if ((label|0) == 14) {
    HEAP32[$to_nxt>>2] = $$02164$lcssa230;
    $42 = HEAP32[$frm_nxt>>2]|0;
    $43 = ($$01165$lcssa223|0)==($42|0);
    L36: do {
     if ($43) {
      $$1$lcssa = $$01165$lcssa223;
     } else {
      $$1157 = $$01165$lcssa223;$storemerge156 = $$02164$lcssa230;
      L37: while(1) {
       $44 = $$1157;
       $45 = (($$lcssa238) - ($44))|0;
       $46 = HEAP32[$6>>2]|0;
       $47 = (_uselocale(($46|0))|0);
       __THREW__ = 0;
       $48 = (invoke_iiiii(770,($storemerge156|0),($$1157|0),($45|0),($save_state|0))|0);
       $49 = __THREW__; __THREW__ = 0;
       $50 = $49&1;
       if ($50) {
        $$lcssa = $47;
        label = 19;
        break;
       }
       $51 = ($47|0)==(0|0);
       if (!($51)) {
        __THREW__ = 0;
        (invoke_ii(707,($47|0))|0);
        $52 = __THREW__; __THREW__ = 0;
        $53 = $52&1;
        if ($53) {
         label = 18;
         break;
        }
       }
       switch ($48|0) {
       case -1:  {
        $$1157$lcssa215 = $$1157;
        label = 25;
        break L37;
        break;
       }
       case -2:  {
        $$1157$lcssa216 = $$1157;
        label = 26;
        break L37;
        break;
       }
       case 0:  {
        $63 = ((($$1157)) + 1|0);
        $$2 = $63;
        break;
       }
       default: {
        $64 = (($$1157) + ($48)|0);
        $$2 = $64;
       }
       }
       $65 = HEAP32[$to_nxt>>2]|0;
       $66 = ((($65)) + 4|0);
       HEAP32[$to_nxt>>2] = $66;
       $67 = HEAP32[$frm_nxt>>2]|0;
       $68 = ($$2|0)==($67|0);
       if ($68) {
        $$1$lcssa = $$2;
        break L36;
       } else {
        $$1157 = $$2;$storemerge156 = $66;
       }
      }
      if ((label|0) == 18) {
       $54 = ___cxa_find_matching_catch(0|0)|0;
       $55 = tempRet0;
       ___clang_call_terminate($54);
       // unreachable;
      }
      else if ((label|0) == 19) {
       $56 = ___cxa_find_matching_catch()|0;
       $57 = tempRet0;
       $58 = ($$lcssa|0)==(0|0);
       if (!($58)) {
        __THREW__ = 0;
        (invoke_ii(707,($$lcssa|0))|0);
        $59 = __THREW__; __THREW__ = 0;
        $60 = $59&1;
        if ($60) {
         $61 = ___cxa_find_matching_catch(0|0)|0;
         $62 = tempRet0;
         ___clang_call_terminate($61);
         // unreachable;
        }
       }
       ___resumeException($56|0);
       // unreachable;
      }
      else if ((label|0) == 25) {
       HEAP32[$frm_nxt>>2] = $$1157$lcssa215;
       $$0 = 2;
       break L6;
      }
      else if ((label|0) == 26) {
       HEAP32[$frm_nxt>>2] = $$1157$lcssa216;
       $$0 = 1;
       break L6;
      }
     }
    } while(0);
    HEAP32[$frm_nxt>>2] = $$1$lcssa;
    $not$3 = ($$1$lcssa|0)!=($frm_end|0);
    $69 = $not$3&1;
    $$0 = $69;
    break;
   }
   else if ((label|0) == 31) {
    $$pre81 = HEAP32[$frm_nxt>>2]|0;
    $103 = $$pre81;
    label = 47;
    break;
   }
   else if ((label|0) == 37) {
    $84 = ___cxa_find_matching_catch(0|0)|0;
    $85 = tempRet0;
    ___clang_call_terminate($84);
    // unreachable;
   }
   else if ((label|0) == 38) {
    $86 = ___cxa_find_matching_catch()|0;
    $87 = tempRet0;
    $88 = ($$lcssa252|0)==(0|0);
    if (!($88)) {
     __THREW__ = 0;
     (invoke_ii(707,($$lcssa252|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      $91 = ___cxa_find_matching_catch(0|0)|0;
      $92 = tempRet0;
      ___clang_call_terminate($91);
      // unreachable;
     }
    }
    ___resumeException($86|0);
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 47) {
  $not$ = ($103|0)!=($frm_end|0);
  $104 = $not$&1;
  $$0 = $104;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$02 = 0, $p$03 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale(($1|0))|0);
 __THREW__ = 0;
 $3 = (invoke_iiii(768,($tmp|0),0,($st|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $13 = ($2|0)==(0|0);
  if (!($13)) {
   __THREW__ = 0;
   (invoke_ii(707,($2|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $16 = ___cxa_find_matching_catch(0|0)|0;
    $17 = tempRet0;
    ___clang_call_terminate($16);
    // unreachable;
   }
  }
  ___resumeException($11|0);
  // unreachable;
 }
 $6 = ($2|0)==(0|0);
 if (!($6)) {
  __THREW__ = 0;
  (invoke_ii(707,($2|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $9 = ___cxa_find_matching_catch(0|0)|0;
   $10 = tempRet0;
   ___clang_call_terminate($9);
   // unreachable;
  }
 }
 switch ($3|0) {
 case 0: case -1:  {
  $$0 = 2;
  break;
 }
 default: {
  $18 = (($3) + -1)|0;
  $19 = HEAP32[$to_nxt>>2]|0;
  $20 = $to_end;
  $21 = $19;
  $22 = (($20) - ($21))|0;
  $23 = ($18>>>0)>($22>>>0);
  if ($23) {
   $$0 = 1;
  } else {
   $24 = ($18|0)==(0);
   if ($24) {
    $$0 = 0;
   } else {
    $n$02 = $18;$p$03 = $tmp;
    while(1) {
     $25 = ((($p$03)) + 1|0);
     $26 = HEAP8[$p$03>>0]|0;
     $27 = HEAP32[$to_nxt>>2]|0;
     $28 = ((($27)) + 1|0);
     HEAP32[$to_nxt>>2] = $28;
     HEAP8[$27>>0] = $26;
     $29 = (($n$02) + -1)|0;
     $30 = ($29|0)==(0);
     if ($30) {
      $$0 = 0;
      break;
     } else {
      $n$02 = $29;$p$03 = $25;
     }
    }
   }
  }
 }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_ii(707,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 16;
  } else {
   __THREW__ = 0;
   $5 = (invoke_iiii(771,(0|0),(0|0),4)|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    $13 = ___cxa_find_matching_catch(0|0)|0;
    $14 = tempRet0;
    $15 = ($2|0)==(0|0);
    if ($15) {
     $eh$lpad$body$indexZ2D = $13;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(707,($2|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     $eh$lpad$body$indexZ2D = $13;
     break;
    }
    $18 = ___cxa_find_matching_catch(0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   }
   $8 = ($2|0)==(0|0);
   if (!($8)) {
    __THREW__ = 0;
    (invoke_ii(707,($2|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if ($10) {
     $11 = ___cxa_find_matching_catch(0|0)|0;
     $12 = tempRet0;
     ___clang_call_terminate($11);
     // unreachable;
    }
   }
   $20 = ($5|0)==(0);
   if ($20) {
    $21 = HEAP32[$0>>2]|0;
    $22 = ($21|0)==(0|0);
    if ($22) {
     $$0 = 1;
    } else {
     __THREW__ = 0;
     $23 = (invoke_ii(707,($21|0))|0);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      label = 16;
      break;
     }
     $26 = ($23|0)==(0|0);
     if ($26) {
      $$0 = 0;
     } else {
      __THREW__ = 0;
      (invoke_ii(707,($23|0))|0);
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if ($28) {
       $29 = ___cxa_find_matching_catch(0|0)|0;
       $30 = tempRet0;
       ___clang_call_terminate($29);
       // unreachable;
      } else {
       $$0 = 0;
      }
     }
    }
   } else {
    $$0 = -1;
   }
   return ($$0|0);
  }
 } while(0);
 if ((label|0) == 16) {
  $31 = ___cxa_find_matching_catch(0|0)|0;
  $32 = tempRet0;
  $eh$lpad$body$indexZ2D = $31;
 }
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$0115 = 0, $$1 = 0, $$lcssa = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0$lcssa = 0, $nbytes$016 = 0, $nbytes$1 = 0, $nwchar_t$017 = 0, $or$cond = 0, $or$cond14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $frm_end;
 $1 = ((($this)) + 8|0);
 $2 = ($mx|0)==(0);
 $3 = ($frm|0)==($frm_end|0);
 $or$cond14 = $3 | $2;
 L1: do {
  if ($or$cond14) {
   $nbytes$0$lcssa = 0;
  } else {
   $$0115 = $frm;$nbytes$016 = 0;$nwchar_t$017 = 0;
   while(1) {
    $4 = $$0115;
    $5 = (($0) - ($4))|0;
    $6 = HEAP32[$1>>2]|0;
    $7 = (_uselocale(($6|0))|0);
    __THREW__ = 0;
    $8 = (invoke_iiii(772,($$0115|0),($5|0),($st|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if ($10) {
     $$lcssa = $7;
     break;
    }
    $11 = ($7|0)==(0|0);
    if (!($11)) {
     __THREW__ = 0;
     (invoke_ii(707,($7|0))|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if ($13) {
      label = 5;
      break;
     }
    }
    switch ($8|0) {
    case -2: case -1:  {
     $nbytes$0$lcssa = $nbytes$016;
     break L1;
     break;
    }
    case 0:  {
     $23 = ((($$0115)) + 1|0);
     $$1 = $23;$$pn = 1;
     break;
    }
    default: {
     $24 = (($$0115) + ($8)|0);
     $$1 = $24;$$pn = $8;
    }
    }
    $nbytes$1 = (($$pn) + ($nbytes$016))|0;
    $25 = (($nwchar_t$017) + 1)|0;
    $26 = ($25>>>0)>=($mx>>>0);
    $27 = ($$1|0)==($frm_end|0);
    $or$cond = $27 | $26;
    if ($or$cond) {
     $nbytes$0$lcssa = $nbytes$1;
     break L1;
    } else {
     $$0115 = $$1;$nbytes$016 = $nbytes$1;$nwchar_t$017 = $25;
    }
   }
   if ((label|0) == 5) {
    $14 = ___cxa_find_matching_catch(0|0)|0;
    $15 = tempRet0;
    ___clang_call_terminate($14);
    // unreachable;
   }
   $16 = ___cxa_find_matching_catch()|0;
   $17 = tempRet0;
   $18 = ($$lcssa|0)==(0|0);
   if (!($18)) {
    __THREW__ = 0;
    (invoke_ii(707,($$lcssa|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(0|0)|0;
     $22 = tempRet0;
     ___clang_call_terminate($21);
     // unreachable;
    }
   }
   ___resumeException($16|0);
   // unreachable;
  }
 } while(0);
 return ($nbytes$0$lcssa|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $11 = 1;
 } else {
  __THREW__ = 0;
  $3 = (invoke_ii(707,($1|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  }
  $6 = ($3|0)==(0|0);
  if ($6) {
   $11 = 4;
  } else {
   __THREW__ = 0;
   (invoke_ii(707,($3|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch(0|0)|0;
    $10 = tempRet0;
    ___clang_call_terminate($9);
    // unreachable;
   } else {
    $11 = 4;
   }
  }
 }
 return ($11|0);
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__18numpunctIcEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (7852);
 $2 = ((($this)) + 8|0);
 HEAP8[$2>>0] = 46;
 $3 = ((($this)) + 9|0);
 HEAP8[$3>>0] = 44;
 $4 = ((($this)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 return;
}
function __ZNSt3__18numpunctIwEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (7892);
 $2 = ((($this)) + 8|0);
 HEAP32[$2>>2] = 46;
 $3 = ((($this)) + 12|0);
 HEAP32[$3>>2] = 44;
 $4 = ((($this)) + 16|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7852);
 $0 = ((($this)) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7892);
 $0 = ((($this)) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIwED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 9|0);
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$0);
 return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$0);
 return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,20176,4);
 return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(8464)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,8464,$0);
 return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,20181,5);
 return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(8484)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,8484,$0);
 return;
}
function __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($iob) {
 $iob = $iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0 = 8;
  break;
 }
 case 8:  {
  $$0 = 16;
  break;
 }
 case 0:  {
  $$0 = 0;
  break;
 }
 default: {
  $$0 = 10;
 }
 }
 return ($$0|0);
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2448>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2448|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[2456>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((2456|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $8 = 8508;
      while(1) {
       HEAP32[$8>>2] = 0;
       $9 = ((($8)) + 4|0);
       HEAP32[$9>>2] = 0;
       $10 = ((($8)) + 8|0);
       HEAP32[$10>>2] = 0;
       $11 = ((($8)) + 12|0);
       $12 = ($11|0)==((8676)|0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      (___cxa_atexit((773|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((2456|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(774,(8508|0),(20187|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(774,((8520)|0),(20194|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      __THREW__ = 0;
      (invoke_iii(774,((8532)|0),(20201|0))|0);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if (!($18)) {
       __THREW__ = 0;
       (invoke_iii(774,((8544)|0),(20209|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if (!($20)) {
        __THREW__ = 0;
        (invoke_iii(774,((8556)|0),(20219|0))|0);
        $21 = __THREW__; __THREW__ = 0;
        $22 = $21&1;
        if (!($22)) {
         __THREW__ = 0;
         (invoke_iii(774,((8568)|0),(20228|0))|0);
         $23 = __THREW__; __THREW__ = 0;
         $24 = $23&1;
         if (!($24)) {
          __THREW__ = 0;
          (invoke_iii(774,((8580)|0),(20235|0))|0);
          $25 = __THREW__; __THREW__ = 0;
          $26 = $25&1;
          if (!($26)) {
           __THREW__ = 0;
           (invoke_iii(774,((8592)|0),(20244|0))|0);
           $27 = __THREW__; __THREW__ = 0;
           $28 = $27&1;
           if (!($28)) {
            __THREW__ = 0;
            (invoke_iii(774,((8604)|0),(20248|0))|0);
            $29 = __THREW__; __THREW__ = 0;
            $30 = $29&1;
            if (!($30)) {
             __THREW__ = 0;
             (invoke_iii(774,((8616)|0),(20252|0))|0);
             $31 = __THREW__; __THREW__ = 0;
             $32 = $31&1;
             if (!($32)) {
              __THREW__ = 0;
              (invoke_iii(774,((8628)|0),(20256|0))|0);
              $33 = __THREW__; __THREW__ = 0;
              $34 = $33&1;
              if (!($34)) {
               __THREW__ = 0;
               (invoke_iii(774,((8640)|0),(20260|0))|0);
               $35 = __THREW__; __THREW__ = 0;
               $36 = $35&1;
               if (!($36)) {
                __THREW__ = 0;
                (invoke_iii(774,((8652)|0),(20264|0))|0);
                $37 = __THREW__; __THREW__ = 0;
                $38 = $37&1;
                if (!($38)) {
                 __THREW__ = 0;
                 (invoke_iii(774,((8664)|0),(20268|0))|0);
                 $39 = __THREW__; __THREW__ = 0;
                 $40 = $39&1;
                 if (!($40)) {
                  HEAP32[8676>>2] = 8508;
                  ___cxa_guard_release((2448|0));
                  break;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $42 = ___cxa_find_matching_catch()|0;
    $43 = tempRet0;
    ___cxa_guard_abort((2448|0));
    ___resumeException($42|0);
    // unreachable;
   }
  }
 } while(0);
 $41 = HEAP32[8676>>2]|0;
 return ($41|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2464>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2464|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[2472>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((2472|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $8 = 8680;
      while(1) {
       HEAP32[$8>>2] = 0;
       $9 = ((($8)) + 4|0);
       HEAP32[$9>>2] = 0;
       $10 = ((($8)) + 8|0);
       HEAP32[$10>>2] = 0;
       $11 = ((($8)) + 12|0);
       $12 = ($11|0)==((8848)|0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      (___cxa_atexit((775|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((2472|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(776,(8680|0),(8848|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(776,((8692)|0),(8876|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      __THREW__ = 0;
      (invoke_iii(776,((8704)|0),(8904|0))|0);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if (!($18)) {
       __THREW__ = 0;
       (invoke_iii(776,((8716)|0),(8936|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if (!($20)) {
        __THREW__ = 0;
        (invoke_iii(776,((8728)|0),(8976|0))|0);
        $21 = __THREW__; __THREW__ = 0;
        $22 = $21&1;
        if (!($22)) {
         __THREW__ = 0;
         (invoke_iii(776,((8740)|0),(9012|0))|0);
         $23 = __THREW__; __THREW__ = 0;
         $24 = $23&1;
         if (!($24)) {
          __THREW__ = 0;
          (invoke_iii(776,((8752)|0),(9040|0))|0);
          $25 = __THREW__; __THREW__ = 0;
          $26 = $25&1;
          if (!($26)) {
           __THREW__ = 0;
           (invoke_iii(776,((8764)|0),(9076|0))|0);
           $27 = __THREW__; __THREW__ = 0;
           $28 = $27&1;
           if (!($28)) {
            __THREW__ = 0;
            (invoke_iii(776,((8776)|0),(9092|0))|0);
            $29 = __THREW__; __THREW__ = 0;
            $30 = $29&1;
            if (!($30)) {
             __THREW__ = 0;
             (invoke_iii(776,((8788)|0),(9108|0))|0);
             $31 = __THREW__; __THREW__ = 0;
             $32 = $31&1;
             if (!($32)) {
              __THREW__ = 0;
              (invoke_iii(776,((8800)|0),(9124|0))|0);
              $33 = __THREW__; __THREW__ = 0;
              $34 = $33&1;
              if (!($34)) {
               __THREW__ = 0;
               (invoke_iii(776,((8812)|0),(9140|0))|0);
               $35 = __THREW__; __THREW__ = 0;
               $36 = $35&1;
               if (!($36)) {
                __THREW__ = 0;
                (invoke_iii(776,((8824)|0),(9156|0))|0);
                $37 = __THREW__; __THREW__ = 0;
                $38 = $37&1;
                if (!($38)) {
                 __THREW__ = 0;
                 (invoke_iii(776,((8836)|0),(9172|0))|0);
                 $39 = __THREW__; __THREW__ = 0;
                 $40 = $39&1;
                 if (!($40)) {
                  HEAP32[9188>>2] = 8680;
                  ___cxa_guard_release((2464|0));
                  break;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $42 = ___cxa_find_matching_catch()|0;
    $43 = tempRet0;
    ___cxa_guard_abort((2464|0));
    ___resumeException($42|0);
    // unreachable;
   }
  }
 } while(0);
 $41 = HEAP32[9188>>2]|0;
 return ($41|0);
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2480>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2480|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[2488>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((2488|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $8 = 9192;
      while(1) {
       HEAP32[$8>>2] = 0;
       $9 = ((($8)) + 4|0);
       HEAP32[$9>>2] = 0;
       $10 = ((($8)) + 8|0);
       HEAP32[$10>>2] = 0;
       $11 = ((($8)) + 12|0);
       $12 = ($11|0)==((9480)|0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      (___cxa_atexit((777|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((2488|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(774,(9192|0),(20272|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    do {
     if (!($14)) {
      __THREW__ = 0;
      (invoke_iii(774,((9204)|0),(20280|0))|0);
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if (!($16)) {
       __THREW__ = 0;
       (invoke_iii(774,((9216)|0),(20289|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if (!($18)) {
        __THREW__ = 0;
        (invoke_iii(774,((9228)|0),(20295|0))|0);
        $19 = __THREW__; __THREW__ = 0;
        $20 = $19&1;
        if (!($20)) {
         __THREW__ = 0;
         (invoke_iii(774,((9240)|0),(20301|0))|0);
         $21 = __THREW__; __THREW__ = 0;
         $22 = $21&1;
         if (!($22)) {
          __THREW__ = 0;
          (invoke_iii(774,((9252)|0),(20305|0))|0);
          $23 = __THREW__; __THREW__ = 0;
          $24 = $23&1;
          if (!($24)) {
           __THREW__ = 0;
           (invoke_iii(774,((9264)|0),(20310|0))|0);
           $25 = __THREW__; __THREW__ = 0;
           $26 = $25&1;
           if (!($26)) {
            __THREW__ = 0;
            (invoke_iii(774,((9276)|0),(20315|0))|0);
            $27 = __THREW__; __THREW__ = 0;
            $28 = $27&1;
            if (!($28)) {
             __THREW__ = 0;
             (invoke_iii(774,((9288)|0),(20322|0))|0);
             $29 = __THREW__; __THREW__ = 0;
             $30 = $29&1;
             if (!($30)) {
              __THREW__ = 0;
              (invoke_iii(774,((9300)|0),(20332|0))|0);
              $31 = __THREW__; __THREW__ = 0;
              $32 = $31&1;
              if (!($32)) {
               __THREW__ = 0;
               (invoke_iii(774,((9312)|0),(20340|0))|0);
               $33 = __THREW__; __THREW__ = 0;
               $34 = $33&1;
               if (!($34)) {
                __THREW__ = 0;
                (invoke_iii(774,((9324)|0),(20349|0))|0);
                $35 = __THREW__; __THREW__ = 0;
                $36 = $35&1;
                if (!($36)) {
                 __THREW__ = 0;
                 (invoke_iii(774,((9336)|0),(20358|0))|0);
                 $37 = __THREW__; __THREW__ = 0;
                 $38 = $37&1;
                 if (!($38)) {
                  __THREW__ = 0;
                  (invoke_iii(774,((9348)|0),(20362|0))|0);
                  $39 = __THREW__; __THREW__ = 0;
                  $40 = $39&1;
                  if (!($40)) {
                   __THREW__ = 0;
                   (invoke_iii(774,((9360)|0),(20366|0))|0);
                   $41 = __THREW__; __THREW__ = 0;
                   $42 = $41&1;
                   if (!($42)) {
                    __THREW__ = 0;
                    (invoke_iii(774,((9372)|0),(20370|0))|0);
                    $43 = __THREW__; __THREW__ = 0;
                    $44 = $43&1;
                    if ($44) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(774,((9384)|0),(20301|0))|0);
                    $45 = __THREW__; __THREW__ = 0;
                    $46 = $45&1;
                    if ($46) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(774,((9396)|0),(20374|0))|0);
                    $47 = __THREW__; __THREW__ = 0;
                    $48 = $47&1;
                    if ($48) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(774,((9408)|0),(20378|0))|0);
                    $49 = __THREW__; __THREW__ = 0;
                    $50 = $49&1;
                    if ($50) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(774,((9420)|0),(20382|0))|0);
                    $51 = __THREW__; __THREW__ = 0;
                    $52 = $51&1;
                    if ($52) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(774,((9432)|0),(20386|0))|0);
                    $53 = __THREW__; __THREW__ = 0;
                    $54 = $53&1;
                    if ($54) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(774,((9444)|0),(20390|0))|0);
                    $55 = __THREW__; __THREW__ = 0;
                    $56 = $55&1;
                    if ($56) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(774,((9456)|0),(20394|0))|0);
                    $57 = __THREW__; __THREW__ = 0;
                    $58 = $57&1;
                    if ($58) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(774,((9468)|0),(20398|0))|0);
                    $59 = __THREW__; __THREW__ = 0;
                    $60 = $59&1;
                    if ($60) {
                     break;
                    }
                    HEAP32[9480>>2] = 9192;
                    ___cxa_guard_release((2480|0));
                    break L1;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $62 = ___cxa_find_matching_catch()|0;
    $63 = tempRet0;
    ___cxa_guard_abort((2480|0));
    ___resumeException($62|0);
    // unreachable;
   }
  }
 } while(0);
 $61 = HEAP32[9480>>2]|0;
 return ($61|0);
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2496>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2496|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[2504>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((2504|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $8 = 9484;
      while(1) {
       HEAP32[$8>>2] = 0;
       $9 = ((($8)) + 4|0);
       HEAP32[$9>>2] = 0;
       $10 = ((($8)) + 8|0);
       HEAP32[$10>>2] = 0;
       $11 = ((($8)) + 12|0);
       $12 = ($11|0)==((9772)|0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      (___cxa_atexit((778|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((2504|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(776,(9484|0),(9772|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    do {
     if (!($14)) {
      __THREW__ = 0;
      (invoke_iii(776,((9496)|0),(9804|0))|0);
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if (!($16)) {
       __THREW__ = 0;
       (invoke_iii(776,((9508)|0),(9840|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if (!($18)) {
        __THREW__ = 0;
        (invoke_iii(776,((9520)|0),(9864|0))|0);
        $19 = __THREW__; __THREW__ = 0;
        $20 = $19&1;
        if (!($20)) {
         __THREW__ = 0;
         (invoke_iii(776,((9532)|0),(9888|0))|0);
         $21 = __THREW__; __THREW__ = 0;
         $22 = $21&1;
         if (!($22)) {
          __THREW__ = 0;
          (invoke_iii(776,((9544)|0),(9904|0))|0);
          $23 = __THREW__; __THREW__ = 0;
          $24 = $23&1;
          if (!($24)) {
           __THREW__ = 0;
           (invoke_iii(776,((9556)|0),(9924|0))|0);
           $25 = __THREW__; __THREW__ = 0;
           $26 = $25&1;
           if (!($26)) {
            __THREW__ = 0;
            (invoke_iii(776,((9568)|0),(9944|0))|0);
            $27 = __THREW__; __THREW__ = 0;
            $28 = $27&1;
            if (!($28)) {
             __THREW__ = 0;
             (invoke_iii(776,((9580)|0),(9972|0))|0);
             $29 = __THREW__; __THREW__ = 0;
             $30 = $29&1;
             if (!($30)) {
              __THREW__ = 0;
              (invoke_iii(776,((9592)|0),(10012|0))|0);
              $31 = __THREW__; __THREW__ = 0;
              $32 = $31&1;
              if (!($32)) {
               __THREW__ = 0;
               (invoke_iii(776,((9604)|0),(10044|0))|0);
               $33 = __THREW__; __THREW__ = 0;
               $34 = $33&1;
               if (!($34)) {
                __THREW__ = 0;
                (invoke_iii(776,((9616)|0),(10080|0))|0);
                $35 = __THREW__; __THREW__ = 0;
                $36 = $35&1;
                if (!($36)) {
                 __THREW__ = 0;
                 (invoke_iii(776,((9628)|0),(10116|0))|0);
                 $37 = __THREW__; __THREW__ = 0;
                 $38 = $37&1;
                 if (!($38)) {
                  __THREW__ = 0;
                  (invoke_iii(776,((9640)|0),(10132|0))|0);
                  $39 = __THREW__; __THREW__ = 0;
                  $40 = $39&1;
                  if (!($40)) {
                   __THREW__ = 0;
                   (invoke_iii(776,((9652)|0),(10148|0))|0);
                   $41 = __THREW__; __THREW__ = 0;
                   $42 = $41&1;
                   if (!($42)) {
                    __THREW__ = 0;
                    (invoke_iii(776,((9664)|0),(10164|0))|0);
                    $43 = __THREW__; __THREW__ = 0;
                    $44 = $43&1;
                    if ($44) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(776,((9676)|0),(9888|0))|0);
                    $45 = __THREW__; __THREW__ = 0;
                    $46 = $45&1;
                    if ($46) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(776,((9688)|0),(10180|0))|0);
                    $47 = __THREW__; __THREW__ = 0;
                    $48 = $47&1;
                    if ($48) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(776,((9700)|0),(10196|0))|0);
                    $49 = __THREW__; __THREW__ = 0;
                    $50 = $49&1;
                    if ($50) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(776,((9712)|0),(10212|0))|0);
                    $51 = __THREW__; __THREW__ = 0;
                    $52 = $51&1;
                    if ($52) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(776,((9724)|0),(10228|0))|0);
                    $53 = __THREW__; __THREW__ = 0;
                    $54 = $53&1;
                    if ($54) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(776,((9736)|0),(10244|0))|0);
                    $55 = __THREW__; __THREW__ = 0;
                    $56 = $55&1;
                    if ($56) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(776,((9748)|0),(10260|0))|0);
                    $57 = __THREW__; __THREW__ = 0;
                    $58 = $57&1;
                    if ($58) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(776,((9760)|0),(10276|0))|0);
                    $59 = __THREW__; __THREW__ = 0;
                    $60 = $59&1;
                    if ($60) {
                     break;
                    }
                    HEAP32[10292>>2] = 9484;
                    ___cxa_guard_release((2496|0));
                    break L1;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $62 = ___cxa_find_matching_catch()|0;
    $63 = tempRet0;
    ___cxa_guard_abort((2496|0));
    ___resumeException($62|0);
    // unreachable;
   }
  }
 } while(0);
 $61 = HEAP32[10292>>2]|0;
 return ($61|0);
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2512>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2512|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[2520>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((2520|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $8 = 10296;
      while(1) {
       HEAP32[$8>>2] = 0;
       $9 = ((($8)) + 4|0);
       HEAP32[$9>>2] = 0;
       $10 = ((($8)) + 8|0);
       HEAP32[$10>>2] = 0;
       $11 = ((($8)) + 12|0);
       $12 = ($11|0)==((10584)|0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      (___cxa_atexit((779|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((2520|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(774,(10296|0),(20402|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(774,((10308)|0),(20405|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      HEAP32[10584>>2] = 10296;
      ___cxa_guard_release((2512|0));
      break;
     }
    }
    $18 = ___cxa_find_matching_catch()|0;
    $19 = tempRet0;
    ___cxa_guard_abort((2512|0));
    ___resumeException($18|0);
    // unreachable;
   }
  }
 } while(0);
 $17 = HEAP32[10584>>2]|0;
 return ($17|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2528>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2528|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[2536>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((2536|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $8 = 10588;
      while(1) {
       HEAP32[$8>>2] = 0;
       $9 = ((($8)) + 4|0);
       HEAP32[$9>>2] = 0;
       $10 = ((($8)) + 8|0);
       HEAP32[$10>>2] = 0;
       $11 = ((($8)) + 12|0);
       $12 = ($11|0)==((10876)|0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      (___cxa_atexit((780|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((2536|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(776,(10588|0),(10876|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(776,((10600)|0),(10888|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      HEAP32[10900>>2] = 10588;
      ___cxa_guard_release((2528|0));
      break;
     }
    }
    $18 = ___cxa_find_matching_catch()|0;
    $19 = tempRet0;
    ___cxa_guard_abort((2528|0));
    ___resumeException($18|0);
    // unreachable;
   }
  }
 } while(0);
 $17 = HEAP32[10900>>2]|0;
 return ($17|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2544>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2544|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(499,(10904|0),(20408|0),8);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((2544|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((502|0),(10904|0),(___dso_handle|0))|0);
     ___cxa_guard_release((2544|0));
     break;
    }
   }
  }
 } while(0);
 return (10904|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2552>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2552|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(781,(10916|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(782,(10952|0),(10916|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((783|0),(10952|0),(___dso_handle|0))|0);
      ___cxa_guard_release((2552|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((2552|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (10952|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2560>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2560|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(499,(10964|0),(20417|0),8);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((2560|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((502|0),(10964|0),(___dso_handle|0))|0);
     ___cxa_guard_release((2560|0));
     break;
    }
   }
  }
 } while(0);
 return (10964|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2568>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2568|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(781,(10976|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(782,(11012|0),(10976|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((783|0),(11012|0),(___dso_handle|0))|0);
      ___cxa_guard_release((2568|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((2568|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (11012|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2576>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2576|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(499,(11024|0),(20426|0),20);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((2576|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((502|0),(11024|0),(___dso_handle|0))|0);
     ___cxa_guard_release((2576|0));
     break;
    }
   }
  }
 } while(0);
 return (11024|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2584>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2584|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(781,(11036|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(782,(11120|0),(11036|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((783|0),(11120|0),(___dso_handle|0))|0);
      ___cxa_guard_release((2584|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((2584|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (11120|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2592>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2592|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(499,(11132|0),(20447|0),11);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((2592|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((502|0),(11132|0),(___dso_handle|0))|0);
     ___cxa_guard_release((2592|0));
     break;
    }
   }
  }
 } while(0);
 return (11132|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2600>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2600|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(781,(11144|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(782,(11192|0),(11144|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((783|0),(11192|0),(___dso_handle|0))|0);
      ___cxa_guard_release((2600|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((2600|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (11192|0);
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7772);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_i(692)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if (!($4)) {
   $5 = ($1|0)==($2|0);
   if (!($5)) {
    $6 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi(705,($6|0));
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     break;
    }
   }
   return;
  }
 } while(0);
 $9 = ___cxa_find_matching_catch(0|0)|0;
 $10 = tempRet0;
 ___clang_call_terminate($9);
 // unreachable;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$0$i$i = 0, $$040 = 0, $$085 = 0, $$lcssa = 0, $$lcssa117 = 0, $$ph$ph = 0, $$pre$i$i$i = 0, $$pre$i$i$i12 = 0, $$pre$i2$i$i16 = 0, $$pre$i2$i$i16$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off090 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$0104 = 0, $__ky1$091 = 0, $__ky2$098 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$0102 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$387 = 0, $__n_does_match$4 = 0, $__n_does_match$596 = 0;
 var $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$0101 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$386 = 0, $__n_might_match$4 = 0, $__st$0103 = 0, $__st$188 = 0, $__st$297 = 0, $__st$384 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $or$cond = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 do {
  if ($4) {
   $5 = (_malloc($3)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    __THREW__ = 0;
    invoke_v(698);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $$ph$ph = 0;
     label = 6;
     break;
    }
   }
   $18 = $5;
   $191 = $18;$__status$0 = $5;
   label = 11;
  } else {
   $191 = 0;$__status$0 = $__statbuf;
   label = 11;
  }
 } while(0);
 L6: do {
  if ((label|0) == 11) {
   $19 = ($__kb|0)==($__ke|0);
   if ($19) {
    $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
   } else {
    $__ky$0104 = $__kb;$__n_does_match$0102 = 0;$__n_might_match$0101 = $3;$__st$0103 = $__status$0;
    while(1) {
     $22 = HEAP8[$__ky$0104>>0]|0;
     $23 = $22 & 1;
     $24 = ($23<<24>>24)==(0);
     if ($24) {
      $27 = $22&255;
      $28 = $27 >>> 1;
      $30 = $28;
     } else {
      $25 = ((($__ky$0104)) + 4|0);
      $26 = HEAP32[$25>>2]|0;
      $30 = $26;
     }
     $29 = ($30|0)==(0);
     if ($29) {
      HEAP8[$__st$0103>>0] = 2;
      $31 = (($__n_might_match$0101) + -1)|0;
      $32 = (($__n_does_match$0102) + 1)|0;
      $__n_does_match$1 = $32;$__n_might_match$1 = $31;
     } else {
      HEAP8[$__st$0103>>0] = 1;
      $__n_does_match$1 = $__n_does_match$0102;$__n_might_match$1 = $__n_might_match$0101;
     }
     $33 = ((($__ky$0104)) + 12|0);
     $34 = ((($__st$0103)) + 1|0);
     $35 = ($33|0)==($__ke|0);
     if ($35) {
      $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
      break;
     } else {
      $__ky$0104 = $33;$__n_does_match$0102 = $__n_does_match$1;$__n_might_match$0101 = $__n_might_match$1;$__st$0103 = $34;
     }
    }
   }
   $20 = ($__kb|0)==($__ke|0);
   $21 = ($__kb|0)==($__ke|0);
   $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
   L20: while(1) {
    $36 = HEAP32[$__b>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      $51 = 0;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$36>>2]|0;
       $44 = ((($43)) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_ii($45|0,($36|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 5;
        break L20;
       }
       $49 = ($46|0)==(-1);
       if ($49) {
        HEAP32[$__b>>2] = 0;
        $51 = 0;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $51 = $$pre$i$i$i;
        break;
       }
      } else {
       $51 = $36;
      }
     }
    } while(0);
    $50 = ($51|0)==(0|0);
    $52 = HEAP32[$__e>>2]|0;
    $53 = ($52|0)==(0|0);
    if ($53) {
     $$pre$i2$i$i16 = 0;
    } else {
     $54 = ((($52)) + 12|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ((($52)) + 16|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($55|0)==($57|0);
     if ($58) {
      $59 = HEAP32[$52>>2]|0;
      $60 = ((($59)) + 36|0);
      $61 = HEAP32[$60>>2]|0;
      __THREW__ = 0;
      $62 = (invoke_ii($61|0,($52|0))|0);
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       label = 5;
       break;
      }
      $65 = ($62|0)==(-1);
      if ($65) {
       HEAP32[$__e>>2] = 0;
       $$pre$i2$i$i16 = 0;
      } else {
       $$pre$i2$i$i16 = $52;
      }
     } else {
      $$pre$i2$i$i16 = $52;
     }
    }
    $66 = ($$pre$i2$i$i16|0)==(0|0);
    $tmp$i$i = $50 ^ $66;
    $67 = ($__n_might_match$2|0)!=(0);
    $68 = $67 & $tmp$i$i;
    $69 = HEAP32[$__b>>2]|0;
    if (!($68)) {
     $$lcssa = $66;$$lcssa117 = $69;$$pre$i2$i$i16$lcssa = $$pre$i2$i$i16;
     label = 64;
     break;
    }
    $70 = ((($69)) + 12|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ((($69)) + 16|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($71|0)==($73|0);
    if ($74) {
     $75 = HEAP32[$69>>2]|0;
     $76 = ((($75)) + 36|0);
     $77 = HEAP32[$76>>2]|0;
     __THREW__ = 0;
     $78 = (invoke_ii($77|0,($69|0))|0);
     $79 = __THREW__; __THREW__ = 0;
     $80 = $79&1;
     if ($80) {
      label = 5;
      break;
     } else {
      $$0$i$i = $78;
     }
    } else {
     $81 = HEAP8[$71>>0]|0;
     $82 = $81&255;
     $$0$i$i = $82;
    }
    $83 = $$0$i$i&255;
    if ($__case_sensitive) {
     $__c$0 = $83;
    } else {
     $84 = HEAP32[$__ct>>2]|0;
     $85 = ((($84)) + 12|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_iii($86|0,($__ct|0),($83|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 5;
      break;
     } else {
      $__c$0 = $87;
     }
    }
    $90 = (($__indx$0) + 1)|0;
    if ($20) {
     $__consume$0$off0$lcssa = 0;$__n_does_match$3$lcssa = $__n_does_match$2;$__n_might_match$3$lcssa = $__n_might_match$2;
    } else {
     $__consume$0$off090 = 0;$__ky1$091 = $__kb;$__n_does_match$387 = $__n_does_match$2;$__n_might_match$386 = $__n_might_match$2;$__st$188 = $__status$0;
     while(1) {
      $91 = HEAP8[$__st$188>>0]|0;
      $92 = ($91<<24>>24)==(1);
      do {
       if ($92) {
        $93 = HEAP8[$__ky1$091>>0]|0;
        $94 = $93 & 1;
        $95 = ($94<<24>>24)==(0);
        if ($95) {
         $98 = ((($__ky1$091)) + 1|0);
         $100 = $98;
        } else {
         $96 = ((($__ky1$091)) + 8|0);
         $97 = HEAP32[$96>>2]|0;
         $100 = $97;
        }
        $99 = (($100) + ($__indx$0)|0);
        $101 = HEAP8[$99>>0]|0;
        if ($__case_sensitive) {
         $__kc$0 = $101;
        } else {
         $102 = HEAP32[$__ct>>2]|0;
         $103 = ((($102)) + 12|0);
         $104 = HEAP32[$103>>2]|0;
         __THREW__ = 0;
         $105 = (invoke_iii($104|0,($__ct|0),($101|0))|0);
         $106 = __THREW__; __THREW__ = 0;
         $107 = $106&1;
         if ($107) {
          label = 4;
          break L20;
         } else {
          $__kc$0 = $105;
         }
        }
        $108 = ($__c$0<<24>>24)==($__kc$0<<24>>24);
        if (!($108)) {
         HEAP8[$__st$188>>0] = 0;
         $120 = (($__n_might_match$386) + -1)|0;
         $__consume$1$off0 = $__consume$0$off090;$__n_does_match$4 = $__n_does_match$387;$__n_might_match$4 = $120;
         break;
        }
        $109 = HEAP8[$__ky1$091>>0]|0;
        $110 = $109 & 1;
        $111 = ($110<<24>>24)==(0);
        if ($111) {
         $114 = $109&255;
         $115 = $114 >>> 1;
         $117 = $115;
        } else {
         $112 = ((($__ky1$091)) + 4|0);
         $113 = HEAP32[$112>>2]|0;
         $117 = $113;
        }
        $116 = ($117|0)==($90|0);
        if ($116) {
         HEAP8[$__st$188>>0] = 2;
         $118 = (($__n_might_match$386) + -1)|0;
         $119 = (($__n_does_match$387) + 1)|0;
         $__consume$1$off0 = 1;$__n_does_match$4 = $119;$__n_might_match$4 = $118;
        } else {
         $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$387;$__n_might_match$4 = $__n_might_match$386;
        }
       } else {
        $__consume$1$off0 = $__consume$0$off090;$__n_does_match$4 = $__n_does_match$387;$__n_might_match$4 = $__n_might_match$386;
       }
      } while(0);
      $121 = ((($__ky1$091)) + 12|0);
      $122 = ((($__st$188)) + 1|0);
      $123 = ($121|0)==($__ke|0);
      if ($123) {
       $__consume$0$off0$lcssa = $__consume$1$off0;$__n_does_match$3$lcssa = $__n_does_match$4;$__n_might_match$3$lcssa = $__n_might_match$4;
       break;
      } else {
       $__consume$0$off090 = $__consume$1$off0;$__ky1$091 = $121;$__n_does_match$387 = $__n_does_match$4;$__n_might_match$386 = $__n_might_match$4;$__st$188 = $122;
      }
     }
    }
    if (!($__consume$0$off0$lcssa)) {
     $__indx$0 = $90;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
     continue;
    }
    $124 = HEAP32[$__b>>2]|0;
    $125 = ((($124)) + 12|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($124)) + 16|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($126|0)==($128|0);
    if ($129) {
     $130 = HEAP32[$124>>2]|0;
     $131 = ((($130)) + 40|0);
     $132 = HEAP32[$131>>2]|0;
     __THREW__ = 0;
     (invoke_ii($132|0,($124|0))|0);
     $133 = __THREW__; __THREW__ = 0;
     $134 = $133&1;
     if ($134) {
      label = 5;
      break;
     }
    } else {
     $135 = ((($126)) + 1|0);
     HEAP32[$125>>2] = $135;
    }
    $136 = (($__n_does_match$3$lcssa) + ($__n_might_match$3$lcssa))|0;
    $137 = ($136>>>0)<(2);
    $or$cond = $137 | $21;
    if ($or$cond) {
     $__indx$0 = $90;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
     continue;
    } else {
     $__ky2$098 = $__kb;$__n_does_match$596 = $__n_does_match$3$lcssa;$__st$297 = $__status$0;
    }
    while(1) {
     $138 = HEAP8[$__st$297>>0]|0;
     $139 = ($138<<24>>24)==(2);
     if ($139) {
      $140 = HEAP8[$__ky2$098>>0]|0;
      $141 = $140 & 1;
      $142 = ($141<<24>>24)==(0);
      if ($142) {
       $145 = $140&255;
       $146 = $145 >>> 1;
       $148 = $146;
      } else {
       $143 = ((($__ky2$098)) + 4|0);
       $144 = HEAP32[$143>>2]|0;
       $148 = $144;
      }
      $147 = ($148|0)==($90|0);
      if ($147) {
       $__n_does_match$6 = $__n_does_match$596;
      } else {
       HEAP8[$__st$297>>0] = 0;
       $149 = (($__n_does_match$596) + -1)|0;
       $__n_does_match$6 = $149;
      }
     } else {
      $__n_does_match$6 = $__n_does_match$596;
     }
     $150 = ((($__ky2$098)) + 12|0);
     $151 = ((($__st$297)) + 1|0);
     $152 = ($150|0)==($__ke|0);
     if ($152) {
      $__indx$0 = $90;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3$lcssa;
      continue L20;
     } else {
      $__ky2$098 = $150;$__n_does_match$596 = $__n_does_match$6;$__st$297 = $151;
     }
    }
   }
   if ((label|0) == 4) {
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    $16 = $191;$lpad$phi$index = $9;$lpad$phi$index3 = $10;
    break;
   }
   else if ((label|0) == 5) {
    $11 = ___cxa_find_matching_catch()|0;
    $12 = tempRet0;
    $16 = $191;$lpad$phi$index = $11;$lpad$phi$index3 = $12;
    break;
   }
   else if ((label|0) == 64) {
    $153 = ($$lcssa117|0)==(0|0);
    do {
     if ($153) {
      $167 = 0;
     } else {
      $154 = ((($$lcssa117)) + 12|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = ((($$lcssa117)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($155|0)==($157|0);
      if ($158) {
       $159 = HEAP32[$$lcssa117>>2]|0;
       $160 = ((($159)) + 36|0);
       $161 = HEAP32[$160>>2]|0;
       __THREW__ = 0;
       $162 = (invoke_ii($161|0,($$lcssa117|0))|0);
       $163 = __THREW__; __THREW__ = 0;
       $164 = $163&1;
       if ($164) {
        $$ph$ph = $191;
        label = 6;
        break L6;
       }
       $165 = ($162|0)==(-1);
       if ($165) {
        HEAP32[$__b>>2] = 0;
        $167 = 0;
        break;
       } else {
        $$pre$i$i$i12 = HEAP32[$__b>>2]|0;
        $167 = $$pre$i$i$i12;
        break;
       }
      } else {
       $167 = $$lcssa117;
      }
     }
    } while(0);
    $166 = ($167|0)==(0|0);
    do {
     if ($$lcssa) {
      label = 76;
     } else {
      $168 = ((($$pre$i2$i$i16$lcssa)) + 12|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = ((($$pre$i2$i$i16$lcssa)) + 16|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = ($169|0)==($171|0);
      if ($172) {
       $173 = HEAP32[$$pre$i2$i$i16$lcssa>>2]|0;
       $174 = ((($173)) + 36|0);
       $175 = HEAP32[$174>>2]|0;
       __THREW__ = 0;
       $176 = (invoke_ii($175|0,($$pre$i2$i$i16$lcssa|0))|0);
       $177 = __THREW__; __THREW__ = 0;
       $178 = $177&1;
       if ($178) {
        $$ph$ph = $191;
        label = 6;
        break L6;
       }
       $179 = ($176|0)==(-1);
       if ($179) {
        HEAP32[$__e>>2] = 0;
        label = 76;
        break;
       }
      }
      if (!($166)) {
       label = 77;
      }
     }
    } while(0);
    if ((label|0) == 76) {
     if ($166) {
      label = 77;
     }
    }
    if ((label|0) == 77) {
     $180 = HEAP32[$__err>>2]|0;
     $181 = $180 | 2;
     HEAP32[$__err>>2] = $181;
    }
    $182 = ($__kb|0)==($__ke|0);
    L105: do {
     if ($182) {
      label = 81;
     } else {
      $$085 = $__kb;$__st$384 = $__status$0;
      while(1) {
       $183 = HEAP8[$__st$384>>0]|0;
       $184 = ($183<<24>>24)==(2);
       if ($184) {
        $$040 = $$085;
        break L105;
       }
       $185 = ((($$085)) + 12|0);
       $186 = ((($__st$384)) + 1|0);
       $187 = ($185|0)==($__ke|0);
       if ($187) {
        label = 81;
        break;
       } else {
        $$085 = $185;$__st$384 = $186;
       }
      }
     }
    } while(0);
    if ((label|0) == 81) {
     $188 = HEAP32[$__err>>2]|0;
     $189 = $188 | 4;
     HEAP32[$__err>>2] = $189;
     $$040 = $__ke;
    }
    $190 = ($191|0)==(0);
    if (!($190)) {
     $192 = $191;
     _free($192);
    }
    STACKTOP = sp;return ($$040|0);
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $16 = $$ph$ph;$lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 $15 = ($16|0)==(0);
 if (!($15)) {
  $17 = $16;
  _free($17);
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(575,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19 = (($65) + -1)|0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(784,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 25;
   } else {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $132 = ((($131)) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$pre$i$i$i$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 25;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $$pre$i$i$i$lcssa;
      }
     } else {
      $139 = $$pre$i$i$i$lcssa;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 49;
     } else {
      $141 = ((($$pre$i2$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i2$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i2$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 25;
        break L4;
       }
       $152 = ($149|0)==(-1);
       if ($152) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($138)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($138) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $153 = HEAP32[$__err>>2]|0;
     $154 = $153 | 2;
     HEAP32[$__err>>2] = $154;
    }
    $155 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($155|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(575,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19 = (($65) + -1)|0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(785,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = tempRet0;
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 25;
   } else {
    $125 = $__v;
    $126 = $125;
    HEAP32[$126>>2] = $121;
    $127 = (($125) + 4)|0;
    $128 = $127;
    HEAP32[$128>>2] = $122;
    $129 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$129,$__err);
    $130 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($130) {
     $144 = 0;
    } else {
     $131 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($132|0)==($134|0);
     if ($135) {
      $136 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $137 = ((($136)) + 36|0);
      $138 = HEAP32[$137>>2]|0;
      __THREW__ = 0;
      $139 = (invoke_ii($138|0,($$pre$i$i$i$lcssa|0))|0);
      $140 = __THREW__; __THREW__ = 0;
      $141 = $140&1;
      if ($141) {
       label = 25;
       break;
      }
      $142 = ($139|0)==(-1);
      if ($142) {
       HEAP32[$__b>>2] = 0;
       $144 = 0;
      } else {
       $144 = $$pre$i$i$i$lcssa;
      }
     } else {
      $144 = $$pre$i$i$i$lcssa;
     }
    }
    $143 = ($144|0)==(0|0);
    $145 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 49;
     } else {
      $146 = ((($$pre$i2$i$i)) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ((($$pre$i2$i$i)) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if ($150) {
       $151 = HEAP32[$$pre$i2$i$i>>2]|0;
       $152 = ((($151)) + 36|0);
       $153 = HEAP32[$152>>2]|0;
       __THREW__ = 0;
       $154 = (invoke_ii($153|0,($$pre$i2$i$i|0))|0);
       $155 = __THREW__; __THREW__ = 0;
       $156 = $155&1;
       if ($156) {
        label = 25;
        break L4;
       }
       $157 = ($154|0)==(-1);
       if ($157) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($143)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($143) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $158 = HEAP32[$__err>>2]|0;
     $159 = $158 | 2;
     HEAP32[$__err>>2] = $159;
    }
    $160 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($160|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(575,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19 = (($65) + -1)|0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(786,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 25;
   } else {
    HEAP16[$__v>>1] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $132 = ((($131)) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$pre$i$i$i$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 25;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $$pre$i$i$i$lcssa;
      }
     } else {
      $139 = $$pre$i$i$i$lcssa;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 49;
     } else {
      $141 = ((($$pre$i2$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i2$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i2$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 25;
        break L4;
       }
       $152 = ($149|0)==(-1);
       if ($152) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($138)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($138) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $153 = HEAP32[$__err>>2]|0;
     $154 = $153 | 2;
     HEAP32[$__err>>2] = $154;
    }
    $155 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($155|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(575,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19 = (($65) + -1)|0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(787,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 25;
   } else {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $132 = ((($131)) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$pre$i$i$i$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 25;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $$pre$i$i$i$lcssa;
      }
     } else {
      $139 = $$pre$i$i$i$lcssa;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 49;
     } else {
      $141 = ((($$pre$i2$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i2$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i2$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 25;
        break L4;
       }
       $152 = ($149|0)==(-1);
       if ($152) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($138)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($138) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $153 = HEAP32[$__err>>2]|0;
     $154 = $153 | 2;
     HEAP32[$__err>>2] = $154;
    }
    $155 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($155|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(575,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19 = (($65) + -1)|0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(788,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 25;
   } else {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $132 = ((($131)) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$pre$i$i$i$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 25;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $$pre$i$i$i$lcssa;
      }
     } else {
      $139 = $$pre$i$i$i$lcssa;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 49;
     } else {
      $141 = ((($$pre$i2$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i2$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i2$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 25;
        break L4;
       }
       $152 = ($149|0)==(-1);
       if ($152) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($138)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($138) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $153 = HEAP32[$__err>>2]|0;
     $154 = $153 | 2;
     HEAP32[$__err>>2] = $154;
    }
    $155 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($155|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(575,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19 = (($65) + -1)|0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(789,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = tempRet0;
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 25;
   } else {
    $125 = $__v;
    $126 = $125;
    HEAP32[$126>>2] = $121;
    $127 = (($125) + 4)|0;
    $128 = $127;
    HEAP32[$128>>2] = $122;
    $129 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$129,$__err);
    $130 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($130) {
     $144 = 0;
    } else {
     $131 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($132|0)==($134|0);
     if ($135) {
      $136 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $137 = ((($136)) + 36|0);
      $138 = HEAP32[$137>>2]|0;
      __THREW__ = 0;
      $139 = (invoke_ii($138|0,($$pre$i$i$i$lcssa|0))|0);
      $140 = __THREW__; __THREW__ = 0;
      $141 = $140&1;
      if ($141) {
       label = 25;
       break;
      }
      $142 = ($139|0)==(-1);
      if ($142) {
       HEAP32[$__b>>2] = 0;
       $144 = 0;
      } else {
       $144 = $$pre$i$i$i$lcssa;
      }
     } else {
      $144 = $$pre$i$i$i$lcssa;
     }
    }
    $143 = ($144|0)==(0|0);
    $145 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 49;
     } else {
      $146 = ((($$pre$i2$i$i)) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ((($$pre$i2$i$i)) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if ($150) {
       $151 = HEAP32[$$pre$i2$i$i>>2]|0;
       $152 = ((($151)) + 36|0);
       $153 = HEAP32[$152>>2]|0;
       __THREW__ = 0;
       $154 = (invoke_ii($153|0,($$pre$i2$i$i|0))|0);
       $155 = __THREW__; __THREW__ = 0;
       $156 = $155&1;
       if ($156) {
        label = 25;
        break L4;
       }
       $157 = ($154|0)==(-1);
       if ($157) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($143)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($143) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $158 = HEAP32[$__err>>2]|0;
     $159 = $158 | 2;
     HEAP32[$__err>>2] = $159;
    }
    $160 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($160|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $0 = ((($__buf)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($__buf)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(575,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L4: do {
  if ($9) {
   label = 25;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP8[$__decimal_point>>0]|0;
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $16;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i5;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$17>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i20 = (($65) + -1)|0;
      $66 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$13>>2]|0;
     $73 = $71 ? $15 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $114 | $112;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(790,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 25;
   } else {
    HEAPF32[$__v>>2] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 25;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $$pre$i$i$i$lcssa;
      }
     } else {
      $141 = $$pre$i$i$i$lcssa;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 49;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 25;
        break L4;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($140)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($140) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $0 = ((($__buf)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($__buf)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(575,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L4: do {
  if ($9) {
   label = 25;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP8[$__decimal_point>>0]|0;
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $16;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i5;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$17>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i20 = (($65) + -1)|0;
      $66 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$13>>2]|0;
     $73 = $71 ? $15 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $114 | $112;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(791,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 25;
   } else {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 25;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $$pre$i$i$i$lcssa;
      }
     } else {
      $141 = $$pre$i$i$i$lcssa;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 49;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 25;
        break L4;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($140)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($140) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $0 = ((($__buf)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($__buf)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(575,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L4: do {
  if ($9) {
   label = 25;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP8[$__decimal_point>>0]|0;
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $16;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i5;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$17>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i20 = (($65) + -1)|0;
      $66 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$13>>2]|0;
     $73 = $71 ? $15 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $114 | $112;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(792,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 25;
   } else {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 25;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $$pre$i$i$i$lcssa;
      }
     } else {
      $141 = $$pre$i$i$i$lcssa;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 49;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 25;
        break L4;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($140)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($140) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsscanf($__s,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if (!($2)) {
  __THREW__ = 0;
  (invoke_ii(707,($0|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $5 = ___cxa_find_matching_catch(0|0)|0;
   $6 = tempRet0;
   ___clang_call_terminate($5);
   // unreachable;
  }
 }
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i17 = 0, $$044 = 0, $$081 = 0, $$lcssa = 0, $$ph$ph = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i3$i$i19 = 0, $$pre$i3$i$i19$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off086 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$0100 = 0, $__ky1$087 = 0, $__ky2$094 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$098 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0;
 var $__n_does_match$3$lcssa = 0, $__n_does_match$383 = 0, $__n_does_match$4 = 0, $__n_does_match$592 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$097 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$382 = 0, $__n_might_match$4 = 0, $__st$099 = 0, $__st$184 = 0, $__st$293 = 0, $__st$380 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0;
 var $or$cond = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i14 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 do {
  if ($4) {
   $5 = (_malloc($3)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    __THREW__ = 0;
    invoke_v(698);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $$ph$ph = 0;
     label = 6;
     break;
    }
   }
   $18 = $5;
   $191 = $18;$__status$0 = $5;
   label = 11;
  } else {
   $191 = 0;$__status$0 = $__statbuf;
   label = 11;
  }
 } while(0);
 L6: do {
  if ((label|0) == 11) {
   $19 = ($__kb|0)==($__ke|0);
   if ($19) {
    $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
   } else {
    $__ky$0100 = $__kb;$__n_does_match$098 = 0;$__n_might_match$097 = $3;$__st$099 = $__status$0;
    while(1) {
     $22 = HEAP8[$__ky$0100>>0]|0;
     $23 = $22 & 1;
     $24 = ($23<<24>>24)==(0);
     if ($24) {
      $27 = $22&255;
      $28 = $27 >>> 1;
      $30 = $28;
     } else {
      $25 = ((($__ky$0100)) + 4|0);
      $26 = HEAP32[$25>>2]|0;
      $30 = $26;
     }
     $29 = ($30|0)==(0);
     if ($29) {
      HEAP8[$__st$099>>0] = 2;
      $31 = (($__n_might_match$097) + -1)|0;
      $32 = (($__n_does_match$098) + 1)|0;
      $__n_does_match$1 = $32;$__n_might_match$1 = $31;
     } else {
      HEAP8[$__st$099>>0] = 1;
      $__n_does_match$1 = $__n_does_match$098;$__n_might_match$1 = $__n_might_match$097;
     }
     $33 = ((($__ky$0100)) + 12|0);
     $34 = ((($__st$099)) + 1|0);
     $35 = ($33|0)==($__ke|0);
     if ($35) {
      $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
      break;
     } else {
      $__ky$0100 = $33;$__n_does_match$098 = $__n_does_match$1;$__n_might_match$097 = $__n_might_match$1;$__st$099 = $34;
     }
    }
   }
   $20 = ($__kb|0)==($__ke|0);
   $21 = ($__kb|0)==($__ke|0);
   $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
   L20: while(1) {
    $36 = HEAP32[$__b>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      $66 = 1;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$36>>2]|0;
       $44 = ((($43)) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_ii($45|0,($36|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 5;
        break L20;
       } else {
        $$0$i$i$i$i = $46;
       }
      } else {
       $49 = HEAP32[$39>>2]|0;
       $$0$i$i$i$i = $49;
      }
      $50 = ($$0$i$i$i$i|0)==(-1);
      if ($50) {
       HEAP32[$__b>>2] = 0;
       $66 = 1;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
       $66 = $phitmp$i$i$i;
       break;
      }
     }
    } while(0);
    $51 = HEAP32[$__e>>2]|0;
    $52 = ($51|0)==(0|0);
    if ($52) {
     $$pre$i3$i$i19 = 0;$67 = 1;
    } else {
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ((($51)) + 16|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($54|0)==($56|0);
     if ($57) {
      $58 = HEAP32[$51>>2]|0;
      $59 = ((($58)) + 36|0);
      $60 = HEAP32[$59>>2]|0;
      __THREW__ = 0;
      $61 = (invoke_ii($60|0,($51|0))|0);
      $62 = __THREW__; __THREW__ = 0;
      $63 = $62&1;
      if ($63) {
       label = 5;
       break;
      } else {
       $$0$i$i1$i$i = $61;
      }
     } else {
      $64 = HEAP32[$54>>2]|0;
      $$0$i$i1$i$i = $64;
     }
     $65 = ($$0$i$i1$i$i|0)==(-1);
     if ($65) {
      HEAP32[$__e>>2] = 0;
      $$pre$i3$i$i19 = 0;$67 = 1;
     } else {
      $$pre$i3$i$i19 = $51;$67 = 0;
     }
    }
    $tmp$i$i = $66 ^ $67;
    $68 = ($__n_might_match$2|0)!=(0);
    $69 = $68 & $tmp$i$i;
    $70 = HEAP32[$__b>>2]|0;
    if (!($69)) {
     $$lcssa = $70;$$pre$i3$i$i19$lcssa = $$pre$i3$i$i19;
     label = 66;
     break;
    }
    $71 = ((($70)) + 12|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((($70)) + 16|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($72|0)==($74|0);
    if ($75) {
     $76 = HEAP32[$70>>2]|0;
     $77 = ((($76)) + 36|0);
     $78 = HEAP32[$77>>2]|0;
     __THREW__ = 0;
     $79 = (invoke_ii($78|0,($70|0))|0);
     $80 = __THREW__; __THREW__ = 0;
     $81 = $80&1;
     if ($81) {
      label = 5;
      break;
     } else {
      $$0$i$i = $79;
     }
    } else {
     $82 = HEAP32[$72>>2]|0;
     $$0$i$i = $82;
    }
    if ($__case_sensitive) {
     $__c$0 = $$0$i$i;
    } else {
     $83 = HEAP32[$__ct>>2]|0;
     $84 = ((($83)) + 28|0);
     $85 = HEAP32[$84>>2]|0;
     __THREW__ = 0;
     $86 = (invoke_iii($85|0,($__ct|0),($$0$i$i|0))|0);
     $87 = __THREW__; __THREW__ = 0;
     $88 = $87&1;
     if ($88) {
      label = 5;
      break;
     } else {
      $__c$0 = $86;
     }
    }
    $89 = (($__indx$0) + 1)|0;
    if ($20) {
     $__consume$0$off0$lcssa = 0;$__n_does_match$3$lcssa = $__n_does_match$2;$__n_might_match$3$lcssa = $__n_might_match$2;
    } else {
     $__consume$0$off086 = 0;$__ky1$087 = $__kb;$__n_does_match$383 = $__n_does_match$2;$__n_might_match$382 = $__n_might_match$2;$__st$184 = $__status$0;
     while(1) {
      $90 = HEAP8[$__st$184>>0]|0;
      $91 = ($90<<24>>24)==(1);
      do {
       if ($91) {
        $92 = HEAP8[$__ky1$087>>0]|0;
        $93 = $92 & 1;
        $94 = ($93<<24>>24)==(0);
        if ($94) {
         $97 = ((($__ky1$087)) + 4|0);
         $99 = $97;
        } else {
         $95 = ((($__ky1$087)) + 8|0);
         $96 = HEAP32[$95>>2]|0;
         $99 = $96;
        }
        $98 = (($99) + ($__indx$0<<2)|0);
        $100 = HEAP32[$98>>2]|0;
        if ($__case_sensitive) {
         $__kc$0 = $100;
        } else {
         $101 = HEAP32[$__ct>>2]|0;
         $102 = ((($101)) + 28|0);
         $103 = HEAP32[$102>>2]|0;
         __THREW__ = 0;
         $104 = (invoke_iii($103|0,($__ct|0),($100|0))|0);
         $105 = __THREW__; __THREW__ = 0;
         $106 = $105&1;
         if ($106) {
          label = 4;
          break L20;
         } else {
          $__kc$0 = $104;
         }
        }
        $107 = ($__c$0|0)==($__kc$0|0);
        if (!($107)) {
         HEAP8[$__st$184>>0] = 0;
         $119 = (($__n_might_match$382) + -1)|0;
         $__consume$1$off0 = $__consume$0$off086;$__n_does_match$4 = $__n_does_match$383;$__n_might_match$4 = $119;
         break;
        }
        $108 = HEAP8[$__ky1$087>>0]|0;
        $109 = $108 & 1;
        $110 = ($109<<24>>24)==(0);
        if ($110) {
         $113 = $108&255;
         $114 = $113 >>> 1;
         $116 = $114;
        } else {
         $111 = ((($__ky1$087)) + 4|0);
         $112 = HEAP32[$111>>2]|0;
         $116 = $112;
        }
        $115 = ($116|0)==($89|0);
        if ($115) {
         HEAP8[$__st$184>>0] = 2;
         $117 = (($__n_might_match$382) + -1)|0;
         $118 = (($__n_does_match$383) + 1)|0;
         $__consume$1$off0 = 1;$__n_does_match$4 = $118;$__n_might_match$4 = $117;
        } else {
         $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$383;$__n_might_match$4 = $__n_might_match$382;
        }
       } else {
        $__consume$1$off0 = $__consume$0$off086;$__n_does_match$4 = $__n_does_match$383;$__n_might_match$4 = $__n_might_match$382;
       }
      } while(0);
      $120 = ((($__ky1$087)) + 12|0);
      $121 = ((($__st$184)) + 1|0);
      $122 = ($120|0)==($__ke|0);
      if ($122) {
       $__consume$0$off0$lcssa = $__consume$1$off0;$__n_does_match$3$lcssa = $__n_does_match$4;$__n_might_match$3$lcssa = $__n_might_match$4;
       break;
      } else {
       $__consume$0$off086 = $__consume$1$off0;$__ky1$087 = $120;$__n_does_match$383 = $__n_does_match$4;$__n_might_match$382 = $__n_might_match$4;$__st$184 = $121;
      }
     }
    }
    if (!($__consume$0$off0$lcssa)) {
     $__indx$0 = $89;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
     continue;
    }
    $123 = HEAP32[$__b>>2]|0;
    $124 = ((($123)) + 12|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = ((($123)) + 16|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($125|0)==($127|0);
    if ($128) {
     $129 = HEAP32[$123>>2]|0;
     $130 = ((($129)) + 40|0);
     $131 = HEAP32[$130>>2]|0;
     __THREW__ = 0;
     (invoke_ii($131|0,($123|0))|0);
     $132 = __THREW__; __THREW__ = 0;
     $133 = $132&1;
     if ($133) {
      label = 5;
      break;
     }
    } else {
     $134 = ((($125)) + 4|0);
     HEAP32[$124>>2] = $134;
    }
    $135 = (($__n_does_match$3$lcssa) + ($__n_might_match$3$lcssa))|0;
    $136 = ($135>>>0)<(2);
    $or$cond = $136 | $21;
    if ($or$cond) {
     $__indx$0 = $89;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
     continue;
    } else {
     $__ky2$094 = $__kb;$__n_does_match$592 = $__n_does_match$3$lcssa;$__st$293 = $__status$0;
    }
    while(1) {
     $137 = HEAP8[$__st$293>>0]|0;
     $138 = ($137<<24>>24)==(2);
     if ($138) {
      $139 = HEAP8[$__ky2$094>>0]|0;
      $140 = $139 & 1;
      $141 = ($140<<24>>24)==(0);
      if ($141) {
       $144 = $139&255;
       $145 = $144 >>> 1;
       $147 = $145;
      } else {
       $142 = ((($__ky2$094)) + 4|0);
       $143 = HEAP32[$142>>2]|0;
       $147 = $143;
      }
      $146 = ($147|0)==($89|0);
      if ($146) {
       $__n_does_match$6 = $__n_does_match$592;
      } else {
       HEAP8[$__st$293>>0] = 0;
       $148 = (($__n_does_match$592) + -1)|0;
       $__n_does_match$6 = $148;
      }
     } else {
      $__n_does_match$6 = $__n_does_match$592;
     }
     $149 = ((($__ky2$094)) + 12|0);
     $150 = ((($__st$293)) + 1|0);
     $151 = ($149|0)==($__ke|0);
     if ($151) {
      $__indx$0 = $89;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3$lcssa;
      continue L20;
     } else {
      $__ky2$094 = $149;$__n_does_match$592 = $__n_does_match$6;$__st$293 = $150;
     }
    }
   }
   if ((label|0) == 4) {
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    $16 = $191;$lpad$phi$index = $9;$lpad$phi$index3 = $10;
    break;
   }
   else if ((label|0) == 5) {
    $11 = ___cxa_find_matching_catch()|0;
    $12 = tempRet0;
    $16 = $191;$lpad$phi$index = $11;$lpad$phi$index3 = $12;
    break;
   }
   else if ((label|0) == 66) {
    $152 = ($$lcssa|0)==(0|0);
    do {
     if ($152) {
      $193 = 1;
     } else {
      $153 = ((($$lcssa)) + 12|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = ((($$lcssa)) + 16|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = ($154|0)==($156|0);
      if ($157) {
       $158 = HEAP32[$$lcssa>>2]|0;
       $159 = ((($158)) + 36|0);
       $160 = HEAP32[$159>>2]|0;
       __THREW__ = 0;
       $161 = (invoke_ii($160|0,($$lcssa|0))|0);
       $162 = __THREW__; __THREW__ = 0;
       $163 = $162&1;
       if ($163) {
        $$ph$ph = $191;
        label = 6;
        break L6;
       } else {
        $$0$i$i$i$i11 = $161;
       }
      } else {
       $164 = HEAP32[$154>>2]|0;
       $$0$i$i$i$i11 = $164;
      }
      $165 = ($$0$i$i$i$i11|0)==(-1);
      if ($165) {
       HEAP32[$__b>>2] = 0;
       $193 = 1;
       break;
      } else {
       $$pre$i$i$i13 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i14 = ($$pre$i$i$i13|0)==(0|0);
       $193 = $phitmp$i$i$i14;
       break;
      }
     }
    } while(0);
    $166 = ($$pre$i3$i$i19$lcssa|0)==(0|0);
    do {
     if ($166) {
      label = 79;
     } else {
      $167 = ((($$pre$i3$i$i19$lcssa)) + 12|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ((($$pre$i3$i$i19$lcssa)) + 16|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($168|0)==($170|0);
      if ($171) {
       $172 = HEAP32[$$pre$i3$i$i19$lcssa>>2]|0;
       $173 = ((($172)) + 36|0);
       $174 = HEAP32[$173>>2]|0;
       __THREW__ = 0;
       $175 = (invoke_ii($174|0,($$pre$i3$i$i19$lcssa|0))|0);
       $176 = __THREW__; __THREW__ = 0;
       $177 = $176&1;
       if ($177) {
        $$ph$ph = $191;
        label = 6;
        break L6;
       } else {
        $$0$i$i1$i$i17 = $175;
       }
      } else {
       $178 = HEAP32[$168>>2]|0;
       $$0$i$i1$i$i17 = $178;
      }
      $179 = ($$0$i$i1$i$i17|0)==(-1);
      if ($179) {
       HEAP32[$__e>>2] = 0;
       label = 79;
       break;
      } else {
       if ($193) {
        break;
       } else {
        label = 81;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 79) {
     if ($193) {
      label = 81;
     }
    }
    if ((label|0) == 81) {
     $180 = HEAP32[$__err>>2]|0;
     $181 = $180 | 2;
     HEAP32[$__err>>2] = $181;
    }
    $182 = ($__kb|0)==($__ke|0);
    L113: do {
     if ($182) {
      label = 85;
     } else {
      $$081 = $__kb;$__st$380 = $__status$0;
      while(1) {
       $183 = HEAP8[$__st$380>>0]|0;
       $184 = ($183<<24>>24)==(2);
       if ($184) {
        $$044 = $$081;
        break L113;
       }
       $185 = ((($$081)) + 12|0);
       $186 = ((($__st$380)) + 1|0);
       $187 = ($185|0)==($__ke|0);
       if ($187) {
        label = 85;
        break;
       } else {
        $$081 = $185;$__st$380 = $186;
       }
      }
     }
    } while(0);
    if ((label|0) == 85) {
     $188 = HEAP32[$__err>>2]|0;
     $189 = $188 | 4;
     HEAP32[$__err>>2] = $189;
     $$044 = $__ke;
    }
    $190 = ($191|0)==(0);
    if (!($190)) {
     $192 = $191;
     _free($192);
    }
    STACKTOP = sp;return ($$044|0);
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $16 = $$ph$ph;$lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 $15 = ($16|0)==(0);
 if (!($15)) {
  $17 = $16;
  _free($17);
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(575,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$155 = 1;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$155 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$155 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($155) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($155) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(784,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 26;
   } else {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($124) {
     $157 = 1;
    } else {
     $125 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $131 = ((($130)) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$pre$i$i$i$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;
     } else {
      $157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 51;
     } else {
      $139 = ((($$pre$i3$i$i)) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($$pre$i3$i$i)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = ((($144)) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($157) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    $154 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($154|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0;
 var $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(575,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$160 = 1;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$160 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$160 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($160) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($160) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(785,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = tempRet0;
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 26;
   } else {
    $124 = $__v;
    $125 = $124;
    HEAP32[$125>>2] = $120;
    $126 = (($124) + 4)|0;
    $127 = $126;
    HEAP32[$127>>2] = $121;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($129) {
     $162 = 1;
    } else {
     $130 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $136 = ((($135)) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($$pre$i$i$i$lcssa|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $138;
      }
     } else {
      $141 = HEAP32[$131>>2]|0;
      $$0$i$i$i$i = $141;
     }
     $142 = ($$0$i$i$i$i|0)==(-1);
     if ($142) {
      HEAP32[$__b>>2] = 0;
      $162 = 1;
     } else {
      $162 = 0;
     }
    }
    $143 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($143) {
      label = 51;
     } else {
      $144 = ((($$pre$i3$i$i)) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = ((($$pre$i3$i$i)) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i3$i$i>>2]|0;
       $150 = ((($149)) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       $152 = (invoke_ii($151|0,($$pre$i3$i$i|0))|0);
       $153 = __THREW__; __THREW__ = 0;
       $154 = $153&1;
       if ($154) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $152;
       }
      } else {
       $155 = HEAP32[$145>>2]|0;
       $$0$i$i1$i$i = $155;
      }
      $156 = ($$0$i$i1$i$i|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($162) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($162) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $157 = HEAP32[$__err>>2]|0;
     $158 = $157 | 2;
     HEAP32[$__err>>2] = $158;
    }
    $159 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($159|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(575,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$155 = 1;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$155 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$155 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($155) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($155) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(786,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 26;
   } else {
    HEAP16[$__v>>1] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($124) {
     $157 = 1;
    } else {
     $125 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $131 = ((($130)) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$pre$i$i$i$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;
     } else {
      $157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 51;
     } else {
      $139 = ((($$pre$i3$i$i)) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($$pre$i3$i$i)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = ((($144)) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($157) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    $154 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($154|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(575,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$155 = 1;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$155 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$155 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($155) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($155) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(787,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 26;
   } else {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($124) {
     $157 = 1;
    } else {
     $125 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $131 = ((($130)) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$pre$i$i$i$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;
     } else {
      $157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 51;
     } else {
      $139 = ((($$pre$i3$i$i)) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($$pre$i3$i$i)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = ((($144)) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($157) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    $154 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($154|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(575,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$155 = 1;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$155 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$155 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($155) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($155) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(788,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 26;
   } else {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($124) {
     $157 = 1;
    } else {
     $125 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $131 = ((($130)) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$pre$i$i$i$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;
     } else {
      $157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 51;
     } else {
      $139 = ((($$pre$i3$i$i)) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($$pre$i3$i$i)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = ((($144)) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($157) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    $154 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($154|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0;
 var $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(575,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$160 = 1;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$160 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$160 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($160) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($160) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(789,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = tempRet0;
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 26;
   } else {
    $124 = $__v;
    $125 = $124;
    HEAP32[$125>>2] = $120;
    $126 = (($124) + 4)|0;
    $127 = $126;
    HEAP32[$127>>2] = $121;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($129) {
     $162 = 1;
    } else {
     $130 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $136 = ((($135)) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($$pre$i$i$i$lcssa|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $138;
      }
     } else {
      $141 = HEAP32[$131>>2]|0;
      $$0$i$i$i$i = $141;
     }
     $142 = ($$0$i$i$i$i|0)==(-1);
     if ($142) {
      HEAP32[$__b>>2] = 0;
      $162 = 1;
     } else {
      $162 = 0;
     }
    }
    $143 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($143) {
      label = 51;
     } else {
      $144 = ((($$pre$i3$i$i)) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = ((($$pre$i3$i$i)) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i3$i$i>>2]|0;
       $150 = ((($149)) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       $152 = (invoke_ii($151|0,($$pre$i3$i$i|0))|0);
       $153 = __THREW__; __THREW__ = 0;
       $154 = $153&1;
       if ($154) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $152;
       }
      } else {
       $155 = HEAP32[$145>>2]|0;
       $$0$i$i1$i$i = $155;
      }
      $156 = ($$0$i$i1$i$i|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($162) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($162) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $157 = HEAP32[$__err>>2]|0;
     $158 = $157 | 2;
     HEAP32[$__err>>2] = $158;
    }
    $159 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($159|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $0 = ((($__buf)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($__buf)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(575,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L4: do {
  if ($9) {
   label = 26;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP32[$__decimal_point>>2]|0;
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $16;
   L6: while(1) {
    $20 = ($$pre$i$i$i6|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $21 = ((($$pre$i$i$i6)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i6)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i6>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i6|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i4 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i4 = $32;
     }
     $33 = ($$0$i$i$i$i4|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i6;$157 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i10 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i10 = $47;
      }
      $48 = ($$0$i$i1$i$i10|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($157) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$17>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i24 = (($66) + -1)|0;
      $67 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$13>>2]|0;
     $74 = $72 ? $15 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $113 | $111;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(790,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 26;
   } else {
    HEAPF32[$__v>>2] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 51;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($159) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $0 = ((($__buf)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($__buf)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(575,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L4: do {
  if ($9) {
   label = 26;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP32[$__decimal_point>>2]|0;
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $16;
   L6: while(1) {
    $20 = ($$pre$i$i$i6|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $21 = ((($$pre$i$i$i6)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i6)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i6>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i6|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i4 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i4 = $32;
     }
     $33 = ($$0$i$i$i$i4|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i6;$157 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i10 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i10 = $47;
      }
      $48 = ($$0$i$i1$i$i10|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($157) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$17>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i24 = (($66) + -1)|0;
      $67 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$13>>2]|0;
     $74 = $72 ? $15 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $113 | $111;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(791,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 26;
   } else {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 51;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($159) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $0 = ((($__buf)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($__buf)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(575,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L4: do {
  if ($9) {
   label = 26;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP32[$__decimal_point>>2]|0;
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $16;
   L6: while(1) {
    $20 = ($$pre$i$i$i6|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $21 = ((($$pre$i$i$i6)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i6)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i6>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i6|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i4 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i4 = $32;
     }
     $33 = ($$0$i$i$i$i4|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i6;$157 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i10 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i10 = $47;
      }
      $48 = ($$0$i$i1$i$i10|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($157) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$17>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i24 = (($66) + -1)|0;
      $67 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(575,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$13>>2]|0;
     $74 = $72 ? $15 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $113 | $111;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(792,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 26;
   } else {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 51;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($159) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsnprintf($__s,$__n,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if (!($2)) {
  __THREW__ = 0;
  (invoke_ii(707,($0|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $5 = ___cxa_find_matching_catch(0|0)|0;
   $6 = tempRet0;
   ___clang_call_terminate($5);
   // unreachable;
  }
 }
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 __THREW__ = 0;
 $1 = (invoke_iiii(793,($__s|0),($__format|0),($__va|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = ($0|0)==(0|0);
  if (!($11)) {
   __THREW__ = 0;
   (invoke_ii(707,($0|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $14 = ___cxa_find_matching_catch(0|0)|0;
    $15 = tempRet0;
    ___clang_call_terminate($14);
    // unreachable;
   }
  }
  ___resumeException($9|0);
  // unreachable;
 } else {
  $4 = ($0|0)==(0|0);
  if (!($4)) {
   __THREW__ = 0;
   (invoke_ii(707,($0|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $7 = ___cxa_find_matching_catch(0|0)|0;
    $8 = tempRet0;
    ___clang_call_terminate($7);
    // unreachable;
   }
  }
  STACKTOP = sp;return ($1|0);
 }
 return (0)|0;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $$sroa$0$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   $$sroa$0$1 = 0;
  } else {
   $2 = $__oe;
   $3 = $__ob;
   $4 = (($2) - ($3))|0;
   $5 = $4 >> 2;
   $6 = ((($__iob)) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)>($5|0);
   $9 = (($7) - ($5))|0;
   $__ns$0 = $8 ? $9 : 0;
   $10 = $__op;
   $11 = (($10) - ($3))|0;
   $12 = $11 >> 2;
   $13 = ($11|0)>(0);
   if ($13) {
    $14 = HEAP32[$0>>2]|0;
    $15 = ((($14)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 1023]($0,$__ob,$12)|0);
    $18 = ($17|0)==($12|0);
    if (!($18)) {
     HEAP32[$__s>>2] = 0;
     $$sroa$0$1 = 0;
     break;
    }
   }
   $19 = ($__ns$0|0)>(0);
   do {
    if ($19) {
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
     $20 = HEAP8[$__sp>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     $23 = ((($__sp)) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($__sp)) + 4|0);
     $26 = $22 ? $25 : $24;
     $27 = HEAP32[$0>>2]|0;
     $28 = ((($27)) + 48|0);
     $29 = HEAP32[$28>>2]|0;
     __THREW__ = 0;
     $30 = (invoke_iiii($29|0,($0|0),($26|0),($__ns$0|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      $34 = ___cxa_find_matching_catch()|0;
      $35 = tempRet0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      ___resumeException($34|0);
      // unreachable;
     }
     $33 = ($30|0)==($__ns$0|0);
     if ($33) {
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      break;
     } else {
      HEAP32[$__s>>2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      $$sroa$0$1 = 0;
      break L1;
     }
    }
   } while(0);
   $36 = (($2) - ($10))|0;
   $37 = $36 >> 2;
   $38 = ($36|0)>(0);
   if ($38) {
    $39 = HEAP32[$0>>2]|0;
    $40 = ((($39)) + 48|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($0,$__op,$37)|0);
    $43 = ($42|0)==($37|0);
    if (!($43)) {
     HEAP32[$__s>>2] = 0;
     $$sroa$0$1 = 0;
     break;
    }
   }
   HEAP32[$6>>2] = 0;
   $$sroa$0$1 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$1|0);
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$01 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i20$lcssa = 0, $$pre$i2$i$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, $isascii1$i = 0, $isascii1$i12 = 0, $sext = 0, $sext24 = 0, $tmp$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = ((($14)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($14)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = ((($21)) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $157 = $14;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $157 = 0;
   label = 13;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
   $$01 = 0;
  }
  else if ((label|0) == 13) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP8[$30>>0]|0;
    $39 = $38&255;
    $$0$i$i = $39;
   }
   $40 = $$0$i$i&255;
   $isascii1$i = ($40<<24>>24)>(-1);
   if ($isascii1$i) {
    $sext = $$0$i$i << 24;
    $41 = $sext >> 24;
    $42 = ((($__ct)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + ($41<<1)|0);
    $45 = HEAP16[$44>>1]|0;
    $46 = $45 & 2048;
    $47 = ($46<<16>>16)==(0);
    if (!($47)) {
     $50 = HEAP32[$__ct>>2]|0;
     $51 = ((($50)) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($__ct,$40,0)|0);
     $54 = $53 << 24 >> 24;
     $55 = HEAP32[$__b>>2]|0;
     $56 = ((($55)) + 12|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ((($55)) + 16|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ($57|0)==($59|0);
     if ($60) {
      $61 = HEAP32[$55>>2]|0;
      $62 = ((($61)) + 40|0);
      $63 = HEAP32[$62>>2]|0;
      (FUNCTION_TABLE_ii[$63 & 1023]($55)|0);
      $$0$in = $__n;$$pre$i2$i$i7 = $157;$80 = $157;$__r$0$in = $54;
     } else {
      $64 = ((($57)) + 1|0);
      HEAP32[$56>>2] = $64;
      $$0$in = $__n;$$pre$i2$i$i7 = $157;$80 = $157;$__r$0$in = $54;
     }
     while(1) {
      $__r$0 = (($__r$0$in) + -48)|0;
      $$0 = (($$0$in) + -1)|0;
      $65 = HEAP32[$__b>>2]|0;
      $66 = ($65|0)==(0|0);
      do {
       if ($66) {
        $78 = 0;
       } else {
        $67 = ((($65)) + 12|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = ((($65)) + 16|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = ($68|0)==($70|0);
        if ($71) {
         $72 = HEAP32[$65>>2]|0;
         $73 = ((($72)) + 36|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = (FUNCTION_TABLE_ii[$74 & 1023]($65)|0);
         $76 = ($75|0)==(-1);
         if ($76) {
          HEAP32[$__b>>2] = 0;
          $78 = 0;
          break;
         } else {
          $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
          $78 = $$pre$i$i$i3;
          break;
         }
        } else {
         $78 = $65;
        }
       }
      } while(0);
      $77 = ($78|0)==(0|0);
      $79 = ($80|0)==(0|0);
      if ($79) {
       $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = 0;
      } else {
       $81 = ((($80)) + 12|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = ((($80)) + 16|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ($82|0)==($84|0);
       if ($85) {
        $86 = HEAP32[$80>>2]|0;
        $87 = ((($86)) + 36|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = (FUNCTION_TABLE_ii[$88 & 1023]($80)|0);
        $90 = ($89|0)==(-1);
        if ($90) {
         HEAP32[$__e>>2] = 0;
         $$pre$i2$i$i20 = 0;$92 = 0;
        } else {
         $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = $$pre$i2$i$i7;
        }
       } else {
        $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = $80;
       }
      }
      $91 = ($92|0)==(0|0);
      $tmp$i$i9 = $77 ^ $91;
      $93 = ($$0$in|0)>(1);
      $94 = $93 & $tmp$i$i9;
      $95 = HEAP32[$__b>>2]|0;
      if (!($94)) {
       $$lcssa = $95;$$pre$i2$i$i20$lcssa = $$pre$i2$i$i20;$__r$0$lcssa = $__r$0;
       break;
      }
      $96 = ((($95)) + 12|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ((($95)) + 16|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = ($97|0)==($99|0);
      if ($100) {
       $101 = HEAP32[$95>>2]|0;
       $102 = ((($101)) + 36|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = (FUNCTION_TABLE_ii[$103 & 1023]($95)|0);
       $$0$i$i10 = $104;
      } else {
       $105 = HEAP8[$97>>0]|0;
       $106 = $105&255;
       $$0$i$i10 = $106;
      }
      $107 = $$0$i$i10&255;
      $isascii1$i12 = ($107<<24>>24)>(-1);
      if (!($isascii1$i12)) {
       $$01 = $__r$0;
       break L16;
      }
      $sext24 = $$0$i$i10 << 24;
      $108 = $sext24 >> 24;
      $109 = HEAP32[$42>>2]|0;
      $110 = (($109) + ($108<<1)|0);
      $111 = HEAP16[$110>>1]|0;
      $112 = $111 & 2048;
      $113 = ($112<<16>>16)==(0);
      if ($113) {
       $$01 = $__r$0;
       break L16;
      }
      $114 = ($__r$0*10)|0;
      $115 = HEAP32[$__ct>>2]|0;
      $116 = ((($115)) + 36|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = (FUNCTION_TABLE_iiii[$117 & 1023]($__ct,$107,0)|0);
      $119 = $118 << 24 >> 24;
      $120 = (($119) + ($114))|0;
      $121 = HEAP32[$__b>>2]|0;
      $122 = ((($121)) + 12|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ((($121)) + 16|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = ($123|0)==($125|0);
      if ($126) {
       $127 = HEAP32[$121>>2]|0;
       $128 = ((($127)) + 40|0);
       $129 = HEAP32[$128>>2]|0;
       (FUNCTION_TABLE_ii[$129 & 1023]($121)|0);
       $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$80 = $92;$__r$0$in = $120;
       continue;
      } else {
       $130 = ((($123)) + 1|0);
       HEAP32[$122>>2] = $130;
       $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$80 = $92;$__r$0$in = $120;
       continue;
      }
     }
     $131 = ($$lcssa|0)==(0|0);
     do {
      if ($131) {
       $143 = 0;
      } else {
       $132 = ((($$lcssa)) + 12|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ((($$lcssa)) + 16|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ($133|0)==($135|0);
       if ($136) {
        $137 = HEAP32[$$lcssa>>2]|0;
        $138 = ((($137)) + 36|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = (FUNCTION_TABLE_ii[$139 & 1023]($$lcssa)|0);
        $141 = ($140|0)==(-1);
        if ($141) {
         HEAP32[$__b>>2] = 0;
         $143 = 0;
         break;
        } else {
         $$pre$i$i$i16 = HEAP32[$__b>>2]|0;
         $143 = $$pre$i$i$i16;
         break;
        }
       } else {
        $143 = $$lcssa;
       }
      }
     } while(0);
     $142 = ($143|0)==(0|0);
     $144 = ($$pre$i2$i$i20$lcssa|0)==(0|0);
     do {
      if ($144) {
       label = 50;
      } else {
       $145 = ((($$pre$i2$i$i20$lcssa)) + 12|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = ((($$pre$i2$i$i20$lcssa)) + 16|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = ($146|0)==($148|0);
       if ($149) {
        $150 = HEAP32[$$pre$i2$i$i20$lcssa>>2]|0;
        $151 = ((($150)) + 36|0);
        $152 = HEAP32[$151>>2]|0;
        $153 = (FUNCTION_TABLE_ii[$152 & 1023]($$pre$i2$i$i20$lcssa)|0);
        $154 = ($153|0)==(-1);
        if ($154) {
         HEAP32[$__e>>2] = 0;
         label = 50;
         break;
        }
       }
       if ($142) {
        $$01 = $__r$0$lcssa;
        break L16;
       }
      }
     } while(0);
     if ((label|0) == 50) {
      if (!($142)) {
       $$01 = $__r$0$lcssa;
       break;
      }
     }
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
     $$01 = $__r$0$lcssa;
     break;
    }
   }
   $48 = HEAP32[$__err>>2]|0;
   $49 = $48 | 4;
   HEAP32[$__err>>2] = $49;
   $$01 = 0;
  }
 } while(0);
 return ($$01|0);
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$01 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $$pre$i3$i$i25$lcssa = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i20 = 0, $phitmp$i$i$i5 = 0, $phitmp$i4$i$i11 = 0, $tmp$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $148 = 1;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $148 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $148 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = ((($13)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($13)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = ((($20)) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($148) {
     $149 = $13;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($148) {
   label = 16;
  } else {
   $149 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
   $$01 = 0;
  }
  else if ((label|0) == 17) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP32[$30>>2]|0;
    $$0$i$i = $38;
   }
   $39 = HEAP32[$__ct>>2]|0;
   $40 = ((($39)) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,2048,$$0$i$i)|0);
   if (!($42)) {
    $43 = HEAP32[$__err>>2]|0;
    $44 = $43 | 4;
    HEAP32[$__err>>2] = $44;
    $$01 = 0;
    break;
   }
   $45 = HEAP32[$__ct>>2]|0;
   $46 = ((($45)) + 52|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_iiii[$47 & 1023]($__ct,$$0$i$i,0)|0);
   $49 = $48 << 24 >> 24;
   $50 = HEAP32[$__b>>2]|0;
   $51 = ((($50)) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($50)) + 16|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($52|0)==($54|0);
   if ($55) {
    $56 = HEAP32[$50>>2]|0;
    $57 = ((($56)) + 40|0);
    $58 = HEAP32[$57>>2]|0;
    (FUNCTION_TABLE_ii[$58 & 1023]($50)|0);
    $$0$in = $__n;$$pre$i3$i$i10 = $149;$74 = $149;$__r$0$in = $49;
   } else {
    $59 = ((($52)) + 4|0);
    HEAP32[$51>>2] = $59;
    $$0$in = $__n;$$pre$i3$i$i10 = $149;$74 = $149;$__r$0$in = $49;
   }
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $60 = HEAP32[$__b>>2]|0;
    $61 = ($60|0)==(0|0);
    do {
     if ($61) {
      $86 = 1;
     } else {
      $62 = ((($60)) + 12|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ((($60)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($63|0)==($65|0);
      if ($66) {
       $67 = HEAP32[$60>>2]|0;
       $68 = ((($67)) + 36|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = (FUNCTION_TABLE_ii[$69 & 1023]($60)|0);
       $$0$i$i$i$i2 = $70;
      } else {
       $71 = HEAP32[$63>>2]|0;
       $$0$i$i$i$i2 = $71;
      }
      $72 = ($$0$i$i$i$i2|0)==(-1);
      if ($72) {
       HEAP32[$__b>>2] = 0;
       $86 = 1;
       break;
      } else {
       $$pre$i$i$i4 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i5 = ($$pre$i$i$i4|0)==(0|0);
       $86 = $phitmp$i$i$i5;
       break;
      }
     }
    } while(0);
    $73 = ($74|0)==(0|0);
    do {
     if ($73) {
      $$pre$i3$i$i25 = $$pre$i3$i$i10;$150 = 0;$87 = 1;
     } else {
      $75 = ((($74)) + 12|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ((($74)) + 16|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ($76|0)==($78|0);
      if ($79) {
       $80 = HEAP32[$74>>2]|0;
       $81 = ((($80)) + 36|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = (FUNCTION_TABLE_ii[$82 & 1023]($74)|0);
       $$0$i$i1$i$i8 = $83;
      } else {
       $84 = HEAP32[$76>>2]|0;
       $$0$i$i1$i$i8 = $84;
      }
      $85 = ($$0$i$i1$i$i8|0)==(-1);
      if ($85) {
       HEAP32[$__e>>2] = 0;
       $$pre$i3$i$i25 = 0;$150 = 0;$87 = 1;
       break;
      } else {
       $phitmp$i4$i$i11 = ($$pre$i3$i$i10|0)==(0|0);
       $$pre$i3$i$i25 = $$pre$i3$i$i10;$150 = $$pre$i3$i$i10;$87 = $phitmp$i4$i$i11;
       break;
      }
     }
    } while(0);
    $tmp$i$i13 = $86 ^ $87;
    $88 = ($$0$in|0)>(1);
    $89 = $88 & $tmp$i$i13;
    $90 = HEAP32[$__b>>2]|0;
    if (!($89)) {
     $$lcssa = $90;$$pre$i3$i$i25$lcssa = $$pre$i3$i$i25;$__r$0$lcssa = $__r$0;
     break;
    }
    $91 = ((($90)) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ((($90)) + 16|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($92|0)==($94|0);
    if ($95) {
     $96 = HEAP32[$90>>2]|0;
     $97 = ((($96)) + 36|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (FUNCTION_TABLE_ii[$98 & 1023]($90)|0);
     $$0$i$i14 = $99;
    } else {
     $100 = HEAP32[$92>>2]|0;
     $$0$i$i14 = $100;
    }
    $101 = HEAP32[$__ct>>2]|0;
    $102 = ((($101)) + 12|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = (FUNCTION_TABLE_iiii[$103 & 1023]($__ct,2048,$$0$i$i14)|0);
    if (!($104)) {
     $$01 = $__r$0;
     break L22;
    }
    $105 = ($__r$0*10)|0;
    $106 = HEAP32[$__ct>>2]|0;
    $107 = ((($106)) + 52|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (FUNCTION_TABLE_iiii[$108 & 1023]($__ct,$$0$i$i14,0)|0);
    $110 = $109 << 24 >> 24;
    $111 = (($110) + ($105))|0;
    $112 = HEAP32[$__b>>2]|0;
    $113 = ((($112)) + 12|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((($112)) + 16|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($114|0)==($116|0);
    if ($117) {
     $118 = HEAP32[$112>>2]|0;
     $119 = ((($118)) + 40|0);
     $120 = HEAP32[$119>>2]|0;
     (FUNCTION_TABLE_ii[$120 & 1023]($112)|0);
     $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$74 = $150;$__r$0$in = $111;
     continue;
    } else {
     $121 = ((($114)) + 4|0);
     HEAP32[$113>>2] = $121;
     $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$74 = $150;$__r$0$in = $111;
     continue;
    }
   }
   $122 = ($$lcssa|0)==(0|0);
   do {
    if ($122) {
     $151 = 1;
    } else {
     $123 = ((($$lcssa)) + 12|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($$lcssa)) + 16|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ($124|0)==($126|0);
     if ($127) {
      $128 = HEAP32[$$lcssa>>2]|0;
      $129 = ((($128)) + 36|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = (FUNCTION_TABLE_ii[$130 & 1023]($$lcssa)|0);
      $$0$i$i$i$i17 = $131;
     } else {
      $132 = HEAP32[$124>>2]|0;
      $$0$i$i$i$i17 = $132;
     }
     $133 = ($$0$i$i$i$i17|0)==(-1);
     if ($133) {
      HEAP32[$__b>>2] = 0;
      $151 = 1;
      break;
     } else {
      $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i20 = ($$pre$i$i$i19|0)==(0|0);
      $151 = $phitmp$i$i$i20;
      break;
     }
    }
   } while(0);
   $134 = ($$pre$i3$i$i25$lcssa|0)==(0|0);
   do {
    if ($134) {
     label = 60;
    } else {
     $135 = ((($$pre$i3$i$i25$lcssa)) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ((($$pre$i3$i$i25$lcssa)) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$$pre$i3$i$i25$lcssa>>2]|0;
      $141 = ((($140)) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (FUNCTION_TABLE_ii[$142 & 1023]($$pre$i3$i$i25$lcssa)|0);
      $$0$i$i1$i$i23 = $143;
     } else {
      $144 = HEAP32[$136>>2]|0;
      $$0$i$i1$i$i23 = $144;
     }
     $145 = ($$0$i$i1$i$i23|0)==(-1);
     if ($145) {
      HEAP32[$__e>>2] = 0;
      label = 60;
      break;
     } else {
      if ($151) {
       $$01 = $__r$0$lcssa;
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 60) {
    if (!($151)) {
     $$01 = $__r$0$lcssa;
     break;
    }
   }
   $146 = HEAP32[$__err>>2]|0;
   $147 = $146 | 2;
   HEAP32[$__err>>2] = $147;
   $$01 = $__r$0$lcssa;
  }
 } while(0);
 return ($$01|0);
}
function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(708|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $2 ? $4 : 0;
 $14 = (_realloc($13,$$)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   $16 = $14;
   HEAP32[$__b>>2] = $16;
   $25 = $14;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   $17 = $14;
   HEAP32[$__b>>2] = $17;
   $18 = ($$pr|0)==(0|0);
   if ($18) {
    $25 = $14;
   } else {
    $19 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($19|0,($$pr|0));
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     $22 = ___cxa_find_matching_catch(0|0)|0;
     $23 = tempRet0;
     ___clang_call_terminate($22);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $25 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = (794);
 $24 = (($25) + ($12)|0);
 HEAP32[$__n>>2] = $24;
 $26 = HEAP32[$__b>>2]|0;
 $27 = (($26) + ($$)|0);
 HEAP32[$__e>>2] = $27;
 return;
}
function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(708|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 $14 = $2 ? $4 : 0;
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   $17 = $15;
   HEAP32[$__b>>2] = $17;
   $27 = $15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   $18 = $15;
   HEAP32[$__b>>2] = $18;
   $19 = ($$pr|0)==(0|0);
   if ($19) {
    $27 = $15;
   } else {
    $20 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($20|0,($$pr|0));
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     $23 = ___cxa_find_matching_catch(0|0)|0;
     $24 = tempRet0;
     ___clang_call_terminate($23);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $27 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = (794);
 $25 = $$ >>> 2;
 $26 = (($27) + ($13<<2)|0);
 HEAP32[$__n>>2] = $26;
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + ($25<<2)|0);
 HEAP32[$__e>>2] = $29;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$03 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$04 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep1 = 0, $scevgep2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $15 = 10;$16 = $5;$41 = $1;
 } else {
  $6 = ((($this)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $15 = $phitmp$i;$16 = $7;$41 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = ($__last|0)==($__first|0);
 do {
  if (!($13)) {
   $14 = (($15) - ($16))|0;
   $17 = ($14>>>0)<($12>>>0);
   if ($17) {
    $18 = (($16) + ($12))|0;
    $19 = (($18) - ($15))|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
    $$pre = HEAP8[$this>>0]|0;
    $21 = $$pre;
   } else {
    $21 = $41;
   }
   $20 = $21 & 1;
   $22 = ($20<<24>>24)==(0);
   if ($22) {
    $25 = ((($this)) + 1|0);
    $29 = $25;
   } else {
    $23 = ((($this)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $29 = $24;
   }
   $26 = (($16) - ($0))|0;
   $scevgep = (($__last) + ($26)|0);
   $scevgep1 = $scevgep;
   $27 = ($__first|0)==($__last|0);
   if (!($27)) {
    $28 = (($29) + ($16)|0);
    $$03 = $__first;$__p$04 = $28;
    while(1) {
     $30 = HEAP8[$$03>>0]|0;
     HEAP8[$__p$04>>0] = $30;
     $31 = ((($__p$04)) + 1|0);
     $32 = ((($$03)) + 1|0);
     $33 = ($32|0)==($__last|0);
     if ($33) {
      break;
     } else {
      $$03 = $32;$__p$04 = $31;
     }
    }
   }
   $scevgep2 = (($29) + ($scevgep1)|0);
   HEAP8[$scevgep2>>0] = 0;
   $34 = (($16) + ($12))|0;
   $35 = HEAP8[$this>>0]|0;
   $36 = $35 & 1;
   $37 = ($36<<24>>24)==(0);
   if ($37) {
    $39 = $34 << 1;
    $40 = $39&255;
    HEAP8[$this>>0] = $40;
    break;
   } else {
    $38 = ((($this)) + 4|0);
    HEAP32[$38>>2] = $34;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(708|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 $14 = $2 ? $4 : 0;
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   $17 = $15;
   HEAP32[$__b>>2] = $17;
   $27 = $15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   $18 = $15;
   HEAP32[$__b>>2] = $18;
   $19 = ($$pr|0)==(0|0);
   if ($19) {
    $27 = $15;
   } else {
    $20 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($20|0,($$pr|0));
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     $23 = ___cxa_find_matching_catch(0|0)|0;
     $24 = tempRet0;
     ___clang_call_terminate($23);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $27 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = (794);
 $25 = $$ >>> 2;
 $26 = (($27) + ($13<<2)|0);
 HEAP32[$__n>>2] = $26;
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + ($25<<2)|0);
 HEAP32[$__e>>2] = $29;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$03 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$04 = 0, $phitmp$i = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $16 = 1;$17 = $5;$45 = $1;
 } else {
  $6 = ((($this)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $16 = $phitmp$i;$17 = $7;$45 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = $12 >> 2;
 $14 = ($13|0)==(0);
 do {
  if (!($14)) {
   $15 = (($16) - ($17))|0;
   $18 = ($15>>>0)<($13>>>0);
   if ($18) {
    $19 = (($17) + ($13))|0;
    $20 = (($19) - ($16))|0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$16,$20,$17,$17,0,0);
    $$pre = HEAP8[$this>>0]|0;
    $22 = $$pre;
   } else {
    $22 = $45;
   }
   $21 = $22 & 1;
   $23 = ($21<<24>>24)==(0);
   if ($23) {
    $26 = ((($this)) + 4|0);
    $33 = $26;
   } else {
    $24 = ((($this)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $33 = $25;
   }
   $27 = $__last;
   $28 = (($27) - ($0))|0;
   $29 = $28 >>> 2;
   $30 = (($17) + ($29))|0;
   $31 = ($__first|0)==($__last|0);
   if (!($31)) {
    $32 = (($33) + ($17<<2)|0);
    $$03 = $__first;$__p$04 = $32;
    while(1) {
     $34 = HEAP32[$$03>>2]|0;
     HEAP32[$__p$04>>2] = $34;
     $35 = ((($__p$04)) + 4|0);
     $36 = ((($$03)) + 4|0);
     $37 = ($36|0)==($__last|0);
     if ($37) {
      break;
     } else {
      $$03 = $36;$__p$04 = $35;
     }
    }
   }
   $scevgep = (($33) + ($30<<2)|0);
   HEAP32[$scevgep>>2] = 0;
   $38 = (($17) + ($13))|0;
   $39 = HEAP8[$this>>0]|0;
   $40 = $39 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    $43 = $38 << 1;
    $44 = $43&255;
    HEAP8[$this>>0] = $44;
    break;
   } else {
    $42 = ((($this)) + 4|0);
    HEAP32[$42>>2] = $38;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 128|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__n|0)==(0);
 do {
  if (!($3)) {
   __THREW__ = 0;
   invoke_vii(795,($this|0),($__n|0));
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $6 = ___cxa_find_matching_catch()|0;
    $7 = tempRet0;
    __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this);
    ___resumeException($6|0);
    // unreachable;
   } else {
    __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6616)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6656)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7688)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7680)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7748)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7756)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7812)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7820)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7828)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7836)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6728)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6800)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6860)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6920)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7232)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7296)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7360)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7424)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7460)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7496)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7532)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7568)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7012)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7104)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7136)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7168)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7608)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7648)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $$lcssa = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if (!($1)) {
   $2 = ((($this)) + 4|0);
   $$pre$i$i = HEAP32[$2>>2]|0;
   $3 = ($$pre$i$i|0)==($0|0);
   if (!($3)) {
    $5 = $$pre$i$i;
    while(1) {
     $4 = ((($5)) + -4|0);
     $6 = ($4|0)==($0|0);
     if ($6) {
      $$lcssa = $4;
      break;
     } else {
      $5 = $4;
     }
    }
    HEAP32[$2>>2] = $$lcssa;
   }
   $7 = ((($this)) + 16|0);
   $8 = ($7|0)==($0|0);
   if ($8) {
    $9 = ((($this)) + 128|0);
    HEAP8[$9>>0] = 0;
    break;
   } else {
    __ZdlPv($0);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($__sz>>>0);
 if ($7) {
  $8 = (($__sz) - ($6))|0;
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$8);
 } else {
  $9 = ($6>>>0)>($__sz>>>0);
  if ($9) {
   $10 = (($2) + ($__sz<<2)|0);
   $11 = ($1|0)==($10|0);
   if (!($11)) {
    $13 = $1;
    while(1) {
     $12 = ((($13)) + -4|0);
     $14 = ($12|0)==($10|0);
     if ($14) {
      $$lcssa = $12;
      break;
     } else {
      $13 = $12;
     }
    }
    HEAP32[$0>>2] = $$lcssa;
   }
  }
 }
 return;
}
function __ZNKSt3__16locale5__imp9has_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 if ($8) {
  $9 = (($3) + ($id<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  $12 = $11;
 } else {
  $12 = 0;
 }
 return ($12|0);
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__vp)) + 4|0);
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $1 = HEAP32[$__vp>>2]|0;
 $2 = $$field2 >> 1;
 $3 = (($1) + ($2)|0);
 $4 = $$field2 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $9 = $$field;
  $10 = $9;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($$field)|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;
 }
 FUNCTION_TABLE_vi[$10 & 1023]($3);
 return;
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 $$pre1 = $to_end;
 if ($1) {
  label = 4;
 } else {
  $2 = $to;
  $3 = (($$pre1) - ($2))|0;
  $4 = ($3|0)<(3);
  if ($4) {
   $$0 = 1;
  } else {
   $5 = ((($to)) + 1|0);
   HEAP32[$to_nxt>>2] = $5;
   HEAP8[$to>>0] = -17;
   $6 = HEAP32[$to_nxt>>2]|0;
   $7 = ((($6)) + 1|0);
   HEAP32[$to_nxt>>2] = $7;
   HEAP8[$6>>0] = -69;
   $8 = HEAP32[$to_nxt>>2]|0;
   $9 = ((($8)) + 1|0);
   HEAP32[$to_nxt>>2] = $9;
   HEAP8[$8>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $10 = $frm_end;
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $11 = ($$pre>>>0)<($frm_end>>>0);
   if ($11) {
    $13 = $$pre;
    while(1) {
     $12 = HEAP16[$13>>1]|0;
     $14 = $12&65535;
     $15 = ($14>>>0)>($Maxcode>>>0);
     if ($15) {
      $$0 = 2;
      break L4;
     }
     $16 = ($12&65535)<(128);
     do {
      if ($16) {
       $17 = HEAP32[$to_nxt>>2]|0;
       $18 = $17;
       $19 = (($$pre1) - ($18))|0;
       $20 = ($19|0)<(1);
       if ($20) {
        $$0 = 1;
        break L4;
       }
       $21 = $12&255;
       $22 = ((($17)) + 1|0);
       HEAP32[$to_nxt>>2] = $22;
       HEAP8[$17>>0] = $21;
      } else {
       $23 = ($12&65535)<(2048);
       if ($23) {
        $24 = HEAP32[$to_nxt>>2]|0;
        $25 = $24;
        $26 = (($$pre1) - ($25))|0;
        $27 = ($26|0)<(2);
        if ($27) {
         $$0 = 1;
         break L4;
        }
        $28 = $14 >>> 6;
        $29 = $28 | 192;
        $30 = $29&255;
        $31 = ((($24)) + 1|0);
        HEAP32[$to_nxt>>2] = $31;
        HEAP8[$24>>0] = $30;
        $32 = $14 & 63;
        $33 = $32 | 128;
        $34 = $33&255;
        $35 = HEAP32[$to_nxt>>2]|0;
        $36 = ((($35)) + 1|0);
        HEAP32[$to_nxt>>2] = $36;
        HEAP8[$35>>0] = $34;
        break;
       }
       $37 = ($12&65535)<(55296);
       if ($37) {
        $38 = HEAP32[$to_nxt>>2]|0;
        $39 = $38;
        $40 = (($$pre1) - ($39))|0;
        $41 = ($40|0)<(3);
        if ($41) {
         $$0 = 1;
         break L4;
        }
        $42 = $14 >>> 12;
        $43 = $42 | 224;
        $44 = $43&255;
        $45 = ((($38)) + 1|0);
        HEAP32[$to_nxt>>2] = $45;
        HEAP8[$38>>0] = $44;
        $46 = $14 >>> 6;
        $47 = $46 & 63;
        $48 = $47 | 128;
        $49 = $48&255;
        $50 = HEAP32[$to_nxt>>2]|0;
        $51 = ((($50)) + 1|0);
        HEAP32[$to_nxt>>2] = $51;
        HEAP8[$50>>0] = $49;
        $52 = $14 & 63;
        $53 = $52 | 128;
        $54 = $53&255;
        $55 = HEAP32[$to_nxt>>2]|0;
        $56 = ((($55)) + 1|0);
        HEAP32[$to_nxt>>2] = $56;
        HEAP8[$55>>0] = $54;
        break;
       }
       $57 = ($12&65535)<(56320);
       if (!($57)) {
        $109 = ($12&65535)<(57344);
        if ($109) {
         $$0 = 2;
         break L4;
        }
        $110 = HEAP32[$to_nxt>>2]|0;
        $111 = $110;
        $112 = (($$pre1) - ($111))|0;
        $113 = ($112|0)<(3);
        if ($113) {
         $$0 = 1;
         break L4;
        }
        $114 = $14 >>> 12;
        $115 = $114 | 224;
        $116 = $115&255;
        $117 = ((($110)) + 1|0);
        HEAP32[$to_nxt>>2] = $117;
        HEAP8[$110>>0] = $116;
        $118 = $14 >>> 6;
        $119 = $118 & 63;
        $120 = $119 | 128;
        $121 = $120&255;
        $122 = HEAP32[$to_nxt>>2]|0;
        $123 = ((($122)) + 1|0);
        HEAP32[$to_nxt>>2] = $123;
        HEAP8[$122>>0] = $121;
        $124 = $14 & 63;
        $125 = $124 | 128;
        $126 = $125&255;
        $127 = HEAP32[$to_nxt>>2]|0;
        $128 = ((($127)) + 1|0);
        HEAP32[$to_nxt>>2] = $128;
        HEAP8[$127>>0] = $126;
        break;
       }
       $58 = $13;
       $59 = (($10) - ($58))|0;
       $60 = ($59|0)<(4);
       if ($60) {
        $$0 = 1;
        break L4;
       }
       $61 = ((($13)) + 2|0);
       $62 = HEAP16[$61>>1]|0;
       $63 = $62&65535;
       $64 = $63 & 64512;
       $65 = ($64|0)==(56320);
       if (!($65)) {
        $$0 = 2;
        break L4;
       }
       $66 = HEAP32[$to_nxt>>2]|0;
       $67 = $66;
       $68 = (($$pre1) - ($67))|0;
       $69 = ($68|0)<(4);
       if ($69) {
        $$0 = 1;
        break L4;
       }
       $70 = $14 & 960;
       $71 = $70 << 10;
       $72 = (($71) + 65536)|0;
       $73 = $14 << 10;
       $74 = $73 & 64512;
       $75 = $72 | $74;
       $76 = $63 & 1023;
       $77 = $75 | $76;
       $78 = ($77>>>0)>($Maxcode>>>0);
       if ($78) {
        $$0 = 2;
        break L4;
       }
       HEAP32[$frm_nxt>>2] = $61;
       $79 = $70 >>> 6;
       $80 = (($79) + 1)|0;
       $81 = $80 >>> 2;
       $82 = $81 | 240;
       $83 = $82&255;
       $84 = HEAP32[$to_nxt>>2]|0;
       $85 = ((($84)) + 1|0);
       HEAP32[$to_nxt>>2] = $85;
       HEAP8[$84>>0] = $83;
       $86 = $80 << 4;
       $87 = $86 & 48;
       $88 = $14 >>> 2;
       $89 = $88 & 15;
       $90 = $89 | $87;
       $91 = $90 | 128;
       $92 = $91&255;
       $93 = HEAP32[$to_nxt>>2]|0;
       $94 = ((($93)) + 1|0);
       HEAP32[$to_nxt>>2] = $94;
       HEAP8[$93>>0] = $92;
       $95 = $14 << 4;
       $96 = $95 & 48;
       $97 = $63 >>> 6;
       $98 = $97 & 15;
       $99 = $96 | $98;
       $100 = $99 | 128;
       $101 = $100&255;
       $102 = HEAP32[$to_nxt>>2]|0;
       $103 = ((($102)) + 1|0);
       HEAP32[$to_nxt>>2] = $103;
       HEAP8[$102>>0] = $101;
       $104 = $63 & 63;
       $105 = $104 | 128;
       $106 = $105&255;
       $107 = HEAP32[$to_nxt>>2]|0;
       $108 = ((($107)) + 1|0);
       HEAP32[$to_nxt>>2] = $108;
       HEAP8[$107>>0] = $106;
      }
     } while(0);
     $129 = HEAP32[$frm_nxt>>2]|0;
     $130 = ((($129)) + 2|0);
     HEAP32[$frm_nxt>>2] = $130;
     $131 = ($130>>>0)<($frm_end>>>0);
     if ($131) {
      $13 = $130;
     } else {
      $$0 = 0;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$lcssa = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $$pre4 = $frm_end;
  $$pre = $to;$$pre$phiZ2D = $$pre4;
 } else {
  $2 = HEAP32[$frm_nxt>>2]|0;
  $3 = $frm_end;
  $4 = $2;
  $5 = (($3) - ($4))|0;
  $6 = ($5|0)>(2);
  if ($6) {
   $7 = HEAP8[$2>>0]|0;
   $8 = ($7<<24>>24)==(-17);
   if ($8) {
    $9 = ((($2)) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(-69);
    if ($11) {
     $12 = ((($2)) + 2|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(-65);
     if ($14) {
      $15 = ((($2)) + 3|0);
      HEAP32[$frm_nxt>>2] = $15;
      $$pre$pre = HEAP32[$to_nxt>>2]|0;
      $$pre = $$pre$pre;$$pre$phiZ2D = $3;
     } else {
      $$pre = $to;$$pre$phiZ2D = $3;
     }
    } else {
     $$pre = $to;$$pre$phiZ2D = $3;
    }
   } else {
    $$pre = $to;$$pre$phiZ2D = $3;
   }
  } else {
   $$pre = $to;$$pre$phiZ2D = $3;
  }
 }
 $16 = $to_end;
 $17 = HEAP32[$frm_nxt>>2]|0;
 $18 = ($17>>>0)<($frm_end>>>0);
 $19 = ($$pre>>>0)<($to_end>>>0);
 $20 = $18 & $19;
 L9: do {
  if ($20) {
   $22 = $17;$27 = $$pre;
   while(1) {
    $21 = HEAP8[$22>>0]|0;
    $23 = $21&255;
    $24 = ($23>>>0)>($Maxcode>>>0);
    if ($24) {
     $$0 = 2;
     break L9;
    }
    $25 = ($21<<24>>24)>(-1);
    do {
     if ($25) {
      $26 = $21&255;
      HEAP16[$27>>1] = $26;
      $28 = ((($22)) + 1|0);
      HEAP32[$frm_nxt>>2] = $28;
     } else {
      $29 = ($21&255)<(194);
      if ($29) {
       $$0 = 2;
       break L9;
      }
      $30 = ($21&255)<(224);
      if ($30) {
       $31 = $22;
       $32 = (($$pre$phiZ2D) - ($31))|0;
       $33 = ($32|0)<(2);
       if ($33) {
        $$0 = 1;
        break L9;
       }
       $34 = ((($22)) + 1|0);
       $35 = HEAP8[$34>>0]|0;
       $36 = $35&255;
       $37 = $36 & 192;
       $38 = ($37|0)==(128);
       if (!($38)) {
        $$0 = 2;
        break L9;
       }
       $39 = $23 << 6;
       $40 = $39 & 1984;
       $41 = $36 & 63;
       $42 = $41 | $40;
       $43 = ($42>>>0)>($Maxcode>>>0);
       if ($43) {
        $$0 = 2;
        break L9;
       }
       $44 = $42&65535;
       HEAP16[$27>>1] = $44;
       $45 = ((($22)) + 2|0);
       HEAP32[$frm_nxt>>2] = $45;
       break;
      }
      $46 = ($21&255)<(240);
      if ($46) {
       $47 = $22;
       $48 = (($$pre$phiZ2D) - ($47))|0;
       $49 = ($48|0)<(3);
       if ($49) {
        $$0 = 1;
        break L9;
       }
       $50 = ((($22)) + 1|0);
       $51 = HEAP8[$50>>0]|0;
       $52 = ((($22)) + 2|0);
       $53 = HEAP8[$52>>0]|0;
       switch ($23|0) {
       case 224:  {
        $54 = $51 & -32;
        $55 = ($54<<24>>24)==(-96);
        if (!($55)) {
         $$0 = 2;
         break L9;
        }
        break;
       }
       case 237:  {
        $56 = $51 & -32;
        $57 = ($56<<24>>24)==(-128);
        if (!($57)) {
         $$0 = 2;
         break L9;
        }
        break;
       }
       default: {
        $58 = $51 & -64;
        $59 = ($58<<24>>24)==(-128);
        if (!($59)) {
         $$0 = 2;
         break L9;
        }
       }
       }
       $60 = $53&255;
       $61 = $60 & 192;
       $62 = ($61|0)==(128);
       if (!($62)) {
        $$0 = 2;
        break L9;
       }
       $63 = $23 << 12;
       $64 = $51&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $60 & 63;
       $69 = $67 | $68;
       $70 = $69 & 65535;
       $71 = ($70>>>0)>($Maxcode>>>0);
       if ($71) {
        $$0 = 2;
        break L9;
       }
       $72 = $69&65535;
       HEAP16[$27>>1] = $72;
       $73 = ((($22)) + 3|0);
       HEAP32[$frm_nxt>>2] = $73;
       break;
      }
      $74 = ($21&255)<(245);
      if (!($74)) {
       $$0 = 2;
       break L9;
      }
      $75 = $22;
      $76 = (($$pre$phiZ2D) - ($75))|0;
      $77 = ($76|0)<(4);
      if ($77) {
       $$0 = 1;
       break L9;
      }
      $78 = ((($22)) + 1|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = ((($22)) + 2|0);
      $81 = HEAP8[$80>>0]|0;
      $82 = ((($22)) + 3|0);
      $83 = HEAP8[$82>>0]|0;
      switch ($23|0) {
      case 240:  {
       $$off = (($79) + 112)<<24>>24;
       $84 = ($$off&255)<(48);
       if (!($84)) {
        $$0 = 2;
        break L9;
       }
       break;
      }
      case 244:  {
       $85 = $79 & -16;
       $86 = ($85<<24>>24)==(-128);
       if (!($86)) {
        $$0 = 2;
        break L9;
       }
       break;
      }
      default: {
       $87 = $79 & -64;
       $88 = ($87<<24>>24)==(-128);
       if (!($88)) {
        $$0 = 2;
        break L9;
       }
      }
      }
      $89 = $81&255;
      $90 = $89 & 192;
      $91 = ($90|0)==(128);
      if (!($91)) {
       $$0 = 2;
       break L9;
      }
      $92 = $83&255;
      $93 = $92 & 192;
      $94 = ($93|0)==(128);
      if (!($94)) {
       $$0 = 2;
       break L9;
      }
      $95 = $27;
      $96 = (($16) - ($95))|0;
      $97 = ($96|0)<(4);
      if ($97) {
       $$0 = 1;
       break L9;
      }
      $98 = $23 & 7;
      $99 = $98 << 18;
      $100 = $79&255;
      $101 = $100 << 12;
      $102 = $101 & 258048;
      $103 = $102 | $99;
      $104 = $89 << 6;
      $105 = $104 & 4032;
      $106 = $103 | $105;
      $107 = $92 & 63;
      $108 = $106 | $107;
      $109 = ($108>>>0)>($Maxcode>>>0);
      if ($109) {
       $$0 = 2;
       break L9;
      }
      $110 = $98 << 2;
      $111 = $100 >>> 4;
      $112 = $111 & 3;
      $113 = $112 | $110;
      $114 = $113 << 6;
      $115 = (($114) + 16320)|0;
      $116 = $100 << 2;
      $117 = $116 & 60;
      $118 = $89 >>> 4;
      $119 = $118 & 3;
      $120 = $117 | $119;
      $121 = $120 | $115;
      $122 = $121 | 55296;
      $123 = $122&65535;
      HEAP16[$27>>1] = $123;
      $124 = $104 & 960;
      $125 = $107 | $124;
      $126 = $125 | 56320;
      $127 = $126&65535;
      $128 = ((($27)) + 2|0);
      HEAP32[$to_nxt>>2] = $128;
      HEAP16[$128>>1] = $127;
      $129 = HEAP32[$frm_nxt>>2]|0;
      $130 = ((($129)) + 4|0);
      HEAP32[$frm_nxt>>2] = $130;
     }
    } while(0);
    $131 = HEAP32[$to_nxt>>2]|0;
    $132 = ((($131)) + 2|0);
    HEAP32[$to_nxt>>2] = $132;
    $133 = HEAP32[$frm_nxt>>2]|0;
    $134 = ($133>>>0)<($frm_end>>>0);
    $135 = ($132>>>0)<($to_end>>>0);
    $136 = $134 & $135;
    if ($136) {
     $22 = $133;$27 = $132;
    } else {
     $$lcssa = $134;
     label = 39;
     break;
    }
   }
  } else {
   $$lcssa = $18;
   label = 39;
  }
 } while(0);
 if ((label|0) == 39) {
  $137 = $$lcssa&1;
  $$0 = $137;
 }
 return ($$0|0);
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$lcssa = 0, $$lcssa82 = 0, $$lcssa83 = 0, $$lcssa84 = 0, $$lcssa85 = 0, $$lcssa86 = 0, $$off = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$150 = 0, $frm_nxt$2 = 0, $nchar16_t$049 = 0, $nchar16_t$1 = 0, $or$cond = 0, $or$cond2 = 0, $or$cond48 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre = $frm_end;
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm;
  $3 = (($$pre) - ($2))|0;
  $4 = ($3|0)>(2);
  if ($4) {
   $5 = HEAP8[$frm>>0]|0;
   $6 = ($5<<24>>24)==(-17);
   if ($6) {
    $7 = ((($frm)) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(-69);
    if ($9) {
     $10 = ((($frm)) + 2|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(-65);
     $13 = ((($frm)) + 3|0);
     $$frm = $12 ? $13 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $14 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $15 = ($mx|0)!=(0);
 $or$cond48 = $15 & $14;
 L7: do {
  if ($or$cond48) {
   $frm_nxt$150 = $frm_nxt$1$ph;$nchar16_t$049 = 0;
   L8: while(1) {
    $16 = HEAP8[$frm_nxt$150>>0]|0;
    $17 = $16&255;
    $18 = ($17>>>0)>($Maxcode>>>0);
    if ($18) {
     $frm_nxt$1$lcssa = $frm_nxt$150;
     label = 42;
     break L7;
    }
    $19 = ($16<<24>>24)>(-1);
    do {
     if ($19) {
      $20 = ((($frm_nxt$150)) + 1|0);
      $frm_nxt$2 = $20;$nchar16_t$1 = $nchar16_t$049;
     } else {
      $21 = ($16&255)<(194);
      if ($21) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $22 = ($16&255)<(224);
      if ($22) {
       $23 = $frm_nxt$150;
       $24 = (($$pre) - ($23))|0;
       $25 = ($24|0)<(2);
       if ($25) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $26 = ((($frm_nxt$150)) + 1|0);
       $27 = HEAP8[$26>>0]|0;
       $28 = $27&255;
       $29 = $28 & 192;
       $30 = ($29|0)==(128);
       if (!($30)) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $31 = $17 << 6;
       $32 = $31 & 1984;
       $33 = $28 & 63;
       $34 = $33 | $32;
       $35 = ($34>>>0)>($Maxcode>>>0);
       if ($35) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $36 = ((($frm_nxt$150)) + 2|0);
       $frm_nxt$2 = $36;$nchar16_t$1 = $nchar16_t$049;
       break;
      }
      $37 = ($16&255)<(240);
      if ($37) {
       $38 = $frm_nxt$150;
       $39 = (($$pre) - ($38))|0;
       $40 = ($39|0)<(3);
       if ($40) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $41 = ((($frm_nxt$150)) + 1|0);
       $42 = HEAP8[$41>>0]|0;
       $43 = ((($frm_nxt$150)) + 2|0);
       $44 = HEAP8[$43>>0]|0;
       switch ($17|0) {
       case 224:  {
        $45 = $42 & -32;
        $46 = ($45<<24>>24)==(-96);
        if (!($46)) {
         $$lcssa85 = $38;
         label = 20;
         break L8;
        }
        break;
       }
       case 237:  {
        $49 = $42 & -32;
        $50 = ($49<<24>>24)==(-128);
        if (!($50)) {
         $$lcssa84 = $38;
         label = 22;
         break L8;
        }
        break;
       }
       default: {
        $53 = $42 & -64;
        $54 = ($53<<24>>24)==(-128);
        if (!($54)) {
         $$lcssa86 = $38;
         label = 24;
         break L8;
        }
       }
       }
       $57 = $44&255;
       $58 = $57 & 192;
       $59 = ($58|0)==(128);
       if (!($59)) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $60 = $17 << 12;
       $61 = $60 & 61440;
       $62 = $42&255;
       $63 = $62 << 6;
       $64 = $63 & 4032;
       $65 = $64 | $61;
       $66 = $57 & 63;
       $67 = $65 | $66;
       $68 = ($67>>>0)>($Maxcode>>>0);
       if ($68) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $69 = ((($frm_nxt$150)) + 3|0);
       $frm_nxt$2 = $69;$nchar16_t$1 = $nchar16_t$049;
       break;
      }
      $70 = ($16&255)<(245);
      if (!($70)) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $71 = $frm_nxt$150;
      $72 = (($$pre) - ($71))|0;
      $73 = ($72|0)<(4);
      $74 = (($mx) - ($nchar16_t$049))|0;
      $75 = ($74>>>0)<(2);
      $or$cond2 = $75 | $73;
      if ($or$cond2) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $76 = ((($frm_nxt$150)) + 1|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = ((($frm_nxt$150)) + 2|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = ((($frm_nxt$150)) + 3|0);
      $81 = HEAP8[$80>>0]|0;
      switch ($17|0) {
      case 240:  {
       $$off = (($77) + 112)<<24>>24;
       $82 = ($$off&255)<(48);
       if (!($82)) {
        $$lcssa82 = $71;
        label = 32;
        break L8;
       }
       break;
      }
      case 244:  {
       $85 = $77 & -16;
       $86 = ($85<<24>>24)==(-128);
       if (!($86)) {
        $$lcssa = $71;
        label = 34;
        break L8;
       }
       break;
      }
      default: {
       $89 = $77 & -64;
       $90 = ($89<<24>>24)==(-128);
       if (!($90)) {
        $$lcssa83 = $71;
        label = 36;
        break L8;
       }
      }
      }
      $93 = $79&255;
      $94 = $93 & 192;
      $95 = ($94|0)==(128);
      if (!($95)) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $96 = $81&255;
      $97 = $96 & 192;
      $98 = ($97|0)==(128);
      if (!($98)) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $99 = $17 << 18;
      $100 = $99 & 1835008;
      $101 = $77&255;
      $102 = $101 << 12;
      $103 = $102 & 258048;
      $104 = $103 | $100;
      $105 = $93 << 6;
      $106 = $105 & 4032;
      $107 = $104 | $106;
      $108 = $96 & 63;
      $109 = $107 | $108;
      $110 = ($109>>>0)>($Maxcode>>>0);
      if ($110) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $111 = (($nchar16_t$049) + 1)|0;
      $112 = ((($frm_nxt$150)) + 4|0);
      $frm_nxt$2 = $112;$nchar16_t$1 = $111;
     }
    } while(0);
    $113 = (($nchar16_t$1) + 1)|0;
    $114 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $115 = ($113>>>0)<($mx>>>0);
    $or$cond = $115 & $114;
    if ($or$cond) {
     $frm_nxt$150 = $frm_nxt$2;$nchar16_t$049 = $113;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     label = 42;
     break L7;
    }
   }
   if ((label|0) == 20) {
    $47 = $frm;
    $48 = (($$lcssa85) - ($47))|0;
    $$0 = $48;
    break;
   }
   else if ((label|0) == 22) {
    $51 = $frm;
    $52 = (($$lcssa84) - ($51))|0;
    $$0 = $52;
    break;
   }
   else if ((label|0) == 24) {
    $55 = $frm;
    $56 = (($$lcssa86) - ($55))|0;
    $$0 = $56;
    break;
   }
   else if ((label|0) == 32) {
    $83 = $frm;
    $84 = (($$lcssa82) - ($83))|0;
    $$0 = $84;
    break;
   }
   else if ((label|0) == 34) {
    $87 = $frm;
    $88 = (($$lcssa) - ($87))|0;
    $$0 = $88;
    break;
   }
   else if ((label|0) == 36) {
    $91 = $frm;
    $92 = (($$lcssa83) - ($91))|0;
    $$0 = $92;
    break;
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
   label = 42;
  }
 } while(0);
 if ((label|0) == 42) {
  $116 = $frm_nxt$1$lcssa;
  $117 = $frm;
  $118 = (($116) - ($117))|0;
  $$0 = $118;
 }
 return ($$0|0);
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 $$pre1 = $to_end;
 if ($1) {
  label = 4;
 } else {
  $2 = $to;
  $3 = (($$pre1) - ($2))|0;
  $4 = ($3|0)<(3);
  if ($4) {
   $$0 = 1;
  } else {
   $5 = ((($to)) + 1|0);
   HEAP32[$to_nxt>>2] = $5;
   HEAP8[$to>>0] = -17;
   $6 = HEAP32[$to_nxt>>2]|0;
   $7 = ((($6)) + 1|0);
   HEAP32[$to_nxt>>2] = $7;
   HEAP8[$6>>0] = -69;
   $8 = HEAP32[$to_nxt>>2]|0;
   $9 = ((($8)) + 1|0);
   HEAP32[$to_nxt>>2] = $9;
   HEAP8[$8>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $10 = ($$pre>>>0)<($frm_end>>>0);
   if ($10) {
    $12 = $$pre;
    while(1) {
     $11 = HEAP32[$12>>2]|0;
     $13 = $11 & -2048;
     $14 = ($13|0)==(55296);
     $15 = ($11>>>0)>($Maxcode>>>0);
     $or$cond = $15 | $14;
     if ($or$cond) {
      $$0 = 2;
      break L4;
     }
     $16 = ($11>>>0)<(128);
     do {
      if ($16) {
       $17 = HEAP32[$to_nxt>>2]|0;
       $18 = $17;
       $19 = (($$pre1) - ($18))|0;
       $20 = ($19|0)<(1);
       if ($20) {
        $$0 = 1;
        break L4;
       }
       $21 = $11&255;
       $22 = ((($17)) + 1|0);
       HEAP32[$to_nxt>>2] = $22;
       HEAP8[$17>>0] = $21;
      } else {
       $23 = ($11>>>0)<(2048);
       if ($23) {
        $24 = HEAP32[$to_nxt>>2]|0;
        $25 = $24;
        $26 = (($$pre1) - ($25))|0;
        $27 = ($26|0)<(2);
        if ($27) {
         $$0 = 1;
         break L4;
        }
        $28 = $11 >>> 6;
        $29 = $28 | 192;
        $30 = $29&255;
        $31 = ((($24)) + 1|0);
        HEAP32[$to_nxt>>2] = $31;
        HEAP8[$24>>0] = $30;
        $32 = $11 & 63;
        $33 = $32 | 128;
        $34 = $33&255;
        $35 = HEAP32[$to_nxt>>2]|0;
        $36 = ((($35)) + 1|0);
        HEAP32[$to_nxt>>2] = $36;
        HEAP8[$35>>0] = $34;
        break;
       }
       $37 = ($11>>>0)<(65536);
       $38 = HEAP32[$to_nxt>>2]|0;
       $39 = $38;
       $40 = (($$pre1) - ($39))|0;
       if ($37) {
        $41 = ($40|0)<(3);
        if ($41) {
         $$0 = 1;
         break L4;
        }
        $42 = $11 >>> 12;
        $43 = $42 | 224;
        $44 = $43&255;
        $45 = ((($38)) + 1|0);
        HEAP32[$to_nxt>>2] = $45;
        HEAP8[$38>>0] = $44;
        $46 = $11 >>> 6;
        $47 = $46 & 63;
        $48 = $47 | 128;
        $49 = $48&255;
        $50 = HEAP32[$to_nxt>>2]|0;
        $51 = ((($50)) + 1|0);
        HEAP32[$to_nxt>>2] = $51;
        HEAP8[$50>>0] = $49;
        $52 = $11 & 63;
        $53 = $52 | 128;
        $54 = $53&255;
        $55 = HEAP32[$to_nxt>>2]|0;
        $56 = ((($55)) + 1|0);
        HEAP32[$to_nxt>>2] = $56;
        HEAP8[$55>>0] = $54;
        break;
       } else {
        $57 = ($40|0)<(4);
        if ($57) {
         $$0 = 1;
         break L4;
        }
        $58 = $11 >>> 18;
        $59 = $58 | 240;
        $60 = $59&255;
        $61 = ((($38)) + 1|0);
        HEAP32[$to_nxt>>2] = $61;
        HEAP8[$38>>0] = $60;
        $62 = $11 >>> 12;
        $63 = $62 & 63;
        $64 = $63 | 128;
        $65 = $64&255;
        $66 = HEAP32[$to_nxt>>2]|0;
        $67 = ((($66)) + 1|0);
        HEAP32[$to_nxt>>2] = $67;
        HEAP8[$66>>0] = $65;
        $68 = $11 >>> 6;
        $69 = $68 & 63;
        $70 = $69 | 128;
        $71 = $70&255;
        $72 = HEAP32[$to_nxt>>2]|0;
        $73 = ((($72)) + 1|0);
        HEAP32[$to_nxt>>2] = $73;
        HEAP8[$72>>0] = $71;
        $74 = $11 & 63;
        $75 = $74 | 128;
        $76 = $75&255;
        $77 = HEAP32[$to_nxt>>2]|0;
        $78 = ((($77)) + 1|0);
        HEAP32[$to_nxt>>2] = $78;
        HEAP8[$77>>0] = $76;
        break;
       }
      }
     } while(0);
     $79 = HEAP32[$frm_nxt>>2]|0;
     $80 = ((($79)) + 4|0);
     HEAP32[$frm_nxt>>2] = $80;
     $81 = ($80>>>0)<($frm_end>>>0);
     if ($81) {
      $12 = $80;
     } else {
      $$0 = 0;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$lcssa = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $$pre4 = $frm_end;
  $$pre = $to;$$pre$phiZ2D = $$pre4;
 } else {
  $2 = HEAP32[$frm_nxt>>2]|0;
  $3 = $frm_end;
  $4 = $2;
  $5 = (($3) - ($4))|0;
  $6 = ($5|0)>(2);
  if ($6) {
   $7 = HEAP8[$2>>0]|0;
   $8 = ($7<<24>>24)==(-17);
   if ($8) {
    $9 = ((($2)) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(-69);
    if ($11) {
     $12 = ((($2)) + 2|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(-65);
     if ($14) {
      $15 = ((($2)) + 3|0);
      HEAP32[$frm_nxt>>2] = $15;
      $$pre$pre = HEAP32[$to_nxt>>2]|0;
      $$pre = $$pre$pre;$$pre$phiZ2D = $3;
     } else {
      $$pre = $to;$$pre$phiZ2D = $3;
     }
    } else {
     $$pre = $to;$$pre$phiZ2D = $3;
    }
   } else {
    $$pre = $to;$$pre$phiZ2D = $3;
   }
  } else {
   $$pre = $to;$$pre$phiZ2D = $3;
  }
 }
 $16 = HEAP32[$frm_nxt>>2]|0;
 $17 = ($16>>>0)<($frm_end>>>0);
 $18 = ($$pre>>>0)<($to_end>>>0);
 $19 = $17 & $18;
 L9: do {
  if ($19) {
   $21 = $16;$25 = $$pre;
   while(1) {
    $20 = HEAP8[$21>>0]|0;
    $22 = $20&255;
    $23 = ($20<<24>>24)>(-1);
    do {
     if ($23) {
      $24 = ($22>>>0)>($Maxcode>>>0);
      if ($24) {
       $$0 = 2;
       break L9;
      }
      HEAP32[$25>>2] = $22;
      $26 = ((($21)) + 1|0);
      HEAP32[$frm_nxt>>2] = $26;
     } else {
      $27 = ($20&255)<(194);
      if ($27) {
       $$0 = 2;
       break L9;
      }
      $28 = ($20&255)<(224);
      if ($28) {
       $29 = $21;
       $30 = (($$pre$phiZ2D) - ($29))|0;
       $31 = ($30|0)<(2);
       if ($31) {
        $$0 = 1;
        break L9;
       }
       $32 = ((($21)) + 1|0);
       $33 = HEAP8[$32>>0]|0;
       $34 = $33&255;
       $35 = $34 & 192;
       $36 = ($35|0)==(128);
       if (!($36)) {
        $$0 = 2;
        break L9;
       }
       $37 = $22 << 6;
       $38 = $37 & 1984;
       $39 = $34 & 63;
       $40 = $39 | $38;
       $41 = ($40>>>0)>($Maxcode>>>0);
       if ($41) {
        $$0 = 2;
        break L9;
       }
       HEAP32[$25>>2] = $40;
       $42 = ((($21)) + 2|0);
       HEAP32[$frm_nxt>>2] = $42;
       break;
      }
      $43 = ($20&255)<(240);
      if ($43) {
       $44 = $21;
       $45 = (($$pre$phiZ2D) - ($44))|0;
       $46 = ($45|0)<(3);
       if ($46) {
        $$0 = 1;
        break L9;
       }
       $47 = ((($21)) + 1|0);
       $48 = HEAP8[$47>>0]|0;
       $49 = ((($21)) + 2|0);
       $50 = HEAP8[$49>>0]|0;
       switch ($22|0) {
       case 224:  {
        $51 = $48 & -32;
        $52 = ($51<<24>>24)==(-96);
        if (!($52)) {
         $$0 = 2;
         break L9;
        }
        break;
       }
       case 237:  {
        $53 = $48 & -32;
        $54 = ($53<<24>>24)==(-128);
        if (!($54)) {
         $$0 = 2;
         break L9;
        }
        break;
       }
       default: {
        $55 = $48 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         $$0 = 2;
         break L9;
        }
       }
       }
       $57 = $50&255;
       $58 = $57 & 192;
       $59 = ($58|0)==(128);
       if (!($59)) {
        $$0 = 2;
        break L9;
       }
       $60 = $22 << 12;
       $61 = $60 & 61440;
       $62 = $48&255;
       $63 = $62 << 6;
       $64 = $63 & 4032;
       $65 = $64 | $61;
       $66 = $57 & 63;
       $67 = $65 | $66;
       $68 = ($67>>>0)>($Maxcode>>>0);
       if ($68) {
        $$0 = 2;
        break L9;
       }
       HEAP32[$25>>2] = $67;
       $69 = ((($21)) + 3|0);
       HEAP32[$frm_nxt>>2] = $69;
       break;
      }
      $70 = ($20&255)<(245);
      if (!($70)) {
       $$0 = 2;
       break L9;
      }
      $71 = $21;
      $72 = (($$pre$phiZ2D) - ($71))|0;
      $73 = ($72|0)<(4);
      if ($73) {
       $$0 = 1;
       break L9;
      }
      $74 = ((($21)) + 1|0);
      $75 = HEAP8[$74>>0]|0;
      $76 = ((($21)) + 2|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = ((($21)) + 3|0);
      $79 = HEAP8[$78>>0]|0;
      switch ($22|0) {
      case 240:  {
       $$off = (($75) + 112)<<24>>24;
       $80 = ($$off&255)<(48);
       if (!($80)) {
        $$0 = 2;
        break L9;
       }
       break;
      }
      case 244:  {
       $81 = $75 & -16;
       $82 = ($81<<24>>24)==(-128);
       if (!($82)) {
        $$0 = 2;
        break L9;
       }
       break;
      }
      default: {
       $83 = $75 & -64;
       $84 = ($83<<24>>24)==(-128);
       if (!($84)) {
        $$0 = 2;
        break L9;
       }
      }
      }
      $85 = $77&255;
      $86 = $85 & 192;
      $87 = ($86|0)==(128);
      if (!($87)) {
       $$0 = 2;
       break L9;
      }
      $88 = $79&255;
      $89 = $88 & 192;
      $90 = ($89|0)==(128);
      if (!($90)) {
       $$0 = 2;
       break L9;
      }
      $91 = $22 << 18;
      $92 = $91 & 1835008;
      $93 = $75&255;
      $94 = $93 << 12;
      $95 = $94 & 258048;
      $96 = $95 | $92;
      $97 = $85 << 6;
      $98 = $97 & 4032;
      $99 = $96 | $98;
      $100 = $88 & 63;
      $101 = $99 | $100;
      $102 = ($101>>>0)>($Maxcode>>>0);
      if ($102) {
       $$0 = 2;
       break L9;
      }
      HEAP32[$25>>2] = $101;
      $103 = ((($21)) + 4|0);
      HEAP32[$frm_nxt>>2] = $103;
     }
    } while(0);
    $104 = HEAP32[$to_nxt>>2]|0;
    $105 = ((($104)) + 4|0);
    HEAP32[$to_nxt>>2] = $105;
    $106 = HEAP32[$frm_nxt>>2]|0;
    $107 = ($106>>>0)<($frm_end>>>0);
    $108 = ($105>>>0)<($to_end>>>0);
    $109 = $107 & $108;
    if ($109) {
     $21 = $106;$25 = $105;
    } else {
     $$lcssa = $107;
     label = 38;
     break;
    }
   }
  } else {
   $$lcssa = $17;
   label = 38;
  }
 } while(0);
 if ((label|0) == 38) {
  $110 = $$lcssa&1;
  $$0 = $110;
 }
 return ($$0|0);
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$lcssa = 0, $$lcssa80 = 0, $$lcssa81 = 0, $$lcssa82 = 0, $$lcssa83 = 0, $$lcssa84 = 0, $$off = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$148 = 0, $frm_nxt$2 = 0, $nchar32_t$047 = 0, $or$cond = 0, $or$cond46 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre = $frm_end;
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm;
  $3 = (($$pre) - ($2))|0;
  $4 = ($3|0)>(2);
  if ($4) {
   $5 = HEAP8[$frm>>0]|0;
   $6 = ($5<<24>>24)==(-17);
   if ($6) {
    $7 = ((($frm)) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(-69);
    if ($9) {
     $10 = ((($frm)) + 2|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(-65);
     $13 = ((($frm)) + 3|0);
     $$frm = $12 ? $13 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $14 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $15 = ($mx|0)!=(0);
 $or$cond46 = $15 & $14;
 L7: do {
  if ($or$cond46) {
   $frm_nxt$148 = $frm_nxt$1$ph;$nchar32_t$047 = 0;
   L8: while(1) {
    $16 = HEAP8[$frm_nxt$148>>0]|0;
    $17 = $16&255;
    $18 = ($16<<24>>24)>(-1);
    do {
     if ($18) {
      $19 = ($17>>>0)>($Maxcode>>>0);
      if ($19) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $20 = ((($frm_nxt$148)) + 1|0);
      $frm_nxt$2 = $20;
     } else {
      $21 = ($16&255)<(194);
      if ($21) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $22 = ($16&255)<(224);
      if ($22) {
       $23 = $frm_nxt$148;
       $24 = (($$pre) - ($23))|0;
       $25 = ($24|0)<(2);
       if ($25) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $26 = ((($frm_nxt$148)) + 1|0);
       $27 = HEAP8[$26>>0]|0;
       $28 = $27&255;
       $29 = $28 & 192;
       $30 = ($29|0)==(128);
       if (!($30)) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $31 = $17 << 6;
       $32 = $31 & 1984;
       $33 = $28 & 63;
       $34 = $33 | $32;
       $35 = ($34>>>0)>($Maxcode>>>0);
       if ($35) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $36 = ((($frm_nxt$148)) + 2|0);
       $frm_nxt$2 = $36;
       break;
      }
      $37 = ($16&255)<(240);
      if ($37) {
       $38 = $frm_nxt$148;
       $39 = (($$pre) - ($38))|0;
       $40 = ($39|0)<(3);
       if ($40) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $41 = ((($frm_nxt$148)) + 1|0);
       $42 = HEAP8[$41>>0]|0;
       $43 = ((($frm_nxt$148)) + 2|0);
       $44 = HEAP8[$43>>0]|0;
       switch ($17|0) {
       case 224:  {
        $45 = $42 & -32;
        $46 = ($45<<24>>24)==(-96);
        if (!($46)) {
         $$lcssa83 = $38;
         label = 20;
         break L8;
        }
        break;
       }
       case 237:  {
        $49 = $42 & -32;
        $50 = ($49<<24>>24)==(-128);
        if (!($50)) {
         $$lcssa82 = $38;
         label = 22;
         break L8;
        }
        break;
       }
       default: {
        $53 = $42 & -64;
        $54 = ($53<<24>>24)==(-128);
        if (!($54)) {
         $$lcssa84 = $38;
         label = 24;
         break L8;
        }
       }
       }
       $57 = $44&255;
       $58 = $57 & 192;
       $59 = ($58|0)==(128);
       if (!($59)) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $60 = $17 << 12;
       $61 = $60 & 61440;
       $62 = $42&255;
       $63 = $62 << 6;
       $64 = $63 & 4032;
       $65 = $64 | $61;
       $66 = $57 & 63;
       $67 = $65 | $66;
       $68 = ($67>>>0)>($Maxcode>>>0);
       if ($68) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $69 = ((($frm_nxt$148)) + 3|0);
       $frm_nxt$2 = $69;
       break;
      }
      $70 = ($16&255)<(245);
      if (!($70)) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $71 = $frm_nxt$148;
      $72 = (($$pre) - ($71))|0;
      $73 = ($72|0)<(4);
      if ($73) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $74 = ((($frm_nxt$148)) + 1|0);
      $75 = HEAP8[$74>>0]|0;
      $76 = ((($frm_nxt$148)) + 2|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = ((($frm_nxt$148)) + 3|0);
      $79 = HEAP8[$78>>0]|0;
      switch ($17|0) {
      case 240:  {
       $$off = (($75) + 112)<<24>>24;
       $80 = ($$off&255)<(48);
       if (!($80)) {
        $$lcssa80 = $71;
        label = 32;
        break L8;
       }
       break;
      }
      case 244:  {
       $83 = $75 & -16;
       $84 = ($83<<24>>24)==(-128);
       if (!($84)) {
        $$lcssa = $71;
        label = 34;
        break L8;
       }
       break;
      }
      default: {
       $87 = $75 & -64;
       $88 = ($87<<24>>24)==(-128);
       if (!($88)) {
        $$lcssa81 = $71;
        label = 36;
        break L8;
       }
      }
      }
      $91 = $77&255;
      $92 = $91 & 192;
      $93 = ($92|0)==(128);
      if (!($93)) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $94 = $79&255;
      $95 = $94 & 192;
      $96 = ($95|0)==(128);
      if (!($96)) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $97 = $17 << 18;
      $98 = $97 & 1835008;
      $99 = $75&255;
      $100 = $99 << 12;
      $101 = $100 & 258048;
      $102 = $101 | $98;
      $103 = $91 << 6;
      $104 = $103 & 4032;
      $105 = $102 | $104;
      $106 = $94 & 63;
      $107 = $105 | $106;
      $108 = ($107>>>0)>($Maxcode>>>0);
      if ($108) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $109 = ((($frm_nxt$148)) + 4|0);
      $frm_nxt$2 = $109;
     }
    } while(0);
    $110 = (($nchar32_t$047) + 1)|0;
    $111 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $112 = ($110>>>0)<($mx>>>0);
    $or$cond = $112 & $111;
    if ($or$cond) {
     $frm_nxt$148 = $frm_nxt$2;$nchar32_t$047 = $110;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     label = 42;
     break L7;
    }
   }
   if ((label|0) == 20) {
    $47 = $frm;
    $48 = (($$lcssa83) - ($47))|0;
    $$0 = $48;
    break;
   }
   else if ((label|0) == 22) {
    $51 = $frm;
    $52 = (($$lcssa82) - ($51))|0;
    $$0 = $52;
    break;
   }
   else if ((label|0) == 24) {
    $55 = $frm;
    $56 = (($$lcssa84) - ($55))|0;
    $$0 = $56;
    break;
   }
   else if ((label|0) == 32) {
    $81 = $frm;
    $82 = (($$lcssa80) - ($81))|0;
    $$0 = $82;
    break;
   }
   else if ((label|0) == 34) {
    $85 = $frm;
    $86 = (($$lcssa) - ($85))|0;
    $$0 = $86;
    break;
   }
   else if ((label|0) == 36) {
    $89 = $frm;
    $90 = (($$lcssa81) - ($89))|0;
    $$0 = $90;
    break;
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
   label = 42;
  }
 } while(0);
 if ((label|0) == 42) {
  $113 = $frm_nxt$1$lcssa;
  $114 = $frm;
  $115 = (($113) - ($114))|0;
  $$0 = $115;
 }
 return ($$0|0);
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((8664));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((8652));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((8640));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((8628));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((8616));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((8604));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((8592));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((8580));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((8568));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((8556));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((8544));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((8532));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((8520));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(8508);
 return;
}
function ___cxx_global_array_dtor54($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((8836));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((8824));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((8812));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((8800));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((8788));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((8776));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((8764));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((8752));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((8740));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((8728));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((8716));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((8704));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((8692));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(8680);
 return;
}
function ___cxx_global_array_dtor69($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9468));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9456));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9444));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9432));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9420));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9408));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9396));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9384));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9372));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9360));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9348));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9336));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9324));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9312));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9300));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9288));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9276));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9264));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9252));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9240));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9228));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9216));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9204));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(9192);
 return;
}
function ___cxx_global_array_dtor93($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9760));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9748));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9736));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9724));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9712));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9700));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9688));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9676));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9664));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9652));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9640));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9628));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9616));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9604));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9592));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9580));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9568));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9556));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9544));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9532));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9520));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9508));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9496));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(9484);
 return;
}
function ___cxx_global_array_dtor117($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10572));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10560));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10548));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10536));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10524));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10512));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10500));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10488));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10476));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10464));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10452));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10440));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10428));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10416));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10404));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10392));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10380));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10368));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10356));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10344));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10332));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10320));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10308));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10296);
 return;
}
function ___cxx_global_array_dtor120($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10864));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10852));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10840));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10828));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10816));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10804));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10792));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10780));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10768));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10756));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10744));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10732));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10720));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10708));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10696));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10684));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10672));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10660));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10648));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10636));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10624));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10612));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10600));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10588);
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i1 = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($__n>>>0);
 if ($8) {
  $9 = ((($this)) + 16|0);
  $10 = HEAP32[$this>>2]|0;
  $11 = $10;
  $12 = (($5) - ($11))|0;
  $13 = $12 >> 2;
  $14 = (($13) + ($__n))|0;
  $15 = ($14>>>0)>(1073741823);
  if ($15) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
   // unreachable;
  }
  $16 = (($4) - ($11))|0;
  $17 = $16 >> 2;
  $18 = ($17>>>0)<(536870911);
  if ($18) {
   $19 = $16 >> 1;
   $20 = ($19>>>0)<($14>>>0);
   $21 = $20 ? $14 : $19;
   $$0$i1 = $21;
  } else {
   $$0$i1 = 1073741823;
  }
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($__v,$$0$i1,$13,$9);
  $22 = ((($__v)) + 8|0);
  $$pre$i = HEAP32[$22>>2]|0;
  $23 = $__n << 2;
  _memset(($$pre$i|0),0,($23|0))|0;
  $scevgep = (($$pre$i) + ($__n<<2)|0);
  HEAP32[$22>>2] = $scevgep;
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v);
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($__v);
 } else {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $$pre = HEAP32[$0>>2]|0;
 $$0 = $__n;$1 = $$pre;
 while(1) {
  HEAP32[$1>>2] = 0;
  $2 = HEAP32[$0>>2]|0;
  $3 = ((($2)) + 4|0);
  HEAP32[$0>>2] = $3;
  $4 = (($$0) + -1)|0;
  $5 = ($4|0)==(0);
  if ($5) {
   break;
  } else {
   $$0 = $4;$1 = $3;
  }
 }
 return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $$not$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 do {
  if ($2) {
   $8 = 0;
  } else {
   $3 = ((($__a)) + 112|0);
   $4 = HEAP8[$3>>0]|0;
   $$not$i$i = ($4<<24>>24)==(0);
   $5 = ($__cap>>>0)<(29);
   $or$cond$i$i = $5 & $$not$i$i;
   if ($or$cond$i$i) {
    HEAP8[$3>>0] = 1;
    $8 = $__a;
    break;
   } else {
    $6 = $__cap << 2;
    $7 = (__Znwj($6)|0);
    $8 = $7;
    break;
   }
  }
 } while(0);
 HEAP32[$this>>2] = $8;
 $9 = (($8) + ($__start<<2)|0);
 $10 = ((($this)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($this)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + ($__cap<<2)|0);
 $13 = ((($this)) + 12|0);
 HEAP32[$13>>2] = $12;
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($__v)) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<2)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = ((($__v)) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = ((($this)) + 8|0);
 $17 = ((($__v)) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $$lcssa = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 8|0);
 $$pre$i$i$i = HEAP32[$2>>2]|0;
 $3 = ($$pre$i$i$i|0)==($1|0);
 if (!($3)) {
  $5 = $$pre$i$i$i;
  while(1) {
   $4 = ((($5)) + -4|0);
   $6 = ($4|0)==($1|0);
   if ($6) {
    $$lcssa = $4;
    break;
   } else {
    $5 = $4;
   }
  }
  HEAP32[$2>>2] = $$lcssa;
 }
 $7 = HEAP32[$this>>2]|0;
 $8 = ($7|0)==(0|0);
 do {
  if (!($8)) {
   $9 = ((($this)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==($7|0);
   if ($11) {
    $12 = ((($10)) + 112|0);
    HEAP8[$12>>0] = 0;
    break;
   } else {
    __ZdlPv($7);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i$i = 0, $$not$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741823);
 if ($0) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ((($this)) + 128|0);
 $2 = HEAP8[$1>>0]|0;
 $$not$i$i = ($2<<24>>24)==(0);
 $3 = ($__n>>>0)<(29);
 $or$cond$i$i = $3 & $$not$i$i;
 if ($or$cond$i$i) {
  $4 = ((($this)) + 16|0);
  HEAP8[$1>>0] = 1;
  $$0$i$i = $4;
 } else {
  $5 = $__n << 2;
  $6 = (__Znwj($5)|0);
  $$0$i$i = $6;
 }
 $7 = ((($this)) + 4|0);
 HEAP32[$7>>2] = $$0$i$i;
 HEAP32[$this>>2] = $$0$i$i;
 $8 = (($$0$i$i) + ($__n<<2)|0);
 $9 = ((($this)) + 8|0);
 HEAP32[$9>>2] = $8;
 return;
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
   }
   $10 = $4;
   $$0 = $10;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $13 = 0;$14 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   if ($12) {
    HEAP32[$__err>>2] = 4;
    $13 = -1;$14 = -1;
   } else {
    $13 = $7;$14 = $6;
   }
  }
 } while(0);
 tempRet0 = ($13);
 STACKTOP = sp;return ($14|0);
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   $13 = ($7>>>0)>(0);
   $14 = ($6>>>0)>(4294967295);
   $15 = ($7|0)==(0);
   $16 = $15 & $14;
   $17 = $13 | $16;
   $or$cond = $17 | $12;
   if ($or$cond) {
    HEAP32[$__err>>2] = 4;
    $$0 = -1;
    break;
   } else {
    $$0 = $6;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   $13 = ($7>>>0)>(0);
   $14 = ($6>>>0)>(4294967295);
   $15 = ($7|0)==(0);
   $16 = $15 & $14;
   $17 = $13 | $16;
   $or$cond = $17 | $12;
   if ($or$cond) {
    HEAP32[$__err>>2] = 4;
    $$0 = -1;
    break;
   } else {
    $$0 = $6;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   $13 = ($7>>>0)>(0);
   $14 = ($6>>>0)>(65535);
   $15 = ($7|0)==(0);
   $16 = $15 & $14;
   $17 = $13 | $16;
   $or$cond = $17 | $12;
   if ($or$cond) {
    HEAP32[$__err>>2] = 4;
    $$0 = -1;
    break;
   } else {
    $18 = $6&65535;
    $$0 = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $18 = 0;$19 = 0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
   $5 = tempRet0;
   $6 = HEAP32[$1>>2]|0;
   $7 = ($6|0)==(0);
   if ($7) {
    HEAP32[$1>>2] = $2;
   }
   $8 = HEAP32[$__p2>>2]|0;
   $9 = ($8|0)==($__a_end|0);
   if (!($9)) {
    HEAP32[$__err>>2] = 4;
    $18 = 0;$19 = 0;
    break;
   }
   $10 = ($6|0)==(34);
   if ($10) {
    HEAP32[$__err>>2] = 4;
    $11 = ($5|0)>(0);
    $12 = ($4>>>0)>(0);
    $13 = ($5|0)==(0);
    $14 = $13 & $12;
    $15 = $11 | $14;
    $16 = $15 ? -1 : 0;
    $17 = $15 ? 2147483647 : -2147483648;
    tempRet0 = ($17);
    STACKTOP = sp;return ($16|0);
   } else {
    $18 = $5;$19 = $4;
   }
  }
 } while(0);
 tempRet0 = ($18);
 STACKTOP = sp;return ($19|0);
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 L1: do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
   $5 = tempRet0;
   $6 = HEAP32[$1>>2]|0;
   $7 = ($6|0)==(0);
   if ($7) {
    HEAP32[$1>>2] = $2;
   }
   $8 = HEAP32[$__p2>>2]|0;
   $9 = ($8|0)==($__a_end|0);
   if (!($9)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $10 = ($6|0)==(34);
   do {
    if ($10) {
     HEAP32[$__err>>2] = 4;
     $21 = ($5|0)>(0);
     $22 = ($4>>>0)>(0);
     $23 = ($5|0)==(0);
     $24 = $23 & $22;
     $25 = $21 | $24;
     if ($25) {
      $$0 = 2147483647;
      break L1;
     }
    } else {
     $11 = ($5|0)<(-1);
     $12 = ($4>>>0)<(2147483648);
     $13 = ($5|0)==(-1);
     $14 = $13 & $12;
     $15 = $11 | $14;
     if ($15) {
      HEAP32[$__err>>2] = 4;
      break;
     }
     $16 = ($5|0)>(0);
     $17 = ($4>>>0)>(2147483647);
     $18 = ($5|0)==(0);
     $19 = $18 & $17;
     $20 = $16 | $19;
     if ($20) {
      HEAP32[$__err>>2] = 4;
      $$0 = 2147483647;
      break L1;
     } else {
      $$0 = $4;
      break L1;
     }
    }
   } while(0);
   $$0 = -2147483648;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+-1)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP32[$this>>2]|0;
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 1023]($this);
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $ev;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = $this;
 return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 1023]($0,$this,$code);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($condition)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if ($8) {
  $9 = HEAP32[$0>>2]|0;
  $10 = HEAP32[$condition>>2]|0;
  $11 = ($9|0)==($10|0);
  $12 = $11;
 } else {
  $12 = 0;
 }
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($code)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 $3 = HEAP32[$code>>2]|0;
 $4 = ($3|0)==($condition|0);
 $5 = $2 & $4;
 return ($5|0);
}
function __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strerror(($ev|0))|0);
 $1 = (_strlen(($0|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,$0,$1);
 return;
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$ec,$what_arg) {
 $agg$result = $agg$result|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$ec>>2]|0;
 $2 = ($1|0)==(0);
 do {
  if (!($2)) {
   $3 = HEAP8[$what_arg>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = $3&255;
    $9 = $8 >>> 1;
    $11 = $9;
   } else {
    $6 = ((($what_arg)) + 4|0);
    $7 = HEAP32[$6>>2]|0;
    $11 = $7;
   }
   $10 = ($11|0)==(0);
   if ($10) {
    $17 = $1;
   } else {
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($what_arg,20990)|0);
    $$pre = HEAP32[$ec>>2]|0;
    $17 = $$pre;
   }
   $12 = ((($ec)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($14)) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   FUNCTION_TABLE_viii[$16 & 1023]($0,$13,$17);
   $18 = HEAP8[$0>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   $21 = ((($0)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($0)) + 1|0);
   $24 = $20 ? $23 : $22;
   $25 = ((($0)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $18&255;
   $28 = $27 >>> 1;
   $29 = $20 ? $28 : $26;
   __THREW__ = 0;
   (invoke_iiii(796,($what_arg|0),($24|0),($29|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    $32 = ___cxa_find_matching_catch()|0;
    $33 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    ___resumeException($32|0);
    // unreachable;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    break;
   }
  }
 } while(0);
 ;HEAP32[$agg$result>>2]=HEAP32[$what_arg>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
 HEAP32[$what_arg>>2] = 0;
 $34 = ((($what_arg)) + 4|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($what_arg)) + 8|0);
 HEAP32[$35>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg) {
 $this = $this|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp;
 $2 = (_strlen(($what_arg|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1,$what_arg,$2);
 __THREW__ = 0;
 invoke_viii(797,($0|0),($ec|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $18 = ___cxa_find_matching_catch()|0;
   $19 = tempRet0;
   $$0 = $19;$$01 = $18;
  } else {
   __THREW__ = 0;
   invoke_vii(798,($this|0),($0|0));
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $20 = ___cxa_find_matching_catch()|0;
    $21 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    $$0 = $21;$$01 = $20;
    break;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
    HEAP32[$this>>2] = (11212);
    $7 = ((($this)) + 8|0);
    $8 = $ec;
    $9 = $8;
    $10 = HEAP32[$9>>2]|0;
    $11 = (($8) + 4)|0;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = $7;
    $15 = $14;
    HEAP32[$15>>2] = $10;
    $16 = (($14) + 4)|0;
    $17 = $16;
    HEAP32[$17>>2] = $13;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 return;
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((11224|0))|0);
 $0 = HEAP32[$flag>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  while(1) {
   (_pthread_cond_wait((11252|0),(11224|0))|0);
   $2 = HEAP32[$flag>>2]|0;
   $3 = ($2|0)==(1);
   if (!($3)) {
    break;
   }
  }
 }
 $4 = HEAP32[$flag>>2]|0;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   HEAP32[$flag>>2] = 1;
   __THREW__ = 0;
   (invoke_ii(799,(11224|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if (!($7)) {
    __THREW__ = 0;
    invoke_vi($func|0,($arg|0));
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     __THREW__ = 0;
     (invoke_ii(800,(11224|0))|0);
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if (!($11)) {
      HEAP32[$flag>>2] = -1;
      __THREW__ = 0;
      (invoke_ii(799,(11224|0))|0);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if (!($13)) {
       __THREW__ = 0;
       (invoke_ii(801,(11252|0))|0);
       $14 = __THREW__; __THREW__ = 0;
       $15 = $14&1;
       if (!($15)) {
        break;
       }
      }
     }
    }
   }
   $16 = ___cxa_find_matching_catch(0|0)|0;
   $17 = tempRet0;
   (___cxa_begin_catch(($16|0))|0);
   __THREW__ = 0;
   (invoke_ii(800,(11224|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if (!($19)) {
    HEAP32[$flag>>2] = 0;
    __THREW__ = 0;
    (invoke_ii(799,(11224|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if (!($21)) {
     __THREW__ = 0;
     (invoke_ii(801,(11252|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      __THREW__ = 0;
      invoke_v(802);
      $24 = __THREW__; __THREW__ = 0;
     }
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   __THREW__ = 0;
   invoke_v(543);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    $29 = ___cxa_find_matching_catch(0|0)|0;
    $30 = tempRet0;
    ___clang_call_terminate($29);
    // unreachable;
   } else {
    ___resumeException($25|0);
    // unreachable;
   }
  } else {
   (_pthread_mutex_unlock((11224|0))|0);
  }
 } while(0);
 return;
}
function runPostSets() {

 HEAP32[16 >> 2] = __ZTIN8OpenMesh11ArrayKernelE;

 HEAP32[32 >> 2] = __ZTIN8OpenMesh12BasePropertyE;

 HEAP32[128 >> 2] = __ZTIN8OpenMesh12BasePropertyE;

 HEAP32[144 >> 2] = __ZTIN8OpenMesh12BasePropertyE;

 HEAP32[208 >> 2] = __ZTIN8OpenMesh12BasePropertyE;

 HEAP32[320 >> 2] = __ZTIN8OpenMesh12BasePropertyE;

 HEAP32[400 >> 2] = __ZTIN8OpenMesh12BasePropertyE;

 HEAP32[480 >> 2] = __ZTIN8OpenMesh12BasePropertyE;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
  return FUNCTION_TABLE_iiiiiid[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,+a6)|0;
}


function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&511](a1|0,+a2);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&1023](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&1023](a1|0,a2|0);
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1023](a1|0)|0;
}


function dynCall_viddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4;
  FUNCTION_TABLE_viddd[index&1023](a1|0,+a2,+a3,+a4);
}


function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
  return FUNCTION_TABLE_iiiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&1023](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
  FUNCTION_TABLE_viiiiiiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iiid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  return FUNCTION_TABLE_iiid[index&1023](a1|0,a2|0,+a3)|0;
}


function dynCall_iid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  return FUNCTION_TABLE_iid[index&511](a1|0,+a2)|0;
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
  FUNCTION_TABLE_viiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&1023](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_diii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return +FUNCTION_TABLE_diii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_dii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return +FUNCTION_TABLE_dii[index&511](a1|0,a2|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&1023]()|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&1023](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiid(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
  FUNCTION_TABLE_viiid[index&63](a1|0,a2|0,a3|0,+a4);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&1023]();
}


function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function dynCall_iiiiid(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5;
  return FUNCTION_TABLE_iiiiid[index&511](a1|0,a2|0,a3|0,a4|0,+a5)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&1023](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0; }
function b1(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_iiiiiid(1);return 0; }
function b2(p0,p1) { p0 = p0|0;p1 = +p1; nullFunc_vid(2); }
function b3(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(3); }
function b4(p0) { p0 = p0|0; nullFunc_vi(4); }
function __ZN8OpenMesh11ArrayKernelD2Ev__wrapper(p0) { p0 = p0|0; __ZN8OpenMesh11ArrayKernelD2Ev(p0|0); }
function _freelocale__wrapper(p0) { p0 = p0|0; _freelocale(p0|0); }
function b5(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(5); }
function __ZNK8OpenMesh12BaseProperty5statsERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; __ZNK8OpenMesh12BaseProperty5statsERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE(p0|0,p1|0); }
function b6(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(6);return 0; }
function b7(p0) { p0 = p0|0; nullFunc_ii(7);return 0; }
function _fclose__wrapper(p0) { p0 = p0|0; return _fclose(p0|0)|0; }
function _uselocale__wrapper(p0) { p0 = p0|0; return _uselocale(p0|0)|0; }
function _pthread_mutex_unlock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0; }
function _pthread_mutex_lock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_lock(p0|0)|0; }
function _pthread_cond_broadcast__wrapper(p0) { p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0; }
function b8(p0,p1,p2,p3) { p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; nullFunc_viddd(8); }
function b9(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(9);return 0; }
function b10(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(10);return 0; }
function _newlocale__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _newlocale(p0|0,p1|0,p2|0)|0; }
function b11(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(11); }
function b12(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(12); }
function b13(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_iiid(13);return 0; }
function b14(p0,p1) { p0 = p0|0;p1 = +p1; nullFunc_iid(14);return 0; }
function b15(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(15); }
function b16(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(16); }
function b17(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(17);return 0; }
function __ZN8OpenMesh16PolyConnectivity8add_faceERKNSt3__16vectorINS_12VertexHandleENS1_9allocatorIS3_EEEE__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return __ZN8OpenMesh16PolyConnectivity8add_faceERKNSt3__16vectorINS_12VertexHandleENS1_9allocatorIS3_EEEE(p0|0,p1|0)|0; }
function _printf__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _printf(p0|0,p1|0)|0; }
function b18(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(18);return 0; }
function b19(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(19);return +0; }
function b20(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_dii(20);return +0; }
function b21() { ; nullFunc_i(21);return 0; }
function ___ctype_b_loc__wrapper() { ; return ___ctype_b_loc()|0; }
function ___ctype_toupper_loc__wrapper() { ; return ___ctype_toupper_loc()|0; }
function ___ctype_tolower_loc__wrapper() { ; return ___ctype_tolower_loc()|0; }
function b22(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(22);return 0; }
function _catgets__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _catgets(p0|0,p1|0,p2|0,p3|0)|0; }
function b23(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3; nullFunc_viiid(23); }
function b24(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(24); }
function ___cxa_throw__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0); }
function b25() { ; nullFunc_v(25); }
function ___cxa_end_catch__wrapper() { ; ___cxa_end_catch(); }
function ___cxa_rethrow__wrapper() { ; ___cxa_rethrow(); }
function b26(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(26);return 0; }
function b27(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4; nullFunc_iiiiid(27);return 0; }
function b28(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(28); }
function ___assert_fail__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; ___assert_fail(p0|0,p1|0,p2|0,p3|0); }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b0,b0,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b0,b0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_iiiiiid = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,b1,b1,b1,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_vid = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,__ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEE11setStopDistEd,b2,__ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEE6setEpsEd,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_viiiii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b3,b3,b3,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b3,b3,b3,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vi = [b4,__ZN8OpenMesh16PolyConnectivityD2Ev,__ZN8OpenMesh16PolyConnectivityD0Ev,b4,b4,b4,b4,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,__ZN4DGPC6MeshOMINS_7Vector3IdEEED2Ev,__ZN4DGPC6MeshOMINS_7Vector3IdEEED0Ev,b4,b4,__ZN8OpenMesh21PolyMesh_ArrayKernelTIN4DGPC14OpenMeshTraitsINS1_7Vector3IdEEEEED2Ev,__ZN8OpenMesh21PolyMesh_ArrayKernelTIN4DGPC14OpenMeshTraitsINS1_7Vector3IdEEEEED0Ev,__ZN8OpenMesh9PolyMeshTINS_13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS3_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEEED2Ev,__ZN8OpenMesh9PolyMeshTINS_13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS3_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEEED0Ev,__ZN8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEED2Ev,__ZN8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEED0Ev,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEED2Ev,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEED0Ev,b4,b4,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5clearEv,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE9push_backEv
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEED2Ev,__ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEED0Ev,b4,b4,__ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5clearEv,__ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE9push_backEv,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEED2Ev,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEED0Ev,b4,b4,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5clearEv,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE9push_backEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEED2Ev,__ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEED0Ev,b4,b4,__ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5clearEv,__ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE9push_backEv,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,__ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEED2Ev,__ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEED0Ev,b4,b4,__ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE5clearEv,__ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE9push_backEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b4,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b4
,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,b4,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,b4,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b4,b4,b4,b4,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b4,b4,b4,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b4,b4,b4,b4,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__111__stdoutbufIwED0Ev,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__110__stdinbufIwED0Ev,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__111__stdoutbufIcED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__110__stdinbufIcED0Ev,b4,b4,b4,b4
,b4,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,b4,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__114error_categoryD2Ev,__ZNSt3__119__iostream_categoryD0Ev,b4,b4,b4,b4,b4,__ZNSt3__17collateIcED2Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,b4,b4
,b4,__ZNSt3__17collateIwED2Ev,__ZNSt3__17collateIwED0Ev,b4,b4,b4,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4
,__ZNSt3__110moneypunctIcLb0EED2Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__110moneypunctIcLb1EED2Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__110moneypunctIwLb0EED2Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,b4,b4,b4,b4,b4,b4
,b4,b4,b4,__ZNSt3__110moneypunctIwLb1EED2Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,b4,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4,b4,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,b4,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4,b4
,__ZNSt3__18messagesIcED2Ev,__ZNSt3__18messagesIcED0Ev,b4,b4,b4,__ZNSt3__18messagesIwED2Ev,__ZNSt3__18messagesIwED0Ev,b4,b4,b4,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,b4,b4,b4,b4,b4,b4
,b4,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,b4,b4,b4,b4,b4,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,b4,b4,b4,b4,b4,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,b4,b4
,b4,__ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEED2Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev,b4,b4,b4,b4,__ZNSt3__16localeD2Ev,b4,b4,b4,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,__ZNSt3__16vectorIN8OpenMesh12VertexHandleENS_9allocatorIS2_EEED2Ev,b4,b4,b4,b4,__ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev,__ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev,__ZN4DGPC4HeapIdED2Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__16vectorINS_4pairIN8OpenMesh14HalfedgeHandleES3_EENS_9allocatorIS4_EEED2Ev,__ZNSt3__16vectorIN8OpenMesh16PolyConnectivity15AddFaceEdgeInfoENS_9allocatorIS3_EEED2Ev,__ZN8OpenMesh11ArrayKernelD2Ev__wrapper,b4,b4,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev,__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv,b4,b4,__ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev,b4,b4,__ZN4DGPC8HeapNodeIdED2Ev,b4,__ZNSt3__114__split_bufferIN4DGPC8HeapNodeIdEERNS_9allocatorIS3_EEED2Ev,b4,__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv,b4,b4,b4,b4,__ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev,b4,b4,__ZNSt3__114priority_queueIN4DGPC8HeapNodeIdEENS_6vectorIS3_NS_9allocatorIS3_EEEENS_7greaterIS3_EEED2Ev,b4,b4,b4,__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev,b4,b4,b4,b4
,__ZNSt3__114__split_bufferIN8OpenMesh12VertexHandleERNS_9allocatorIS2_EEED2Ev,b4,b4,b4,b4,__ZNSt3__114__split_bufferIN8OpenMesh10ArrayItems6VertexERNS_9allocatorIS3_EEED2Ev,b4,b4,b4,b4,b4,__ZNSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEED2Ev,b4,b4,b4,b4,b4,__ZNSt3__114__split_bufferIN8OpenMesh10FaceHandleERNS_9allocatorIS2_EEED2Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__114__split_bufferIPN8OpenMesh12BasePropertyERNS_9allocatorIS3_EEED2Ev,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev,__ZN8OpenMesh12BasePropertyD2Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__113__vector_baseIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev,b4,__ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEED2Ev,b4
,b4,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev,b4,b4,b4,b4,b4,b4,__ZNSt3__113__vector_baseIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev,b4,__ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEED2Ev,b4,b4,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev,b4,b4,b4,b4,b4,b4,__ZNSt3__113__vector_baseIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev,b4,__ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEED2Ev,b4,b4,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev,b4,b4,b4,b4
,b4,b4,__ZNSt3__113__vector_baseIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEED2Ev,b4,__ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEED2Ev,b4,b4,__ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEED2Ev,b4,b4,b4,b4,b4,b4,__ZNSt3__113__vector_baseIN4DGPC7Vector3IdEENS_9allocatorIS3_EEED2Ev,b4,b4,__ZNSt3__114__split_bufferIN4DGPC7Vector3IdEERNS_9allocatorIS3_EEED2Ev,b4,b4,b4,b4,b4,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b4,b4,__ZNSt3__18ios_base4InitD2Ev,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_freelocale__wrapper,b4,b4,__ZNSt3__112__do_nothingEPv,b4,__ZNSt3__121__throw_runtime_errorEPKc,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,b4,b4,b4,b4,b4,b4,b4,b4,b4,___cxx_global_array_dtor,b4,___cxx_global_array_dtor54,b4,___cxx_global_array_dtor69,___cxx_global_array_dtor93
,___cxx_global_array_dtor117,___cxx_global_array_dtor120,b4,b4,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_free,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_vii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7reserveEj,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE6resizeEj,b5,b5
,b5,b5,b5,__ZNK8OpenMesh12BaseProperty5statsERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE__wrapper,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE14set_persistentEb,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7reserveEj,__ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE6resizeEj,b5,b5,b5,b5,b5,__ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE14set_persistentEb,b5
,b5,b5,b5,b5,b5,b5,b5,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7reserveEj,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE6resizeEj,b5,b5,b5,b5,b5,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE14set_persistentEb,b5,b5,b5,b5,b5,b5,b5,b5,__ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7reserveEj,__ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE6resizeEj,b5,b5,b5,b5,b5
,__ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE14set_persistentEb,b5,b5,b5,b5,b5,b5,b5,b5,__ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE7reserveEj,__ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE6resizeEj,b5,b5,b5,b5,b5,__ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE14set_persistentEb,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,b5,b5,b5
,b5,b5,b5,b5,b5,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,b5,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,b5,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv
,b5,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,b5,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,__ZNKSt3__18messagesIcE8do_closeEi,b5,b5,b5,b5,__ZNKSt3__18messagesIwE8do_closeEi,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,b5,b5,b5,b5,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEEC2ERKS4_
,b5,b5,b5,__ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEE13setNodeSourceEi,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__18ios_base4initEPv,b5,b5,__ZNSt3__18ios_base5clearEj,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE,b5,b5,b5,b5,b5,b5,b5
,b5,__ZNSt3__16vectorIN8OpenMesh12VertexHandleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_,b5,b5,b5,b5,b5,b5,__ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEj,b5,b5,b5,__ZN8OpenMesh14HalfedgeHandleC2Ei,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_shrinkEj,__ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_,b5,b5,b5,b5,b5
,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_,b5,b5,b5,b5,__ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE,b5,__ZNSt3__16vectorIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEE21__push_back_slow_pathIKS3_EEvRT_,b5,b5,__ZNSt3__16vectorIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE,b5,__ZNKSt3__16vectorIN4DGPC8HeapNodeIdEENS_9allocatorIS3_EEE17__annotate_shrinkEj,b5,__ZNSt3__16vectorIbNS_9allocatorIbEEE7reserveEj,b5,b5,__ZNSt3__16vectorIbNS_9allocatorIbEEE4swapERS3_,b5,__ZNSt3__16vectorIbNS_9allocatorIbEEE8allocateEj,b5,b5,__ZNKSt3__16vectorIdNS_9allocatorIdEEE17__annotate_shrinkEj,__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEj,__ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE,b5,b5,b5,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,__ZNSt3__16vectorIN8OpenMesh12VertexHandleENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE
,b5,__ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,b5,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED2Ev,__ZNSt3__16vectorIN8OpenMesh10ArrayItems6VertexENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE,b5,b5,__ZNSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEE7reserveEj,b5,__ZNSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_,b5,b5,b5,b5,b5,b5,__ZNSt3__16vectorIN8OpenMesh10FaceHandleENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,b5,b5,__ZN8OpenMesh12VPropHandleTIN4DGPC7Vector3IdEEEC2Ei,__ZN8OpenMesh12VPropHandleTINS_7VectorTIfLi3EEEEC2Ei,__ZN8OpenMesh12VPropHandleTINS_7VectorTIhLi3EEEEC2Ei,__ZN8OpenMesh12VPropHandleTIfEC2Ei,__ZN8OpenMesh12VPropHandleTINS_7VectorTIfLi2EEEEC2Ei,__ZN8OpenMesh12HPropHandleTIfEC2Ei,__ZN8OpenMesh12HPropHandleTINS_7VectorTIfLi2EEEEC2Ei,__ZN8OpenMesh12HPropHandleTINS_7VectorTIfLi3EEEEC2Ei,__ZN8OpenMesh12HPropHandleTINS_7VectorTIhLi3EEEEC2Ei,__ZN8OpenMesh12EPropHandleTINS_7VectorTIhLi3EEEEC2Ei,__ZN8OpenMesh12FPropHandleTINS_7VectorTIfLi3EEEEC2Ei
,__ZN8OpenMesh12FPropHandleTINS_7VectorTIhLi3EEEEC2Ei,__ZN8OpenMesh12FPropHandleTIiEC2Ei,__ZN8OpenMesh12VPropHandleTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2Ei,__ZN8OpenMesh12HPropHandleTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2Ei,__ZN8OpenMesh12EPropHandleTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2Ei,__ZN8OpenMesh12FPropHandleTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2Ei,b5,b5,b5,b5,b5,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEE,__ZNSt3__16vectorIPN8OpenMesh12BasePropertyENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE,b5,b5,b5,__ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE17__annotate_shrinkEj,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE4swapERSG_,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKSD_,__ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv,__ZNSt11logic_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b5,__ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEEC2ERKSG_,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8allocateEj,b5,b5,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE26__swap_out_circular_bufferERNS_14__split_bufferISD_RSF_EE,b5,__ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEE18__construct_at_endEj
,__ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEE,b5,__ZNKSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE17__annotate_shrinkEj,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE4swapERSG_,__ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKSD_,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEEC2ERKSG_,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8allocateEj,b5,b5,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE26__swap_out_circular_bufferERNS_14__split_bufferISD_RSF_EE,b5,__ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEE18__construct_at_endEj,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEE,b5,__ZNKSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE17__annotate_shrinkEj,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE4swapERSG_,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKSD_,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEEC2ERKSG_,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8allocateEj,b5,b5,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE26__swap_out_circular_bufferERNS_14__split_bufferISD_RSF_EE,b5,__ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEE18__construct_at_endEj,__ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEE,b5,__ZNKSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE17__annotate_shrinkEj,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE4swapERSG_,__ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEEC2ERKSD_,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEEC2ERKSG_
,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE8allocateEj,b5,b5,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE26__swap_out_circular_bufferERNS_14__split_bufferISD_RSF_EE,b5,__ZNSt3__114__split_bufferIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEERNS_9allocatorISD_EEE18__construct_at_endEj,__ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEEC2ERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE,b5,__ZNKSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE17__annotate_shrinkEj,__ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE4swapERS6_,__ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEEC2ERKS4_,__ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEEC2ERKS6_,__ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE8allocateEj,b5,b5,__ZN4DGPC7Vector3IdEC2ERKS1_,__ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE,b5,__ZNSt3__114__split_bufferIN4DGPC7Vector3IdEERNS_9allocatorIS3_EEE18__construct_at_endEj,b5,b5,_abort_message,b5,b5,b5,b5,b5,__ZNSt3__118__libcpp_refstringC2EPKc,b5,b5
,__ZNSt3__18ios_base16__call_callbacksENS0_5eventE,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt13runtime_errorC2EPKc,b5,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,b5,b5
,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,b5,b5,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,b5,b5,b5,b5,b5,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej,__ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_,__ZNSt3__17codecvtIwc11__mbstate_tEC2Ej,__ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_
,__ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_,b5,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj,b5,b5,__ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iiiiiii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b6,b6,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd
,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b6,b6,b6,b6,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b6,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b6,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b6,b6,b6,b6,b6,b6,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b6,b6,b6,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_ii = [b7,b7,b7,__ZNK8OpenMesh11ArrayKernel10n_verticesEv,__ZNK8OpenMesh11ArrayKernel11n_halfedgesEv,__ZNK8OpenMesh11ArrayKernel7n_edgesEv,__ZNK8OpenMesh11ArrayKernel7n_facesEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,b7,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5cloneEv,b7,b7,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE10n_elementsEv,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE12element_sizeEv,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7size_ofEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5cloneEv,b7,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE10n_elementsEv
,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE12element_sizeEv,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7size_ofEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5cloneEv,b7,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE10n_elementsEv,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE12element_sizeEv,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7size_ofEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5cloneEv
,b7,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE10n_elementsEv,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE12element_sizeEv,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7size_ofEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNK8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE5cloneEv,b7,__ZNK8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE10n_elementsEv,__ZNK8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE12element_sizeEv,__ZNK8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE7size_ofEv,b7,b7,b7,b7,b7,b7,__ZNKSt9bad_alloc4whatEv,b7,b7,__ZNKSt11logic_error4whatEv
,b7,b7,__ZNKSt13runtime_error4whatEv,b7,b7,__ZNKSt8bad_cast4whatEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__111__stdoutbufIwE4syncEv
,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,b7,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,b7,b7,b7,b7,b7,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,b7,b7,b7,b7,b7,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__119__iostream_category4nameEv,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,b7,b7,b7,b7,b7
,b7,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,b7,b7,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,b7,b7,b7,b7,b7,b7,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,b7,b7,b7,b7,b7,b7
,b7,b7,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,b7,b7,b7,b7,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,b7,b7,b7,b7,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,b7,b7,b7,b7,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,b7,b7,b7,b7,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,b7,b7,b7,b7
,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,b7,b7,b7,b7,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,b7,b7,b7,b7,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,b7
,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,b7,b7,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,b7,b7,b7,b7,b7,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,b7,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,b7,b7,b7,b7,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,b7,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,b7,b7,b7,b7,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,b7,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,__ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEE3runEv,b7,b7,__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__18ios_base6getlocEv,b7,b7,b7,__ZNSt3__111char_traitsIcE6lengthEPKc,b7,b7,b7,b7,_isblank,b7,b7,b7,b7,b7
,b7,b7,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE4peekEv,_isspace,b7,b7,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv,b7,b7,b7,b7,b7,b7,__ZN4DGPC4HeapIdE5emptyEv,__ZN4DGPC4HeapIdE12getCandidateEv,b7,b7,b7,b7,b7,__ZNK8OpenMesh10BaseHandle3idxEv,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,_fclose__wrapper,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN8OpenMesh7VectorTIfLi3EE9normalizeEv,b7,b7,__ZNK8OpenMesh9Iterators22GenericCirculatorBaseTINS_16PolyConnectivityEE14toVertexHandleEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv,b7,b7,__Znwj,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_uselocale__wrapper,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,_wcslen,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_viddd = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN4DGPC7Vector3IdEC2Eddd,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN8OpenMesh7VectorTIfLi3EEC2Efff,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iiiiiiiiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_iiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,b10,b10,b10,b10,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,b10,b10,b10,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,b10
,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5storeERNSt3__113basic_ostreamIcNSE_11char_traitsIcEEEEb,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7restoreERNSt3__113basic_istreamIcNSE_11char_traitsIcEEEEb,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5storeERNSt3__113basic_ostreamIcNSE_11char_traitsIcEEEEb,__ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7restoreERNSt3__113basic_istreamIcNSE_11char_traitsIcEEEEb,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5storeERNSt3__113basic_ostreamIcNSE_11char_traitsIcEEEEb,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7restoreERNSt3__113basic_istreamIcNSE_11char_traitsIcEEEEb,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE5storeERNSt3__113basic_ostreamIcNSE_11char_traitsIcEEEEb,__ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7restoreERNSt3__113basic_istreamIcNSE_11char_traitsIcEEEEb,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE5storeERNSt3__113basic_ostreamIcNS5_11char_traitsIcEEEEb,__ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE7restoreERNSt3__113basic_istreamIcNS5_11char_traitsIcEEEEb,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_sn_write,b10,b10,b10,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,b10,b10,b10
,b10,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,b10,b10,b10,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,b10,b10,b10,b10,b10,b10
,__ZNKSt3__17collateIcE7do_hashEPKcS3_,b10,b10,b10,b10,__ZNKSt3__17collateIwE7do_hashEPKwS3_,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b10,b10,b10,b10,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,b10,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,b10,b10,__ZNKSt3__15ctypeIcE9do_narrowEcc,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__15ctypeIwE5do_isEtw,b10,b10,b10,b10,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,b10,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,b10,b10,__ZNKSt3__15ctypeIwE9do_narrowEwc,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj,b10,b10,b10,b10,__ZNSt3__17getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEE22tryComputeNodeFromEdgeEiPi,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_do_read,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,_newlocale__wrapper,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b10,b10,b10
,b10,b10,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_wcrtomb,b10,b10,_mbtowc,_mbrlen,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_vasprintf,b10,b10,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,b11,__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_viiiiii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b12,b12,b12,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b12,b12,b12,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b12,b12,b12,b12,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12];
var FUNCTION_TABLE_iiid = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNK8OpenMesh9PolyMeshTINS_13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS3_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEEE25is_estimated_feature_edgeENS_14HalfedgeHandleEd,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13];
var FUNCTION_TABLE_iid = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEd,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14];
var FUNCTION_TABLE_viiiiiii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b15,b15,__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b15,b15,__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15];
var FUNCTION_TABLE_viiiiiiiiii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,b16,b16,b16,b16,b16,b16,__ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri
,b16,b16,b16,b16,__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,b16,__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16];
var FUNCTION_TABLE_iii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi,b17,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7size_ofEj,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7size_ofEj,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7size_ofEj,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,__ZNK8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE7size_ofEj,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNK8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE7size_ofEj,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,b17,__ZNSt3__111__stdoutbufIwE8overflowEj,b17,b17,b17,b17,b17,__ZNSt3__110__stdinbufIwE9pbackfailEj,b17,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,b17,__ZNSt3__111__stdoutbufIcE8overflowEi,b17,b17,b17,b17,__ZNSt3__110__stdinbufIcE9pbackfailEi
,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNKSt3__15ctypeIcE10do_toupperEc,b17,__ZNKSt3__15ctypeIcE10do_tolowerEc,b17,__ZNKSt3__15ctypeIcE8do_widenEc,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNKSt3__15ctypeIwE10do_toupperEw,b17,__ZNKSt3__15ctypeIwE10do_tolowerEw,b17,__ZNKSt3__15ctypeIwE8do_widenEc,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN4DGPC6MeshOMINS_7Vector3IdEEE7openOBJEPKc,b17
,b17,b17,b17,b17,b17,__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNKSt3__16locale9use_facetERNS0_2idE,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__1rsIcNS_11char_traitsIcEEEERNS_13basic_istreamIT_T0_EES7_RS4_,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERd,b17,__ZN8OpenMesh9PolyMeshTINS_13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS3_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEEE10add_vertexERKS6_,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi
,__ZNK8OpenMesh11ArrayKernel13vertex_handleEj,b17,b17,b17,b17,__ZN8OpenMesh16PolyConnectivity8add_faceERKNSt3__16vectorINS_12VertexHandleENS1_9allocatorIS3_EEEE__wrapper,b17,_printf__wrapper,b17,b17,b17,b17,b17,b17,b17,__ZNK8OpenMesh11ArrayKernel15halfedge_handleENS_12VertexHandleE,__ZNK8OpenMesh11ArrayKernel24opposite_halfedge_handleENS_14HalfedgeHandleE,__ZNK8OpenMesh16PolyConnectivity11is_boundaryENS_14HalfedgeHandleE,__ZNK8OpenMesh11ArrayKernel20prev_halfedge_handleENS_14HalfedgeHandleE,__ZNK8OpenMesh11ArrayKernel16to_vertex_handleENS_14HalfedgeHandleE,b17,__ZNK8OpenMesh11ArrayKernel20next_halfedge_handleENS_14HalfedgeHandleE,b17,b17,b17,__ZNK8OpenMesh10BaseHandleneERKS0_,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNKSt3__16locale9has_facetERNS0_2idE,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,__ZNK8OpenMesh11ArrayKernel11face_handleENS_14HalfedgeHandleE,b17,b17,b17,b17,__ZNK8OpenMesh13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS2_7Vector3IdEEEELb0EEENS_16PolyConnectivityEE6normalENS_10FaceHandleE,__ZN8OpenMesh7VectorTIfLi3EEpLERKS1_,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,_isxdigit_l,_isdigit_l,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,b17,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17];
var FUNCTION_TABLE_iiiiii = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,b18
,b18,b18,b18,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b18,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b18,b18,b18,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b18,b18,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b18,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b18,b18,b18,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,b18,b18,b18,b18,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b18,b18,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc
,b18,b18,b18,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b18,b18,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,b18,b18,b18,b18,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b18,b18,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b18,b18,b18,b18,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b18,b18,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,_wcsnrtombs,b18,_mbsnrtowcs,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18];
var FUNCTION_TABLE_diii = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19];
var FUNCTION_TABLE_dii = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,__ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEE11getDistanceEi,__ZN4DGPC9GeneratorINS_6MeshOMINS_7Vector3IdEEEEE8getAngleEi,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20];
var FUNCTION_TABLE_i = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,___cxa_get_globals_fast,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,__ZNSt3__16__clocEv,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNSt3__16locale5__imp12make_classicEv,b21,__ZNSt3__16locale5__imp11make_globalEv,__ZNSt3__16locale8__globalEv,b21,b21,___ctype_b_loc__wrapper,___ctype_toupper_loc__wrapper,___ctype_tolower_loc__wrapper,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21];
var FUNCTION_TABLE_iiiii = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,b22,b22,b22,b22,b22,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z,b22,b22,b22,__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz,b22,b22,b22,b22,b22,b22,b22,b22,_mbsrtowcs,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,_catgets__wrapper,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,_mbrtowc,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22];
var FUNCTION_TABLE_viiid = [b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNK8OpenMesh9PolyMeshTINS_13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS3_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEEE20calc_halfedge_normalENS_14HalfedgeHandleEd,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23];
var FUNCTION_TABLE_viii = [b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNK8OpenMesh9PolyMeshTINS_13AttribKernelTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS3_7Vector3IdEEEELb0EEENS_16PolyConnectivityEEEE16calc_face_normalENS_10FaceHandleE,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4swapEjj,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4copyEjj,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4swapEjj,__ZN8OpenMesh9PropertyTINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4copyEjj,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4swapEjj,__ZN8OpenMesh9PropertyTINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4copyEjj,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4swapEjj,__ZN8OpenMesh9PropertyTINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS4_7Vector3IdEEEELb0EE7ITraitsENS9_4RefsEEEE4copyEjj,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE4swapEjj,__ZN8OpenMesh9PropertyTIN4DGPC7Vector3IdEEE4copyEjj,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNKSt3__114error_category23default_error_conditionEi,b24,b24,__ZNKSt3__119__iostream_category7messageEi,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__16vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELj0EEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_,b24,b24,b24,b24,b24,b24,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b,b24,b24
,b24,b24,b24,b24,b24,b24,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,__ZN8OpenMesh10BaseKernel12add_propertyIN4DGPC7Vector3IdEEEEvRNS_12VPropHandleTIT_EERKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEE,__ZN8OpenMesh10BaseKernel12add_propertyINS_13DefaultTraits7VertexTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEvRNS_12VPropHandleTIT_EERKNSt3__112basic_stringIcNSI_11char_traitsIcEENSI_9allocatorIcEEEE,__ZN8OpenMesh10BaseKernel12add_propertyINS_13DefaultTraits5FaceTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEvRNS_12FPropHandleTIT_EERKNSt3__112basic_stringIcNSI_11char_traitsIcEENSI_9allocatorIcEEEE,__ZN8OpenMesh10BaseKernel12add_propertyINS_13DefaultTraits9HalfedgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEvRNS_12HPropHandleTIT_EERKNSt3__112basic_stringIcNSI_11char_traitsIcEENSI_9allocatorIcEEEE,__ZN8OpenMesh10BaseKernel12add_propertyINS_13DefaultTraits5EdgeTINS_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEEEEvRNS_12EPropHandleTIT_EERKNSt3__112basic_stringIcNSI_11char_traitsIcEENSI_9allocatorIcEEEE,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,___cxa_throw__wrapper,b24,b24,b24,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits5EdgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE18__construct_at_endIPSD_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESK_SK_,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits9HalfedgeTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE18__construct_at_endIPSD_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESK_SK_,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits5FaceTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE18__construct_at_endIPSD_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESK_SK_,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,__ZNSt3__16vectorIN8OpenMesh13DefaultTraits7VertexTINS1_15FinalMeshItemsTIN4DGPC14OpenMeshTraitsINS5_7Vector3IdEEEELb0EE7ITraitsENSA_4RefsEEENS_9allocatorISD_EEE18__construct_at_endIPSD_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESK_SK_,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__16vectorIN4DGPC7Vector3IdEENS_9allocatorIS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b24,b24,b24,b24,b24
,b24,__ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24];
var FUNCTION_TABLE_v = [b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZL25default_terminate_handlerv,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,___cxa_end_catch__wrapper,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZSt17__throw_bad_allocv,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,___cxa_rethrow__wrapper,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25];
var FUNCTION_TABLE_iiiiiiiii = [b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b26,b26,b26,b26,b26,b26,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b26,b26,b26,b26,b26,b26,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26];
var FUNCTION_TABLE_iiiiid = [b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,b27,b27,b27,b27,b27,b27,b27,b27,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27];
var FUNCTION_TABLE_viiii = [b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b28,b28,b28,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b28,b28,b28,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b28,b28,b28,b28,b28,b28,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZNKSt3__17collateIcE12do_transformEPKcS3_
,b28,b28,b28,b28,__ZNKSt3__17collateIwE12do_transformEPKwS3_,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,___assert_fail__wrapper,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,__ZNSt3__19__sift_upIRNS_7greaterIN4DGPC8HeapNodeIdEEEENS_11__wrap_iterIPS4_EEEEvT0_SA_T_NS_15iterator_traitsISA_E15difference_typeE,b28,b28,b28,b28,b28,b28,__ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb1EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_,__ZNSt3__116__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb1EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28];

  return { ___cxa_can_catch: ___cxa_can_catch, _free: _free, _main: _main, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _strlen: _strlen, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_iostream_cpp: __GLOBAL__sub_I_iostream_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_vid: dynCall_vid, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_viddd: dynCall_viddd, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iiid: dynCall_iiid, dynCall_iid: dynCall_iid, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_diii: dynCall_diii, dynCall_dii: dynCall_dii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viiid: dynCall_viiid, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real___GLOBAL__sub_I_iostream_cpp = asm["__GLOBAL__sub_I_iostream_cpp"]; asm["__GLOBAL__sub_I_iostream_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_iostream_cpp.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = asm["__GLOBAL__sub_I_iostream_cpp"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viddd = Module["dynCall_viddd"] = asm["dynCall_viddd"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iiid = Module["dynCall_iiid"] = asm["dynCall_iiid"];
var dynCall_iid = Module["dynCall_iid"] = asm["dynCall_iid"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiid = Module["dynCall_viiid"] = asm["dynCall_viiid"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



